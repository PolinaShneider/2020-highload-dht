<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (5,138 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (5,111 samples, 99.47%)</title><rect x="10.2" y="483.0" width="1173.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.2" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (3 samples, 0.06%)</title><rect x="14.8" y="467.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (5 samples, 0.10%)</title><rect x="15.5" y="467.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="18.5" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (5 samples, 0.10%)</title><rect x="15.5" y="451.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (5 samples, 0.10%)</title><rect x="15.5" y="435.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.5" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,087 samples, 40.62%)</title><rect x="16.7" y="467.0" width="479.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.7" y="478.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__block_literal_global (6 samples, 0.12%)</title><rect x="17.1" y="451.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="20.1" y="462.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.04%)</title><rect x="18.5" y="451.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="21.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.25%)</title><rect x="19.0" y="451.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title><rect x="19.9" y="435.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title><rect x="19.9" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (7 samples, 0.14%)</title><rect x="20.3" y="435.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.14%)</title><rect x="20.3" y="419.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.08%)</title><rect x="21.0" y="403.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="21.0" y="387.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.08%)</title><rect x="21.0" y="371.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (11 samples, 0.21%)</title><rect x="21.9" y="451.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (9 samples, 0.18%)</title><rect x="22.4" y="435.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.4" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (17 samples, 0.33%)</title><rect x="24.5" y="451.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="27.5" y="462.0"></text>
</g>
<g>
<title>__block_literal_global (5 samples, 0.10%)</title><rect x="26.8" y="435.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="29.8" y="446.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.04%)</title><rect x="27.9" y="435.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="30.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (2,034 samples, 39.59%)</title><rect x="28.4" y="451.0" width="467.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.4" y="462.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (2,031 samples, 39.53%)</title><rect x="29.1" y="435.0" width="466.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.1" y="446.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (2,028 samples, 39.47%)</title><rect x="29.5" y="419.0" width="465.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.5" y="430.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (1,941 samples, 37.78%)</title><rect x="30.2" y="403.0" width="445.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.2" y="414.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (11 samples, 0.21%)</title><rect x="48.4" y="387.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="51.4" y="398.0"></text>
</g>
<g>
<title>kevent (1,851 samples, 36.03%)</title><rect x="50.9" y="387.0" width="425.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="53.9" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (31 samples, 0.60%)</title><rect x="476.0" y="403.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.14%)</title><rect x="476.2" y="387.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.10%)</title><rect x="476.2" y="371.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.04%)</title><rect x="477.4" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="480.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.getFilter (3 samples, 0.06%)</title><rect x="477.8" y="387.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getShort (3 samples, 0.06%)</title><rect x="477.8" y="371.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="480.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (20 samples, 0.39%)</title><rect x="478.5" y="387.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (11 samples, 0.21%)</title><rect x="478.5" y="371.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (11 samples, 0.21%)</title><rect x="478.5" y="355.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="481.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (11 samples, 0.21%)</title><rect x="478.5" y="339.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.04%)</title><rect x="481.0" y="371.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.04%)</title><rect x="481.0" y="355.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="484.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.04%)</title><rect x="481.5" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="484.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (5 samples, 0.10%)</title><rect x="482.0" y="371.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (12 samples, 0.23%)</title><rect x="483.1" y="403.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.1" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (7 samples, 0.14%)</title><rect x="484.3" y="387.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (7 samples, 0.14%)</title><rect x="485.9" y="403.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.9" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (7 samples, 0.14%)</title><rect x="485.9" y="387.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (6 samples, 0.12%)</title><rect x="485.9" y="371.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (4 samples, 0.08%)</title><rect x="487.5" y="403.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.5" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.08%)</title><rect x="487.5" y="387.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.5" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.08%)</title><rect x="487.5" y="371.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.5" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (4 samples, 0.08%)</title><rect x="487.5" y="355.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.5" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (4 samples, 0.08%)</title><rect x="487.5" y="339.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (30 samples, 0.58%)</title><rect x="488.4" y="403.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="491.4" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (3 samples, 0.06%)</title><rect x="494.6" y="387.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="497.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.04%)</title><rect x="494.8" y="371.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.04%)</title><rect x="495.5" y="451.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.04%)</title><rect x="495.5" y="435.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.04%)</title><rect x="495.5" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="498.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,996 samples, 58.31%)</title><rect x="496.0" y="467.0" width="688.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.0" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,986 samples, 58.12%)</title><rect x="496.2" y="451.0" width="685.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="499.2" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2,544 samples, 49.51%)</title><rect x="496.9" y="435.0" width="584.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.9" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,378 samples, 46.28%)</title><rect x="500.6" y="419.0" width="546.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.6" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,377 samples, 46.26%)</title><rect x="500.8" y="403.0" width="545.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="503.8" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2,331 samples, 45.37%)</title><rect x="500.8" y="387.0" width="535.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="503.8" y="398.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,215 samples, 23.65%)</title><rect x="501.5" y="371.0" width="279.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="504.5" y="382.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.10%)</title><rect x="503.3" y="355.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.10%)</title><rect x="503.3" y="339.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.3" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.10%)</title><rect x="503.3" y="323.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,193 samples, 23.22%)</title><rect x="504.5" y="355.0" width="273.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="507.5" y="366.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (66 samples, 1.28%)</title><rect x="504.5" y="339.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (36 samples, 0.70%)</title><rect x="511.4" y="323.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="514.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (36 samples, 0.70%)</title><rect x="511.4" y="307.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="514.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (36 samples, 0.70%)</title><rect x="511.4" y="291.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.4" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="518.7" y="275.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="521.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,127 samples, 21.93%)</title><rect x="519.6" y="339.0" width="258.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.6" y="350.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,125 samples, 21.90%)</title><rect x="520.1" y="323.0" width="258.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.1" y="334.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,118 samples, 21.76%)</title><rect x="521.5" y="307.0" width="256.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="524.5" y="318.0">one/nio/net/Session$ArrayQueueItem..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1,118 samples, 21.76%)</title><rect x="521.5" y="291.0" width="256.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.5" y="302.0">one/nio/net/JavaSocket.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (31 samples, 0.60%)</title><rect x="521.5" y="275.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="524.5" y="286.0"></text>
</g>
<g>
<title>gettimeofday (9 samples, 0.18%)</title><rect x="521.9" y="259.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="524.9" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (20 samples, 0.39%)</title><rect x="524.0" y="259.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="527.0" y="270.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (3 samples, 0.06%)</title><rect x="524.7" y="243.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="527.7" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (4 samples, 0.08%)</title><rect x="525.4" y="243.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="528.4" y="254.0"></text>
</g>
<g>
<title>gettimeofday (10 samples, 0.19%)</title><rect x="526.3" y="243.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="529.3" y="254.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.04%)</title><rect x="526.5" y="227.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="529.5" y="238.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (7 samples, 0.14%)</title><rect x="527.0" y="227.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="530.0" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1,087 samples, 21.16%)</title><rect x="528.6" y="275.0" width="249.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="531.6" y="286.0">sun/nio/ch/SocketChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,087 samples, 21.16%)</title><rect x="528.6" y="259.0" width="249.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.6" y="270.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1,079 samples, 21.00%)</title><rect x="530.4" y="243.0" width="247.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.4" y="254.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1,079 samples, 21.00%)</title><rect x="530.4" y="227.0" width="247.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="533.4" y="238.0">sun/nio/ch/IOUtil.writeFromNative..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (16 samples, 0.31%)</title><rect x="530.4" y="211.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1,063 samples, 20.69%)</title><rect x="534.1" y="211.0" width="244.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.1" y="222.0">sun/nio/ch/SocketDispatcher.write</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="539.6" y="195.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="542.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1,036 samples, 20.16%)</title><rect x="540.3" y="195.0" width="237.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="543.3" y="206.0">sun/nio/ch/FileDispatcherImpl.w..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (14 samples, 0.27%)</title><rect x="546.3" y="179.0" width="3.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="549.3" y="190.0"></text>
</g>
<g>
<title>fdval (5 samples, 0.10%)</title><rect x="548.3" y="163.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="551.3" y="174.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.04%)</title><rect x="549.7" y="179.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="552.7" y="190.0"></text>
</g>
<g>
<title>write (993 samples, 19.33%)</title><rect x="550.2" y="179.0" width="228.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="553.2" y="190.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.06%)</title><rect x="778.4" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="781.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.06%)</title><rect x="779.4" y="355.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.4" y="366.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.04%)</title><rect x="780.1" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (25 samples, 0.49%)</title><rect x="780.5" y="371.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (11 samples, 0.21%)</title><rect x="780.5" y="355.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.19%)</title><rect x="780.7" y="339.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="783.7" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.06%)</title><rect x="782.1" y="323.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="785.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.08%)</title><rect x="783.0" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="786.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9 samples, 0.18%)</title><rect x="784.2" y="355.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="784.6" y="339.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="787.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.14%)</title><rect x="784.6" y="323.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.14%)</title><rect x="784.6" y="307.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (1,088 samples, 21.18%)</title><rect x="786.3" y="371.0" width="249.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.3" y="382.0">ru/mail/polis/service/ServiceImpl..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.21%)</title><rect x="786.7" y="355.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="789.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.21%)</title><rect x="786.7" y="339.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="789.7" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="787.6" y="323.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.14%)</title><rect x="787.6" y="307.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.10%)</title><rect x="787.6" y="291.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title><rect x="787.9" y="275.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="788.1" y="259.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.1" y="270.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="788.8" y="291.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="791.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.get (1,064 samples, 20.71%)</title><rect x="789.2" y="355.0" width="244.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.2" y="366.0">ru/mail/polis/service/ServiceImp..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.06%)</title><rect x="789.9" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="792.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.04%)</title><rect x="790.6" y="339.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.04%)</title><rect x="790.6" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (1,046 samples, 20.36%)</title><rect x="791.1" y="339.0" width="240.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.1" y="350.0">ru/mail/polis/dao/DAOImpl.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.16%)</title><rect x="792.0" y="323.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="795.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.16%)</title><rect x="792.0" y="307.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.16%)</title><rect x="792.0" y="291.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.0" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.16%)</title><rect x="792.0" y="275.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="795.0" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="792.2" y="259.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.06%)</title><rect x="792.5" y="243.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="795.5" y="254.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="793.1" y="243.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="796.1" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,013 samples, 19.72%)</title><rect x="793.8" y="323.0" width="232.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.8" y="334.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,012 samples, 19.70%)</title><rect x="794.1" y="307.0" width="232.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="797.1" y="318.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,003 samples, 19.52%)</title><rect x="796.1" y="291.0" width="230.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="799.1" y="302.0">Java_org_rocksdb_RocksDB_get__..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (6 samples, 0.12%)</title><rect x="799.8" y="275.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="802.8" y="286.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (6 samples, 0.12%)</title><rect x="801.2" y="275.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="804.2" y="286.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (4 samples, 0.08%)</title><rect x="802.6" y="275.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="805.6" y="286.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.08%)</title><rect x="803.7" y="275.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="806.7" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.12%)</title><rect x="804.6" y="275.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="807.6" y="286.0"></text>
</g>
<g>
<title>operator delete(void*) (5 samples, 0.10%)</title><rect x="806.0" y="275.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="809.0" y="286.0"></text>
</g>
<g>
<title>operator delete[](void*) (6 samples, 0.12%)</title><rect x="807.2" y="275.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="810.2" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.06%)</title><rect x="808.5" y="275.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="811.5" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.10%)</title><rect x="809.2" y="275.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="812.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.18%)</title><rect x="810.4" y="275.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.4" y="286.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (926 samples, 18.02%)</title><rect x="812.4" y="275.0" width="212.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="815.4" y="286.0">rocksdb_get_helper(JNIEnv_*,..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.08%)</title><rect x="816.3" y="259.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="819.3" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.08%)</title><rect x="817.5" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.04%)</title><rect x="818.4" y="259.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="821.4" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (179 samples, 3.48%)</title><rect x="819.1" y="259.0" width="41.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="822.1" y="270.0">Jav..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)</title><rect x="819.6" y="243.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.6" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.08%)</title><rect x="820.0" y="243.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="823.0" y="254.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (5 samples, 0.10%)</title><rect x="820.9" y="243.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.9" y="254.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.04%)</title><rect x="822.1" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="825.1" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.08%)</title><rect x="822.8" y="243.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.8" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.06%)</title><rect x="823.7" y="243.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.7" y="254.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.04%)</title><rect x="824.4" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="827.4" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.04%)</title><rect x="824.8" y="243.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="827.8" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (19 samples, 0.37%)</title><rect x="825.5" y="243.0" width="4.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="828.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="826.4" y="227.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.4" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.08%)</title><rect x="827.1" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="830.1" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.12%)</title><rect x="828.1" y="227.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.1" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.06%)</title><rect x="828.1" y="211.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.06%)</title><rect x="828.7" y="211.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="831.7" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title><rect x="828.7" y="195.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.7" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="829.0" y="179.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="832.0" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.04%)</title><rect x="829.0" y="163.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.0" y="174.0"></text>
</g>
<g>
<title>jni_NewByteArray (109 samples, 2.12%)</title><rect x="829.9" y="243.0" width="25.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="832.9" y="254.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.04%)</title><rect x="831.5" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="834.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.04%)</title><rect x="832.0" y="227.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="835.0" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.08%)</title><rect x="832.4" y="227.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="835.4" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.08%)</title><rect x="833.8" y="227.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.8" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.19%)</title><rect x="834.7" y="227.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.7" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.04%)</title><rect x="834.9" y="211.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="837.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.14%)</title><rect x="835.4" y="211.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="838.4" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.10%)</title><rect x="835.6" y="195.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="838.6" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.10%)</title><rect x="835.6" y="179.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="838.6" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="835.9" y="163.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="838.9" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.04%)</title><rect x="836.3" y="147.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="839.3" y="158.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (77 samples, 1.50%)</title><rect x="837.0" y="227.0" width="17.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.0" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (63 samples, 1.23%)</title><rect x="839.5" y="211.0" width="14.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="842.5" y="222.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.04%)</title><rect x="839.8" y="195.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.8" y="206.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.04%)</title><rect x="840.2" y="195.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="843.2" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (49 samples, 0.95%)</title><rect x="840.7" y="195.0" width="11.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="843.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.04%)</title><rect x="841.6" y="179.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="844.6" y="190.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.04%)</title><rect x="841.6" y="163.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="844.6" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.04%)</title><rect x="842.1" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="845.1" y="190.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.04%)</title><rect x="842.1" y="163.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="845.1" y="174.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (3 samples, 0.06%)</title><rect x="842.5" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="845.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (10 samples, 0.19%)</title><rect x="843.2" y="179.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="846.2" y="190.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (13 samples, 0.25%)</title><rect x="845.5" y="179.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="848.5" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (7 samples, 0.14%)</title><rect x="846.9" y="163.0" width="1.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="849.9" y="174.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (3 samples, 0.06%)</title><rect x="848.5" y="179.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="851.5" y="190.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (2 samples, 0.04%)</title><rect x="849.2" y="179.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="852.2" y="190.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (6 samples, 0.12%)</title><rect x="849.6" y="179.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="852.6" y="190.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (4 samples, 0.08%)</title><rect x="851.0" y="179.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="854.0" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (8 samples, 0.16%)</title><rect x="852.2" y="195.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="855.2" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.06%)</title><rect x="854.0" y="211.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.0" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (22 samples, 0.43%)</title><rect x="854.9" y="243.0" width="5.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="857.9" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (6 samples, 0.12%)</title><rect x="855.8" y="227.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="858.8" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (10 samples, 0.19%)</title><rect x="857.5" y="227.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (6 samples, 0.12%)</title><rect x="858.4" y="211.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.4" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.12%)</title><rect x="858.4" y="195.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="861.4" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.10%)</title><rect x="858.6" y="179.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.6" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.08%)</title><rect x="858.6" y="163.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.6" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (2 samples, 0.04%)</title><rect x="858.8" y="147.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="861.8" y="158.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.06%)</title><rect x="860.4" y="259.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="863.4" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (6 samples, 0.12%)</title><rect x="861.4" y="259.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="864.4" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.08%)</title><rect x="862.7" y="259.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="865.7" y="270.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (4 samples, 0.08%)</title><rect x="863.7" y="259.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="866.7" y="270.0"></text>
</g>
<g>
<title>free (14 samples, 0.27%)</title><rect x="864.6" y="259.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="867.6" y="270.0"></text>
</g>
<g>
<title>szone_size (10 samples, 0.19%)</title><rect x="865.5" y="243.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="868.5" y="254.0"></text>
</g>
<g>
<title>tiny_size (10 samples, 0.19%)</title><rect x="865.5" y="227.0" width="2.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="868.5" y="238.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.10%)</title><rect x="867.8" y="259.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="870.8" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (27 samples, 0.53%)</title><rect x="868.9" y="259.0" width="6.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="871.9" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.06%)</title><rect x="870.1" y="243.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="873.1" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (5 samples, 0.10%)</title><rect x="870.8" y="243.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (14 samples, 0.27%)</title><rect x="871.9" y="243.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.9" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (4 samples, 0.08%)</title><rect x="872.1" y="227.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="875.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.18%)</title><rect x="873.1" y="227.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="876.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.18%)</title><rect x="873.1" y="211.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="876.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (8 samples, 0.16%)</title><rect x="873.3" y="195.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.3" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (7 samples, 0.14%)</title><rect x="873.3" y="179.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.3" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (2 samples, 0.04%)</title><rect x="873.5" y="163.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="876.5" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (49 samples, 0.95%)</title><rect x="875.1" y="259.0" width="11.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="878.1" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.06%)</title><rect x="878.1" y="243.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="881.1" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (2 samples, 0.04%)</title><rect x="878.3" y="227.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="881.3" y="238.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (3 samples, 0.06%)</title><rect x="879.0" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.0" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (19 samples, 0.37%)</title><rect x="879.7" y="243.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="882.7" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.06%)</title><rect x="880.2" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (11 samples, 0.21%)</title><rect x="880.9" y="227.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.9" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (10 samples, 0.19%)</title><rect x="881.1" y="211.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (7 samples, 0.14%)</title><rect x="881.8" y="195.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="884.8" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (6 samples, 0.12%)</title><rect x="881.8" y="179.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="884.8" y="190.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.04%)</title><rect x="882.7" y="163.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="885.7" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (2 samples, 0.04%)</title><rect x="883.4" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="886.4" y="238.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.10%)</title><rect x="884.1" y="243.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="887.1" y="254.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (3 samples, 0.06%)</title><rect x="885.2" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.2" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.08%)</title><rect x="886.4" y="259.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="889.4" y="270.0"></text>
</g>
<g>
<title>malloc (9 samples, 0.18%)</title><rect x="887.5" y="259.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="890.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (39 samples, 0.76%)</title><rect x="889.6" y="259.0" width="9.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="892.6" y="270.0"></text>
</g>
<g>
<title>malloc (36 samples, 0.70%)</title><rect x="889.6" y="243.0" width="8.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="892.6" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (32 samples, 0.62%)</title><rect x="889.8" y="227.0" width="7.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="892.8" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.04%)</title><rect x="891.2" y="211.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="894.2" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (21 samples, 0.41%)</title><rect x="891.7" y="211.0" width="4.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="894.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (21 samples, 0.41%)</title><rect x="891.7" y="195.0" width="4.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="894.7" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.06%)</title><rect x="895.6" y="179.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="898.6" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.06%)</title><rect x="896.5" y="211.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="899.5" y="222.0"></text>
</g>
<g>
<title>szone_malloc (3 samples, 0.06%)</title><rect x="897.2" y="227.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="900.2" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.06%)</title><rect x="897.9" y="243.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="900.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (533 samples, 10.37%)</title><rect x="898.6" y="259.0" width="122.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.6" y="270.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.04%)</title><rect x="898.8" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (529 samples, 10.30%)</title><rect x="899.2" y="243.0" width="121.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="902.2" y="254.0">rocksdb::Compac..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (2 samples, 0.04%)</title><rect x="900.6" y="227.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (520 samples, 10.12%)</title><rect x="901.1" y="227.0" width="119.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="904.1" y="238.0">rocksdb::DBImpl..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (518 samples, 10.08%)</title><rect x="901.3" y="211.0" width="119.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="904.3" y="222.0">rocksdb::DBImp..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.04%)</title><rect x="901.5" y="195.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="904.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.04%)</title><rect x="902.0" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (4 samples, 0.08%)</title><rect x="902.5" y="195.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (496 samples, 9.65%)</title><rect x="903.4" y="195.0" width="113.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="906.4" y="206.0">rocksdb::DBImp..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="911.0" y="179.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="914.0" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (11 samples, 0.21%)</title><rect x="911.4" y="179.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="914.4" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="913.9" y="179.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="916.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (27 samples, 0.53%)</title><rect x="914.6" y="179.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="917.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (13 samples, 0.25%)</title><rect x="916.9" y="163.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="919.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.08%)</title><rect x="919.9" y="163.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.04%)</title><rect x="920.4" y="147.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="923.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (12 samples, 0.23%)</title><rect x="920.8" y="179.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (8 samples, 0.16%)</title><rect x="921.3" y="163.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.04%)</title><rect x="923.1" y="163.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (6 samples, 0.12%)</title><rect x="923.6" y="179.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="926.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (382 samples, 7.43%)</title><rect x="925.2" y="179.0" width="87.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.2" y="190.0">rocksdb::M..</text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.04%)</title><rect x="931.4" y="163.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.08%)</title><rect x="931.9" y="163.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.06%)</title><rect x="932.8" y="163.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (4 samples, 0.08%)</title><rect x="933.5" y="163.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="936.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (342 samples, 6.66%)</title><rect x="934.4" y="163.0" width="78.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.4" y="174.0">rocksdb::..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (7 samples, 0.14%)</title><rect x="970.2" y="147.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="973.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (35 samples, 0.68%)</title><rect x="971.8" y="147.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.8" y="158.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (4 samples, 0.08%)</title><rect x="975.7" y="131.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="978.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.08%)</title><rect x="976.9" y="131.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="979.9" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.04%)</title><rect x="977.3" y="115.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="980.3" y="126.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (7 samples, 0.14%)</title><rect x="977.8" y="131.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="980.8" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="978.9" y="115.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="981.9" y="126.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.04%)</title><rect x="979.4" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="982.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (124 samples, 2.41%)</title><rect x="979.9" y="147.0" width="28.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="982.9" y="158.0">ro..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.04%)</title><rect x="989.7" y="131.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="992.7" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.10%)</title><rect x="990.2" y="131.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="993.2" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (10 samples, 0.19%)</title><rect x="991.3" y="131.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="994.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (58 samples, 1.13%)</title><rect x="993.6" y="131.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.6" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (36 samples, 0.70%)</title><rect x="998.7" y="115.0" width="8.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1001.7" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (6 samples, 0.12%)</title><rect x="1007.0" y="131.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (12 samples, 0.23%)</title><rect x="1008.3" y="147.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (2 samples, 0.04%)</title><rect x="1011.1" y="147.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1014.1" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.04%)</title><rect x="1011.6" y="147.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.6" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.08%)</title><rect x="1012.0" y="147.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (2 samples, 0.04%)</title><rect x="1012.9" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.04%)</title><rect x="1013.4" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.04%)</title><rect x="1014.3" y="179.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.3" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (11 samples, 0.21%)</title><rect x="1014.8" y="179.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (4 samples, 0.08%)</title><rect x="1017.3" y="195.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (3 samples, 0.06%)</title><rect x="1018.2" y="195.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.2" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (5 samples, 0.10%)</title><rect x="1019.1" y="195.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1022.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (8 samples, 0.16%)</title><rect x="1021.0" y="259.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.0" y="270.0"></text>
</g>
<g>
<title>szone_size (6 samples, 0.12%)</title><rect x="1023.0" y="259.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1026.0" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.06%)</title><rect x="1024.4" y="259.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.4" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (4 samples, 0.08%)</title><rect x="1025.1" y="275.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.1" y="286.0"></text>
</g>
<g>
<title>szone_free_definite_size (2 samples, 0.04%)</title><rect x="1026.0" y="275.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1029.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (21 samples, 0.41%)</title><rect x="1026.5" y="323.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.5" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.04%)</title><rect x="1027.4" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1030.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="1027.4" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1030.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1027.4" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1030.4" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15 samples, 0.29%)</title><rect x="1027.9" y="307.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1030.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.27%)</title><rect x="1028.1" y="291.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.1" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.27%)</title><rect x="1028.1" y="275.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1031.1" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.21%)</title><rect x="1028.8" y="259.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1031.8" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.10%)</title><rect x="1029.0" y="243.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1032.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title><rect x="1030.2" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.2" y="254.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.04%)</title><rect x="1030.8" y="243.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1033.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (10 samples, 0.19%)</title><rect x="1031.3" y="339.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1034.3" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (7 samples, 0.14%)</title><rect x="1031.3" y="323.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1034.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title><rect x="1032.5" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1035.5" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="1032.9" y="323.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1032.9" y="307.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1035.9" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1032.9" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1035.9" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1032.9" y="275.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1035.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.put (11 samples, 0.21%)</title><rect x="1033.6" y="355.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.6" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1033.6" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1036.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1033.6" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.6" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1033.6" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1036.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title><rect x="1033.6" y="291.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1036.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.10%)</title><rect x="1034.1" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (4 samples, 0.08%)</title><rect x="1035.2" y="339.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (4 samples, 0.08%)</title><rect x="1035.2" y="323.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.06%)</title><rect x="1035.4" y="307.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1038.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1035.4" y="291.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1038.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1035.4" y="275.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (41 samples, 0.80%)</title><rect x="1036.4" y="387.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1039.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (41 samples, 0.80%)</title><rect x="1036.4" y="371.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1039.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.16%)</title><rect x="1036.6" y="355.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1039.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equals (7 samples, 0.14%)</title><rect x="1036.8" y="339.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.10%)</title><rect x="1037.3" y="323.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1040.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1038.0" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1041.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (32 samples, 0.62%)</title><rect x="1038.4" y="355.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1041.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (32 samples, 0.62%)</title><rect x="1038.4" y="339.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1041.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (29 samples, 0.56%)</title><rect x="1038.4" y="323.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1041.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (6 samples, 0.12%)</title><rect x="1041.2" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1044.2" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="1042.6" y="307.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1045.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.04%)</title><rect x="1043.7" y="307.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1046.7" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (4 samples, 0.08%)</title><rect x="1044.2" y="307.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1047.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.06%)</title><rect x="1045.1" y="323.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.08%)</title><rect x="1045.8" y="387.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.08%)</title><rect x="1045.8" y="371.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1048.8" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.08%)</title><rect x="1045.8" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1048.8" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.08%)</title><rect x="1045.8" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1048.8" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.06%)</title><rect x="1046.0" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (41 samples, 0.80%)</title><rect x="1046.7" y="419.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1049.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (28 samples, 0.54%)</title><rect x="1047.6" y="403.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1050.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (28 samples, 0.54%)</title><rect x="1047.6" y="387.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1050.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (28 samples, 0.54%)</title><rect x="1047.6" y="371.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1050.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (28 samples, 0.54%)</title><rect x="1047.6" y="355.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1050.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.10%)</title><rect x="1054.0" y="403.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.10%)</title><rect x="1054.0" y="387.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.08%)</title><rect x="1055.2" y="403.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1058.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (57 samples, 1.11%)</title><rect x="1056.1" y="419.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1059.1" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (47 samples, 0.91%)</title><rect x="1057.0" y="403.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1060.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (41 samples, 0.80%)</title><rect x="1057.0" y="387.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1060.0" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.08%)</title><rect x="1062.3" y="371.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.digit (3 samples, 0.06%)</title><rect x="1062.5" y="355.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1065.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.14%)</title><rect x="1063.2" y="371.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1066.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (4 samples, 0.08%)</title><rect x="1063.9" y="355.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1066.9" y="366.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.06%)</title><rect x="1064.1" y="339.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (7 samples, 0.14%)</title><rect x="1064.8" y="371.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.12%)</title><rect x="1065.1" y="355.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.12%)</title><rect x="1066.4" y="387.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1069.4" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.12%)</title><rect x="1067.8" y="403.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1070.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (14 samples, 0.27%)</title><rect x="1069.2" y="419.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1072.2" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.08%)</title><rect x="1071.5" y="403.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1074.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 0.29%)</title><rect x="1072.6" y="419.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1075.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.43%)</title><rect x="1076.1" y="419.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1079.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.43%)</title><rect x="1076.1" y="403.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1079.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.23%)</title><rect x="1078.4" y="387.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1081.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (12 samples, 0.23%)</title><rect x="1078.4" y="371.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1081.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (439 samples, 8.54%)</title><rect x="1081.1" y="435.0" width="100.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1084.1" y="446.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (437 samples, 8.51%)</title><rect x="1081.1" y="419.0" width="100.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1084.1" y="430.0">one/nio/net/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.04%)</title><rect x="1081.4" y="403.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1084.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (434 samples, 8.45%)</title><rect x="1081.8" y="403.0" width="99.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1084.8" y="414.0">sun/nio/ch/S..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.19%)</title><rect x="1083.2" y="387.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.19%)</title><rect x="1083.2" y="371.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (10 samples, 0.19%)</title><rect x="1083.2" y="355.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1086.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (10 samples, 0.19%)</title><rect x="1083.2" y="339.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.08%)</title><rect x="1083.7" y="323.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1086.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.08%)</title><rect x="1084.6" y="323.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1087.6" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.08%)</title><rect x="1084.6" y="307.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1087.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (417 samples, 8.12%)</title><rect x="1085.5" y="387.0" width="95.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1088.5" y="398.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (417 samples, 8.12%)</title><rect x="1085.5" y="371.0" width="95.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1088.5" y="382.0">sun/nio/ch/..</text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.06%)</title><rect x="1086.4" y="355.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1089.4" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.12%)</title><rect x="1087.1" y="355.0" width="1.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1090.1" y="366.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1088.5" y="355.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1091.5" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title><rect x="1088.9" y="355.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1091.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (374 samples, 7.28%)</title><rect x="1089.4" y="355.0" width="85.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1092.4" y="366.0">sun/nio/ch..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="1089.6" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1092.6" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title><rect x="1089.6" y="323.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1092.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title><rect x="1089.6" y="307.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1092.6" y="318.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.04%)</title><rect x="1089.6" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1092.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (371 samples, 7.22%)</title><rect x="1090.1" y="339.0" width="85.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1093.1" y="350.0">sun/nio/ch..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (371 samples, 7.22%)</title><rect x="1090.1" y="323.0" width="85.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1093.1" y="334.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (3 samples, 0.06%)</title><rect x="1092.9" y="307.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1095.9" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (355 samples, 6.91%)</title><rect x="1093.8" y="307.0" width="81.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1096.8" y="318.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (22 samples, 0.43%)</title><rect x="1175.3" y="355.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.14%)</title><rect x="1178.5" y="339.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1181.5" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.06%)</title><rect x="1179.0" y="323.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1182.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.04%)</title><rect x="1179.7" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1182.7" y="334.0"></text>
</g>
<g>
<title>unsafe_arraycopy (4 samples, 0.08%)</title><rect x="1180.4" y="355.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1183.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.04%)</title><rect x="1181.5" y="419.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1184.5" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.18%)</title><rect x="1182.0" y="451.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="462.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.14%)</title><rect x="1182.4" y="435.0" width="1.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1185.4" y="446.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (7 samples, 0.14%)</title><rect x="1182.4" y="419.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1185.4" y="430.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (7 samples, 0.14%)</title><rect x="1182.4" y="403.0" width="1.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1185.4" y="414.0"></text>
</g>
<g>
<title>thread_start (26 samples, 0.51%)</title><rect x="1184.0" y="483.0" width="6.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>_pthread_start (26 samples, 0.51%)</title><rect x="1184.0" y="467.0" width="6.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (26 samples, 0.51%)</title><rect x="1184.0" y="451.0" width="6.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (26 samples, 0.51%)</title><rect x="1184.0" y="435.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (9 samples, 0.18%)</title><rect x="1184.0" y="419.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (9 samples, 0.18%)</title><rect x="1184.0" y="403.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (8 samples, 0.16%)</title><rect x="1184.0" y="387.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (8 samples, 0.16%)</title><rect x="1184.0" y="371.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (8 samples, 0.16%)</title><rect x="1184.0" y="355.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (5 samples, 0.10%)</title><rect x="1184.7" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (5 samples, 0.10%)</title><rect x="1184.7" y="323.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (2 samples, 0.04%)</title><rect x="1184.9" y="307.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="318.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.04%)</title><rect x="1184.9" y="291.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="302.0"></text>
</g>
<g>
<title>JavaThread::run() (15 samples, 0.29%)</title><rect x="1186.1" y="419.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (15 samples, 0.29%)</title><rect x="1186.1" y="403.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="414.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (14 samples, 0.27%)</title><rect x="1186.1" y="387.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.1" y="398.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (14 samples, 0.27%)</title><rect x="1186.1" y="371.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="382.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (13 samples, 0.25%)</title><rect x="1186.1" y="355.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="366.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (13 samples, 0.25%)</title><rect x="1186.1" y="339.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="350.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 0.19%)</title><rect x="1186.1" y="323.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (5 samples, 0.10%)</title><rect x="1187.2" y="307.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.04%)</title><rect x="1187.5" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.04%)</title><rect x="1187.5" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="286.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.04%)</title><rect x="1187.9" y="291.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.6" y="323.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.6" y="307.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.6" y="291.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.6" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.6" y="259.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.6" y="243.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.6" y="227.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.6" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.6" y="195.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.6" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.6" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.6" y="147.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.6" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.6" y="115.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.04%)</title><rect x="1188.6" y="99.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.04%)</title><rect x="1188.6" y="83.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.6" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.04%)</title><rect x="1188.6" y="67.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.6" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.04%)</title><rect x="1188.6" y="51.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.6" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.04%)</title><rect x="1188.6" y="35.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.6" y="46.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.04%)</title><rect x="1189.5" y="419.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.5" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.04%)</title><rect x="1189.5" y="403.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.5" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title><rect x="1189.5" y="387.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.5" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title><rect x="1189.5" y="371.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.5" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title><rect x="1189.5" y="355.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.04%)</title><rect x="1189.5" y="339.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1192.5" y="350.0"></text>
</g>
</g>
</svg>
