<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (8,399 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (8,393 samples, 99.93%)</title><rect x="10.0" y="483.0" width="1179.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (6 samples, 0.07%)</title><rect x="11.5" y="467.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="14.5" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2 samples, 0.02%)</title><rect x="12.1" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.isOpen (4 samples, 0.05%)</title><rect x="12.4" y="467.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.isOpen (4 samples, 0.05%)</title><rect x="12.4" y="451.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicBoolean.get (4 samples, 0.05%)</title><rect x="12.4" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (1,091 samples, 12.99%)</title><rect x="13.0" y="467.0" width="153.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.0" y="478.0">one/nio/net/JavaSel..</text>
</g>
<g>
<title>__block_literal_global (5 samples, 0.06%)</title><rect x="13.2" y="451.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (7 samples, 0.08%)</title><rect x="14.1" y="451.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (6 samples, 0.07%)</title><rect x="15.1" y="451.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.05%)</title><rect x="15.3" y="435.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.3" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (16 samples, 0.19%)</title><rect x="15.9" y="451.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="18.9" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (8 samples, 0.10%)</title><rect x="17.0" y="435.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,052 samples, 12.53%)</title><rect x="18.1" y="451.0" width="147.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.1" y="462.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,052 samples, 12.53%)</title><rect x="18.1" y="435.0" width="147.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="446.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,048 samples, 12.48%)</title><rect x="18.4" y="419.0" width="147.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="430.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (983 samples, 11.70%)</title><rect x="18.7" y="403.0" width="138.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.7" y="414.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.02%)</title><rect x="26.9" y="387.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="29.9" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (11 samples, 0.13%)</title><rect x="27.1" y="387.0" width="1.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="30.1" y="398.0"></text>
</g>
<g>
<title>kevent (912 samples, 10.86%)</title><rect x="28.7" y="387.0" width="128.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="31.7" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (30 samples, 0.36%)</title><rect x="156.8" y="403.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="159.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.11%)</title><rect x="157.8" y="387.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.04%)</title><rect x="157.8" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="160.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.07%)</title><rect x="158.2" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (2 samples, 0.02%)</title><rect x="158.8" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="161.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (13 samples, 0.15%)</title><rect x="159.2" y="387.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.08%)</title><rect x="159.3" y="371.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 0.07%)</title><rect x="159.5" y="355.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 0.07%)</title><rect x="159.5" y="339.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.02%)</title><rect x="160.5" y="371.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (2 samples, 0.02%)</title><rect x="160.7" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (5 samples, 0.06%)</title><rect x="161.0" y="403.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="164.0" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (4 samples, 0.05%)</title><rect x="161.2" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (5 samples, 0.06%)</title><rect x="161.7" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="164.7" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (5 samples, 0.06%)</title><rect x="161.7" y="387.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 0.04%)</title><rect x="161.9" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (22 samples, 0.26%)</title><rect x="162.6" y="403.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="165.6" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (4 samples, 0.05%)</title><rect x="165.1" y="387.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.04%)</title><rect x="165.2" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.02%)</title><rect x="165.7" y="419.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (2 samples, 0.02%)</title><rect x="165.9" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.02%)</title><rect x="165.9" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (2 samples, 0.02%)</title><rect x="165.9" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="168.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (7,280 samples, 86.68%)</title><rect x="166.2" y="467.0" width="1022.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.2" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,273 samples, 86.59%)</title><rect x="166.4" y="451.0" width="1021.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.4" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6,925 samples, 82.45%)</title><rect x="166.6" y="435.0" width="973.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.6" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,781 samples, 80.74%)</title><rect x="168.8" y="419.0" width="952.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="171.8" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,781 samples, 80.74%)</title><rect x="168.8" y="403.0" width="952.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.8" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6,733 samples, 80.16%)</title><rect x="168.8" y="387.0" width="945.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.8" y="398.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (738 samples, 8.79%)</title><rect x="168.9" y="371.0" width="103.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.9" y="382.0">one/nio/http..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.06%)</title><rect x="169.6" y="355.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.06%)</title><rect x="169.6" y="339.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.06%)</title><rect x="169.6" y="323.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (717 samples, 8.54%)</title><rect x="170.3" y="355.0" width="100.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.3" y="366.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.31%)</title><rect x="170.3" y="339.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.07%)</title><rect x="173.1" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.1" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.07%)</title><rect x="173.1" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.07%)</title><rect x="173.1" y="291.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.1" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="173.5" y="275.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="176.5" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (691 samples, 8.23%)</title><rect x="174.0" y="339.0" width="97.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.0" y="350.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session.write (689 samples, 8.20%)</title><rect x="174.2" y="323.0" width="96.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.2" y="334.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (687 samples, 8.18%)</title><rect x="174.5" y="307.0" width="96.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.5" y="318.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (687 samples, 8.18%)</title><rect x="174.5" y="291.0" width="96.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.5" y="302.0">one/nio/net..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (18 samples, 0.21%)</title><rect x="174.5" y="275.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.5" y="286.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.06%)</title><rect x="174.7" y="259.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="177.7" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (12 samples, 0.14%)</title><rect x="175.4" y="259.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="178.4" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.02%)</title><rect x="175.8" y="243.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="178.8" y="254.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.08%)</title><rect x="176.1" y="243.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="179.1" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (4 samples, 0.05%)</title><rect x="176.5" y="227.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="179.5" y="238.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (4 samples, 0.05%)</title><rect x="176.5" y="211.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="179.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (669 samples, 7.97%)</title><rect x="177.0" y="275.0" width="94.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.0" y="286.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (669 samples, 7.97%)</title><rect x="177.0" y="259.0" width="94.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.0" y="270.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (654 samples, 7.79%)</title><rect x="179.2" y="243.0" width="91.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.2" y="254.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (654 samples, 7.79%)</title><rect x="179.2" y="227.0" width="91.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.2" y="238.0">sun/nio/ch/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (8 samples, 0.10%)</title><rect x="179.2" y="211.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="182.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (646 samples, 7.69%)</title><rect x="180.3" y="211.0" width="90.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.3" y="222.0">sun/nio/ch..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.08%)</title><rect x="182.5" y="195.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="185.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (623 samples, 7.42%)</title><rect x="183.5" y="195.0" width="87.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.5" y="206.0">sun/nio/ch..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (10 samples, 0.12%)</title><rect x="185.3" y="179.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="188.3" y="190.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.02%)</title><rect x="186.9" y="179.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="189.9" y="190.0"></text>
</g>
<g>
<title>write (597 samples, 7.11%)</title><rect x="187.2" y="179.0" width="83.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="190.2" y="190.0">write</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.12%)</title><rect x="271.0" y="355.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="271.9" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="271.9" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (20 samples, 0.24%)</title><rect x="272.7" y="371.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.10%)</title><rect x="272.7" y="355.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.10%)</title><rect x="272.7" y="339.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.06%)</title><rect x="273.1" y="323.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (5 samples, 0.06%)</title><rect x="273.8" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.06%)</title><rect x="273.8" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.05%)</title><rect x="274.0" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.07%)</title><rect x="274.7" y="355.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="275.1" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.1" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="275.1" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title><rect x="275.1" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.entity (5,973 samples, 71.12%)</title><rect x="275.5" y="371.0" width="839.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.5" y="382.0">ru/mail/polis/service/ServiceImpl.entity</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="276.0" y="355.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title><rect x="276.0" y="339.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="276.0" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="276.0" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.0" y="318.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="276.1" y="291.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="279.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.get (20 samples, 0.24%)</title><rect x="276.5" y="355.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.5" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="276.9" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="276.9" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="276.9" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.04%)</title><rect x="277.2" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.02%)</title><rect x="277.6" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.02%)</title><rect x="277.6" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (8 samples, 0.10%)</title><rect x="277.9" y="339.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="280.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (7 samples, 0.08%)</title><rect x="278.1" y="323.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="278.8" y="307.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (2 samples, 0.02%)</title><rect x="279.0" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="279.0" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceImpl.put (5,946 samples, 70.79%)</title><rect x="279.3" y="355.0" width="835.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.3" y="366.0">ru/mail/polis/service/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.10%)</title><rect x="279.5" y="339.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.10%)</title><rect x="279.5" y="323.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.5" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="279.5" y="307.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="282.5" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="279.5" y="291.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.5" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="279.5" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.5" y="286.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.04%)</title><rect x="279.6" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="280.0" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="283.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.02%)</title><rect x="280.6" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (5,935 samples, 70.66%)</title><rect x="280.9" y="339.0" width="833.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.9" y="350.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (5,919 samples, 70.47%)</title><rect x="280.9" y="323.0" width="831.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.9" y="334.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (5,919 samples, 70.47%)</title><rect x="280.9" y="307.0" width="831.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.9" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (5,886 samples, 70.08%)</title><rect x="285.5" y="291.0" width="826.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="288.5" y="302.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (3 samples, 0.04%)</title><rect x="285.8" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="288.8" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.06%)</title><rect x="286.2" y="275.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="289.2" y="286.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="286.9" y="275.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="289.9" y="286.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.04%)</title><rect x="287.3" y="275.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="290.3" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.04%)</title><rect x="287.9" y="275.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="290.9" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (8 samples, 0.10%)</title><rect x="288.3" y="275.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="291.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.07%)</title><rect x="289.4" y="275.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="292.4" y="286.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (5,852 samples, 69.67%)</title><rect x="290.3" y="275.0" width="822.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="293.3" y="286.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (7 samples, 0.08%)</title><rect x="292.0" y="259.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="295.0" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (4 samples, 0.05%)</title><rect x="293.0" y="259.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="296.0" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.07%)</title><rect x="293.5" y="259.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="296.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (4 samples, 0.05%)</title><rect x="294.4" y="259.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="297.4" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="295.1" y="259.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="298.1" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="295.3" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="298.3" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (8 samples, 0.10%)</title><rect x="295.6" y="259.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="298.6" y="270.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.05%)</title><rect x="296.7" y="259.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="299.7" y="270.0"></text>
</g>
<g>
<title>compiler_barrier() (2 samples, 0.02%)</title><rect x="297.3" y="259.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="300.3" y="270.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="297.6" y="259.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="300.6" y="270.0"></text>
</g>
<g>
<title>free (6 samples, 0.07%)</title><rect x="297.9" y="259.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="300.9" y="270.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.04%)</title><rect x="298.3" y="243.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="301.3" y="254.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.04%)</title><rect x="298.3" y="227.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="301.3" y="238.0"></text>
</g>
<g>
<title>free_tiny (27 samples, 0.32%)</title><rect x="298.7" y="259.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="301.7" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (2 samples, 0.02%)</title><rect x="299.1" y="243.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="302.1" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (21 samples, 0.25%)</title><rect x="299.6" y="243.0" width="2.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="302.6" y="254.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (13 samples, 0.15%)</title><rect x="300.7" y="227.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="303.7" y="238.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (21 samples, 0.25%)</title><rect x="302.5" y="259.0" width="3.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="305.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="302.8" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="305.8" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (3 samples, 0.04%)</title><rect x="303.2" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="306.2" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12 samples, 0.14%)</title><rect x="303.8" y="243.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="306.8" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.02%)</title><rect x="303.9" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="306.9" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (9 samples, 0.11%)</title><rect x="304.2" y="227.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="307.2" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (9 samples, 0.11%)</title><rect x="304.2" y="211.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="307.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (9 samples, 0.11%)</title><rect x="304.2" y="195.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="307.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (9 samples, 0.11%)</title><rect x="304.2" y="179.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="307.2" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.02%)</title><rect x="304.8" y="163.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="307.8" y="174.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="305.2" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="308.2" y="174.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (61 samples, 0.73%)</title><rect x="305.5" y="259.0" width="8.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="308.5" y="270.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="308.0" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="311.0" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (7 samples, 0.08%)</title><rect x="308.3" y="243.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="311.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (24 samples, 0.29%)</title><rect x="309.2" y="243.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="312.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (21 samples, 0.25%)</title><rect x="309.5" y="227.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="312.5" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (18 samples, 0.21%)</title><rect x="309.8" y="211.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="312.8" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (16 samples, 0.19%)</title><rect x="310.1" y="195.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="313.1" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (16 samples, 0.19%)</title><rect x="310.1" y="179.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="313.1" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.04%)</title><rect x="310.1" y="163.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="313.1" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (4 samples, 0.05%)</title><rect x="310.8" y="163.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="313.8" y="174.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (5 samples, 0.06%)</title><rect x="311.6" y="163.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="314.6" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)</title><rect x="311.6" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="314.6" y="158.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.02%)</title><rect x="312.1" y="147.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="315.1" y="158.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (4 samples, 0.05%)</title><rect x="312.6" y="243.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="315.6" y="254.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (4 samples, 0.05%)</title><rect x="313.2" y="243.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="316.2" y="254.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.07%)</title><rect x="314.0" y="259.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="317.0" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (64 samples, 0.76%)</title><rect x="314.9" y="259.0" width="9.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="317.9" y="270.0"></text>
</g>
<g>
<title>malloc (64 samples, 0.76%)</title><rect x="314.9" y="243.0" width="9.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="317.9" y="254.0"></text>
</g>
<g>
<title>default_zone_malloc (5 samples, 0.06%)</title><rect x="315.0" y="227.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="318.0" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (57 samples, 0.68%)</title><rect x="315.7" y="227.0" width="8.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="318.7" y="238.0"></text>
</g>
<g>
<title>default_zone_malloc (9 samples, 0.11%)</title><rect x="316.7" y="211.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="319.7" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (40 samples, 0.48%)</title><rect x="318.0" y="211.0" width="5.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="321.0" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (39 samples, 0.46%)</title><rect x="318.1" y="195.0" width="5.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="321.1" y="206.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title><rect x="320.9" y="179.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="323.9" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (15 samples, 0.18%)</title><rect x="321.5" y="179.0" width="2.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="324.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5,600 samples, 66.67%)</title><rect x="323.9" y="259.0" width="786.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="326.9" y="270.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;cha..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5,597 samples, 66.64%)</title><rect x="324.3" y="243.0" width="786.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.3" y="254.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5,590 samples, 66.56%)</title><rect x="324.4" y="227.0" width="785.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="327.4" y="238.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::S..</text>
</g>
<g>
<title>free (2 samples, 0.02%)</title><rect x="325.5" y="211.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="328.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (4 samples, 0.05%)</title><rect x="326.0" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="329.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (5,453 samples, 64.92%)</title><rect x="326.5" y="211.0" width="766.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="329.5" y="222.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (5,430 samples, 64.65%)</title><rect x="327.1" y="195.0" width="762.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="330.1" y="206.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, un..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (11 samples, 0.13%)</title><rect x="337.5" y="179.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="340.5" y="190.0"></text>
</g>
<g>
<title>pthread_cond_destroy (3 samples, 0.04%)</title><rect x="339.0" y="179.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="342.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (4 samples, 0.05%)</title><rect x="339.7" y="179.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="342.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (7 samples, 0.08%)</title><rect x="340.3" y="179.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (625 samples, 7.44%)</title><rect x="341.4" y="179.0" width="87.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="344.4" y="190.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (8 samples, 0.10%)</title><rect x="341.8" y="163.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="344.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (8 samples, 0.10%)</title><rect x="341.8" y="147.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="344.8" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (4 samples, 0.05%)</title><rect x="342.4" y="131.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="345.4" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="342.5" y="115.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="345.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (607 samples, 7.23%)</title><rect x="343.0" y="163.0" width="85.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="346.0" y="174.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (597 samples, 7.11%)</title><rect x="344.4" y="147.0" width="83.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="347.4" y="158.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.04%)</title><rect x="344.9" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="347.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (563 samples, 6.70%)</title><rect x="345.4" y="131.0" width="79.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="348.4" y="142.0">rocksdb::..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (6 samples, 0.07%)</title><rect x="346.1" y="115.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="349.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (549 samples, 6.54%)</title><rect x="347.3" y="115.0" width="77.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="350.3" y="126.0">rocksdb::..</text>
</g>
<g>
<title>write (540 samples, 6.43%)</title><rect x="348.6" y="99.0" width="75.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="351.6" y="110.0">write</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (8 samples, 0.10%)</title><rect x="424.5" y="131.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="427.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (19 samples, 0.23%)</title><rect x="425.6" y="131.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="428.6" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="426.0" y="115.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="429.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (5 samples, 0.06%)</title><rect x="426.3" y="115.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="429.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (9 samples, 0.11%)</title><rect x="427.0" y="115.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="430.0" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="427.7" y="99.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="430.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (5 samples, 0.06%)</title><rect x="428.2" y="163.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="431.2" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.06%)</title><rect x="428.2" y="147.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="431.2" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (4 samples, 0.05%)</title><rect x="428.4" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="431.4" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="428.5" y="115.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="431.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="428.9" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="431.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (2 samples, 0.02%)</title><rect x="429.2" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="432.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.02%)</title><rect x="429.5" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="432.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (9 samples, 0.11%)</title><rect x="429.8" y="179.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="432.8" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="430.4" y="163.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="433.4" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="430.8" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (102 samples, 1.21%)</title><rect x="431.5" y="179.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="434.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (3 samples, 0.04%)</title><rect x="432.9" y="163.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="435.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (89 samples, 1.06%)</title><rect x="433.3" y="163.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="436.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (83 samples, 0.99%)</title><rect x="434.1" y="147.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="437.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (82 samples, 0.98%)</title><rect x="434.3" y="131.0" width="11.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="437.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (71 samples, 0.85%)</title><rect x="434.7" y="115.0" width="10.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="437.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.04%)</title><rect x="435.6" y="99.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="438.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.02%)</title><rect x="436.0" y="99.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="439.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (60 samples, 0.71%)</title><rect x="436.3" y="99.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="439.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.05%)</title><rect x="440.0" y="83.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="443.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (4 samples, 0.05%)</title><rect x="440.0" y="67.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="443.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.02%)</title><rect x="440.6" y="83.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="443.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 0.31%)</title><rect x="440.9" y="83.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="443.9" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title><rect x="442.0" y="67.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="445.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.07%)</title><rect x="442.4" y="67.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="445.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.10%)</title><rect x="443.3" y="67.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="446.3" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.08%)</title><rect x="443.4" y="51.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="446.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (3 samples, 0.04%)</title><rect x="444.7" y="115.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="447.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.05%)</title><rect x="445.2" y="115.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="448.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (275 samples, 3.27%)</title><rect x="445.8" y="179.0" width="38.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="448.8" y="190.0">roc..</text>
</g>
<g>
<title>free_tiny (5 samples, 0.06%)</title><rect x="450.9" y="163.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="453.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.02%)</title><rect x="451.6" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="454.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (2 samples, 0.02%)</title><rect x="452.1" y="163.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="455.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (20 samples, 0.24%)</title><rect x="452.4" y="163.0" width="2.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="455.4" y="174.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (4 samples, 0.05%)</title><rect x="452.6" y="147.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="455.6" y="158.0"></text>
</g>
<g>
<title>free (6 samples, 0.07%)</title><rect x="453.3" y="147.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="456.3" y="158.0"></text>
</g>
<g>
<title>szone_size (4 samples, 0.05%)</title><rect x="453.5" y="131.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="456.5" y="142.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.05%)</title><rect x="453.5" y="115.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="456.5" y="126.0"></text>
</g>
<g>
<title>free_tiny (6 samples, 0.07%)</title><rect x="454.1" y="147.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="457.1" y="158.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.06%)</title><rect x="454.2" y="131.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="457.2" y="142.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="454.5" y="115.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="457.5" y="126.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="454.9" y="147.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="457.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (207 samples, 2.46%)</title><rect x="455.2" y="163.0" width="29.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="458.2" y="174.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (202 samples, 2.41%)</title><rect x="455.9" y="147.0" width="28.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="458.9" y="158.0">ro..</text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (2 samples, 0.02%)</title><rect x="456.3" y="131.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="459.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.02%)</title><rect x="456.6" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="459.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.02%)</title><rect x="456.9" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="459.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (193 samples, 2.30%)</title><rect x="457.2" y="131.0" width="27.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="460.2" y="142.0">r..</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.02%)</title><rect x="457.9" y="115.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="460.9" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 0.04%)</title><rect x="458.2" y="115.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="461.2" y="126.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.02%)</title><rect x="458.6" y="115.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="461.6" y="126.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.24%)</title><rect x="458.9" y="115.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="461.9" y="126.0"></text>
</g>
<g>
<title>malloc (19 samples, 0.23%)</title><rect x="458.9" y="99.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="461.9" y="110.0"></text>
</g>
<g>
<title>malloc_zone_malloc (18 samples, 0.21%)</title><rect x="459.0" y="83.0" width="2.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="462.0" y="94.0"></text>
</g>
<g>
<title>default_zone_malloc (4 samples, 0.05%)</title><rect x="459.3" y="67.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="462.3" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.12%)</title><rect x="459.9" y="67.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="462.9" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.11%)</title><rect x="460.0" y="51.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="463.0" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (6 samples, 0.07%)</title><rect x="460.4" y="35.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="463.4" y="46.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="461.3" y="67.0" width="0.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="464.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (4 samples, 0.05%)</title><rect x="461.7" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="464.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (149 samples, 1.77%)</title><rect x="462.2" y="115.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="465.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.02%)</title><rect x="463.5" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="466.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.02%)</title><rect x="463.8" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="466.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (136 samples, 1.62%)</title><rect x="464.1" y="99.0" width="19.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="467.1" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="464.6" y="83.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="467.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (12 samples, 0.14%)</title><rect x="464.9" y="83.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="467.9" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (10 samples, 0.12%)</title><rect x="465.2" y="67.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="468.2" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.05%)</title><rect x="466.6" y="83.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="469.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.02%)</title><rect x="467.2" y="83.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="470.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.02%)</title><rect x="467.4" y="83.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (110 samples, 1.31%)</title><rect x="467.7" y="83.0" width="15.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="470.7" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (6 samples, 0.07%)</title><rect x="475.2" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="478.2" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.02%)</title><rect x="475.5" y="51.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="478.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (50 samples, 0.60%)</title><rect x="476.0" y="67.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="479.0" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.07%)</title><rect x="477.7" y="51.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="480.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (30 samples, 0.36%)</title><rect x="478.5" y="51.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="481.5" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (24 samples, 0.29%)</title><rect x="479.4" y="35.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="482.4" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.02%)</title><rect x="482.8" y="51.0" width="0.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="485.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (2 samples, 0.02%)</title><rect x="483.2" y="115.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.06%)</title><rect x="483.5" y="115.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="486.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.02%)</title><rect x="484.4" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2,521 samples, 30.02%)</title><rect x="484.7" y="179.0" width="354.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="487.7" y="190.0">rocksdb::WriteThread::AwaitState(rocksdb::WriteT..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.05%)</title><rect x="637.2" y="163.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="640.2" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.04%)</title><rect x="637.7" y="163.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="640.7" y="174.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.02%)</title><rect x="638.3" y="163.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="641.3" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.04%)</title><rect x="638.6" y="163.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="641.6" y="174.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.02%)</title><rect x="639.1" y="163.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="642.1" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (164 samples, 1.95%)</title><rect x="639.4" y="163.0" width="23.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="642.4" y="174.0">s..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (5 samples, 0.06%)</title><rect x="662.4" y="163.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="665.4" y="174.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.06%)</title><rect x="662.4" y="147.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="665.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (3 samples, 0.04%)</title><rect x="662.7" y="131.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="665.7" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1,242 samples, 14.79%)</title><rect x="663.2" y="163.0" width="174.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="666.2" y="174.0">std::__1::condition_va..</text>
</g>
<g>
<title>__psynch_cvwait (1,124 samples, 13.38%)</title><rect x="663.3" y="147.0" width="157.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="666.3" y="158.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_check_init_slow (2 samples, 0.02%)</title><rect x="821.2" y="147.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="824.2" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_wait (112 samples, 1.33%)</title><rect x="821.5" y="147.0" width="15.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="824.5" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (8 samples, 0.10%)</title><rect x="822.8" y="131.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="825.8" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (5 samples, 0.06%)</title><rect x="823.9" y="131.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="826.9" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (86 samples, 1.02%)</title><rect x="824.6" y="131.0" width="12.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="827.6" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexwait (84 samples, 1.00%)</title><rect x="824.6" y="115.0" width="11.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="827.6" y="126.0"></text>
</g>
<g>
<title>_pthread_testcancel (4 samples, 0.05%)</title><rect x="836.7" y="131.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="839.7" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="837.4" y="147.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="840.4" y="158.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.02%)</title><rect x="837.6" y="163.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.6" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (7 samples, 0.08%)</title><rect x="837.9" y="163.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.9" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (5 samples, 0.06%)</title><rect x="838.2" y="147.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="841.2" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (4 samples, 0.05%)</title><rect x="838.3" y="131.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="841.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1,440 samples, 17.14%)</title><rect x="838.9" y="179.0" width="202.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="841.9" y="190.0">rocksdb::WriteThread::Comp..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,431 samples, 17.04%)</title><rect x="839.2" y="163.0" width="201.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="842.2" y="174.0">rocksdb::WriteThread::Awai..</text>
</g>
<g>
<title>clock_gettime (2 samples, 0.02%)</title><rect x="900.4" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="903.4" y="158.0"></text>
</g>
<g>
<title>sched_yield (9 samples, 0.11%)</title><rect x="900.9" y="147.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="903.9" y="158.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (776 samples, 9.24%)</title><rect x="902.1" y="147.0" width="109.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="905.1" y="158.0">si_module_sta..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (12 samples, 0.14%)</title><rect x="1011.2" y="147.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.2" y="158.0"></text>
</g>
<g>
<title>clock_gettime (10 samples, 0.12%)</title><rect x="1011.4" y="131.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1014.4" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (7 samples, 0.08%)</title><rect x="1011.9" y="115.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1014.9" y="126.0"></text>
</g>
<g>
<title>__block_literal_global (3 samples, 0.04%)</title><rect x="1011.9" y="99.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1014.9" y="110.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (4 samples, 0.05%)</title><rect x="1012.3" y="99.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1015.3" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (195 samples, 2.32%)</title><rect x="1012.8" y="147.0" width="27.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.8" y="158.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (182 samples, 2.17%)</title><rect x="1013.0" y="131.0" width="25.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1016.0" y="142.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 0.13%)</title><rect x="1038.5" y="131.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1041.5" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 0.12%)</title><rect x="1038.7" y="115.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1041.7" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (10 samples, 0.12%)</title><rect x="1038.7" y="99.0" width="1.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1041.7" y="110.0"></text>
</g>
<g>
<title>sched_yield (2 samples, 0.02%)</title><rect x="1040.2" y="163.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1043.2" y="174.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.04%)</title><rect x="1040.5" y="163.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1043.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (5 samples, 0.06%)</title><rect x="1041.2" y="179.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1044.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (69 samples, 0.82%)</title><rect x="1041.9" y="179.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1044.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (53 samples, 0.63%)</title><rect x="1042.1" y="163.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.1" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (39 samples, 0.46%)</title><rect x="1043.0" y="147.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (38 samples, 0.45%)</title><rect x="1043.0" y="131.0" width="5.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1046.0" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (6 samples, 0.07%)</title><rect x="1048.7" y="147.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.7" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (6 samples, 0.07%)</title><rect x="1048.7" y="131.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1051.7" y="142.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (5 samples, 0.06%)</title><rect x="1048.8" y="115.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1051.8" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (11 samples, 0.13%)</title><rect x="1049.5" y="163.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.11%)</title><rect x="1049.6" y="147.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1052.6" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.04%)</title><rect x="1051.2" y="163.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="1051.2" y="147.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1054.2" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (2 samples, 0.02%)</title><rect x="1051.2" y="131.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1054.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (35 samples, 0.42%)</title><rect x="1051.6" y="179.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (25 samples, 0.30%)</title><rect x="1052.2" y="163.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (24 samples, 0.29%)</title><rect x="1052.2" y="147.0" width="3.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1055.2" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.04%)</title><rect x="1055.7" y="163.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1058.7" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.04%)</title><rect x="1055.7" y="147.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1058.7" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.04%)</title><rect x="1055.7" y="131.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1058.7" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (3 samples, 0.04%)</title><rect x="1056.1" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.04%)</title><rect x="1056.1" y="147.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1059.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.04%)</title><rect x="1056.1" y="131.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1059.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (9 samples, 0.11%)</title><rect x="1056.5" y="179.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (9 samples, 0.11%)</title><rect x="1056.5" y="163.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (199 samples, 2.37%)</title><rect x="1057.8" y="179.0" width="28.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1060.8" y="190.0">r..</text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.06%)</title><rect x="1058.2" y="163.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1061.2" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (170 samples, 2.02%)</title><rect x="1059.1" y="163.0" width="23.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.1" y="174.0">s..</text>
</g>
<g>
<title>__psynch_cvsignal (160 samples, 1.90%)</title><rect x="1059.2" y="147.0" width="22.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1062.2" y="158.0">_..</text>
</g>
<g>
<title>pthread_cond_signal (8 samples, 0.10%)</title><rect x="1081.8" y="147.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1084.8" y="158.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (3 samples, 0.04%)</title><rect x="1082.5" y="131.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1085.5" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (3 samples, 0.04%)</title><rect x="1083.1" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1086.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.02%)</title><rect x="1083.1" y="147.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1086.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.02%)</title><rect x="1083.1" y="131.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1086.1" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (16 samples, 0.19%)</title><rect x="1083.5" y="163.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (16 samples, 0.19%)</title><rect x="1083.5" y="147.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1086.5" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (16 samples, 0.19%)</title><rect x="1083.5" y="131.0" width="2.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1086.5" y="142.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (8 samples, 0.10%)</title><rect x="1086.5" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.5" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (2 samples, 0.02%)</title><rect x="1087.6" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.6" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (3 samples, 0.04%)</title><rect x="1087.9" y="179.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.9" y="190.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (3 samples, 0.04%)</title><rect x="1087.9" y="163.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1090.9" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (12 samples, 0.14%)</title><rect x="1088.3" y="179.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.02%)</title><rect x="1090.1" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.02%)</title><rect x="1090.5" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.05%)</title><rect x="1090.8" y="195.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (3 samples, 0.04%)</title><rect x="1091.4" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (2 samples, 0.02%)</title><rect x="1091.8" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1094.8" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (2 samples, 0.02%)</title><rect x="1092.4" y="195.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (7 samples, 0.08%)</title><rect x="1092.6" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1095.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (24 samples, 0.29%)</title><rect x="1093.6" y="211.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (5 samples, 0.06%)</title><rect x="1093.8" y="195.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (13 samples, 0.15%)</title><rect x="1094.5" y="195.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.5" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1094.7" y="179.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1097.7" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (8 samples, 0.10%)</title><rect x="1095.0" y="179.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.0" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1095.9" y="163.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1098.9" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="1096.3" y="195.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1099.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (2 samples, 0.02%)</title><rect x="1096.7" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (48 samples, 0.57%)</title><rect x="1097.0" y="211.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1100.0" y="222.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (5 samples, 0.06%)</title><rect x="1097.6" y="195.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1100.6" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.02%)</title><rect x="1098.3" y="195.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1101.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (20 samples, 0.24%)</title><rect x="1098.5" y="195.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.5" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.02%)</title><rect x="1098.8" y="179.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1101.8" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (15 samples, 0.18%)</title><rect x="1099.2" y="179.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1102.2" y="190.0"></text>
</g>
<g>
<title>malloc (15 samples, 0.18%)</title><rect x="1099.2" y="163.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1102.2" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (14 samples, 0.17%)</title><rect x="1099.2" y="147.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1102.2" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (14 samples, 0.17%)</title><rect x="1099.2" y="131.0" width="2.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1102.2" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (14 samples, 0.17%)</title><rect x="1099.2" y="115.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1102.2" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (7 samples, 0.08%)</title><rect x="1100.2" y="99.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1103.2" y="110.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.04%)</title><rect x="1100.8" y="83.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1103.8" y="94.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (16 samples, 0.19%)</title><rect x="1101.3" y="195.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.3" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (5 samples, 0.06%)</title><rect x="1101.5" y="179.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1104.5" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (9 samples, 0.11%)</title><rect x="1102.2" y="179.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.2" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (7 samples, 0.08%)</title><rect x="1102.5" y="163.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1105.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (34 samples, 0.40%)</title><rect x="1103.7" y="211.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.7" y="222.0"></text>
</g>
<g>
<title>free (16 samples, 0.19%)</title><rect x="1103.9" y="195.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1106.9" y="206.0"></text>
</g>
<g>
<title>szone_size (9 samples, 0.11%)</title><rect x="1104.9" y="179.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1107.9" y="190.0"></text>
</g>
<g>
<title>tiny_size (9 samples, 0.11%)</title><rect x="1104.9" y="163.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1107.9" y="174.0"></text>
</g>
<g>
<title>free_tiny (15 samples, 0.18%)</title><rect x="1106.1" y="195.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1109.1" y="206.0"></text>
</g>
<g>
<title>tiny_free_no_lock (12 samples, 0.14%)</title><rect x="1106.5" y="179.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1109.5" y="190.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (5 samples, 0.06%)</title><rect x="1107.5" y="163.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1110.5" y="174.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.02%)</title><rect x="1108.2" y="195.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1111.2" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (5 samples, 0.06%)</title><rect x="1108.5" y="211.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.5" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (4 samples, 0.05%)</title><rect x="1109.2" y="211.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.02%)</title><rect x="1109.8" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.02%)</title><rect x="1110.1" y="227.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (6 samples, 0.07%)</title><rect x="1110.6" y="259.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.6" y="270.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (6 samples, 0.07%)</title><rect x="1111.6" y="259.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (2 samples, 0.02%)</title><rect x="1112.4" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.02%)</title><rect x="1112.4" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.4" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1112.4" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1115.4" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1112.4" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1115.4" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="1112.4" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1115.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (14 samples, 0.17%)</title><rect x="1112.7" y="323.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1115.7" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (11 samples, 0.13%)</title><rect x="1113.2" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1113.2" y="291.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1116.2" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1113.2" y="275.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.2" y="286.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.13%)</title><rect x="1113.2" y="259.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (4 samples, 0.05%)</title><rect x="1113.3" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.3" y="254.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.07%)</title><rect x="1113.9" y="243.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1116.9" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.02%)</title><rect x="1114.7" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (42 samples, 0.50%)</title><rect x="1115.0" y="387.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1118.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (42 samples, 0.50%)</title><rect x="1115.0" y="371.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.0" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (16 samples, 0.19%)</title><rect x="1115.0" y="355.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1118.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equals (12 samples, 0.14%)</title><rect x="1115.0" y="339.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1115.3" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.06%)</title><rect x="1115.8" y="323.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1118.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.06%)</title><rect x="1115.8" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1118.8" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="1116.7" y="339.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1119.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (26 samples, 0.31%)</title><rect x="1117.2" y="355.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1120.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (26 samples, 0.31%)</title><rect x="1117.2" y="339.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1120.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (22 samples, 0.26%)</title><rect x="1117.2" y="323.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1120.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteOrder.nativeOrder (2 samples, 0.02%)</title><rect x="1118.8" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1121.8" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.08%)</title><rect x="1119.1" y="307.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1122.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.02%)</title><rect x="1120.0" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.0" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.05%)</title><rect x="1120.3" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1123.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.05%)</title><rect x="1120.9" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="1120.9" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1123.9" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.02%)</title><rect x="1121.2" y="371.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (33 samples, 0.39%)</title><rect x="1121.4" y="419.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1124.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.12%)</title><rect x="1122.0" y="403.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1125.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.12%)</title><rect x="1122.0" y="387.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1125.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (10 samples, 0.12%)</title><rect x="1122.0" y="371.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.0" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (10 samples, 0.12%)</title><rect x="1122.0" y="355.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1125.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="1123.4" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.06%)</title><rect x="1123.4" y="387.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1126.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (14 samples, 0.17%)</title><rect x="1124.1" y="403.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1127.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (49 samples, 0.58%)</title><rect x="1126.1" y="419.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1129.1" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (31 samples, 0.37%)</title><rect x="1127.2" y="403.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1130.2" y="414.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (23 samples, 0.27%)</title><rect x="1127.5" y="387.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1130.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.08%)</title><rect x="1129.3" y="371.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1132.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Character.digit (7 samples, 0.08%)</title><rect x="1129.3" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1132.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.07%)</title><rect x="1129.4" y="339.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1132.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.04%)</title><rect x="1130.3" y="371.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1133.3" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.02%)</title><rect x="1130.4" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1133.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.07%)</title><rect x="1130.7" y="387.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1133.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (10 samples, 0.12%)</title><rect x="1131.6" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1134.6" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1131.7" y="387.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1134.7" y="398.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="1132.3" y="387.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1135.3" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1132.5" y="387.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1135.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (8 samples, 0.10%)</title><rect x="1133.0" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1136.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.15%)</title><rect x="1134.2" y="419.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1137.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="1134.6" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1137.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="1134.6" y="387.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1137.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.07%)</title><rect x="1135.2" y="403.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.2" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.07%)</title><rect x="1135.2" y="387.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1138.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.30%)</title><rect x="1136.1" y="419.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1139.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.30%)</title><rect x="1136.1" y="403.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.12%)</title><rect x="1138.2" y="387.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1141.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1138.3" y="371.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1141.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.02%)</title><rect x="1138.9" y="355.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1141.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (3 samples, 0.04%)</title><rect x="1139.1" y="371.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (2 samples, 0.02%)</title><rect x="1139.3" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1142.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (346 samples, 4.12%)</title><rect x="1139.6" y="435.0" width="48.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1142.6" y="446.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (346 samples, 4.12%)</title><rect x="1139.6" y="419.0" width="48.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1142.6" y="430.0">one/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="1139.6" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1142.6" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1139.6" y="387.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1142.6" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1139.6" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1142.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (343 samples, 4.08%)</title><rect x="1140.0" y="403.0" width="48.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1143.0" y="414.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.10%)</title><rect x="1140.4" y="387.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1143.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.10%)</title><rect x="1140.4" y="371.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1143.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.10%)</title><rect x="1140.4" y="355.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1143.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.10%)</title><rect x="1140.4" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1143.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.02%)</title><rect x="1141.0" y="323.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1144.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.02%)</title><rect x="1141.2" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1144.2" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="1141.2" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1144.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (330 samples, 3.93%)</title><rect x="1141.5" y="387.0" width="46.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1144.5" y="398.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (330 samples, 3.93%)</title><rect x="1141.5" y="371.0" width="46.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.5" y="382.0">sun/..</text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="1142.7" y="355.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1145.7" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.06%)</title><rect x="1142.9" y="355.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1145.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (296 samples, 3.52%)</title><rect x="1143.6" y="355.0" width="41.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1146.6" y="366.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (295 samples, 3.51%)</title><rect x="1143.8" y="339.0" width="41.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1146.8" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (295 samples, 3.51%)</title><rect x="1143.8" y="323.0" width="41.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1146.8" y="334.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (10 samples, 0.12%)</title><rect x="1144.9" y="307.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1147.9" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (275 samples, 3.27%)</title><rect x="1146.6" y="307.0" width="38.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1149.6" y="318.0">rpc..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (18 samples, 0.21%)</title><rect x="1185.2" y="355.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.05%)</title><rect x="1187.0" y="339.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1190.0" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.02%)</title><rect x="1187.3" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.02%)</title><rect x="1187.9" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1190.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureOpenAndConnected (2 samples, 0.02%)</title><rect x="1187.9" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1190.9" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.07%)</title><rect x="1188.2" y="451.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="462.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.07%)</title><rect x="1188.2" y="435.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.2" y="446.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (6 samples, 0.07%)</title><rect x="1188.2" y="419.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.2" y="430.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (4 samples, 0.05%)</title><rect x="1188.5" y="403.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1191.5" y="414.0"></text>
</g>
<g>
<title>thread_start (6 samples, 0.07%)</title><rect x="1189.2" y="483.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.2" y="494.0"></text>
</g>
<g>
<title>_pthread_start (6 samples, 0.07%)</title><rect x="1189.2" y="467.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1192.2" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (6 samples, 0.07%)</title><rect x="1189.2" y="451.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.2" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (6 samples, 0.07%)</title><rect x="1189.2" y="435.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.2" y="446.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.04%)</title><rect x="1189.2" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.2" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (3 samples, 0.04%)</title><rect x="1189.2" y="403.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.2" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (3 samples, 0.04%)</title><rect x="1189.2" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.2" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 0.04%)</title><rect x="1189.2" y="371.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.2" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 0.04%)</title><rect x="1189.2" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.2" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.04%)</title><rect x="1189.2" y="339.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.02%)</title><rect x="1189.3" y="323.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1192.3" y="334.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.02%)</title><rect x="1189.7" y="419.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.7" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.02%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.02%)</title><rect x="1189.7" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.02%)</title><rect x="1189.7" y="371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.7" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.02%)</title><rect x="1189.7" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.02%)</title><rect x="1189.7" y="339.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1192.7" y="350.0"></text>
</g>
</g>
</svg>
