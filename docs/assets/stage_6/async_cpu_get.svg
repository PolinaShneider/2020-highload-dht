<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (3,449 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (74 samples, 2.15%)</title><rect x="10.0" y="739.0" width="25.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="750.0">S..</text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (74 samples, 2.15%)</title><rect x="10.0" y="723.0" width="25.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="734.0">O..</text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (70 samples, 2.03%)</title><rect x="11.0" y="707.0" width="24.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.0" y="718.0">O..</text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.12%)</title><rect x="11.7" y="691.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.7" y="702.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="12.7" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.7" y="686.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.12%)</title><rect x="13.1" y="691.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.1" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (7 samples, 0.20%)</title><rect x="14.4" y="691.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.4" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="14.4" y="675.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="17.4" y="686.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (53 samples, 1.54%)</title><rect x="16.8" y="691.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.8" y="702.0"></text>
</g>
<g>
<title>__gettimeofday (2 samples, 0.06%)</title><rect x="16.8" y="675.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="19.8" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (49 samples, 1.42%)</title><rect x="17.5" y="675.0" width="16.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="20.5" y="686.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="34.3" y="675.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="37.3" y="686.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.03%)</title><rect x="34.6" y="675.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="37.6" y="686.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="35.0" y="707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="38.0" y="718.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="35.0" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="38.0" y="702.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="35.0" y="675.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.0" y="686.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.06%)</title><rect x="35.3" y="739.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="38.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="35.3" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="38.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="35.3" y="707.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="38.3" y="718.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="35.3" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="38.3" y="702.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="35.3" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="38.3" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="35.7" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="38.7" y="734.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="35.7" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="38.7" y="718.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 0.12%)</title><rect x="36.0" y="739.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="39.0" y="750.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (2 samples, 0.06%)</title><rect x="36.0" y="723.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="39.0" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="36.7" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="39.7" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="36.7" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="39.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="37.0" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="40.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,719 samples, 49.84%)</title><rect x="37.4" y="739.0" width="588.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.4" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,719 samples, 49.84%)</title><rect x="37.4" y="723.0" width="588.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.4" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,719 samples, 49.84%)</title><rect x="37.4" y="707.0" width="588.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.4" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="39.8" y="691.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="42.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (482 samples, 13.98%)</title><rect x="40.4" y="691.0" width="165.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.4" y="702.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (291 samples, 8.44%)</title><rect x="40.4" y="675.0" width="99.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="686.0">java/util/co..</text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="40.8" y="659.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="43.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (38 samples, 1.10%)</title><rect x="41.1" y="659.0" width="13.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (38 samples, 1.10%)</title><rect x="41.1" y="643.0" width="13.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (38 samples, 1.10%)</title><rect x="41.1" y="627.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.1" y="638.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="41.1" y="611.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="44.1" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (36 samples, 1.04%)</title><rect x="41.5" y="611.0" width="12.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="44.5" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="41.5" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="44.5" y="606.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="41.5" y="579.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="44.5" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="41.8" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="44.8" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="41.8" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="44.8" y="574.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="41.8" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="44.8" y="558.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="41.8" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="44.8" y="542.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="41.8" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="44.8" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="42.2" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.2" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="42.5" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="45.5" y="606.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="42.5" y="579.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="45.5" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="42.8" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="45.8" y="606.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.06%)</title><rect x="43.2" y="579.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="46.2" y="590.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.78%)</title><rect x="43.9" y="595.0" width="9.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="46.9" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.06%)</title><rect x="53.1" y="595.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="56.1" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="53.5" y="579.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="56.5" y="590.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="53.8" y="611.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="56.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (249 samples, 7.22%)</title><rect x="54.1" y="659.0" width="85.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.1" y="670.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.06%)</title><rect x="54.8" y="643.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$154/474961723.apply (1 samples, 0.03%)</title><rect x="55.2" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.2" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$154/474961723.apply (245 samples, 7.10%)</title><rect x="55.5" y="643.0" width="83.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.5" y="654.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (245 samples, 7.10%)</title><rect x="55.5" y="627.0" width="83.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.5" y="638.0">jdk/inter..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (245 samples, 7.10%)</title><rect x="55.5" y="611.0" width="83.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="58.5" y="622.0">jdk/inter..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (1 samples, 0.03%)</title><rect x="55.5" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (1 samples, 0.03%)</title><rect x="55.5" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="55.5" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="55.8" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="55.8" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="55.8" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="55.8" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (198 samples, 5.74%)</title><rect x="56.2" y="595.0" width="67.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.2" y="606.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (198 samples, 5.74%)</title><rect x="56.2" y="579.0" width="67.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.2" y="590.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (198 samples, 5.74%)</title><rect x="56.2" y="563.0" width="67.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.2" y="574.0">jdk/int..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (91 samples, 2.64%)</title><rect x="56.2" y="547.0" width="31.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.2" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (91 samples, 2.64%)</title><rect x="56.2" y="531.0" width="31.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.2" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (91 samples, 2.64%)</title><rect x="56.2" y="515.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.2" y="526.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$351/2019708730.apply (91 samples, 2.64%)</title><rect x="56.2" y="499.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.2" y="510.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (91 samples, 2.64%)</title><rect x="56.2" y="483.0" width="31.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.2" y="494.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (91 samples, 2.64%)</title><rect x="56.2" y="467.0" width="31.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.2" y="478.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$197/68056152.apply (91 samples, 2.64%)</title><rect x="56.2" y="451.0" width="31.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.2" y="462.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (91 samples, 2.64%)</title><rect x="56.2" y="435.0" width="31.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.2" y="446.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (1 samples, 0.03%)</title><rect x="56.2" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (1 samples, 0.03%)</title><rect x="56.2" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (90 samples, 2.61%)</title><rect x="56.5" y="419.0" width="30.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.5" y="430.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (81 samples, 2.35%)</title><rect x="56.5" y="403.0" width="27.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.5" y="414.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (81 samples, 2.35%)</title><rect x="56.5" y="387.0" width="27.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.5" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="56.5" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.5" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="56.5" y="355.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="59.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$408/895303210.apply (80 samples, 2.32%)</title><rect x="56.9" y="371.0" width="27.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="382.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (80 samples, 2.32%)</title><rect x="56.9" y="355.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.9" y="366.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (4 samples, 0.12%)</title><rect x="56.9" y="339.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.9" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (4 samples, 0.12%)</title><rect x="56.9" y="323.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.12%)</title><rect x="56.9" y="307.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (4 samples, 0.12%)</title><rect x="56.9" y="291.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (4 samples, 0.12%)</title><rect x="56.9" y="275.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (4 samples, 0.12%)</title><rect x="56.9" y="259.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (2 samples, 0.06%)</title><rect x="56.9" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="59.9" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.06%)</title><rect x="57.6" y="243.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (1 samples, 0.03%)</title><rect x="57.6" y="227.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="60.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (1 samples, 0.03%)</title><rect x="57.9" y="227.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.03%)</title><rect x="57.9" y="211.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (1 samples, 0.03%)</title><rect x="57.9" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.9" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (1 samples, 0.03%)</title><rect x="57.9" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.9" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (1 samples, 0.03%)</title><rect x="57.9" y="163.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.9" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (1 samples, 0.03%)</title><rect x="57.9" y="147.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.9" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.03%)</title><rect x="57.9" y="131.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.9" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="57.9" y="115.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.9" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="57.9" y="99.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.9" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="57.9" y="83.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="60.9" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (1 samples, 0.03%)</title><rect x="57.9" y="67.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="60.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (1 samples, 0.03%)</title><rect x="57.9" y="51.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.9" y="62.0"></text>
</g>
<g>
<title>writev (1 samples, 0.03%)</title><rect x="57.9" y="35.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="60.9" y="46.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (30 samples, 0.87%)</title><rect x="58.2" y="339.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (30 samples, 0.87%)</title><rect x="58.2" y="323.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (1 samples, 0.03%)</title><rect x="58.2" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (1 samples, 0.03%)</title><rect x="58.2" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (1 samples, 0.03%)</title><rect x="58.2" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (6 samples, 0.17%)</title><rect x="58.6" y="307.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (6 samples, 0.17%)</title><rect x="58.6" y="291.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (2 samples, 0.06%)</title><rect x="58.6" y="275.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="61.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (4 samples, 0.12%)</title><rect x="59.3" y="275.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (2 samples, 0.06%)</title><rect x="59.3" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (2 samples, 0.06%)</title><rect x="59.3" y="243.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (2 samples, 0.06%)</title><rect x="59.3" y="227.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.3" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (2 samples, 0.06%)</title><rect x="60.0" y="259.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.0" y="270.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="60.3" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.3" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="60.3" y="227.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="63.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="60.3" y="211.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="63.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (23 samples, 0.67%)</title><rect x="60.6" y="307.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (23 samples, 0.67%)</title><rect x="60.6" y="291.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (23 samples, 0.67%)</title><rect x="60.6" y="275.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (19 samples, 0.55%)</title><rect x="60.6" y="259.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="63.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (19 samples, 0.55%)</title><rect x="60.6" y="243.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="63.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (18 samples, 0.52%)</title><rect x="61.0" y="227.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.0" y="238.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="62.3" y="211.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="65.3" y="222.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="62.3" y="195.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="65.3" y="206.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="62.3" y="179.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="65.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (13 samples, 0.38%)</title><rect x="62.7" y="211.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.7" y="222.0"></text>
</g>
<g>
<title>write (13 samples, 0.38%)</title><rect x="62.7" y="195.0" width="4.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="65.7" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (4 samples, 0.12%)</title><rect x="67.1" y="259.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.1" y="270.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="67.5" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="70.5" y="254.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="67.8" y="243.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="70.8" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="67.8" y="227.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="70.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="67.8" y="211.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="70.8" y="222.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="68.2" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="71.2" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="68.2" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="71.2" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="68.2" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="71.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (46 samples, 1.33%)</title><rect x="68.5" y="339.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="71.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.12%)</title><rect x="68.5" y="323.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.12%)</title><rect x="68.5" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.5" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeASCII (4 samples, 0.12%)</title><rect x="68.5" y="291.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="71.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (33 samples, 0.96%)</title><rect x="69.9" y="323.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.9" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (3 samples, 0.09%)</title><rect x="70.2" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.2" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.06%)</title><rect x="70.2" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="73.2" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.06%)</title><rect x="70.2" y="275.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.2" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.06%)</title><rect x="70.2" y="259.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.2" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.06%)</title><rect x="70.2" y="243.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.2" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.06%)</title><rect x="70.2" y="227.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="70.6" y="211.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="73.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="70.6" y="195.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="73.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="70.6" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.6" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.03%)</title><rect x="70.9" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (16 samples, 0.46%)</title><rect x="71.2" y="307.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="72.3" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.3" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="72.3" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.3" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (2 samples, 0.06%)</title><rect x="72.6" y="291.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.6" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (2 samples, 0.06%)</title><rect x="72.6" y="275.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.6" y="286.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="72.6" y="259.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="75.6" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.03%)</title><rect x="73.0" y="259.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="76.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.03%)</title><rect x="73.0" y="243.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="76.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.03%)</title><rect x="73.0" y="227.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.0" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="73.0" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.0" y="222.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$446/1530018831.test (8 samples, 0.23%)</title><rect x="73.3" y="291.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.3" y="302.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (8 samples, 0.23%)</title><rect x="73.3" y="275.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="76.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$87/888473870.test (5 samples, 0.14%)</title><rect x="74.3" y="259.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (5 samples, 0.14%)</title><rect x="74.3" y="243.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.3" y="254.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$80/1714550218.test (5 samples, 0.14%)</title><rect x="74.3" y="227.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.3" y="238.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (5 samples, 0.14%)</title><rect x="74.3" y="211.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$79/718068661.test (5 samples, 0.14%)</title><rect x="74.3" y="195.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (5 samples, 0.14%)</title><rect x="74.3" y="179.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="77.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.12%)</title><rect x="74.3" y="163.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.3" y="174.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.09%)</title><rect x="74.7" y="147.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="77.7" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.09%)</title><rect x="74.7" y="131.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="77.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="75.7" y="163.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.7" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="76.0" y="291.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="79.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$87/888473870.test (1 samples, 0.03%)</title><rect x="76.4" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (13 samples, 0.38%)</title><rect x="76.7" y="307.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.7" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (13 samples, 0.38%)</title><rect x="76.7" y="291.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="79.7" y="302.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (13 samples, 0.38%)</title><rect x="76.7" y="275.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="79.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (13 samples, 0.38%)</title><rect x="76.7" y="259.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="79.7" y="270.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (12 samples, 0.35%)</title><rect x="77.1" y="243.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.1" y="254.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (12 samples, 0.35%)</title><rect x="77.1" y="227.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.1" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (5 samples, 0.14%)</title><rect x="77.1" y="211.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.1" y="222.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="77.1" y="195.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="80.1" y="206.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (3 samples, 0.09%)</title><rect x="77.4" y="195.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.4" y="206.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.09%)</title><rect x="77.4" y="179.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$76/1373419525.test (1 samples, 0.03%)</title><rect x="78.4" y="195.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.4" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (7 samples, 0.20%)</title><rect x="78.8" y="211.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="81.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="80.5" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.5" y="206.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="80.5" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.5" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="80.5" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.5" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="80.8" y="195.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.8" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (4 samples, 0.12%)</title><rect x="81.2" y="323.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (4 samples, 0.12%)</title><rect x="81.2" y="307.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (5 samples, 0.14%)</title><rect x="82.5" y="323.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.5" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.03%)</title><rect x="83.6" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.6" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="83.9" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="86.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (9 samples, 0.26%)</title><rect x="84.2" y="403.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (9 samples, 0.26%)</title><rect x="84.2" y="387.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (9 samples, 0.26%)</title><rect x="84.2" y="371.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (9 samples, 0.26%)</title><rect x="84.2" y="355.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (5 samples, 0.14%)</title><rect x="85.6" y="339.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (5 samples, 0.14%)</title><rect x="85.6" y="323.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (5 samples, 0.14%)</title><rect x="85.6" y="307.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (5 samples, 0.14%)</title><rect x="85.6" y="291.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (5 samples, 0.14%)</title><rect x="85.6" y="275.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.6" y="286.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="85.6" y="259.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="88.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (3 samples, 0.09%)</title><rect x="86.3" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="87.3" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="87.3" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="87.3" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.3" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="87.3" y="499.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="90.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (106 samples, 3.07%)</title><rect x="87.7" y="547.0" width="36.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.7" y="558.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="87.7" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="87.7" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="87.7" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.7" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$346/2092764557.apply (1 samples, 0.03%)</title><rect x="87.7" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="90.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.06%)</title><rect x="88.0" y="531.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.03%)</title><rect x="88.3" y="515.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="88.3" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="88.3" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$337/1386664033.accept (1 samples, 0.03%)</title><rect x="88.3" y="467.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (103 samples, 2.99%)</title><rect x="88.7" y="531.0" width="35.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.7" y="542.0">jdk..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (88 samples, 2.55%)</title><rect x="88.7" y="515.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.7" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="88.7" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (87 samples, 2.52%)</title><rect x="89.0" y="499.0" width="29.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.0" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (84 samples, 2.44%)</title><rect x="89.0" y="483.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.0" y="494.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$208/234148462.apply (84 samples, 2.44%)</title><rect x="89.0" y="467.0" width="28.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.0" y="478.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$get$0 (84 samples, 2.44%)</title><rect x="89.0" y="451.0" width="28.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.0" y="462.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createExchangeImpl (84 samples, 2.44%)</title><rect x="89.0" y="435.0" width="28.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.0" y="446.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (32 samples, 0.93%)</title><rect x="89.0" y="419.0" width="11.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (29 samples, 0.84%)</title><rect x="90.1" y="403.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (29 samples, 0.84%)</title><rect x="90.1" y="387.0" width="9.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$331/604314710.apply (29 samples, 0.84%)</title><rect x="90.1" y="371.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (29 samples, 0.84%)</title><rect x="90.1" y="355.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (29 samples, 0.84%)</title><rect x="90.1" y="339.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (29 samples, 0.84%)</title><rect x="90.1" y="323.0" width="9.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (26 samples, 0.75%)</title><rect x="90.1" y="307.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.1" y="318.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (2 samples, 0.06%)</title><rect x="90.4" y="291.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.4" y="302.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (2 samples, 0.06%)</title><rect x="90.4" y="275.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.4" y="286.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode0 (1 samples, 0.03%)</title><rect x="90.7" y="259.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.7" y="270.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeBlock (1 samples, 0.03%)</title><rect x="90.7" y="243.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getClientSettings (21 samples, 0.61%)</title><rect x="91.1" y="291.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getParameter (21 samples, 0.61%)</title><rect x="91.1" y="275.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getIntegerNetProperty (21 samples, 0.61%)</title><rect x="91.1" y="259.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.1" y="270.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (20 samples, 0.58%)</title><rect x="91.4" y="243.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="94.4" y="254.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (12 samples, 0.35%)</title><rect x="91.8" y="227.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="94.8" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="92.8" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="95.8" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="93.1" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="96.1" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="93.1" y="195.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="96.1" y="206.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="93.1" y="179.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="96.1" y="190.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="93.5" y="211.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="96.5" y="222.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="93.5" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="96.5" y="206.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.06%)</title><rect x="93.8" y="195.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="96.8" y="206.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="94.2" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="97.2" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="94.5" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="97.5" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="94.5" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.5" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="94.5" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.5" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="94.5" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.5" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="94.5" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="97.5" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="94.5" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="97.5" y="142.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="94.8" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="97.8" y="222.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="94.8" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="97.8" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.06%)</title><rect x="95.2" y="211.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.2" y="222.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (2 samples, 0.06%)</title><rect x="95.2" y="195.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.2" y="206.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="95.2" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="98.2" y="190.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="95.2" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.2" y="174.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="95.2" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="98.2" y="158.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="95.2" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="98.2" y="142.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="95.5" y="179.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="98.5" y="190.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="95.5" y="163.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="98.5" y="174.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="95.5" y="147.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="98.5" y="158.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="95.9" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="98.9" y="238.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="96.2" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="99.2" y="238.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2 (1 samples, 0.03%)</title><rect x="96.6" y="227.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="99.6" y="238.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.03%)</title><rect x="96.9" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="99.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$75/1932274274.run (2 samples, 0.06%)</title><rect x="97.2" y="227.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.2" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$getIntegerNetProperty$11 (2 samples, 0.06%)</title><rect x="97.2" y="211.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.2" y="222.0"></text>
</g>
<g>
<title>sun/net/NetProperties.getInteger (2 samples, 0.06%)</title><rect x="97.2" y="195.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="100.2" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="97.6" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.6" y="190.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="97.9" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.9" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteArray (2 samples, 0.06%)</title><rect x="98.3" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="98.3" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.3" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="98.3" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="98.3" y="243.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.length (1 samples, 0.03%)</title><rect x="98.6" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="101.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (3 samples, 0.09%)</title><rect x="99.0" y="307.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.0" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (2 samples, 0.06%)</title><rect x="99.3" y="291.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="99.3" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.3" y="286.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="99.3" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.3" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="99.3" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.3" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="99.6" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (52 samples, 1.51%)</title><rect x="100.0" y="419.0" width="17.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="103.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (51 samples, 1.48%)</title><rect x="100.3" y="403.0" width="17.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (2 samples, 0.06%)</title><rect x="100.3" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="103.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.&lt;init&gt; (2 samples, 0.06%)</title><rect x="100.3" y="371.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (10 samples, 0.29%)</title><rect x="101.0" y="387.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="104.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (7 samples, 0.20%)</title><rect x="101.7" y="371.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.7" y="382.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="102.4" y="355.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="105.4" y="366.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="102.4" y="339.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="105.4" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.06%)</title><rect x="102.4" y="323.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="105.4" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="102.7" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="105.7" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (3 samples, 0.09%)</title><rect x="103.1" y="355.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="103.4" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="103.4" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (1 samples, 0.03%)</title><rect x="103.4" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.4" y="318.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.03%)</title><rect x="103.4" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.4" y="302.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (1 samples, 0.03%)</title><rect x="103.4" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.4" y="286.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (1 samples, 0.03%)</title><rect x="103.4" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.remove (1 samples, 0.03%)</title><rect x="103.7" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.7" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.03%)</title><rect x="103.7" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.7" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.03%)</title><rect x="103.7" y="307.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.7" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.03%)</title><rect x="103.7" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="106.7" y="302.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (1 samples, 0.03%)</title><rect x="103.7" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.isOpen (1 samples, 0.03%)</title><rect x="104.1" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connected (1 samples, 0.03%)</title><rect x="104.1" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="107.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (39 samples, 1.13%)</title><rect x="104.4" y="387.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.4" y="398.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (37 samples, 1.07%)</title><rect x="105.1" y="371.0" width="12.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.1" y="382.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="105.5" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="108.5" y="366.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (26 samples, 0.75%)</title><rect x="105.8" y="355.0" width="8.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="108.8" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="106.1" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="109.1" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (4 samples, 0.12%)</title><rect x="106.5" y="339.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="109.5" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (3 samples, 0.09%)</title><rect x="106.8" y="323.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="109.8" y="334.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.06%)</title><rect x="106.8" y="307.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="109.8" y="318.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="107.5" y="307.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="110.5" y="318.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="107.8" y="339.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="110.8" y="350.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="108.2" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="111.2" y="334.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="108.5" y="323.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="111.5" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="108.5" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="111.5" y="318.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.12%)</title><rect x="108.9" y="339.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="111.9" y="350.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="109.2" y="323.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="112.2" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="109.2" y="307.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="112.2" y="318.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.06%)</title><rect x="109.6" y="323.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="112.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="110.2" y="339.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="113.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="110.2" y="323.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="113.2" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="110.2" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.2" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="110.2" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="113.2" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="110.2" y="275.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="113.2" y="286.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="110.2" y="259.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="113.2" y="270.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="110.6" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="113.6" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (11 samples, 0.32%)</title><rect x="110.9" y="339.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="113.9" y="350.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (5 samples, 0.14%)</title><rect x="110.9" y="323.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="113.9" y="334.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.06%)</title><rect x="112.0" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="115.0" y="318.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (6 samples, 0.17%)</title><rect x="112.6" y="323.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="115.6" y="334.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="112.6" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="115.6" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.06%)</title><rect x="113.0" y="307.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="116.0" y="318.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.06%)</title><rect x="113.0" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="116.0" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="113.0" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="116.0" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="113.0" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="116.0" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="113.0" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="116.0" y="254.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="113.3" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="116.3" y="286.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.06%)</title><rect x="113.7" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="116.7" y="318.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="114.3" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="117.3" y="318.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="114.3" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="117.3" y="302.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.03%)</title><rect x="114.3" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="117.3" y="286.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="114.7" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="117.7" y="366.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="115.0" y="355.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="118.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$231/2052440742.run (5 samples, 0.14%)</title><rect x="115.4" y="355.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="118.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (5 samples, 0.14%)</title><rect x="115.4" y="339.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.4" y="350.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (5 samples, 0.14%)</title><rect x="115.4" y="323.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.4" y="334.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (5 samples, 0.14%)</title><rect x="115.4" y="307.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="118.4" y="318.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (5 samples, 0.14%)</title><rect x="115.4" y="291.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.4" y="302.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (3 samples, 0.09%)</title><rect x="116.1" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.1" y="286.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (2 samples, 0.06%)</title><rect x="116.4" y="259.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.4" y="270.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="116.7" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="119.7" y="254.0"></text>
</g>
<g>
<title>jsqrt (2 samples, 0.06%)</title><rect x="117.1" y="355.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="120.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.09%)</title><rect x="117.8" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.09%)</title><rect x="117.8" y="467.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="120.8" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="118.1" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="121.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$208/234148462.apply (1 samples, 0.03%)</title><rect x="118.5" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="121.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.06%)</title><rect x="118.8" y="515.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="121.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.06%)</title><rect x="118.8" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="121.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="118.8" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.8" y="494.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="118.8" y="467.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="121.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="119.1" y="483.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="119.1" y="467.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.version (1 samples, 0.03%)</title><rect x="119.5" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="122.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getConnectionFor (12 samples, 0.35%)</title><rect x="119.8" y="515.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="122.8" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyFor (9 samples, 0.26%)</title><rect x="120.2" y="499.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="120.2" y="483.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="123.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.version (1 samples, 0.03%)</title><rect x="120.2" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyString (8 samples, 0.23%)</title><rect x="120.5" y="483.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.5" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1377865909.linkToTargetMethod (8 samples, 0.23%)</title><rect x="120.5" y="467.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.5" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1557127930.invoke (8 samples, 0.23%)</title><rect x="120.5" y="451.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.5" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="120.5" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.5" y="446.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.03%)</title><rect x="120.5" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1456441596.invoke (7 samples, 0.20%)</title><rect x="120.8" y="435.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.8" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.12%)</title><rect x="120.8" y="419.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="123.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.mixLen (1 samples, 0.03%)</title><rect x="120.8" y="403.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (1 samples, 0.03%)</title><rect x="120.8" y="387.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="121.2" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="124.2" y="414.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.06%)</title><rect x="121.5" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="121.5" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.5" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="121.9" y="371.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="124.9" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254526270.invoke (3 samples, 0.09%)</title><rect x="122.2" y="419.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.2" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.09%)</title><rect x="122.2" y="403.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.2" y="414.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (3 samples, 0.09%)</title><rect x="122.2" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.09%)</title><rect x="122.2" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.2" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="122.2" y="355.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="125.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (2 samples, 0.06%)</title><rect x="123.2" y="499.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.03%)</title><rect x="123.2" y="483.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.03%)</title><rect x="123.2" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.&lt;init&gt; (1 samples, 0.03%)</title><rect x="123.6" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.03%)</title><rect x="123.6" y="467.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (22 samples, 0.64%)</title><rect x="123.9" y="595.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.wakeupSelector (21 samples, 0.61%)</title><rect x="124.3" y="579.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (21 samples, 0.61%)</title><rect x="124.3" y="563.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="127.3" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="126.0" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="129.0" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="126.0" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="129.0" y="542.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="126.0" y="515.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="129.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (15 samples, 0.43%)</title><rect x="126.3" y="547.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.3" y="558.0"></text>
</g>
<g>
<title>write (15 samples, 0.43%)</title><rect x="126.3" y="531.0" width="5.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="129.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (4 samples, 0.12%)</title><rect x="131.5" y="595.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.5" y="606.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.12%)</title><rect x="131.5" y="579.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="134.5" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (4 samples, 0.12%)</title><rect x="131.5" y="563.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="134.5" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="131.8" y="547.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="134.8" y="558.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (2 samples, 0.06%)</title><rect x="132.1" y="547.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="135.1" y="558.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.06%)</title><rect x="132.1" y="531.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="135.1" y="542.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.06%)</title><rect x="132.1" y="515.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="135.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (16 samples, 0.46%)</title><rect x="132.8" y="595.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (15 samples, 0.43%)</title><rect x="132.8" y="579.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (15 samples, 0.43%)</title><rect x="132.8" y="563.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.8" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.14%)</title><rect x="133.5" y="547.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="136.5" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.14%)</title><rect x="133.5" y="531.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="136.5" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.14%)</title><rect x="133.5" y="515.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="136.5" y="526.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (8 samples, 0.23%)</title><rect x="135.2" y="547.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="138.2" y="558.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (1 samples, 0.03%)</title><rect x="135.2" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.2" y="542.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (1 samples, 0.03%)</title><rect x="135.2" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.03%)</title><rect x="135.2" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.03%)</title><rect x="135.2" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.2" y="494.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (7 samples, 0.20%)</title><rect x="135.6" y="531.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (7 samples, 0.20%)</title><rect x="135.6" y="515.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.6" y="526.0"></text>
</g>
<g>
<title>JVM_IHashCode (6 samples, 0.17%)</title><rect x="135.6" y="499.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="138.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.06%)</title><rect x="136.9" y="483.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="139.9" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="136.9" y="467.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="139.9" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="137.3" y="451.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="140.3" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="137.3" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="140.3" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="137.3" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="140.3" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="137.3" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="140.3" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="137.3" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="140.3" y="398.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="137.6" y="499.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="140.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.request (1 samples, 0.03%)</title><rect x="138.0" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (3 samples, 0.09%)</title><rect x="138.3" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (3 samples, 0.09%)</title><rect x="138.3" y="579.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="141.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (3 samples, 0.09%)</title><rect x="138.3" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.3" y="574.0"></text>
</g>
<g>
<title>java/time/Instant.now (3 samples, 0.09%)</title><rect x="138.3" y="547.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.3" y="558.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (3 samples, 0.09%)</title><rect x="138.3" y="531.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$597/1897477583.get (1 samples, 0.03%)</title><rect x="139.3" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.3" y="670.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="139.7" y="659.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="142.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$597/1897477583.get (191 samples, 5.54%)</title><rect x="140.0" y="675.0" width="65.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.0" y="686.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.lambda$multipleGet$0 (191 samples, 5.54%)</title><rect x="140.0" y="659.0" width="65.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="143.0" y="670.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.getValue (191 samples, 5.54%)</title><rect x="140.0" y="643.0" width="65.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="143.0" y="654.0">ru/mail..</text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.getValueFromBytes (190 samples, 5.51%)</title><rect x="140.0" y="627.0" width="65.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.0" y="638.0">ru/mail..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (179 samples, 5.19%)</title><rect x="140.0" y="611.0" width="61.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.0" y="622.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (179 samples, 5.19%)</title><rect x="140.0" y="595.0" width="61.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="143.0" y="606.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (179 samples, 5.19%)</title><rect x="140.0" y="579.0" width="61.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="143.0" y="590.0">Java_o..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="140.7" y="563.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="143.7" y="574.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.06%)</title><rect x="141.4" y="563.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="144.4" y="574.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="142.1" y="563.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="145.1" y="574.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.12%)</title><rect x="142.4" y="563.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="145.4" y="574.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (168 samples, 4.87%)</title><rect x="143.8" y="563.0" width="57.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="146.8" y="574.0">rocksd..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="144.8" y="547.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="147.8" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (16 samples, 0.46%)</title><rect x="145.1" y="547.0" width="5.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="148.1" y="558.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="145.5" y="531.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="148.5" y="542.0"></text>
</g>
<g>
<title>OrderAccess::fence() (2 samples, 0.06%)</title><rect x="145.8" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="148.8" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="146.5" y="531.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="149.5" y="542.0"></text>
</g>
<g>
<title>jni_NewByteArray (10 samples, 0.29%)</title><rect x="146.9" y="531.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="149.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="147.9" y="515.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="150.9" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="147.9" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="150.9" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="147.9" y="483.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="150.9" y="494.0"></text>
</g>
<g>
<title>Thread::polling_page_addr() (1 samples, 0.03%)</title><rect x="147.9" y="467.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="150.9" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.17%)</title><rect x="148.2" y="515.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="151.2" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.09%)</title><rect x="148.9" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="151.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.09%)</title><rect x="148.9" y="483.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="151.9" y="494.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.03%)</title><rect x="148.9" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="151.9" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="149.2" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="152.2" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="149.2" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="152.2" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="149.2" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="152.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="149.2" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="152.2" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="149.2" y="403.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="152.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="149.2" y="387.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="152.2" y="398.0"></text>
</g>
<g>
<title>G1Policy::should_allocate_mutator_region() const (1 samples, 0.03%)</title><rect x="149.2" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="152.2" y="382.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="149.6" y="467.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="152.6" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="149.9" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="152.9" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="150.3" y="531.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="153.3" y="542.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="150.3" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="153.3" y="526.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="150.6" y="547.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="153.6" y="558.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.09%)</title><rect x="151.0" y="547.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="154.0" y="558.0"></text>
</g>
<g>
<title>tiny_free_no_lock (3 samples, 0.09%)</title><rect x="151.0" y="531.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="154.0" y="542.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.06%)</title><rect x="151.0" y="515.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="154.0" y="526.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="151.6" y="515.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="154.6" y="526.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.12%)</title><rect x="152.0" y="547.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="155.0" y="558.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="152.7" y="531.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="155.7" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="153.0" y="531.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="156.0" y="542.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="153.0" y="515.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="156.0" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.14%)</title><rect x="153.4" y="547.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="156.4" y="558.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="154.0" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="157.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="154.4" y="531.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="157.4" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="154.4" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="157.4" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="154.4" y="499.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="157.4" y="510.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="154.4" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.4" y="494.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="154.4" y="467.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="157.4" y="478.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="154.4" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="157.4" y="462.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="154.7" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="157.7" y="542.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.06%)</title><rect x="155.1" y="547.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="158.1" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="155.7" y="547.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="158.7" y="558.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="156.1" y="547.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="159.1" y="558.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="156.4" y="547.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="159.4" y="558.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="156.4" y="531.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="159.4" y="542.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="156.4" y="515.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="159.4" y="526.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="156.4" y="499.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="159.4" y="510.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="156.4" y="483.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="159.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (128 samples, 3.71%)</title><rect x="156.8" y="547.0" width="43.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="159.8" y="558.0">rock..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (126 samples, 3.65%)</title><rect x="156.8" y="531.0" width="43.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="159.8" y="542.0">rock..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (4 samples, 0.12%)</title><rect x="157.1" y="515.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="160.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.03%)</title><rect x="157.1" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="160.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.06%)</title><rect x="157.5" y="499.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="160.5" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="157.5" y="483.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="160.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="158.1" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="161.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (120 samples, 3.48%)</title><rect x="158.5" y="515.0" width="41.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="161.5" y="526.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (120 samples, 3.48%)</title><rect x="158.5" y="499.0" width="41.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="161.5" y="510.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (118 samples, 3.42%)</title><rect x="158.5" y="483.0" width="40.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="161.5" y="494.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (4 samples, 0.12%)</title><rect x="159.5" y="467.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="162.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="160.2" y="451.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="163.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="160.5" y="451.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="163.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="160.5" y="435.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="163.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (4 samples, 0.12%)</title><rect x="160.9" y="467.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="163.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.06%)</title><rect x="161.2" y="451.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="164.2" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="161.2" y="435.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="164.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="161.6" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="164.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="161.9" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="164.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="162.2" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="165.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (16 samples, 0.46%)</title><rect x="162.6" y="467.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="165.6" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="162.6" y="451.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="165.6" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="162.9" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="165.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.41%)</title><rect x="163.3" y="451.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="166.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (3 samples, 0.09%)</title><rect x="165.7" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="168.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="166.0" y="419.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.0" y="430.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="166.4" y="403.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="169.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.12%)</title><rect x="166.7" y="435.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="169.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="167.7" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="170.7" y="430.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="167.7" y="403.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="170.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="168.1" y="467.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="171.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="168.7" y="467.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="171.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (87 samples, 2.52%)</title><rect x="169.1" y="467.0" width="29.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="172.1" y="478.0">ro..</text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (2 samples, 0.06%)</title><rect x="170.8" y="451.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="173.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (80 samples, 2.32%)</title><rect x="171.5" y="451.0" width="27.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.5" y="462.0">r..</text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.06%)</title><rect x="172.2" y="435.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="175.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (74 samples, 2.15%)</title><rect x="172.9" y="435.0" width="25.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="175.9" y="446.0">r..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="174.9" y="419.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="177.9" y="430.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="175.6" y="419.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="178.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (6 samples, 0.17%)</title><rect x="175.9" y="419.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="178.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (5 samples, 0.14%)</title><rect x="176.3" y="403.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="179.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (5 samples, 0.14%)</title><rect x="176.3" y="387.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.3" y="398.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.09%)</title><rect x="177.0" y="371.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="180.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (4 samples, 0.12%)</title><rect x="178.0" y="419.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="181.0" y="430.0"></text>
</g>
<g>
<title>free (3 samples, 0.09%)</title><rect x="178.0" y="403.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="181.0" y="414.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.09%)</title><rect x="178.0" y="387.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="181.0" y="398.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.06%)</title><rect x="178.3" y="371.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="181.3" y="382.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="179.0" y="403.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="182.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (1 samples, 0.03%)</title><rect x="179.4" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="182.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (1 samples, 0.03%)</title><rect x="179.7" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="182.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (1 samples, 0.03%)</title><rect x="180.0" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="183.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (19 samples, 0.55%)</title><rect x="180.4" y="419.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="183.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (19 samples, 0.55%)</title><rect x="180.4" y="403.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="183.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (17 samples, 0.49%)</title><rect x="180.7" y="387.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="183.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (13 samples, 0.38%)</title><rect x="181.4" y="371.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="184.4" y="382.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (2 samples, 0.06%)</title><rect x="182.1" y="355.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="185.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.03%)</title><rect x="182.8" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="185.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (5 samples, 0.14%)</title><rect x="183.1" y="355.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="186.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.09%)</title><rect x="183.8" y="339.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="186.8" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.09%)</title><rect x="183.8" y="323.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="186.8" y="334.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.09%)</title><rect x="183.8" y="307.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="186.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.06%)</title><rect x="184.8" y="355.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.03%)</title><rect x="185.5" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="188.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (2 samples, 0.06%)</title><rect x="185.9" y="371.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="188.9" y="382.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (1 samples, 0.03%)</title><rect x="186.5" y="387.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="189.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (1 samples, 0.03%)</title><rect x="186.9" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="189.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (18 samples, 0.52%)</title><rect x="187.2" y="419.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="190.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (18 samples, 0.52%)</title><rect x="187.2" y="403.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="190.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (4 samples, 0.12%)</title><rect x="188.6" y="387.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="191.6" y="398.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="189.6" y="371.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="192.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (9 samples, 0.26%)</title><rect x="190.0" y="387.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="193.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="192.0" y="371.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="195.0" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="192.4" y="355.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="195.4" y="366.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="192.7" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="195.7" y="382.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="193.0" y="387.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="196.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (1 samples, 0.03%)</title><rect x="193.4" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="196.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (13 samples, 0.38%)</title><rect x="193.7" y="419.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="196.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (12 samples, 0.35%)</title><rect x="193.7" y="403.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="196.7" y="414.0"></text>
</g>
<g>
<title>Java_org_rocksdb_WriteBatchTestInternalHelper_append (3 samples, 0.09%)</title><rect x="195.4" y="387.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="198.4" y="398.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="195.8" y="371.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="198.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (1 samples, 0.03%)</title><rect x="196.5" y="387.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="199.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (1 samples, 0.03%)</title><rect x="196.8" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="199.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (1 samples, 0.03%)</title><rect x="196.8" y="371.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="199.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (1 samples, 0.03%)</title><rect x="196.8" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.8" y="366.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="197.1" y="387.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="200.1" y="398.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="197.1" y="371.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="200.1" y="382.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="197.8" y="403.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="200.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="198.2" y="435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="201.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="198.5" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="201.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="198.9" y="483.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="201.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="199.2" y="483.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="202.2" y="494.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="199.5" y="515.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="202.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.03%)</title><rect x="199.9" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="202.9" y="542.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="200.2" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="203.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.06%)</title><rect x="200.6" y="547.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="203.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (11 samples, 0.32%)</title><rect x="201.2" y="611.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="202.6" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="205.6" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.6" y="579.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="205.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="202.6" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="205.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="202.6" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="205.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="202.6" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="205.6" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="202.6" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="205.6" y="526.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="202.6" y="499.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="205.6" y="510.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="203.0" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="206.0" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="203.3" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.09%)</title><rect x="203.6" y="595.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.6" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="203.6" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="206.6" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="204.0" y="579.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="204.0" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.0" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="204.0" y="547.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="204.0" y="531.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="204.0" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="204.3" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="204.3" y="515.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.3" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="204.3" y="499.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.3" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="204.7" y="595.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="207.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.composeFromBytes (1 samples, 0.03%)</title><rect x="205.0" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="205.0" y="611.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="208.0" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="208.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="205.0" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="208.0" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="205.0" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="208.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="205.0" y="547.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="208.0" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="205.0" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="208.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (28 samples, 0.81%)</title><rect x="205.4" y="691.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (28 samples, 0.81%)</title><rect x="205.4" y="675.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (28 samples, 0.81%)</title><rect x="205.4" y="659.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="208.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (28 samples, 0.81%)</title><rect x="205.4" y="643.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.4" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="205.7" y="627.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="208.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (24 samples, 0.70%)</title><rect x="206.0" y="627.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 0.67%)</title><rect x="206.4" y="611.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.67%)</title><rect x="206.4" y="595.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.4" y="606.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.06%)</title><rect x="207.1" y="579.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="210.1" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.55%)</title><rect x="207.8" y="579.0" width="6.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="210.8" y="590.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="207.8" y="563.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="210.8" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="208.1" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="211.1" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (17 samples, 0.49%)</title><rect x="208.4" y="563.0" width="5.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="211.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$599/472507524.apply (2 samples, 0.06%)</title><rect x="214.3" y="627.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (679 samples, 19.69%)</title><rect x="214.9" y="691.0" width="232.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="217.9" y="702.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="215.6" y="675.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="218.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (674 samples, 19.54%)</title><rect x="216.3" y="675.0" width="230.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.3" y="686.0">java/util/concurrent/ArrayBloc..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.06%)</title><rect x="218.0" y="659.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (560 samples, 16.24%)</title><rect x="218.7" y="659.0" width="191.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.7" y="670.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.23%)</title><rect x="219.0" y="643.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.23%)</title><rect x="219.0" y="627.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.23%)</title><rect x="219.0" y="611.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.20%)</title><rect x="219.4" y="595.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.4" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.20%)</title><rect x="219.4" y="579.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="222.4" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.20%)</title><rect x="219.4" y="563.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="222.4" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="219.4" y="547.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="222.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (25 samples, 0.72%)</title><rect x="221.8" y="643.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (25 samples, 0.72%)</title><rect x="221.8" y="627.0" width="8.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 0.72%)</title><rect x="221.8" y="611.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="224.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 0.72%)</title><rect x="221.8" y="595.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (24 samples, 0.70%)</title><rect x="222.1" y="579.0" width="8.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.1" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (23 samples, 0.67%)</title><rect x="222.5" y="563.0" width="7.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="225.5" y="574.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="222.5" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="225.5" y="558.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="222.5" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="225.5" y="542.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="222.8" y="547.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="225.8" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="223.1" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="226.1" y="558.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="223.1" y="531.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="226.1" y="542.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="223.5" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="226.5" y="558.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="223.5" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="226.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvsignal (16 samples, 0.46%)</title><rect x="223.8" y="547.0" width="5.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="226.8" y="558.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.06%)</title><rect x="229.3" y="547.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="232.3" y="558.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="229.6" y="531.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="232.6" y="542.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="230.0" y="547.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="233.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.20%)</title><rect x="230.3" y="643.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.20%)</title><rect x="230.3" y="627.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="233.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (519 samples, 15.05%)</title><rect x="232.7" y="643.0" width="177.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.7" y="654.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="233.1" y="627.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (517 samples, 14.99%)</title><rect x="233.4" y="627.0" width="176.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.4" y="638.0">jdk/internal/misc/Unsaf..</text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="243.3" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.3" y="622.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="243.7" y="611.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.7" y="622.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="244.0" y="611.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="247.0" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="244.4" y="611.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="247.4" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (483 samples, 14.00%)</title><rect x="244.7" y="611.0" width="165.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="247.7" y="622.0">Unsafe_Park(JNIEnv_*,..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.09%)</title><rect x="245.0" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="248.0" y="606.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.09%)</title><rect x="245.0" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="248.0" y="590.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (2 samples, 0.06%)</title><rect x="246.1" y="595.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="249.1" y="606.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (6 samples, 0.17%)</title><rect x="246.8" y="595.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="249.8" y="606.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="247.4" y="579.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="250.4" y="590.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive(JavaThread*) (1 samples, 0.03%)</title><rect x="247.4" y="563.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="250.4" y="574.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="247.8" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="250.8" y="574.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.06%)</title><rect x="248.1" y="579.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="251.1" y="590.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.06%)</title><rect x="248.1" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="251.1" y="574.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="248.8" y="595.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="251.8" y="606.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="248.8" y="579.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="251.8" y="590.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="249.1" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.1" y="606.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (452 samples, 13.11%)</title><rect x="249.5" y="595.0" width="154.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="252.5" y="606.0">Parker::park(bool, l..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.09%)</title><rect x="250.5" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.5" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.06%)</title><rect x="250.9" y="563.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="253.9" y="574.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="251.5" y="579.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="254.5" y="590.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="251.5" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.5" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (435 samples, 12.61%)</title><rect x="251.9" y="579.0" width="148.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="254.9" y="590.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (6 samples, 0.17%)</title><rect x="400.7" y="579.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="403.7" y="590.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="401.4" y="563.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="404.4" y="574.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.09%)</title><rect x="401.7" y="563.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="404.7" y="574.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="402.8" y="579.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="405.8" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.09%)</title><rect x="403.1" y="579.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="406.1" y="590.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="404.1" y="595.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="407.1" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="404.5" y="595.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="407.5" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (6 samples, 0.17%)</title><rect x="404.8" y="595.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="407.8" y="606.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="404.8" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="407.8" y="590.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.12%)</title><rect x="405.2" y="579.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="408.2" y="590.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4 samples, 0.12%)</title><rect x="405.2" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="408.2" y="574.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.12%)</title><rect x="405.2" y="547.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="408.2" y="558.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="405.2" y="531.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.2" y="542.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="405.5" y="531.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="408.5" y="542.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="405.8" y="531.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="408.8" y="542.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="406.2" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="409.2" y="526.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="406.2" y="499.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="409.2" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="406.5" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="409.5" y="590.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="406.9" y="595.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="409.9" y="606.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="407.2" y="595.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="410.2" y="606.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.03%)</title><rect x="407.6" y="595.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="410.6" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="407.9" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="410.9" y="606.0"></text>
</g>
<g>
<title>pthread_cond_wait (2 samples, 0.06%)</title><rect x="408.2" y="595.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="411.2" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="408.9" y="595.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="411.9" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="409.3" y="595.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="412.3" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="409.9" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="412.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (35 samples, 1.01%)</title><rect x="410.3" y="659.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (35 samples, 1.01%)</title><rect x="410.3" y="643.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="413.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (35 samples, 1.01%)</title><rect x="410.3" y="627.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="410.3" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (34 samples, 0.99%)</title><rect x="410.6" y="611.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="413.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (34 samples, 0.99%)</title><rect x="410.6" y="595.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (34 samples, 0.99%)</title><rect x="410.6" y="579.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.6" y="590.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (34 samples, 0.99%)</title><rect x="410.6" y="563.0" width="11.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="413.6" y="574.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 0.99%)</title><rect x="410.6" y="547.0" width="11.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="413.6" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (31 samples, 0.90%)</title><rect x="411.0" y="531.0" width="10.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="414.0" y="542.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="421.6" y="531.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="424.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (72 samples, 2.09%)</title><rect x="422.3" y="659.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.3" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (72 samples, 2.09%)</title><rect x="422.3" y="643.0" width="24.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="425.3" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (72 samples, 2.09%)</title><rect x="422.3" y="627.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.3" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (72 samples, 2.09%)</title><rect x="422.3" y="611.0" width="24.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.3" y="622.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (70 samples, 2.03%)</title><rect x="422.9" y="595.0" width="24.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.9" y="606.0">j..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="422.9" y="579.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="425.9" y="590.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="423.3" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.3" y="590.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="423.6" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="426.6" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="424.0" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="427.0" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.09%)</title><rect x="424.3" y="579.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="427.3" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (63 samples, 1.83%)</title><rect x="425.3" y="579.0" width="21.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="428.3" y="590.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="425.3" y="563.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="428.3" y="574.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="425.3" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="428.3" y="558.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="425.7" y="563.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="428.7" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="426.0" y="563.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="429.0" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="426.4" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.4" y="574.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="426.4" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="429.4" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.09%)</title><rect x="426.7" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="429.7" y="574.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.06%)</title><rect x="427.1" y="547.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="430.1" y="558.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="427.1" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="430.1" y="542.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="427.4" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="430.4" y="526.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="427.4" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="430.4" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.06%)</title><rect x="427.7" y="563.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="430.7" y="574.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="428.1" y="547.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="431.1" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="428.4" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="431.4" y="574.0"></text>
</g>
<g>
<title>__psynch_cvsignal (47 samples, 1.36%)</title><rect x="429.4" y="563.0" width="16.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="432.4" y="574.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="445.5" y="563.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="448.5" y="574.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="445.5" y="547.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="448.5" y="558.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.03%)</title><rect x="445.9" y="563.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="448.9" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="446.2" y="563.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="449.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (1 samples, 0.03%)</title><rect x="446.9" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="449.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="446.9" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="449.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (1 samples, 0.03%)</title><rect x="446.9" y="643.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="446.9" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="446.9" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$445/383899907.run (163 samples, 4.73%)</title><rect x="447.2" y="691.0" width="55.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.2" y="702.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (162 samples, 4.70%)</title><rect x="447.6" y="675.0" width="55.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.6" y="686.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (162 samples, 4.70%)</title><rect x="447.6" y="659.0" width="55.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.6" y="670.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (160 samples, 4.64%)</title><rect x="448.3" y="643.0" width="54.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.3" y="654.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (160 samples, 4.64%)</title><rect x="448.3" y="627.0" width="54.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="451.3" y="638.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (160 samples, 4.64%)</title><rect x="448.3" y="611.0" width="54.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.3" y="622.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (159 samples, 4.61%)</title><rect x="448.3" y="595.0" width="54.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.3" y="606.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (159 samples, 4.61%)</title><rect x="448.3" y="579.0" width="54.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.3" y="590.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (159 samples, 4.61%)</title><rect x="448.3" y="563.0" width="54.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="451.3" y="574.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (158 samples, 4.58%)</title><rect x="448.3" y="547.0" width="54.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="451.3" y="558.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (158 samples, 4.58%)</title><rect x="448.3" y="531.0" width="54.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="451.3" y="542.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (33 samples, 0.96%)</title><rect x="448.6" y="515.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (31 samples, 0.90%)</title><rect x="448.6" y="499.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (30 samples, 0.87%)</title><rect x="449.0" y="483.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (26 samples, 0.75%)</title><rect x="449.0" y="467.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (26 samples, 0.75%)</title><rect x="449.0" y="451.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.0" y="462.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="449.6" y="435.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="452.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (15 samples, 0.43%)</title><rect x="450.3" y="435.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.12%)</title><rect x="450.7" y="419.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="453.7" y="430.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="451.0" y="403.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="454.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$469/603544558.apply (1 samples, 0.03%)</title><rect x="451.7" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="454.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$469/603544558.apply (9 samples, 0.26%)</title><rect x="452.0" y="419.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.0" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (9 samples, 0.26%)</title><rect x="452.0" y="403.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="455.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (9 samples, 0.26%)</title><rect x="452.0" y="387.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="455.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (7 samples, 0.20%)</title><rect x="452.7" y="371.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.7" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="452.7" y="355.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.7" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="452.7" y="339.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$496/833363224.get$Lambda (1 samples, 0.03%)</title><rect x="452.7" y="323.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (6 samples, 0.17%)</title><rect x="453.1" y="355.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (5 samples, 0.14%)</title><rect x="453.4" y="339.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (5 samples, 0.14%)</title><rect x="453.4" y="323.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$331/604314710.apply (5 samples, 0.14%)</title><rect x="453.4" y="307.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (5 samples, 0.14%)</title><rect x="453.4" y="291.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (5 samples, 0.14%)</title><rect x="453.4" y="275.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (5 samples, 0.14%)</title><rect x="453.4" y="259.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (5 samples, 0.14%)</title><rect x="453.4" y="243.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.4" y="254.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (3 samples, 0.09%)</title><rect x="453.4" y="227.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.4" y="238.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (3 samples, 0.09%)</title><rect x="453.4" y="211.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteArray (2 samples, 0.06%)</title><rect x="454.4" y="227.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="457.4" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.length (2 samples, 0.06%)</title><rect x="454.4" y="211.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="457.4" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$159/1117015311.apply (1 samples, 0.03%)</title><rect x="455.1" y="419.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (1 samples, 0.03%)</title><rect x="455.1" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (1 samples, 0.03%)</title><rect x="455.1" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (1 samples, 0.03%)</title><rect x="455.1" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/handlers/GetBodyHandler.apply (1 samples, 0.03%)</title><rect x="455.1" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.1" y="366.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (1 samples, 0.03%)</title><rect x="455.1" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.1" y="350.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (1 samples, 0.03%)</title><rect x="455.1" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="458.1" y="334.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="455.1" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.1" y="318.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.03%)</title><rect x="455.1" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.1" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.characteristics (1 samples, 0.03%)</title><rect x="455.1" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (6 samples, 0.17%)</title><rect x="455.5" y="435.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (6 samples, 0.17%)</title><rect x="455.5" y="419.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.06%)</title><rect x="455.5" y="403.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.03%)</title><rect x="455.5" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.apply (1 samples, 0.03%)</title><rect x="455.8" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.apply (4 samples, 0.12%)</title><rect x="456.1" y="403.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (1 samples, 0.03%)</title><rect x="456.1" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (3 samples, 0.09%)</title><rect x="456.5" y="387.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="459.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (3 samples, 0.09%)</title><rect x="456.5" y="371.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="459.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$191/1609992908.apply (3 samples, 0.09%)</title><rect x="456.5" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (3 samples, 0.09%)</title><rect x="456.5" y="339.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="456.5" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="456.5" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.wrapForUpgrade (1 samples, 0.03%)</title><rect x="456.8" y="323.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="456.8" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (1 samples, 0.03%)</title><rect x="457.2" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.2" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="457.2" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="460.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="457.2" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="457.2" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.03%)</title><rect x="457.5" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="460.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="457.8" y="467.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="457.8" y="451.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="457.8" y="435.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="457.8" y="419.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="457.8" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="457.8" y="387.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.8" y="398.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="457.8" y="371.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="460.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (2 samples, 0.06%)</title><rect x="458.5" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (2 samples, 0.06%)</title><rect x="459.2" y="499.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="462.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (2 samples, 0.06%)</title><rect x="459.2" y="483.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlinkLast (2 samples, 0.06%)</title><rect x="459.2" y="467.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="462.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.skipDeletedSuccessors (2 samples, 0.06%)</title><rect x="459.2" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="462.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.hasOutgoing (2 samples, 0.06%)</title><rect x="459.9" y="515.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.isEmpty (2 samples, 0.06%)</title><rect x="459.9" y="499.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (2 samples, 0.06%)</title><rect x="459.9" y="483.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (1 samples, 0.03%)</title><rect x="460.6" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="463.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (121 samples, 3.51%)</title><rect x="460.9" y="515.0" width="41.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.9" y="526.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (121 samples, 3.51%)</title><rect x="460.9" y="499.0" width="41.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="463.9" y="510.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (121 samples, 3.51%)</title><rect x="460.9" y="483.0" width="41.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.9" y="494.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (116 samples, 3.36%)</title><rect x="462.6" y="467.0" width="39.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.6" y="478.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$483/1745407499.run (1 samples, 0.03%)</title><rect x="462.6" y="451.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (1 samples, 0.03%)</title><rect x="462.6" y="435.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (1 samples, 0.03%)</title><rect x="462.6" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (1 samples, 0.03%)</title><rect x="462.6" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="465.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="462.6" y="387.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.6" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (115 samples, 3.33%)</title><rect x="463.0" y="451.0" width="39.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="466.0" y="462.0">jdk..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (113 samples, 3.28%)</title><rect x="463.0" y="435.0" width="38.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="466.0" y="446.0">jav..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (113 samples, 3.28%)</title><rect x="463.0" y="419.0" width="38.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.0" y="430.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (112 samples, 3.25%)</title><rect x="463.3" y="403.0" width="38.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.3" y="414.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (111 samples, 3.22%)</title><rect x="463.7" y="387.0" width="37.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.7" y="398.0">sun..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.26%)</title><rect x="463.7" y="371.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.7" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (9 samples, 0.26%)</title><rect x="463.7" y="355.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="466.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (2 samples, 0.06%)</title><rect x="466.1" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (102 samples, 2.96%)</title><rect x="466.7" y="371.0" width="34.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.7" y="382.0">su..</text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="467.4" y="355.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="470.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (98 samples, 2.84%)</title><rect x="468.1" y="355.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.1" y="366.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_writev0 (2 samples, 0.06%)</title><rect x="469.8" y="339.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="472.8" y="350.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="470.2" y="323.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="473.2" y="334.0"></text>
</g>
<g>
<title>writev (91 samples, 2.64%)</title><rect x="470.5" y="339.0" width="31.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="473.5" y="350.0">wr..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.06%)</title><rect x="501.6" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.03%)</title><rect x="502.3" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="505.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (1 samples, 0.03%)</title><rect x="502.7" y="595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1 samples, 0.03%)</title><rect x="502.7" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="505.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (357 samples, 10.35%)</title><rect x="503.0" y="691.0" width="122.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.0" y="702.0">jdk/internal/ne..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (357 samples, 10.35%)</title><rect x="503.0" y="675.0" width="122.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="506.0" y="686.0">jdk/internal/ne..</text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="503.0" y="659.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="506.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (174 samples, 5.04%)</title><rect x="503.7" y="659.0" width="59.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.7" y="670.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (172 samples, 4.99%)</title><rect x="504.4" y="643.0" width="58.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.4" y="654.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (172 samples, 4.99%)</title><rect x="504.4" y="627.0" width="58.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.4" y="638.0">jdk/in..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peek (2 samples, 0.06%)</title><rect x="505.1" y="611.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (2 samples, 0.06%)</title><rect x="505.1" y="595.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkForErrors (1 samples, 0.03%)</title><rect x="505.7" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="508.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (1 samples, 0.03%)</title><rect x="505.7" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (28 samples, 0.81%)</title><rect x="506.1" y="611.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (28 samples, 0.81%)</title><rect x="506.1" y="595.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (27 samples, 0.78%)</title><rect x="506.4" y="579.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (27 samples, 0.78%)</title><rect x="506.4" y="563.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.4" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/890545344.linkToTargetMethod (3 samples, 0.09%)</title><rect x="506.4" y="547.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.4" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/802243390.invoke (3 samples, 0.09%)</title><rect x="506.4" y="531.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="509.4" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.09%)</title><rect x="506.4" y="515.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.4" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (3 samples, 0.09%)</title><rect x="506.4" y="499.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="509.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (3 samples, 0.09%)</title><rect x="506.4" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="509.4" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="506.8" y="467.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="509.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.03%)</title><rect x="507.1" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (24 samples, 0.70%)</title><rect x="507.5" y="547.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (24 samples, 0.70%)</title><rect x="507.5" y="531.0" width="8.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (24 samples, 0.70%)</title><rect x="507.5" y="515.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="510.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (24 samples, 0.70%)</title><rect x="507.5" y="499.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="510.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.03%)</title><rect x="507.5" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.5" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="507.5" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="510.5" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="507.5" y="451.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="510.5" y="462.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="507.5" y="435.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="510.5" y="446.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="507.5" y="419.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="510.5" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (23 samples, 0.67%)</title><rect x="507.8" y="483.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.8" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="507.8" y="467.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="510.8" y="478.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="507.8" y="451.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="510.8" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="507.8" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="510.8" y="446.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="508.1" y="435.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="511.1" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.06%)</title><rect x="508.5" y="467.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.06%)</title><rect x="508.5" y="451.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.5" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.06%)</title><rect x="508.5" y="435.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="511.5" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.06%)</title><rect x="508.5" y="419.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.5" y="430.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="508.5" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="511.5" y="414.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="508.5" y="387.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="511.5" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="508.5" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="511.5" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="508.5" y="355.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="511.5" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="508.8" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="511.8" y="366.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="508.8" y="339.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="511.8" y="350.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="508.8" y="323.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="511.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (19 samples, 0.55%)</title><rect x="509.2" y="467.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.2" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="509.8" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (16 samples, 0.46%)</title><rect x="510.2" y="451.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.2" y="462.0"></text>
</g>
<g>
<title>write (14 samples, 0.41%)</title><rect x="510.9" y="435.0" width="4.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="513.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (139 samples, 4.03%)</title><rect x="515.7" y="611.0" width="47.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="622.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.03%)</title><rect x="515.7" y="595.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="515.7" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="518.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (138 samples, 4.00%)</title><rect x="516.0" y="595.0" width="47.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="519.0" y="606.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (138 samples, 4.00%)</title><rect x="516.0" y="579.0" width="47.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.0" y="590.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (138 samples, 4.00%)</title><rect x="516.0" y="563.0" width="47.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.0" y="574.0">jdk/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (89 samples, 2.58%)</title><rect x="516.3" y="547.0" width="30.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="519.3" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (89 samples, 2.58%)</title><rect x="516.3" y="531.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.3" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (89 samples, 2.58%)</title><rect x="516.3" y="515.0" width="30.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.3" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (85 samples, 2.46%)</title><rect x="516.3" y="499.0" width="29.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.3" y="510.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (85 samples, 2.46%)</title><rect x="516.3" y="483.0" width="29.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.3" y="494.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (84 samples, 2.44%)</title><rect x="516.3" y="467.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.3" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (84 samples, 2.44%)</title><rect x="516.3" y="451.0" width="28.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="519.3" y="462.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.03%)</title><rect x="516.3" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.03%)</title><rect x="516.3" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="519.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (80 samples, 2.32%)</title><rect x="516.7" y="435.0" width="27.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.7" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (80 samples, 2.32%)</title><rect x="516.7" y="419.0" width="27.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="519.7" y="430.0">j..</text>
</g>
<g>
<title>itable stub (3 samples, 0.09%)</title><rect x="517.0" y="403.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="520.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (58 samples, 1.68%)</title><rect x="518.1" y="403.0" width="19.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="521.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.14%)</title><rect x="518.1" y="387.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.1" y="398.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="518.1" y="371.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="521.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.03%)</title><rect x="518.7" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="521.7" y="382.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$53/1336735375.apply (1 samples, 0.03%)</title><rect x="519.1" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$474/456745370.apply (1 samples, 0.03%)</title><rect x="519.4" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$474/456745370.apply (1 samples, 0.03%)</title><rect x="519.8" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$wrapForUpgrade$10 (1 samples, 0.03%)</title><rect x="519.8" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="522.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkForUpgradeAsync (1 samples, 0.03%)</title><rect x="519.8" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.03%)</title><rect x="519.8" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.03%)</title><rect x="519.8" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="519.8" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$159/1117015311.apply (38 samples, 1.10%)</title><rect x="520.1" y="387.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="523.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (38 samples, 1.10%)</title><rect x="520.1" y="371.0" width="13.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="523.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (1 samples, 0.03%)</title><rect x="520.1" y="355.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="523.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (1 samples, 0.03%)</title><rect x="520.1" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="523.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (1 samples, 0.03%)</title><rect x="520.1" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$331/604314710.apply (1 samples, 0.03%)</title><rect x="520.1" y="307.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (1 samples, 0.03%)</title><rect x="520.1" y="291.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="523.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (1 samples, 0.03%)</title><rect x="520.1" y="275.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="523.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (1 samples, 0.03%)</title><rect x="520.1" y="259.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="523.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (1 samples, 0.03%)</title><rect x="520.1" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="523.1" y="254.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (1 samples, 0.03%)</title><rect x="520.1" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="523.1" y="238.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (1 samples, 0.03%)</title><rect x="520.1" y="211.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="523.1" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (37 samples, 1.07%)</title><rect x="520.5" y="355.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="523.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (37 samples, 1.07%)</title><rect x="520.5" y="339.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="523.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (23 samples, 0.67%)</title><rect x="520.5" y="323.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="523.5" y="334.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (2 samples, 0.06%)</title><rect x="521.5" y="307.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="524.5" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.03%)</title><rect x="521.5" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.5" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.03%)</title><rect x="521.5" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.5" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.03%)</title><rect x="521.5" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="524.5" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.03%)</title><rect x="521.5" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.5" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="521.5" y="227.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.5" y="238.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (1 samples, 0.03%)</title><rect x="521.8" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="524.8" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="521.8" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.8" y="286.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.03%)</title><rect x="521.8" y="259.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="524.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (18 samples, 0.52%)</title><rect x="522.2" y="307.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="525.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$526/101177499.run (18 samples, 0.52%)</title><rect x="522.2" y="291.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (18 samples, 0.52%)</title><rect x="522.2" y="275.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="525.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.03%)</title><rect x="522.5" y="259.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="525.5" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="522.9" y="259.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="525.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (1 samples, 0.03%)</title><rect x="523.2" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="526.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="523.2" y="243.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="526.2" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.acquire (2 samples, 0.06%)</title><rect x="523.5" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.reference (2 samples, 0.06%)</title><rect x="523.5" y="243.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.5" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (9 samples, 0.26%)</title><rect x="524.2" y="259.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="527.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (9 samples, 0.26%)</title><rect x="524.2" y="243.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="527.2" y="254.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (9 samples, 0.26%)</title><rect x="524.2" y="227.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="527.2" y="238.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (8 samples, 0.23%)</title><rect x="524.6" y="211.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="527.6" y="222.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (8 samples, 0.23%)</title><rect x="524.6" y="195.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.6" y="206.0"></text>
</g>
<g>
<title>JVM_IHashCode (5 samples, 0.14%)</title><rect x="525.2" y="179.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="528.2" y="190.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="525.2" y="163.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="528.2" y="174.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="525.2" y="147.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="528.2" y="158.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (4 samples, 0.12%)</title><rect x="525.6" y="163.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="528.6" y="174.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="526.6" y="147.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="529.6" y="158.0"></text>
</g>
<g>
<title>Java_java_lang_System_identityHashCode (1 samples, 0.03%)</title><rect x="527.0" y="179.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="530.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.getBodyParser (3 samples, 0.09%)</title><rect x="527.3" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent.contentChunked (2 samples, 0.06%)</title><rect x="527.6" y="243.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.6" y="254.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (2 samples, 0.06%)</title><rect x="527.6" y="227.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.6" y="238.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.06%)</title><rect x="527.6" y="211.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.6" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.06%)</title><rect x="527.6" y="195.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.6" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="527.6" y="179.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="530.6" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/handlers/GetBodyHandler.apply (14 samples, 0.41%)</title><rect x="528.3" y="323.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.3" y="334.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (14 samples, 0.41%)</title><rect x="528.3" y="307.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.3" y="318.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (4 samples, 0.12%)</title><rect x="528.3" y="291.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="531.3" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.12%)</title><rect x="528.3" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.3" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.06%)</title><rect x="529.0" y="259.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="532.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.06%)</title><rect x="529.0" y="243.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.06%)</title><rect x="529.0" y="227.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="532.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="529.4" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="529.4" y="195.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="532.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="529.4" y="179.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="532.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (10 samples, 0.29%)</title><rect x="529.7" y="291.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="532.7" y="302.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (10 samples, 0.29%)</title><rect x="529.7" y="275.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="532.7" y="286.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (10 samples, 0.29%)</title><rect x="529.7" y="259.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (7 samples, 0.20%)</title><rect x="530.7" y="243.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="533.7" y="254.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (5 samples, 0.14%)</title><rect x="531.4" y="227.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="534.4" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (5 samples, 0.14%)</title><rect x="531.4" y="211.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.4" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (5 samples, 0.14%)</title><rect x="531.4" y="195.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.4" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (4 samples, 0.12%)</title><rect x="531.4" y="179.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="534.4" y="190.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.get (1 samples, 0.03%)</title><rect x="531.4" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="534.4" y="174.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.getFence (1 samples, 0.03%)</title><rect x="531.4" y="147.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.4" y="158.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (3 samples, 0.09%)</title><rect x="531.7" y="163.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="534.7" y="174.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$511/1420136804.applyAsLong (3 samples, 0.09%)</title><rect x="531.7" y="147.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.7" y="158.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.06%)</title><rect x="532.1" y="131.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="535.1" y="142.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.06%)</title><rect x="532.1" y="115.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.1" y="126.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.cancellationRequested (1 samples, 0.03%)</title><rect x="532.8" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="535.8" y="190.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.03%)</title><rect x="532.8" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$421/1707489388.apply (14 samples, 0.41%)</title><rect x="533.1" y="387.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="536.1" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (14 samples, 0.41%)</title><rect x="533.1" y="371.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (14 samples, 0.41%)</title><rect x="533.1" y="355.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="536.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (12 samples, 0.35%)</title><rect x="533.1" y="339.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="536.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (12 samples, 0.35%)</title><rect x="533.1" y="323.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="536.1" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.09%)</title><rect x="533.1" y="307.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="536.1" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="533.1" y="291.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="536.1" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="533.1" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="536.1" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="533.1" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="536.1" y="270.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="533.5" y="275.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="536.5" y="286.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="533.8" y="291.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="536.8" y="302.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="533.8" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="536.8" y="286.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (9 samples, 0.26%)</title><rect x="534.1" y="307.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.1" y="318.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.eq (2 samples, 0.06%)</title><rect x="534.1" y="291.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="537.1" y="302.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.06%)</title><rect x="534.1" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.1" y="286.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (2 samples, 0.06%)</title><rect x="534.8" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.8" y="302.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (2 samples, 0.06%)</title><rect x="534.8" y="275.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="537.8" y="286.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (2 samples, 0.06%)</title><rect x="534.8" y="259.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (2 samples, 0.06%)</title><rect x="534.8" y="243.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.8" y="254.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (5 samples, 0.14%)</title><rect x="535.5" y="291.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="538.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (5 samples, 0.14%)</title><rect x="535.5" y="275.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="538.5" y="286.0"></text>
</g>
<g>
<title>JVM_IHashCode (3 samples, 0.09%)</title><rect x="535.5" y="259.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="538.5" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="536.2" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="539.2" y="254.0"></text>
</g>
<g>
<title>ReadStableMark(oopDesc*) (1 samples, 0.03%)</title><rect x="536.2" y="227.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="539.2" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="536.5" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="539.5" y="270.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="536.9" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="539.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.handleResponse (1 samples, 0.03%)</title><rect x="537.2" y="339.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.response (1 samples, 0.03%)</title><rect x="537.6" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="540.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (15 samples, 0.43%)</title><rect x="537.9" y="403.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="540.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.03%)</title><rect x="538.9" y="387.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="538.9" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (11 samples, 0.32%)</title><rect x="539.3" y="387.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.14%)</title><rect x="539.3" y="371.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.3" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="540.0" y="355.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="543.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$428/1145134436.apply (2 samples, 0.06%)</title><rect x="540.3" y="355.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="543.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$428/1145134436.apply (6 samples, 0.17%)</title><rect x="541.0" y="371.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.0" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (6 samples, 0.17%)</title><rect x="541.0" y="355.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.cancelTimer (6 samples, 0.17%)</title><rect x="541.0" y="339.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.cancelTimer (6 samples, 0.17%)</title><rect x="541.0" y="323.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.0" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="541.0" y="307.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="544.0" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="541.0" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="544.0" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="541.0" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="544.0" y="286.0"></text>
</g>
<g>
<title>java/util/TreeSet.remove (5 samples, 0.14%)</title><rect x="541.3" y="307.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="544.3" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap.remove (5 samples, 0.14%)</title><rect x="541.3" y="291.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.3" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap.deleteEntry (3 samples, 0.09%)</title><rect x="541.3" y="275.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="544.3" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterDeletion (1 samples, 0.03%)</title><rect x="541.7" y="259.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="544.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="542.0" y="259.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.06%)</title><rect x="542.4" y="275.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.03%)</title><rect x="543.0" y="403.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$496/833363224.apply (1 samples, 0.03%)</title><rect x="543.4" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.4" y="414.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="543.7" y="403.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="546.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$496/833363224.apply (3 samples, 0.09%)</title><rect x="544.1" y="435.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (3 samples, 0.09%)</title><rect x="544.1" y="419.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="547.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (3 samples, 0.09%)</title><rect x="544.1" y="403.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="547.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="544.4" y="387.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="547.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getLocalAddress (2 samples, 0.06%)</title><rect x="544.4" y="371.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="547.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.getRevealedLocalAddress (1 samples, 0.03%)</title><rect x="544.7" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="545.1" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="545.1" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="548.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="545.1" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="545.1" y="419.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="548.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="545.1" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="545.1" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="548.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (1 samples, 0.03%)</title><rect x="545.1" y="371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="548.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.12%)</title><rect x="545.4" y="499.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 0.12%)</title><rect x="545.4" y="483.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="548.4" y="494.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="545.4" y="467.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="548.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.06%)</title><rect x="546.1" y="467.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="549.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (45 samples, 1.30%)</title><rect x="546.8" y="547.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="549.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (4 samples, 0.12%)</title><rect x="547.1" y="531.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="550.1" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.09%)</title><rect x="547.5" y="515.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.5" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.09%)</title><rect x="547.5" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="550.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (1 samples, 0.03%)</title><rect x="548.5" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="548.5" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="551.5" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="548.5" y="499.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.5" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (14 samples, 0.41%)</title><rect x="548.9" y="531.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.9" y="542.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (14 samples, 0.41%)</title><rect x="548.9" y="515.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.9" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (14 samples, 0.41%)</title><rect x="548.9" y="499.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.9" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="549.2" y="483.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="552.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (12 samples, 0.35%)</title><rect x="549.5" y="483.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.5" y="494.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (11 samples, 0.32%)</title><rect x="549.9" y="467.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.9" y="478.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (8 samples, 0.23%)</title><rect x="550.6" y="451.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="553.6" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.clear (1 samples, 0.03%)</title><rect x="550.9" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.9" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.06%)</title><rect x="551.2" y="435.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$76/1373419525.test (2 samples, 0.06%)</title><rect x="551.2" y="419.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.2" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.12%)</title><rect x="551.9" y="435.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="554.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="552.3" y="419.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="555.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="552.3" y="403.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.3" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.06%)</title><rect x="552.3" y="387.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="555.3" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="553.0" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="556.0" y="430.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="553.3" y="451.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="556.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrLF (4 samples, 0.12%)</title><rect x="553.6" y="531.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.6" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="553.6" y="515.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="556.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (2 samples, 0.06%)</title><rect x="554.3" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="557.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (21 samples, 0.61%)</title><rect x="555.0" y="531.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="558.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (18 samples, 0.52%)</title><rect x="556.0" y="515.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="559.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="556.4" y="499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="556.4" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="559.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="556.4" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="559.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (7 samples, 0.20%)</title><rect x="556.7" y="499.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="559.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (3 samples, 0.09%)</title><rect x="557.4" y="483.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.4" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="558.4" y="483.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="561.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.trim (5 samples, 0.14%)</title><rect x="559.1" y="499.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="562.1" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (5 samples, 0.14%)</title><rect x="559.1" y="483.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="562.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="560.1" y="467.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="563.1" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="560.5" y="467.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="563.5" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (4 samples, 0.12%)</title><rect x="560.8" y="499.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.8" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="560.8" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="560.8" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="563.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="560.8" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.03%)</title><rect x="561.2" y="483.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser$$Lambda$504/1187071485.apply (2 samples, 0.06%)</title><rect x="561.5" y="483.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="564.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.lambda$addHeaderFromString$0 (2 samples, 0.06%)</title><rect x="561.5" y="467.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="561.5" y="451.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="564.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$366/132964022.accept (3 samples, 0.09%)</title><rect x="562.2" y="547.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="565.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (1 samples, 0.03%)</title><rect x="562.5" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="565.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (1 samples, 0.03%)</title><rect x="562.9" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="565.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (1 samples, 0.03%)</title><rect x="562.9" y="515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="565.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (181 samples, 5.25%)</title><rect x="563.2" y="659.0" width="61.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="566.2" y="670.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (180 samples, 5.22%)</title><rect x="563.6" y="643.0" width="61.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="566.6" y="654.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (178 samples, 5.16%)</title><rect x="563.6" y="627.0" width="60.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="566.6" y="638.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (178 samples, 5.16%)</title><rect x="563.6" y="611.0" width="60.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.6" y="622.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (178 samples, 5.16%)</title><rect x="563.6" y="595.0" width="60.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="566.6" y="606.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (4 samples, 0.12%)</title><rect x="563.6" y="579.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="566.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (2 samples, 0.06%)</title><rect x="563.9" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="566.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (2 samples, 0.06%)</title><rect x="563.9" y="547.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="566.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onSubscribe (2 samples, 0.06%)</title><rect x="563.9" y="531.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="566.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onSubscribe (2 samples, 0.06%)</title><rect x="563.9" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="566.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (1 samples, 0.03%)</title><rect x="564.6" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.tryAsyncReceive (174 samples, 5.04%)</title><rect x="564.9" y="579.0" width="59.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.9" y="590.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (174 samples, 5.04%)</title><rect x="564.9" y="563.0" width="59.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.9" y="574.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (174 samples, 5.04%)</title><rect x="564.9" y="547.0" width="59.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.9" y="558.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.handle (174 samples, 5.04%)</title><rect x="564.9" y="531.0" width="59.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.9" y="542.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (174 samples, 5.04%)</title><rect x="564.9" y="515.0" width="59.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.9" y="526.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.accept (174 samples, 5.04%)</title><rect x="564.9" y="499.0" width="59.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.9" y="510.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$530/1893889011.run (103 samples, 2.99%)</title><rect x="564.9" y="483.0" width="35.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.9" y="494.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (103 samples, 2.99%)</title><rect x="564.9" y="467.0" width="35.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.9" y="478.0">jdk..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (103 samples, 2.99%)</title><rect x="564.9" y="451.0" width="35.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="567.9" y="462.0">jdk..</text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (7 samples, 0.20%)</title><rect x="564.9" y="435.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.9" y="446.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (3 samples, 0.09%)</title><rect x="564.9" y="419.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.9" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.09%)</title><rect x="564.9" y="403.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.9" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.06%)</title><rect x="565.3" y="387.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.3" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.06%)</title><rect x="565.3" y="371.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.3" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.06%)</title><rect x="565.3" y="355.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.3" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (4 samples, 0.12%)</title><rect x="566.0" y="419.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.12%)</title><rect x="566.0" y="403.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="569.0" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="566.0" y="387.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="569.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (2 samples, 0.06%)</title><rect x="566.3" y="387.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.3" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="566.6" y="371.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="566.6" y="355.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="569.6" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.03%)</title><rect x="566.6" y="339.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.03%)</title><rect x="566.6" y="323.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.6" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.03%)</title><rect x="566.6" y="307.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.6" y="318.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.getOpFlags (1 samples, 0.03%)</title><rect x="567.0" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (96 samples, 2.78%)</title><rect x="567.3" y="435.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="570.3" y="446.0">jd..</text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.03%)</title><rect x="567.3" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.3" y="430.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="567.3" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="567.3" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="570.3" y="398.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="567.3" y="371.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="570.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.03%)</title><rect x="567.3" y="355.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="570.3" y="366.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="567.3" y="339.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="570.3" y="350.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="567.3" y="323.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="570.3" y="334.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="567.3" y="307.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="570.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (95 samples, 2.75%)</title><rect x="567.7" y="419.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="570.7" y="430.0">jd..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.38%)</title><rect x="569.0" y="403.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="572.0" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (12 samples, 0.35%)</title><rect x="569.0" y="387.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="572.0" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (1 samples, 0.03%)</title><rect x="569.0" y="371.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="572.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (9 samples, 0.26%)</title><rect x="569.4" y="371.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="572.4" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.06%)</title><rect x="571.8" y="355.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="574.8" y="366.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.06%)</title><rect x="572.5" y="371.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="575.5" y="382.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="573.1" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="576.1" y="398.0"></text>
</g>
<g>
<title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (1 samples, 0.03%)</title><rect x="573.1" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="576.1" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (49 samples, 1.42%)</title><rect x="573.5" y="403.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (3 samples, 0.09%)</title><rect x="590.2" y="403.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="593.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.09%)</title><rect x="590.2" y="387.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="590.2" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.equals (1 samples, 0.03%)</title><rect x="590.6" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="593.6" y="366.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.03%)</title><rect x="590.6" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.6" y="350.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.equals (1 samples, 0.03%)</title><rect x="590.6" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.6" y="334.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress$InetSocketAddressHolder.equals (1 samples, 0.03%)</title><rect x="590.6" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="590.9" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (1 samples, 0.03%)</title><rect x="590.9" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="593.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (26 samples, 0.75%)</title><rect x="591.3" y="403.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (26 samples, 0.75%)</title><rect x="591.3" y="387.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (3 samples, 0.09%)</title><rect x="591.3" y="371.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="594.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (3 samples, 0.09%)</title><rect x="591.3" y="355.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="594.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (3 samples, 0.09%)</title><rect x="591.3" y="339.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (2 samples, 0.06%)</title><rect x="591.3" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="594.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (2 samples, 0.06%)</title><rect x="591.3" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="594.3" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="591.3" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="594.3" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="591.3" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.3" y="286.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="591.3" y="259.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="594.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (1 samples, 0.03%)</title><rect x="591.6" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="594.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.03%)</title><rect x="592.0" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.0" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="592.0" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="595.0" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="592.0" y="291.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="595.0" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="592.0" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="595.0" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="592.0" y="259.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="595.0" y="270.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="592.0" y="243.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="595.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (23 samples, 0.67%)</title><rect x="592.3" y="371.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="595.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (23 samples, 0.67%)</title><rect x="592.3" y="355.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="595.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (23 samples, 0.67%)</title><rect x="592.3" y="339.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (21 samples, 0.61%)</title><rect x="592.3" y="323.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (21 samples, 0.61%)</title><rect x="592.3" y="307.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="595.3" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="592.3" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="595.3" y="302.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="592.3" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="595.3" y="286.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="592.3" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="595.3" y="270.0"></text>
</g>
<g>
<title>update_heuristics(oopDesc*, bool) (1 samples, 0.03%)</title><rect x="592.3" y="243.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="595.3" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="592.6" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.6" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.03%)</title><rect x="592.6" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.6" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="592.6" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.6" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.03%)</title><rect x="592.6" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.6" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.03%)</title><rect x="592.6" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (1 samples, 0.03%)</title><rect x="592.6" y="211.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="595.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (19 samples, 0.55%)</title><rect x="593.0" y="291.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="596.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (18 samples, 0.52%)</title><rect x="593.3" y="275.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="596.3" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_write1 (1 samples, 0.03%)</title><rect x="593.3" y="259.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="596.3" y="270.0"></text>
</g>
<g>
<title>write (17 samples, 0.49%)</title><rect x="593.7" y="259.0" width="5.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="596.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (2 samples, 0.06%)</title><rect x="599.5" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="602.5" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="599.5" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="602.5" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.06%)</title><rect x="599.5" y="291.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="602.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="599.5" y="275.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="602.5" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="599.8" y="275.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.8" y="286.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="599.8" y="259.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="602.8" y="270.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="599.8" y="243.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="602.8" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$542/2024545176.accept (10 samples, 0.29%)</title><rect x="600.2" y="483.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (10 samples, 0.29%)</title><rect x="600.2" y="467.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (10 samples, 0.29%)</title><rect x="600.2" y="451.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 0.23%)</title><rect x="600.2" y="435.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.23%)</title><rect x="600.2" y="419.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="603.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.20%)</title><rect x="600.5" y="403.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.20%)</title><rect x="600.5" y="387.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="603.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.09%)</title><rect x="600.5" y="371.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.5" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="600.9" y="355.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="603.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$557/234067677.accept (1 samples, 0.03%)</title><rect x="601.2" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="604.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$553/818419977.accept (1 samples, 0.03%)</title><rect x="601.5" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="604.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$2 (1 samples, 0.03%)</title><rect x="601.5" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$557/234067677.accept (3 samples, 0.09%)</title><rect x="601.9" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="604.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.lambda$add$0 (2 samples, 0.06%)</title><rect x="602.2" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.remove (2 samples, 0.06%)</title><rect x="602.2" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$370/1247519959.accept (2 samples, 0.06%)</title><rect x="602.9" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="605.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (2 samples, 0.06%)</title><rect x="602.9" y="419.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.unsubscribe (1 samples, 0.03%)</title><rect x="603.3" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (59 samples, 1.71%)</title><rect x="603.6" y="483.0" width="20.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (59 samples, 1.71%)</title><rect x="603.6" y="467.0" width="20.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="606.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (59 samples, 1.71%)</title><rect x="603.6" y="451.0" width="20.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="606.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.onComplete (59 samples, 1.71%)</title><rect x="603.6" y="435.0" width="20.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (55 samples, 1.59%)</title><rect x="603.9" y="419.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (55 samples, 1.59%)</title><rect x="603.9" y="403.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="606.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (3 samples, 0.09%)</title><rect x="603.9" y="387.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="606.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.06%)</title><rect x="604.3" y="371.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.06%)</title><rect x="604.3" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/handlers/GetBodyHandler$$Lambda$630/1562448074.apply (2 samples, 0.06%)</title><rect x="604.3" y="339.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="607.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (52 samples, 1.51%)</title><rect x="605.0" y="387.0" width="17.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="608.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (52 samples, 1.51%)</title><rect x="605.0" y="371.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="608.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.06%)</title><rect x="605.0" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="608.0" y="366.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="605.0" y="339.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="608.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$563/1604018323.accept (50 samples, 1.45%)</title><rect x="605.6" y="355.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (49 samples, 1.42%)</title><rect x="606.0" y="339.0" width="16.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (49 samples, 1.42%)</title><rect x="606.0" y="323.0" width="16.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (49 samples, 1.42%)</title><rect x="606.0" y="307.0" width="16.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="609.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (2 samples, 0.06%)</title><rect x="606.0" y="291.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="609.0" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$579/1449206276.apply (2 samples, 0.06%)</title><rect x="606.0" y="275.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="609.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$3 (2 samples, 0.06%)</title><rect x="606.0" y="259.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="609.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (47 samples, 1.36%)</title><rect x="606.7" y="291.0" width="16.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="609.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (46 samples, 1.33%)</title><rect x="607.0" y="275.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (43 samples, 1.25%)</title><rect x="607.0" y="259.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.0" y="270.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="607.4" y="243.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="610.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (40 samples, 1.16%)</title><rect x="607.7" y="243.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (40 samples, 1.16%)</title><rect x="607.7" y="227.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="610.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (40 samples, 1.16%)</title><rect x="607.7" y="211.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="610.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (40 samples, 1.16%)</title><rect x="607.7" y="195.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="610.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (39 samples, 1.13%)</title><rect x="608.0" y="179.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="611.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 1.07%)</title><rect x="608.7" y="163.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="611.7" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (35 samples, 1.01%)</title><rect x="609.4" y="147.0" width="12.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="612.4" y="158.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="609.4" y="131.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="612.4" y="142.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="609.4" y="115.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="612.4" y="126.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.06%)</title><rect x="609.8" y="131.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="612.8" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.06%)</title><rect x="609.8" y="115.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="612.8" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.06%)</title><rect x="609.8" y="99.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="612.8" y="110.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="610.4" y="131.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="613.4" y="142.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="610.8" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="613.8" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="610.8" y="115.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="613.8" y="126.0"></text>
</g>
<g>
<title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.03%)</title><rect x="611.1" y="131.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="614.1" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="611.5" y="131.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="614.5" y="142.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="611.5" y="115.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="614.5" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (26 samples, 0.75%)</title><rect x="611.8" y="131.0" width="8.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="614.8" y="142.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="620.7" y="131.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="623.7" y="142.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="620.7" y="115.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="623.7" y="126.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="621.0" y="131.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="624.0" y="142.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$568/1313816771.accept (1 samples, 0.03%)</title><rect x="621.4" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.4" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$574/1867618638.accept (3 samples, 0.09%)</title><rect x="621.7" y="259.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="624.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$readBodyAsync$0 (3 samples, 0.09%)</title><rect x="621.7" y="243.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.7" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$ByteArraySubscriber.join (3 samples, 0.09%)</title><rect x="622.8" y="419.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="625.8" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="622.8" y="403.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="625.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (2 samples, 0.06%)</title><rect x="623.1" y="403.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (2 samples, 0.06%)</title><rect x="623.8" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onNext (2 samples, 0.06%)</title><rect x="623.8" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (1 samples, 0.03%)</title><rect x="624.1" y="451.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onNext (1 samples, 0.03%)</title><rect x="624.1" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.06%)</title><rect x="624.5" y="627.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="625.1" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="625.1" y="675.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="625.1" y="659.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="628.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="625.1" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="628.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="625.1" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="625.1" y="611.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="625.1" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="625.1" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (83 samples, 2.41%)</title><rect x="625.5" y="739.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.5" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (83 samples, 2.41%)</title><rect x="625.5" y="723.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.5" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (8 samples, 0.23%)</title><rect x="625.5" y="707.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="628.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (8 samples, 0.23%)</title><rect x="625.5" y="691.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (8 samples, 0.23%)</title><rect x="625.5" y="675.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (8 samples, 0.23%)</title><rect x="625.5" y="659.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.20%)</title><rect x="625.8" y="643.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.17%)</title><rect x="625.8" y="627.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="628.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 0.17%)</title><rect x="625.8" y="611.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="628.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (6 samples, 0.17%)</title><rect x="625.8" y="595.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (6 samples, 0.17%)</title><rect x="625.8" y="579.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="628.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.17%)</title><rect x="625.8" y="563.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.17%)</title><rect x="625.8" y="547.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="628.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="625.8" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="628.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="625.8" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="628.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="625.8" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="625.8" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="628.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="625.8" y="467.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="628.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.14%)</title><rect x="626.2" y="531.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.14%)</title><rect x="626.2" y="515.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="629.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.14%)</title><rect x="626.2" y="499.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.14%)</title><rect x="626.2" y="483.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.14%)</title><rect x="626.2" y="467.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="629.2" y="478.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="626.2" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="629.2" y="462.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="626.5" y="451.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="629.5" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="626.9" y="451.0" width="1.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="629.9" y="462.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="626.9" y="435.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="629.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.03%)</title><rect x="627.9" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="630.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.03%)</title><rect x="627.9" y="611.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$180/520013764.accept (1 samples, 0.03%)</title><rect x="627.9" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="630.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.12%)</title><rect x="628.2" y="707.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="631.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.12%)</title><rect x="628.2" y="691.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="631.2" y="702.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="628.2" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="631.2" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="628.6" y="675.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="631.6" y="686.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.09%)</title><rect x="628.6" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="631.6" y="670.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.09%)</title><rect x="628.6" y="643.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="631.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (70 samples, 2.03%)</title><rect x="629.6" y="707.0" width="23.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="632.6" y="718.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (70 samples, 2.03%)</title><rect x="629.6" y="691.0" width="23.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="632.6" y="702.0">j..</text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="631.0" y="675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="634.0" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (65 samples, 1.88%)</title><rect x="631.3" y="675.0" width="22.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="634.3" y="686.0">U..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="631.3" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.3" y="670.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="631.6" y="659.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="634.6" y="670.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="631.6" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.6" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (62 samples, 1.80%)</title><rect x="632.0" y="659.0" width="21.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.0" y="670.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.09%)</title><rect x="632.0" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.06%)</title><rect x="632.3" y="627.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="635.3" y="638.0"></text>
</g>
<g>
<title>__gettimeofday (5 samples, 0.14%)</title><rect x="633.0" y="643.0" width="1.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="636.0" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (52 samples, 1.51%)</title><rect x="634.7" y="643.0" width="17.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="637.7" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="652.5" y="643.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="655.5" y="654.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.03%)</title><rect x="652.9" y="643.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="655.9" y="654.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="653.2" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="656.2" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="653.5" y="707.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="656.5" y="718.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="653.5" y="691.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="656.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (665 samples, 19.28%)</title><rect x="653.9" y="739.0" width="227.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.9" y="750.0">jdk/internal/net/http/HttpClie..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.12%)</title><rect x="655.9" y="723.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="658.9" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.12%)</title><rect x="655.9" y="707.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="658.9" y="718.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.03%)</title><rect x="655.9" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="658.9" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="655.9" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.9" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="656.3" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="659.3" y="702.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.06%)</title><rect x="656.6" y="691.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="659.6" y="702.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (6 samples, 0.17%)</title><rect x="657.3" y="723.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.3" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.clear (7 samples, 0.20%)</title><rect x="659.4" y="723.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="662.4" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$430/877989757.run (1 samples, 0.03%)</title><rect x="660.7" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$297/974608749.run (2 samples, 0.06%)</title><rect x="661.1" y="707.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="664.1" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (71 samples, 2.06%)</title><rect x="661.8" y="723.0" width="24.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="664.8" y="734.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$434/1816691911.accept (68 samples, 1.97%)</title><rect x="662.1" y="707.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.1" y="718.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (68 samples, 1.97%)</title><rect x="662.1" y="691.0" width="23.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="665.1" y="702.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (68 samples, 1.97%)</title><rect x="662.1" y="675.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.1" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (68 samples, 1.97%)</title><rect x="662.1" y="659.0" width="23.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="665.1" y="670.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (68 samples, 1.97%)</title><rect x="662.1" y="643.0" width="23.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.1" y="654.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (2 samples, 0.06%)</title><rect x="662.1" y="627.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.03%)</title><rect x="662.4" y="611.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.4" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (1 samples, 0.03%)</title><rect x="662.4" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (66 samples, 1.91%)</title><rect x="662.8" y="627.0" width="22.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.8" y="638.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (66 samples, 1.91%)</title><rect x="662.8" y="611.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.8" y="622.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (66 samples, 1.91%)</title><rect x="662.8" y="595.0" width="22.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.8" y="606.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (66 samples, 1.91%)</title><rect x="662.8" y="579.0" width="22.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.8" y="590.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (66 samples, 1.91%)</title><rect x="662.8" y="563.0" width="22.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="665.8" y="574.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$270/1384667838.run (64 samples, 1.86%)</title><rect x="663.1" y="547.0" width="21.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.1" y="558.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (64 samples, 1.86%)</title><rect x="663.1" y="531.0" width="21.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.1" y="542.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (19 samples, 0.55%)</title><rect x="663.1" y="515.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.1" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (19 samples, 0.55%)</title><rect x="663.1" y="499.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.1" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (19 samples, 0.55%)</title><rect x="663.1" y="483.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (19 samples, 0.55%)</title><rect x="663.1" y="467.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (13 samples, 0.38%)</title><rect x="665.2" y="451.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (13 samples, 0.38%)</title><rect x="665.2" y="435.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 0.38%)</title><rect x="665.2" y="419.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (13 samples, 0.38%)</title><rect x="665.2" y="403.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="665.2" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="668.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="665.2" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="665.2" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="668.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="665.2" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="668.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="665.5" y="387.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="665.5" y="371.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="668.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.14%)</title><rect x="665.5" y="355.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="668.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.14%)</title><rect x="665.5" y="339.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.14%)</title><rect x="665.5" y="323.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.14%)</title><rect x="665.5" y="307.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.14%)</title><rect x="665.5" y="291.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="668.5" y="302.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="665.5" y="275.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="668.5" y="286.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="665.5" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="668.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.12%)</title><rect x="665.9" y="275.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.9" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="665.9" y="259.0" width="1.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="668.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.20%)</title><rect x="667.2" y="387.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.20%)</title><rect x="667.2" y="371.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="670.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.20%)</title><rect x="667.2" y="355.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="670.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.20%)</title><rect x="667.2" y="339.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="670.2" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.20%)</title><rect x="667.2" y="323.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="670.2" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.20%)</title><rect x="667.2" y="307.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="670.2" y="318.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="667.2" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="670.2" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.17%)</title><rect x="667.6" y="291.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="670.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (2 samples, 0.06%)</title><rect x="669.6" y="515.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="672.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (2 samples, 0.06%)</title><rect x="669.6" y="499.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (2 samples, 0.06%)</title><rect x="669.6" y="483.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="672.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (2 samples, 0.06%)</title><rect x="669.6" y="467.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="672.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (2 samples, 0.06%)</title><rect x="669.6" y="451.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.6" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="670.0" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="673.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (42 samples, 1.22%)</title><rect x="670.3" y="515.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (41 samples, 1.19%)</title><rect x="670.6" y="499.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.19%)</title><rect x="670.6" y="483.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.19%)</title><rect x="670.6" y="467.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="673.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (37 samples, 1.07%)</title><rect x="670.6" y="451.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="673.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (37 samples, 1.07%)</title><rect x="670.6" y="435.0" width="12.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 1.04%)</title><rect x="671.0" y="419.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.0" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="671.3" y="403.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="674.3" y="414.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.99%)</title><rect x="671.7" y="403.0" width="11.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="674.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.12%)</title><rect x="683.3" y="451.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.3" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="684.3" y="435.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="687.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.remaining (1 samples, 0.03%)</title><rect x="684.7" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="687.7" y="526.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.next (1 samples, 0.03%)</title><rect x="684.7" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.7" y="510.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$List12.get (1 samples, 0.03%)</title><rect x="684.7" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="687.7" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.03%)</title><rect x="685.0" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$442/2143991438.accept (2 samples, 0.06%)</title><rect x="685.4" y="707.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="688.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$5 (2 samples, 0.06%)</title><rect x="685.4" y="691.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$430/877989757.run (2 samples, 0.06%)</title><rect x="685.4" y="675.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$2 (2 samples, 0.06%)</title><rect x="685.4" y="659.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.resetInterestOps (2 samples, 0.06%)</title><rect x="685.4" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="688.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (6 samples, 0.17%)</title><rect x="686.0" y="723.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="689.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (6 samples, 0.17%)</title><rect x="686.0" y="707.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.0" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="686.0" y="691.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="689.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (3 samples, 0.09%)</title><rect x="686.4" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (3 samples, 0.09%)</title><rect x="686.4" y="675.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="689.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.09%)</title><rect x="686.4" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.06%)</title><rect x="686.7" y="643.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="689.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.03%)</title><rect x="686.7" y="627.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="689.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.03%)</title><rect x="686.7" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.7" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.03%)</title><rect x="686.7" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="689.7" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="686.7" y="579.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="689.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.03%)</title><rect x="687.1" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.getOpFlags (2 samples, 0.06%)</title><rect x="687.4" y="691.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (53 samples, 1.54%)</title><rect x="688.1" y="723.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$282/549125360.run (39 samples, 1.13%)</title><rect x="688.1" y="707.0" width="13.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (39 samples, 1.13%)</title><rect x="688.1" y="691.0" width="13.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (39 samples, 1.13%)</title><rect x="688.1" y="675.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (38 samples, 1.10%)</title><rect x="688.4" y="659.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="688.4" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="691.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="688.4" y="627.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="688.4" y="611.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="688.4" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="688.4" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="688.4" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="688.4" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="691.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (37 samples, 1.07%)</title><rect x="688.8" y="643.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (37 samples, 1.07%)</title><rect x="688.8" y="627.0" width="12.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="691.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$270/1384667838.run (35 samples, 1.01%)</title><rect x="689.5" y="611.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (35 samples, 1.01%)</title><rect x="689.5" y="595.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (33 samples, 0.96%)</title><rect x="689.8" y="579.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="692.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (33 samples, 0.96%)</title><rect x="689.8" y="563.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="692.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (3 samples, 0.09%)</title><rect x="690.2" y="547.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (3 samples, 0.09%)</title><rect x="690.2" y="531.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (3 samples, 0.09%)</title><rect x="690.2" y="515.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (3 samples, 0.09%)</title><rect x="690.2" y="499.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="693.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (3 samples, 0.09%)</title><rect x="690.2" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (3 samples, 0.09%)</title><rect x="690.2" y="467.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (3 samples, 0.09%)</title><rect x="690.2" y="451.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="693.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (3 samples, 0.09%)</title><rect x="690.2" y="435.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="693.2" y="446.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="690.5" y="419.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="690.5" y="403.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="690.5" y="387.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (29 samples, 0.84%)</title><rect x="691.2" y="547.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="694.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (29 samples, 0.84%)</title><rect x="691.2" y="531.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="694.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (21 samples, 0.61%)</title><rect x="693.9" y="515.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="696.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (21 samples, 0.61%)</title><rect x="693.9" y="499.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (21 samples, 0.61%)</title><rect x="693.9" y="483.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (21 samples, 0.61%)</title><rect x="693.9" y="467.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="696.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.14%)</title><rect x="693.9" y="451.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.14%)</title><rect x="693.9" y="435.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="696.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.14%)</title><rect x="693.9" y="419.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="696.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.14%)</title><rect x="693.9" y="403.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="696.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.20%)</title><rect x="695.6" y="451.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.20%)</title><rect x="695.6" y="435.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="698.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.20%)</title><rect x="695.6" y="419.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.20%)</title><rect x="695.6" y="403.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="698.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.20%)</title><rect x="695.6" y="387.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.6" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.20%)</title><rect x="695.6" y="371.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="698.6" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.17%)</title><rect x="696.0" y="355.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="699.0" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.17%)</title><rect x="696.0" y="339.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="699.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.17%)</title><rect x="696.0" y="323.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="699.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.26%)</title><rect x="698.0" y="451.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="701.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.26%)</title><rect x="698.0" y="435.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.26%)</title><rect x="698.0" y="419.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="701.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.26%)</title><rect x="698.0" y="403.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="701.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.26%)</title><rect x="698.0" y="387.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="701.0" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.26%)</title><rect x="698.0" y="371.0" width="3.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="701.0" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="698.0" y="355.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="701.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="698.0" y="339.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="701.0" y="350.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.06%)</title><rect x="698.0" y="323.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="701.0" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (2 samples, 0.06%)</title><rect x="698.0" y="307.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="701.0" y="318.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="698.0" y="291.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="701.0" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="698.4" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="701.4" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="698.4" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="701.4" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="698.7" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="701.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.14%)</title><rect x="699.0" y="355.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="702.0" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="700.8" y="355.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="703.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (1 samples, 0.03%)</title><rect x="701.1" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="701.1" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="704.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="701.1" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="701.1" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.03%)</title><rect x="701.1" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.03%)</title><rect x="701.1" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="704.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.03%)</title><rect x="701.1" y="483.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="704.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$297/974608749.run (14 samples, 0.41%)</title><rect x="701.4" y="707.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="704.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (14 samples, 0.41%)</title><rect x="701.4" y="691.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (14 samples, 0.41%)</title><rect x="701.4" y="675.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 0.41%)</title><rect x="701.4" y="659.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="704.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (13 samples, 0.38%)</title><rect x="701.8" y="643.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.06%)</title><rect x="701.8" y="627.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.06%)</title><rect x="701.8" y="611.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.06%)</title><rect x="701.8" y="595.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="701.8" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="702.5" y="627.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="705.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="702.5" y="611.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="705.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.14%)</title><rect x="702.5" y="595.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="705.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.14%)</title><rect x="702.5" y="579.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="705.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.14%)</title><rect x="702.5" y="563.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="705.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.14%)</title><rect x="702.5" y="547.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="705.5" y="558.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.14%)</title><rect x="702.5" y="531.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="705.5" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.14%)</title><rect x="702.5" y="515.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="705.5" y="526.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.14%)</title><rect x="702.5" y="499.0" width="1.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="705.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.17%)</title><rect x="704.2" y="627.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="707.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.17%)</title><rect x="704.2" y="611.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="707.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.17%)</title><rect x="704.2" y="595.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.17%)</title><rect x="704.2" y="579.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="707.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.17%)</title><rect x="704.2" y="563.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="707.2" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.03%)</title><rect x="704.2" y="547.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="707.2" y="558.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="704.5" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="707.5" y="558.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="704.9" y="547.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="707.9" y="558.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="704.9" y="531.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="707.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (1 samples, 0.03%)</title><rect x="706.2" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (32 samples, 0.93%)</title><rect x="706.6" y="723.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.6" y="734.0"></text>
</g>
<g>
<title>java/time/Instant.now (3 samples, 0.09%)</title><rect x="706.6" y="707.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.6" y="718.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (3 samples, 0.09%)</title><rect x="706.6" y="691.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (3 samples, 0.09%)</title><rect x="706.6" y="675.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="686.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (3 samples, 0.09%)</title><rect x="706.6" y="659.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="709.6" y="670.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (3 samples, 0.09%)</title><rect x="706.6" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="709.6" y="654.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="706.9" y="627.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="709.9" y="638.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="707.3" y="627.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="710.3" y="638.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="707.3" y="611.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="710.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (29 samples, 0.84%)</title><rect x="707.6" y="707.0" width="9.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="710.6" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="709.3" y="691.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="712.3" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (12 samples, 0.35%)</title><rect x="709.7" y="691.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="712.7" y="702.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="709.7" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.7" y="686.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="709.7" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.7" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (11 samples, 0.32%)</title><rect x="710.0" y="675.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="713.0" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="710.0" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="713.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (10 samples, 0.29%)</title><rect x="710.3" y="659.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="713.3" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="713.4" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="716.4" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="713.8" y="691.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="716.8" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (3 samples, 0.09%)</title><rect x="714.4" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.4" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.06%)</title><rect x="715.5" y="691.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="718.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.nextExpiryDeadline (1 samples, 0.03%)</title><rect x="716.2" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.2" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.03%)</title><rect x="716.2" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.2" y="686.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.03%)</title><rect x="716.2" y="659.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="719.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (3 samples, 0.09%)</title><rect x="716.5" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="719.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.events (2 samples, 0.06%)</title><rect x="717.5" y="723.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.5" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.06%)</title><rect x="717.5" y="707.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.06%)</title><rect x="717.5" y="691.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="720.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.06%)</title><rect x="717.5" y="675.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="720.5" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (2 samples, 0.06%)</title><rect x="717.5" y="659.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (5 samples, 0.14%)</title><rect x="718.2" y="723.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="719.2" y="707.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="719.2" y="691.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="722.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="719.2" y="675.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.2" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (43 samples, 1.25%)</title><rect x="719.9" y="723.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.9" y="734.0"></text>
</g>
<g>
<title>java/time/Instant.now (12 samples, 0.35%)</title><rect x="722.7" y="707.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="725.7" y="718.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (12 samples, 0.35%)</title><rect x="722.7" y="691.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (9 samples, 0.26%)</title><rect x="723.7" y="675.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="726.7" y="686.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (8 samples, 0.23%)</title><rect x="724.0" y="659.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="727.0" y="670.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="724.7" y="643.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="727.7" y="654.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (4 samples, 0.12%)</title><rect x="725.4" y="643.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="728.4" y="654.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.12%)</title><rect x="725.4" y="627.0" width="1.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="728.4" y="638.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.09%)</title><rect x="725.7" y="611.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="728.7" y="622.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="726.1" y="595.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="729.1" y="606.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="726.4" y="595.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="729.4" y="606.0"></text>
</g>
<g>
<title>java/time/Instant.until (4 samples, 0.12%)</title><rect x="726.8" y="707.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.8" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (5 samples, 0.14%)</title><rect x="728.1" y="707.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="731.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (3 samples, 0.09%)</title><rect x="728.8" y="691.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.8" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.09%)</title><rect x="728.8" y="675.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.8" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (4 samples, 0.12%)</title><rect x="729.8" y="707.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.8" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.hasNext (1 samples, 0.03%)</title><rect x="731.2" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="734.2" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (2 samples, 0.06%)</title><rect x="731.5" y="707.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="734.5" y="718.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (6 samples, 0.17%)</title><rect x="732.2" y="707.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.2" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="733.6" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="736.6" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.03%)</title><rect x="733.6" y="675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.6" y="686.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.03%)</title><rect x="733.6" y="659.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="736.6" y="670.0"></text>
</g>
<g>
<title>java/util/TreeMap.navigableKeySet (1 samples, 0.03%)</title><rect x="733.9" y="691.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="736.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.deadline (1 samples, 0.03%)</title><rect x="734.3" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (413 samples, 11.97%)</title><rect x="734.6" y="723.0" width="141.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.6" y="734.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (1 samples, 0.03%)</title><rect x="735.0" y="707.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (411 samples, 11.92%)</title><rect x="735.3" y="707.0" width="140.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="738.3" y="718.0">sun/nio/ch/Selecto..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (410 samples, 11.89%)</title><rect x="735.7" y="691.0" width="140.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.7" y="702.0">sun/nio/ch/KQueueS..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="736.3" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="739.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (341 samples, 9.89%)</title><rect x="736.7" y="675.0" width="116.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="739.7" y="686.0">sun/nio/ch/KQu..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.09%)</title><rect x="742.8" y="659.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="745.8" y="670.0"></text>
</g>
<g>
<title>kevent (320 samples, 9.28%)</title><rect x="743.9" y="659.0" width="109.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="746.9" y="670.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (60 samples, 1.74%)</title><rect x="853.3" y="675.0" width="20.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="856.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="853.3" y="659.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="856.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="853.3" y="643.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="856.3" y="654.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (2 samples, 0.06%)</title><rect x="853.3" y="627.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="856.3" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="853.7" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="856.7" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="853.7" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="856.7" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="853.7" y="579.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="856.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (54 samples, 1.57%)</title><rect x="854.0" y="659.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.0" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.09%)</title><rect x="854.7" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="857.7" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.09%)</title><rect x="854.7" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.7" y="638.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.03%)</title><rect x="854.7" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="857.7" y="622.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*) (1 samples, 0.03%)</title><rect x="854.7" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.7" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="855.1" y="611.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="858.1" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="855.1" y="595.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="858.1" y="606.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="855.4" y="611.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="858.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (49 samples, 1.42%)</title><rect x="855.7" y="643.0" width="16.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.7" y="654.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_drain (6 samples, 0.17%)</title><rect x="856.1" y="627.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="859.1" y="638.0"></text>
</g>
<g>
<title>rpc_errlist (42 samples, 1.22%)</title><rect x="858.1" y="627.0" width="14.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="861.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.12%)</title><rect x="872.5" y="659.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="875.5" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="873.2" y="643.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="876.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="873.5" y="643.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="876.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="873.5" y="627.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="873.5" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="876.5" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="873.5" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="876.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.06%)</title><rect x="873.9" y="675.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="876.9" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.09%)</title><rect x="874.6" y="675.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="877.6" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.09%)</title><rect x="874.6" y="659.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.6" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.09%)</title><rect x="874.6" y="643.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="877.6" y="654.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.09%)</title><rect x="874.6" y="627.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.09%)</title><rect x="874.6" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="877.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="875.6" y="675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="878.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (7 samples, 0.20%)</title><rect x="875.9" y="723.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="878.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (7 samples, 0.20%)</title><rect x="875.9" y="707.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="878.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (7 samples, 0.20%)</title><rect x="875.9" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="878.9" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (4 samples, 0.12%)</title><rect x="875.9" y="675.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="878.9" y="686.0"></text>
</g>
<g>
<title>kevent (4 samples, 0.12%)</title><rect x="875.9" y="659.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="878.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.09%)</title><rect x="877.3" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="880.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (2 samples, 0.06%)</title><rect x="877.3" y="659.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="880.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.03%)</title><rect x="877.6" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="880.6" y="654.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="877.6" y="627.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="880.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="878.0" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (6 samples, 0.17%)</title><rect x="878.3" y="723.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="881.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (5 samples, 0.14%)</title><rect x="878.7" y="707.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (4 samples, 0.12%)</title><rect x="879.0" y="691.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="882.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.09%)</title><rect x="880.4" y="723.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="883.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="880.7" y="707.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="883.7" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.03%)</title><rect x="881.1" y="707.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.1" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (892 samples, 25.86%)</title><rect x="881.4" y="739.0" width="305.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="884.4" y="750.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (173 samples, 5.02%)</title><rect x="883.1" y="723.0" width="59.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="886.1" y="734.0">one/ni..</text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="883.1" y="707.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="886.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="883.5" y="707.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="886.5" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="884.1" y="707.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.1" y="718.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="884.1" y="691.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="887.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (168 samples, 4.87%)</title><rect x="884.5" y="707.0" width="57.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="887.5" y="718.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (168 samples, 4.87%)</title><rect x="884.5" y="691.0" width="57.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="887.5" y="702.0">sun/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.03%)</title><rect x="884.5" y="675.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="887.5" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (167 samples, 4.84%)</title><rect x="884.8" y="675.0" width="57.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="887.8" y="686.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (148 samples, 4.29%)</title><rect x="885.2" y="659.0" width="50.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.2" y="670.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.06%)</title><rect x="887.6" y="643.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="890.6" y="654.0"></text>
</g>
<g>
<title>kevent (139 samples, 4.03%)</title><rect x="888.2" y="643.0" width="47.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="891.2" y="654.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (8 samples, 0.23%)</title><rect x="935.8" y="659.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="935.8" y="643.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="938.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="935.8" y="627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="938.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (7 samples, 0.20%)</title><rect x="936.1" y="643.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="936.8" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="936.8" y="611.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="939.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="936.8" y="595.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="936.8" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="939.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="937.2" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="940.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="937.5" y="627.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="940.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="937.5" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="940.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.03%)</title><rect x="937.5" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="940.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndUpdateReadyOps (1 samples, 0.03%)</title><rect x="937.9" y="627.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="937.9" y="611.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="940.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="938.2" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.09%)</title><rect x="938.5" y="659.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="941.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.12%)</title><rect x="939.6" y="659.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="942.6" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.12%)</title><rect x="939.6" y="643.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="942.6" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="939.6" y="627.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="939.6" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="942.6" y="622.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.09%)</title><rect x="939.9" y="627.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="942.9" y="638.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.09%)</title><rect x="939.9" y="611.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="942.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.09%)</title><rect x="939.9" y="595.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="940.9" y="659.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.9" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="940.9" y="643.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="943.9" y="654.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="940.9" y="627.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.9" y="638.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="940.9" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="943.9" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="940.9" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="943.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.06%)</title><rect x="941.3" y="659.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="944.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.06%)</title><rect x="941.3" y="643.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="944.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.06%)</title><rect x="941.3" y="627.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="944.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="942.0" y="707.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="945.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="942.0" y="691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="945.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="942.0" y="675.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="945.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (714 samples, 20.70%)</title><rect x="942.3" y="723.0" width="244.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="945.3" y="734.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (714 samples, 20.70%)</title><rect x="942.3" y="707.0" width="244.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.3" y="718.0">one/nio/http/HttpSession.process..</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="942.6" y="691.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="945.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (664 samples, 19.25%)</title><rect x="943.3" y="691.0" width="227.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="946.3" y="702.0">one/nio/http/HttpSession.proce..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="944.4" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="947.4" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="944.7" y="675.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="947.7" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (637 samples, 18.47%)</title><rect x="945.0" y="675.0" width="218.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.0" y="686.0">one/nio/http/HttpSession.hand..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (637 samples, 18.47%)</title><rect x="945.0" y="659.0" width="218.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.0" y="670.0">one/nio/http/HttpServer.handl..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (633 samples, 18.35%)</title><rect x="945.0" y="643.0" width="216.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.0" y="654.0">RequestHandler0_entity.handl..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="945.0" y="627.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="948.0" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="945.0" y="611.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="948.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="945.0" y="595.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="948.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4 samples, 0.12%)</title><rect x="945.4" y="627.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.09%)</title><rect x="945.7" y="611.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="945.7" y="595.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="948.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="945.7" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="948.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="946.1" y="595.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="949.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="946.1" y="579.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="949.1" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="946.4" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="949.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="946.4" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="949.4" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="946.4" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="949.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="946.4" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.4" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="946.4" y="499.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="949.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.entity (628 samples, 18.21%)</title><rect x="946.7" y="627.0" width="214.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="949.7" y="638.0">ru/mail/polis/service/Replic..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="947.1" y="611.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="947.4" y="595.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="950.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="947.4" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="950.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.handle (625 samples, 18.12%)</title><rect x="947.8" y="611.0" width="213.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="950.8" y="622.0">ru/mail/polis/service/Replic..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleGet (622 samples, 18.03%)</title><rect x="947.8" y="595.0" width="212.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="950.8" y="606.0">ru/mail/polis/service/Replic..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="947.8" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.8" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="947.8" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="950.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$597/1897477583.get$Lambda (1 samples, 0.03%)</title><rect x="947.8" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="950.8" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="948.1" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="951.1" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="948.1" y="563.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="948.1" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="951.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="948.1" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="951.1" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="948.1" y="515.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="951.1" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="948.1" y="499.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="951.1" y="510.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="948.1" y="483.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.09%)</title><rect x="948.5" y="579.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="951.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.09%)</title><rect x="948.5" y="563.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="951.5" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="949.1" y="547.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="952.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="949.5" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="952.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="949.5" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="952.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="949.5" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="952.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="949.5" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="952.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="949.5" y="515.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="952.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (51 samples, 1.48%)</title><rect x="949.8" y="579.0" width="17.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (51 samples, 1.48%)</title><rect x="949.8" y="563.0" width="17.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="952.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (51 samples, 1.48%)</title><rect x="949.8" y="547.0" width="17.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="952.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (49 samples, 1.42%)</title><rect x="950.5" y="531.0" width="16.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="953.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.06%)</title><rect x="950.5" y="515.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.06%)</title><rect x="950.5" y="499.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="953.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.06%)</title><rect x="950.5" y="483.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="953.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="950.5" y="467.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="953.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.14%)</title><rect x="951.2" y="515.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="954.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.14%)</title><rect x="951.2" y="499.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="954.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.14%)</title><rect x="951.2" y="483.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="954.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.12%)</title><rect x="951.5" y="467.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="954.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.12%)</title><rect x="951.5" y="451.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="954.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.12%)</title><rect x="951.5" y="435.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="954.5" y="446.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="951.9" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.9" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="952.2" y="419.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="955.2" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="952.2" y="403.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="955.2" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="952.2" y="387.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="955.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (42 samples, 1.22%)</title><rect x="952.9" y="515.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="955.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (42 samples, 1.22%)</title><rect x="952.9" y="499.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (42 samples, 1.22%)</title><rect x="952.9" y="483.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (42 samples, 1.22%)</title><rect x="952.9" y="467.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="955.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (41 samples, 1.19%)</title><rect x="953.2" y="451.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="956.2" y="462.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="953.2" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="956.2" y="446.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="953.6" y="435.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="956.6" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 1.13%)</title><rect x="953.9" y="435.0" width="13.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="956.9" y="446.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="953.9" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="956.9" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="954.3" y="419.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.3" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="954.6" y="403.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="957.6" y="414.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="954.6" y="387.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="957.6" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="954.6" y="371.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.6" y="382.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="954.6" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="957.6" y="366.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="954.6" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="957.6" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="954.6" y="323.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.6" y="334.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="954.6" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="957.6" y="318.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="955.0" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.0" y="430.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="955.3" y="419.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="958.3" y="430.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="955.3" y="403.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="958.3" y="414.0"></text>
</g>
<g>
<title>__psynch_cvsignal (31 samples, 0.90%)</title><rect x="955.6" y="419.0" width="10.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="958.6" y="430.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.06%)</title><rect x="966.2" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="966.9" y="419.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="969.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (79 samples, 2.29%)</title><rect x="967.3" y="579.0" width="27.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="970.3" y="590.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (79 samples, 2.29%)</title><rect x="967.3" y="563.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="970.3" y="574.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (79 samples, 2.29%)</title><rect x="967.3" y="547.0" width="27.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="970.3" y="558.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (78 samples, 2.26%)</title><rect x="967.6" y="531.0" width="26.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.6" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1 samples, 0.03%)</title><rect x="968.0" y="515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="971.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.03%)</title><rect x="968.0" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="971.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.03%)</title><rect x="968.0" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="971.0" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (43 samples, 1.25%)</title><rect x="968.3" y="515.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="971.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (2 samples, 0.06%)</title><rect x="968.3" y="499.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="971.3" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (5 samples, 0.14%)</title><rect x="969.0" y="499.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.0" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.06%)</title><rect x="969.0" y="483.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="972.0" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.06%)</title><rect x="969.0" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="972.0" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (2 samples, 0.06%)</title><rect x="969.0" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.0" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.06%)</title><rect x="969.0" y="435.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="972.0" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.06%)</title><rect x="969.0" y="419.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="969.3" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="969.3" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="969.3" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="972.3" y="382.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.03%)</title><rect x="969.7" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="969.7" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="972.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.03%)</title><rect x="969.7" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="972.7" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.characteristics (1 samples, 0.03%)</title><rect x="969.7" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="972.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (2 samples, 0.06%)</title><rect x="970.0" y="483.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="973.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="970.4" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.4" y="478.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.03%)</title><rect x="970.4" y="451.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="970.4" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="970.4" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="973.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.03%)</title><rect x="970.4" y="403.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="973.4" y="414.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.03%)</title><rect x="970.4" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.4" y="398.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.estimateSize (1 samples, 0.03%)</title><rect x="970.4" y="371.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="973.4" y="382.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.getFence (1 samples, 0.03%)</title><rect x="970.4" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="973.4" y="366.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (4 samples, 0.12%)</title><rect x="970.7" y="499.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.7" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (4 samples, 0.12%)</title><rect x="970.7" y="483.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="973.7" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (4 samples, 0.12%)</title><rect x="970.7" y="467.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="973.7" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (4 samples, 0.12%)</title><rect x="970.7" y="451.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.7" y="462.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (4 samples, 0.12%)</title><rect x="970.7" y="435.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="973.7" y="446.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (4 samples, 0.12%)</title><rect x="970.7" y="419.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="973.7" y="430.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.09%)</title><rect x="970.7" y="403.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="973.7" y="414.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (3 samples, 0.09%)</title><rect x="970.7" y="387.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="973.7" y="398.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.09%)</title><rect x="970.7" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.03%)</title><rect x="970.7" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.03%)</title><rect x="970.7" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="973.7" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$78/212683148.test (2 samples, 0.06%)</title><rect x="971.0" y="355.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="974.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (2 samples, 0.06%)</title><rect x="971.0" y="339.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="974.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (1 samples, 0.03%)</title><rect x="971.0" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.0" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (1 samples, 0.03%)</title><rect x="971.0" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="974.0" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.03%)</title><rect x="971.0" y="291.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="974.0" y="302.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (1 samples, 0.03%)</title><rect x="971.0" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.0" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.03%)</title><rect x="971.0" y="259.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.0" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.03%)</title><rect x="971.0" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.0" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="971.0" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="974.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="971.0" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="974.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="971.0" y="195.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="971.0" y="179.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="974.0" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="971.0" y="163.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="974.0" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (1 samples, 0.03%)</title><rect x="971.4" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="974.4" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.03%)</title><rect x="971.7" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="974.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.03%)</title><rect x="972.1" y="499.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="975.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.03%)</title><rect x="972.1" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="975.1" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="972.1" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="975.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (30 samples, 0.87%)</title><rect x="972.4" y="499.0" width="10.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.4" y="510.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (30 samples, 0.87%)</title><rect x="972.4" y="483.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="975.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.03%)</title><rect x="972.4" y="467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="975.4" y="478.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.03%)</title><rect x="972.4" y="451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="975.4" y="462.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (29 samples, 0.84%)</title><rect x="972.7" y="467.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="975.7" y="478.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="973.4" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.4" y="462.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (14 samples, 0.41%)</title><rect x="973.8" y="451.0" width="4.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="976.8" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="973.8" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.8" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="973.8" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="976.8" y="430.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="973.8" y="403.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="976.8" y="414.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.12%)</title><rect x="974.1" y="435.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="977.1" y="446.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="974.8" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="977.8" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="975.1" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="978.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.06%)</title><rect x="975.5" y="435.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.5" y="446.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="975.5" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="978.5" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="975.5" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.5" y="414.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="975.8" y="419.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="978.8" y="430.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="976.2" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.2" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (6 samples, 0.17%)</title><rect x="976.5" y="435.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.5" y="446.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (3 samples, 0.09%)</title><rect x="976.5" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="979.5" y="430.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.06%)</title><rect x="976.9" y="403.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.9" y="414.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (3 samples, 0.09%)</title><rect x="977.5" y="419.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.5" y="430.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="977.5" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="980.5" y="414.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="977.5" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="980.5" y="398.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="977.5" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="980.5" y="382.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="977.5" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.5" y="366.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="977.5" y="339.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="980.5" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.06%)</title><rect x="977.9" y="403.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.9" y="414.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="977.9" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.9" y="398.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.03%)</title><rect x="978.2" y="387.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="981.2" y="398.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.03%)</title><rect x="978.2" y="371.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.2" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="978.6" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="981.6" y="462.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedAction_2 (1 samples, 0.03%)</title><rect x="978.9" y="451.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="981.9" y="462.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="979.2" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="982.2" y="462.0"></text>
</g>
<g>
<title>call_stub (2 samples, 0.06%)</title><rect x="979.6" y="451.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="982.6" y="462.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (7 samples, 0.20%)</title><rect x="980.3" y="451.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="983.3" y="462.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (6 samples, 0.17%)</title><rect x="980.6" y="435.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.6" y="446.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.06%)</title><rect x="980.6" y="419.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.6" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.06%)</title><rect x="980.6" y="403.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="983.6" y="414.0"></text>
</g>
<g>
<title>sun/net/NetProperties.get (4 samples, 0.12%)</title><rect x="981.3" y="419.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="984.3" y="430.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (1 samples, 0.03%)</title><rect x="981.6" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="984.6" y="414.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="981.6" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="984.6" y="398.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="982.0" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="982.0" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="985.0" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="982.3" y="403.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="985.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (1 samples, 0.03%)</title><rect x="982.7" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="985.7" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (9 samples, 0.26%)</title><rect x="983.0" y="515.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (1 samples, 0.03%)</title><rect x="983.0" y="499.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="986.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (8 samples, 0.23%)</title><rect x="983.4" y="499.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="986.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (8 samples, 0.23%)</title><rect x="983.4" y="483.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="986.4" y="494.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (2 samples, 0.06%)</title><rect x="983.4" y="467.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="986.4" y="478.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (2 samples, 0.06%)</title><rect x="983.4" y="451.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="986.4" y="462.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (2 samples, 0.06%)</title><rect x="983.4" y="435.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="986.4" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.09%)</title><rect x="984.0" y="467.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="987.0" y="478.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (3 samples, 0.09%)</title><rect x="984.0" y="451.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="987.0" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (3 samples, 0.09%)</title><rect x="984.0" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.0" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (3 samples, 0.09%)</title><rect x="984.0" y="419.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="987.0" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="984.7" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="987.7" y="414.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (1 samples, 0.03%)</title><rect x="985.1" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.1" y="478.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.03%)</title><rect x="985.1" y="451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="988.1" y="462.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.03%)</title><rect x="985.1" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.1" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.03%)</title><rect x="985.1" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.1" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor12.newInstance (1 samples, 0.03%)</title><rect x="985.4" y="467.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor9.newInstance (1 samples, 0.03%)</title><rect x="985.7" y="467.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="988.7" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (24 samples, 0.70%)</title><rect x="986.1" y="515.0" width="8.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (24 samples, 0.70%)</title><rect x="986.1" y="499.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="989.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (23 samples, 0.67%)</title><rect x="986.1" y="483.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="989.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 0.67%)</title><rect x="986.1" y="467.0" width="7.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="989.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.14%)</title><rect x="986.1" y="451.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="989.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.14%)</title><rect x="986.1" y="435.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="989.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.14%)</title><rect x="986.1" y="419.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.14%)</title><rect x="986.1" y="403.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="989.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.06%)</title><rect x="987.1" y="387.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="990.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.32%)</title><rect x="987.8" y="451.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="990.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 0.32%)</title><rect x="987.8" y="435.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 0.32%)</title><rect x="987.8" y="419.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="990.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (11 samples, 0.32%)</title><rect x="987.8" y="403.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.32%)</title><rect x="987.8" y="387.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="990.8" y="398.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.32%)</title><rect x="987.8" y="371.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.8" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.32%)</title><rect x="987.8" y="355.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="990.8" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.32%)</title><rect x="987.8" y="339.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.8" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.32%)</title><rect x="987.8" y="323.0" width="3.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="990.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.20%)</title><rect x="991.6" y="451.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="994.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.20%)</title><rect x="991.6" y="435.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="994.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.20%)</title><rect x="991.6" y="419.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="994.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.20%)</title><rect x="991.6" y="403.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="994.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.20%)</title><rect x="991.6" y="387.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="994.6" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.20%)</title><rect x="991.6" y="371.0" width="2.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="994.6" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.20%)</title><rect x="991.6" y="355.0" width="2.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="994.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="994.0" y="483.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="997.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="994.0" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="994.0" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="997.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="994.0" y="435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="997.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="994.0" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="997.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="994.0" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="997.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="994.0" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="997.0" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (9 samples, 0.26%)</title><rect x="994.3" y="579.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="997.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (9 samples, 0.26%)</title><rect x="994.3" y="563.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="997.3" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (9 samples, 0.26%)</title><rect x="994.3" y="547.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="997.3" y="558.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (9 samples, 0.26%)</title><rect x="994.3" y="531.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="997.3" y="542.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="994.3" y="515.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="997.3" y="526.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (8 samples, 0.23%)</title><rect x="994.6" y="515.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="997.6" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (6 samples, 0.17%)</title><rect x="995.3" y="499.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="998.3" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (6 samples, 0.17%)</title><rect x="995.3" y="483.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="998.3" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (6 samples, 0.17%)</title><rect x="995.3" y="467.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="998.3" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="995.3" y="451.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="998.3" y="462.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (5 samples, 0.14%)</title><rect x="995.7" y="451.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.7" y="462.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (5 samples, 0.14%)</title><rect x="995.7" y="435.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="998.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (5 samples, 0.14%)</title><rect x="995.7" y="419.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="998.7" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (5 samples, 0.14%)</title><rect x="995.7" y="403.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.7" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (5 samples, 0.14%)</title><rect x="995.7" y="387.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="998.7" y="398.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (5 samples, 0.14%)</title><rect x="995.7" y="371.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="998.7" y="382.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (5 samples, 0.14%)</title><rect x="995.7" y="355.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="998.7" y="366.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (5 samples, 0.14%)</title><rect x="995.7" y="339.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.7" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (2 samples, 0.06%)</title><rect x="996.7" y="323.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="999.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="996.7" y="307.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="999.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (2 samples, 0.06%)</title><rect x="996.7" y="291.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="999.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (2 samples, 0.06%)</title><rect x="996.7" y="275.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="999.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="996.7" y="259.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="999.7" y="270.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="996.7" y="243.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="999.7" y="254.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="997.0" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1000.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (107 samples, 3.10%)</title><rect x="997.4" y="579.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1000.4" y="590.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="997.4" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1 samples, 0.03%)</title><rect x="997.4" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1000.4" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (105 samples, 3.04%)</title><rect x="997.7" y="563.0" width="35.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.7" y="574.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.23%)</title><rect x="997.7" y="547.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1000.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="1000.1" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1003.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1000.1" y="515.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1003.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1000.1" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1003.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1000.1" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="1000.1" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1003.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 2.81%)</title><rect x="1000.5" y="547.0" width="33.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1003.5" y="558.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.write (97 samples, 2.81%)</title><rect x="1000.5" y="531.0" width="33.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1003.5" y="542.0">on..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (97 samples, 2.81%)</title><rect x="1000.5" y="515.0" width="33.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1003.5" y="526.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (94 samples, 2.73%)</title><rect x="1000.8" y="499.0" width="32.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1003.8" y="510.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (94 samples, 2.73%)</title><rect x="1000.8" y="483.0" width="32.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1003.8" y="494.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (94 samples, 2.73%)</title><rect x="1000.8" y="467.0" width="32.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1003.8" y="478.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (91 samples, 2.64%)</title><rect x="1001.8" y="451.0" width="31.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.8" y="462.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (91 samples, 2.64%)</title><rect x="1001.8" y="435.0" width="31.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1004.8" y="446.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (90 samples, 2.61%)</title><rect x="1002.2" y="419.0" width="30.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1005.2" y="430.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (85 samples, 2.46%)</title><rect x="1003.9" y="403.0" width="29.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1006.9" y="414.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="1005.9" y="387.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1008.9" y="398.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1006.3" y="387.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1009.3" y="398.0"></text>
</g>
<g>
<title>write (77 samples, 2.23%)</title><rect x="1006.6" y="387.0" width="26.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1009.6" y="398.0">w..</text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1033.0" y="499.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.0" y="510.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="1033.0" y="483.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1036.0" y="494.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="1033.0" y="467.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1036.0" y="478.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="1033.3" y="451.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1036.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1033.6" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1036.6" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.09%)</title><rect x="1034.0" y="579.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1037.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1034.3" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1037.3" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1034.3" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1037.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1034.7" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1037.7" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1034.7" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1037.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.futureGet (333 samples, 9.65%)</title><rect x="1035.0" y="579.0" width="113.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1038.0" y="590.0">ru/mail/polis/..</text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.12%)</title><rect x="1035.0" y="563.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1038.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.12%)</title><rect x="1035.0" y="547.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1038.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.12%)</title><rect x="1035.0" y="531.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1038.0" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.12%)</title><rect x="1035.0" y="515.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.12%)</title><rect x="1035.0" y="499.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1038.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.get (305 samples, 8.84%)</title><rect x="1036.4" y="563.0" width="104.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1039.4" y="574.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.waitingGet (302 samples, 8.76%)</title><rect x="1037.4" y="547.0" width="103.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.4" y="558.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.managedBlock (297 samples, 8.61%)</title><rect x="1039.1" y="531.0" width="101.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1042.1" y="542.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.block (297 samples, 8.61%)</title><rect x="1039.1" y="515.0" width="101.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1042.1" y="526.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (296 samples, 8.58%)</title><rect x="1039.1" y="499.0" width="101.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1042.1" y="510.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (294 samples, 8.52%)</title><rect x="1039.8" y="483.0" width="100.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1042.8" y="494.0">jdk/internal..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1047.3" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.3" y="478.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="1047.7" y="467.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.7" y="478.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1048.0" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.0" y="478.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (269 samples, 7.80%)</title><rect x="1048.4" y="467.0" width="92.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1051.4" y="478.0">Unsafe_Park..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.03%)</title><rect x="1049.0" y="451.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="1049.4" y="451.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.4" y="462.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.09%)</title><rect x="1049.7" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1052.7" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (3 samples, 0.09%)</title><rect x="1049.7" y="435.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.7" y="446.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.09%)</title><rect x="1049.7" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1052.7" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (3 samples, 0.09%)</title><rect x="1049.7" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.7" y="414.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.03%)</title><rect x="1050.1" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.1" y="398.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="1050.4" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.4" y="398.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.09%)</title><rect x="1050.8" y="451.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="462.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="1050.8" y="435.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.8" y="446.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.03%)</title><rect x="1050.8" y="419.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.8" y="430.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="1051.1" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1054.1" y="430.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="1051.4" y="435.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.4" y="446.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.06%)</title><rect x="1051.8" y="451.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.8" y="462.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.06%)</title><rect x="1051.8" y="435.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.8" y="446.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (250 samples, 7.25%)</title><rect x="1052.5" y="451.0" width="85.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.5" y="462.0">Parker::pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.09%)</title><rect x="1053.1" y="435.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.1" y="446.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="1053.1" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.1" y="430.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.06%)</title><rect x="1053.5" y="419.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1056.5" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1053.8" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.8" y="414.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1053.8" y="387.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.8" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1054.2" y="435.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.2" y="446.0"></text>
</g>
<g>
<title>__psynch_cvwait (241 samples, 6.99%)</title><rect x="1054.5" y="435.0" width="82.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1057.5" y="446.0">__psynch_..</text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="1137.0" y="435.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1140.0" y="446.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1137.7" y="435.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1140.7" y="446.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1138.0" y="451.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.0" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1138.3" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1138.3" y="435.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1138.7" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.7" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1138.7" y="435.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.7" y="446.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1139.0" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.0" y="462.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="1139.4" y="451.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1142.4" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1139.7" y="451.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1142.7" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1140.0" y="451.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1143.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="1140.4" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1143.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.waitingGet (1 samples, 0.03%)</title><rect x="1140.7" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.syncValues (18 samples, 0.52%)</title><rect x="1141.1" y="563.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1144.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collection.stream (4 samples, 0.12%)</title><rect x="1141.1" y="547.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1144.1" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (1 samples, 0.03%)</title><rect x="1141.1" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1144.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (3 samples, 0.09%)</title><rect x="1141.4" y="531.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1144.4" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.characteristics (1 samples, 0.03%)</title><rect x="1141.4" y="515.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1144.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.06%)</title><rect x="1141.8" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1144.8" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="1141.8" y="499.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1144.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (1 samples, 0.03%)</title><rect x="1142.1" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1145.1" y="510.0"></text>
</g>
<g>
<title>java/util/Comparator.comparingLong (2 samples, 0.06%)</title><rect x="1142.4" y="547.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1145.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (12 samples, 0.35%)</title><rect x="1143.1" y="547.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1146.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (12 samples, 0.35%)</title><rect x="1143.1" y="531.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1146.1" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (11 samples, 0.32%)</title><rect x="1143.1" y="515.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1146.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (8 samples, 0.23%)</title><rect x="1144.2" y="499.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1147.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.17%)</title><rect x="1144.5" y="483.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1147.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.12%)</title><rect x="1144.5" y="467.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1147.5" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (2 samples, 0.06%)</title><rect x="1144.5" y="451.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.06%)</title><rect x="1144.5" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1147.5" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils$$Lambda$603/194658375.test (2 samples, 0.06%)</title><rect x="1144.5" y="419.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1147.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.06%)</title><rect x="1145.2" y="451.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1148.2" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.begin (1 samples, 0.03%)</title><rect x="1145.2" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1148.2" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.03%)</title><rect x="1145.5" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1148.5" y="446.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.03%)</title><rect x="1145.5" y="419.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.03%)</title><rect x="1145.5" y="403.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.06%)</title><rect x="1145.9" y="467.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1148.9" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (1 samples, 0.03%)</title><rect x="1146.5" y="483.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.5" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2.makeSink (1 samples, 0.03%)</title><rect x="1146.5" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1149.5" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps.makeRef (1 samples, 0.03%)</title><rect x="1146.9" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1149.9" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.03%)</title><rect x="1146.9" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1149.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.toResponse (5 samples, 0.14%)</title><rect x="1147.2" y="563.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1150.2" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="1147.6" y="547.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1150.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.getBytes (1 samples, 0.03%)</title><rect x="1148.6" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.6" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.setProxyHeader (34 samples, 0.99%)</title><rect x="1148.9" y="579.0" width="11.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1151.9" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="1148.9" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1151.9" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1278677872.invoke (1 samples, 0.03%)</title><rect x="1148.9" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1151.9" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="1148.9" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1151.9" y="542.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="1148.9" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1151.9" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1148.9" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.9" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1148.9" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1148.9" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.9" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1148.9" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.9" y="462.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1148.9" y="435.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1148.9" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.9" y="430.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="1148.9" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.9" y="414.0"></text>
</g>
<g>
<title>java/net/URI.create (23 samples, 0.67%)</title><rect x="1149.3" y="563.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1152.3" y="574.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (23 samples, 0.67%)</title><rect x="1149.3" y="547.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1152.3" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (21 samples, 0.61%)</title><rect x="1150.0" y="531.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.0" y="542.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (1 samples, 0.03%)</title><rect x="1150.0" y="515.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1153.0" y="526.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (1 samples, 0.03%)</title><rect x="1150.0" y="499.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.0" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (20 samples, 0.58%)</title><rect x="1150.3" y="515.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1150.7" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1153.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1150.7" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1153.7" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (3 samples, 0.09%)</title><rect x="1151.0" y="499.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1154.0" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.09%)</title><rect x="1151.0" y="483.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1154.0" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (6 samples, 0.17%)</title><rect x="1152.0" y="499.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1155.0" y="510.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (5 samples, 0.14%)</title><rect x="1152.4" y="483.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1155.4" y="494.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseIPv4Address (4 samples, 0.12%)</title><rect x="1152.4" y="467.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1155.4" y="478.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scanIPv4Address (4 samples, 0.12%)</title><rect x="1152.4" y="451.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (4 samples, 0.12%)</title><rect x="1152.4" y="435.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.03%)</title><rect x="1153.7" y="467.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1156.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="1153.7" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1156.7" y="462.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (9 samples, 0.26%)</title><rect x="1154.1" y="499.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1157.1" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.26%)</title><rect x="1154.1" y="483.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1157.1" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.26%)</title><rect x="1154.1" y="467.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1157.1" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.26%)</title><rect x="1154.1" y="451.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1157.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.setHeader (6 samples, 0.17%)</title><rect x="1157.2" y="563.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1160.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.setHeader (6 samples, 0.17%)</title><rect x="1157.2" y="547.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1160.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (6 samples, 0.17%)</title><rect x="1157.2" y="531.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1160.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (4 samples, 0.12%)</title><rect x="1157.2" y="515.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1160.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (4 samples, 0.12%)</title><rect x="1157.2" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.2" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (4 samples, 0.12%)</title><rect x="1157.2" y="483.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1160.2" y="494.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (4 samples, 0.12%)</title><rect x="1157.2" y="467.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1160.2" y="478.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (4 samples, 0.12%)</title><rect x="1157.2" y="451.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1160.2" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.12%)</title><rect x="1157.2" y="435.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1160.2" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="1158.2" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1161.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="1158.2" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1161.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="1158.2" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1161.2" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="1158.2" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1161.2" y="382.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="1158.2" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1161.2" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (2 samples, 0.06%)</title><rect x="1158.5" y="515.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1161.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.timeout (2 samples, 0.06%)</title><rect x="1159.2" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1162.2" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.equals (2 samples, 0.06%)</title><rect x="1159.2" y="547.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1162.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (2 samples, 0.06%)</title><rect x="1159.9" y="563.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (2 samples, 0.06%)</title><rect x="1159.9" y="547.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (1 samples, 0.03%)</title><rect x="1159.9" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1162.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.03%)</title><rect x="1160.2" y="531.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1163.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.getNodeReplica (2 samples, 0.06%)</title><rect x="1160.6" y="595.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1163.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteBuffer (1 samples, 0.03%)</title><rect x="1161.3" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1164.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1161.3" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1164.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1161.3" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1164.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleGet (1 samples, 0.03%)</title><rect x="1161.3" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1164.3" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.06%)</title><rect x="1161.6" y="643.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1164.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="1161.6" y="627.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1164.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="1161.6" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1164.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.06%)</title><rect x="1162.3" y="643.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1165.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.06%)</title><rect x="1162.3" y="627.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1165.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.06%)</title><rect x="1162.3" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1165.3" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1162.6" y="595.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1165.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.14%)</title><rect x="1163.0" y="675.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1166.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1163.0" y="659.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1166.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1163.0" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1166.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1163.0" y="627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1166.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1163.0" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1166.0" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="1163.3" y="659.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="1163.3" y="643.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1166.3" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="1164.3" y="627.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.03%)</title><rect x="1164.7" y="675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1167.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="1164.7" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1167.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1165.0" y="675.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1168.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1165.0" y="659.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1168.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.43%)</title><rect x="1165.4" y="675.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1168.4" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.14%)</title><rect x="1168.8" y="659.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1171.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1170.2" y="643.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.2" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1170.2" y="627.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.2" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1170.2" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.2" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1170.2" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.2" y="606.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1170.2" y="579.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.2" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1170.2" y="563.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="1170.2" y="547.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (45 samples, 1.30%)</title><rect x="1170.5" y="691.0" width="15.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1173.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (45 samples, 1.30%)</title><rect x="1170.5" y="675.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1173.5" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1170.8" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1173.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (43 samples, 1.25%)</title><rect x="1171.2" y="659.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1174.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1171.2" y="643.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1174.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1171.2" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1174.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1171.2" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1174.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1171.2" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1174.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.22%)</title><rect x="1171.5" y="643.0" width="14.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1174.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.19%)</title><rect x="1171.9" y="627.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1174.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (37 samples, 1.07%)</title><rect x="1171.9" y="611.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (37 samples, 1.07%)</title><rect x="1171.9" y="595.0" width="12.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (34 samples, 0.99%)</title><rect x="1172.9" y="579.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1175.9" y="590.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1172.9" y="563.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1175.9" y="574.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1172.9" y="547.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1175.9" y="558.0"></text>
</g>
<g>
<title>rpc_errlist (33 samples, 0.96%)</title><rect x="1173.2" y="563.0" width="11.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1176.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.12%)</title><rect x="1184.5" y="611.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1187.5" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="1185.2" y="595.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.2" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1185.9" y="691.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="1185.9" y="675.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="1185.9" y="659.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="1185.9" y="643.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.29%)</title><rect x="1186.6" y="739.0" width="3.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.29%)</title><rect x="1186.6" y="723.0" width="3.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.29%)</title><rect x="1186.6" y="707.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.29%)</title><rect x="1186.6" y="691.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 0.23%)</title><rect x="1186.6" y="675.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.23%)</title><rect x="1186.6" y="659.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.06%)</title><rect x="1186.6" y="643.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1186.6" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="1186.9" y="627.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.9" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.17%)</title><rect x="1187.3" y="643.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="654.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.17%)</title><rect x="1187.3" y="627.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.17%)</title><rect x="1187.3" y="611.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="622.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (6 samples, 0.17%)</title><rect x="1187.3" y="595.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="606.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.17%)</title><rect x="1187.3" y="579.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.3" y="590.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (5 samples, 0.14%)</title><rect x="1187.3" y="563.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="574.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (5 samples, 0.14%)</title><rect x="1187.3" y="547.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="558.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.14%)</title><rect x="1187.3" y="531.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="542.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (5 samples, 0.14%)</title><rect x="1187.3" y="515.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1190.3" y="526.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.03%)</title><rect x="1189.0" y="563.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="574.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.03%)</title><rect x="1189.0" y="547.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="558.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.03%)</title><rect x="1189.0" y="531.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.0" y="542.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.03%)</title><rect x="1189.0" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="526.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="1189.3" y="675.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.3" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="1189.3" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.3" y="670.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1189.3" y="643.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1192.3" y="654.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="1189.3" y="627.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1192.3" y="638.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.03%)</title><rect x="1189.7" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.7" y="686.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="1189.7" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.7" y="670.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1189.7" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.7" y="654.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1189.7" y="627.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.7" y="638.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1189.7" y="611.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.7" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1189.7" y="595.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1192.7" y="606.0"></text>
</g>
</g>
</svg>
