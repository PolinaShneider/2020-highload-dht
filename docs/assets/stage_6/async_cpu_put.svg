<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (3,893 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (32 samples, 0.82%)</title><rect x="10.0" y="1043.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (32 samples, 0.82%)</title><rect x="10.0" y="1027.0" width="9.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (31 samples, 0.80%)</title><rect x="10.0" y="1011.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="10.3" y="995.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.3" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.08%)</title><rect x="10.6" y="995.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.6" y="1006.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="10.6" y="979.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.6" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (25 samples, 0.64%)</title><rect x="11.5" y="995.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="1006.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="11.8" y="979.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.8" y="990.0"></text>
</g>
<g>
<title>__psynch_cvwait (23 samples, 0.59%)</title><rect x="12.1" y="979.0" width="7.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="15.1" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="19.1" y="995.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="22.1" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::UnlinkAfterAcquire(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="19.4" y="1011.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="22.4" y="1022.0"></text>
</g>
<g>
<title>ThreadInVMfromJavaNoAsyncException::~ThreadInVMfromJavaNoAsyncException() (1 samples, 0.03%)</title><rect x="19.7" y="1043.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="22.7" y="1054.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.03%)</title><rect x="20.0" y="1043.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="23.0" y="1054.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="20.3" y="1043.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="23.3" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="20.3" y="1027.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="23.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="20.3" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.3" y="1022.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="20.3" y="995.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="23.3" y="1006.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="20.3" y="979.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="23.3" y="990.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="20.3" y="963.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="23.3" y="974.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="20.6" y="1043.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.6" y="1054.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="20.6" y="1027.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,588 samples, 66.48%)</title><rect x="20.9" y="1043.0" width="784.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.9" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,588 samples, 66.48%)</title><rect x="20.9" y="1027.0" width="784.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.9" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,588 samples, 66.48%)</title><rect x="20.9" y="1011.0" width="784.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.9" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (1,530 samples, 39.30%)</title><rect x="23.6" y="995.0" width="463.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.6" y="1006.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (293 samples, 7.53%)</title><rect x="23.9" y="979.0" width="88.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.9" y="990.0">java/util/..</text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="23.9" y="963.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="26.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (37 samples, 0.95%)</title><rect x="24.5" y="963.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 0.95%)</title><rect x="24.5" y="947.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="958.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (37 samples, 0.95%)</title><rect x="24.5" y="931.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.5" y="942.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="24.9" y="915.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="27.9" y="926.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="25.2" y="915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="28.2" y="926.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="25.5" y="915.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="28.5" y="926.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (33 samples, 0.85%)</title><rect x="25.8" y="915.0" width="10.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="28.8" y="926.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="25.8" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="28.8" y="910.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="25.8" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.8" y="894.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="26.1" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.1" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="26.4" y="899.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.4" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="26.7" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="29.7" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="27.0" y="899.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.0" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="27.0" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="30.0" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="27.0" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="30.0" y="878.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="27.3" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="30.3" y="910.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.05%)</title><rect x="27.6" y="899.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="30.6" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="27.9" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="30.9" y="894.0"></text>
</g>
<g>
<title>__psynch_cvsignal (23 samples, 0.59%)</title><rect x="28.2" y="899.0" width="7.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="31.2" y="910.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.05%)</title><rect x="35.2" y="899.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="38.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (251 samples, 6.45%)</title><rect x="35.8" y="963.0" width="76.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.8" y="974.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="36.1" y="947.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.03%)</title><rect x="36.4" y="931.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="39.4" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$154/474961723.apply (248 samples, 6.37%)</title><rect x="36.7" y="947.0" width="75.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.7" y="958.0">jdk/inte..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (248 samples, 6.37%)</title><rect x="36.7" y="931.0" width="75.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="39.7" y="942.0">jdk/inte..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (248 samples, 6.37%)</title><rect x="36.7" y="915.0" width="75.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.7" y="926.0">jdk/inte..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.05%)</title><rect x="36.7" y="899.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="37.0" y="883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.0" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="37.0" y="867.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="37.0" y="851.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (204 samples, 5.24%)</title><rect x="37.3" y="899.0" width="61.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.3" y="910.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (204 samples, 5.24%)</title><rect x="37.3" y="883.0" width="61.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="894.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (204 samples, 5.24%)</title><rect x="37.3" y="867.0" width="61.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="878.0">jdk/in..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (100 samples, 2.57%)</title><rect x="37.3" y="851.0" width="30.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.3" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (100 samples, 2.57%)</title><rect x="37.3" y="835.0" width="30.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.3" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (99 samples, 2.54%)</title><rect x="37.3" y="819.0" width="30.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="830.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$351/2019708730.apply (99 samples, 2.54%)</title><rect x="37.3" y="803.0" width="30.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="814.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (99 samples, 2.54%)</title><rect x="37.3" y="787.0" width="30.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.3" y="798.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (99 samples, 2.54%)</title><rect x="37.3" y="771.0" width="30.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.3" y="782.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$197/68056152.apply (99 samples, 2.54%)</title><rect x="37.3" y="755.0" width="30.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.3" y="766.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (99 samples, 2.54%)</title><rect x="37.3" y="739.0" width="30.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="750.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (3 samples, 0.08%)</title><rect x="37.3" y="723.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (3 samples, 0.08%)</title><rect x="37.3" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (3 samples, 0.08%)</title><rect x="37.3" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.apply (3 samples, 0.08%)</title><rect x="37.3" y="675.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (3 samples, 0.08%)</title><rect x="37.3" y="659.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (3 samples, 0.08%)</title><rect x="37.3" y="643.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$191/1609992908.apply (3 samples, 0.08%)</title><rect x="37.3" y="627.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (3 samples, 0.08%)</title><rect x="37.3" y="611.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="40.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (3 samples, 0.08%)</title><rect x="37.3" y="595.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenAccept (3 samples, 0.08%)</title><rect x="37.3" y="579.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptStage (3 samples, 0.08%)</title><rect x="37.3" y="563.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptNow (3 samples, 0.08%)</title><rect x="37.3" y="547.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$466/120837901.accept (3 samples, 0.08%)</title><rect x="37.3" y="531.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$8 (3 samples, 0.08%)</title><rect x="37.3" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.3" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (3 samples, 0.08%)</title><rect x="37.3" y="499.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.3" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.request (3 samples, 0.08%)</title><rect x="37.3" y="483.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.3" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription.request (3 samples, 0.08%)</title><rect x="37.3" y="467.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.08%)</title><rect x="37.3" y="451.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (3 samples, 0.08%)</title><rect x="37.3" y="435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (3 samples, 0.08%)</title><rect x="37.3" y="419.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (3 samples, 0.08%)</title><rect x="37.3" y="403.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (3 samples, 0.08%)</title><rect x="37.3" y="387.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onComplete (1 samples, 0.03%)</title><rect x="37.3" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.3" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="37.3" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="37.3" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="37.3" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="37.3" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (1 samples, 0.03%)</title><rect x="37.3" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (1 samples, 0.03%)</title><rect x="37.3" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (1 samples, 0.03%)</title><rect x="37.3" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.05%)</title><rect x="37.6" y="371.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (2 samples, 0.05%)</title><rect x="37.6" y="355.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.6" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.05%)</title><rect x="37.6" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.6" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (2 samples, 0.05%)</title><rect x="37.6" y="323.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.6" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="37.6" y="307.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="37.6" y="291.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.05%)</title><rect x="37.6" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.05%)</title><rect x="37.6" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.05%)</title><rect x="37.6" y="243.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (2 samples, 0.05%)</title><rect x="37.6" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (2 samples, 0.05%)</title><rect x="37.6" y="211.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (2 samples, 0.05%)</title><rect x="37.6" y="195.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (2 samples, 0.05%)</title><rect x="37.6" y="179.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (2 samples, 0.05%)</title><rect x="37.6" y="163.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (2 samples, 0.05%)</title><rect x="37.6" y="147.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.6" y="158.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.05%)</title><rect x="37.6" y="131.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.6" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.05%)</title><rect x="37.6" y="115.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.6" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.05%)</title><rect x="37.6" y="99.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.6" y="110.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.05%)</title><rect x="37.6" y="83.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.6" y="94.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (2 samples, 0.05%)</title><rect x="37.6" y="67.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.6" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (2 samples, 0.05%)</title><rect x="37.6" y="51.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.6" y="62.0"></text>
</g>
<g>
<title>writev (2 samples, 0.05%)</title><rect x="37.6" y="35.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="40.6" y="46.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (96 samples, 2.47%)</title><rect x="38.2" y="723.0" width="29.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.2" y="734.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.05%)</title><rect x="38.2" y="707.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="38.2" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (87 samples, 2.23%)</title><rect x="38.8" y="707.0" width="26.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.8" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (87 samples, 2.23%)</title><rect x="38.8" y="691.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.8" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="38.8" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$408/895303210.apply (1 samples, 0.03%)</title><rect x="38.8" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.8" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$408/895303210.apply (86 samples, 2.21%)</title><rect x="39.1" y="675.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.1" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendHeadersAsync$4 (86 samples, 2.21%)</title><rect x="39.1" y="659.0" width="26.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.1" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.03%)</title><rect x="39.1" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="39.1" y="627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.05%)</title><rect x="39.4" y="643.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.03%)</title><rect x="39.7" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="42.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.03%)</title><rect x="39.7" y="611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="40.0" y="643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="40.0" y="627.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="40.0" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="40.0" y="595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.connectFlows (20 samples, 0.51%)</title><rect x="40.3" y="643.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.3" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (20 samples, 0.51%)</title><rect x="40.3" y="627.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="43.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (1 samples, 0.03%)</title><rect x="40.3" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.3" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (1 samples, 0.03%)</title><rect x="40.3" y="595.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (1 samples, 0.03%)</title><rect x="40.3" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (2 samples, 0.05%)</title><rect x="40.6" y="611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.6" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (2 samples, 0.05%)</title><rect x="40.6" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="43.6" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (2 samples, 0.05%)</title><rect x="40.6" y="579.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (1 samples, 0.03%)</title><rect x="40.6" y="563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (1 samples, 0.03%)</title><rect x="40.6" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (1 samples, 0.03%)</title><rect x="40.6" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.03%)</title><rect x="40.9" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.9" y="574.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="40.9" y="547.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="43.9" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="40.9" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="43.9" y="542.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="40.9" y="515.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="43.9" y="526.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="40.9" y="499.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="43.9" y="510.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="40.9" y="483.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="43.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (17 samples, 0.44%)</title><rect x="41.2" y="611.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (17 samples, 0.44%)</title><rect x="41.2" y="595.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (16 samples, 0.41%)</title><rect x="41.2" y="579.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (15 samples, 0.39%)</title><rect x="41.2" y="563.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (15 samples, 0.39%)</title><rect x="41.2" y="547.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="44.2" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="41.2" y="531.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="44.2" y="542.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="41.2" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="44.2" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="41.5" y="515.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="44.5" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="41.5" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="44.5" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="41.5" y="483.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="44.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (13 samples, 0.33%)</title><rect x="41.8" y="531.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.8" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="42.4" y="515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="45.4" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="42.4" y="499.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.4" y="510.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="42.4" y="483.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="45.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (10 samples, 0.26%)</title><rect x="42.7" y="515.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="45.7" y="526.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_write1 (1 samples, 0.03%)</title><rect x="42.7" y="499.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="45.7" y="510.0"></text>
</g>
<g>
<title>write (9 samples, 0.23%)</title><rect x="43.0" y="499.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="46.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (1 samples, 0.03%)</title><rect x="45.8" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="48.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (1 samples, 0.03%)</title><rect x="46.1" y="579.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (1 samples, 0.03%)</title><rect x="46.1" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="46.1" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.1" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.headers (60 samples, 1.54%)</title><rect x="46.4" y="643.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="46.7" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="49.7" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="611.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="49.7" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="595.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="49.7" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="46.7" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="49.7" y="590.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="46.7" y="563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.7" y="574.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="547.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="49.7" y="558.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="46.7" y="531.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="49.7" y="542.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="46.7" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.08%)</title><rect x="47.0" y="627.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.08%)</title><rect x="47.0" y="611.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeASCII (3 samples, 0.08%)</title><rect x="47.0" y="595.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders0 (41 samples, 1.05%)</title><rect x="47.9" y="627.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectCookies (4 samples, 0.10%)</title><rect x="47.9" y="611.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.9" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (4 samples, 0.10%)</title><rect x="47.9" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.9" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.10%)</title><rect x="47.9" y="579.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.9" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (4 samples, 0.10%)</title><rect x="47.9" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (4 samples, 0.10%)</title><rect x="47.9" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (4 samples, 0.10%)</title><rect x="47.9" y="531.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="48.8" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.8" y="526.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="48.8" y="499.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.8" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="48.8" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.collectHeaders1 (22 samples, 0.57%)</title><rect x="49.1" y="611.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="50.3" y="595.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.3" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="50.3" y="579.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="53.3" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="50.3" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.3" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="50.3" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (3 samples, 0.08%)</title><rect x="50.6" y="595.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (3 samples, 0.08%)</title><rect x="50.6" y="579.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.6" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="50.6" y="563.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="53.6" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (2 samples, 0.05%)</title><rect x="50.9" y="563.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (2 samples, 0.05%)</title><rect x="50.9" y="547.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (2 samples, 0.05%)</title><rect x="50.9" y="531.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.9" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.05%)</title><rect x="50.9" y="515.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.9" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey (3 samples, 0.08%)</title><rect x="51.5" y="595.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.5" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntryIterator.next (1 samples, 0.03%)</title><rect x="52.1" y="579.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue (1 samples, 0.03%)</title><rect x="52.4" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="55.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (2 samples, 0.05%)</title><rect x="52.7" y="595.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="55.7" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (2 samples, 0.05%)</title><rect x="52.7" y="579.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.7" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$EntrySet.iterator (1 samples, 0.03%)</title><rect x="53.0" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (1 samples, 0.03%)</title><rect x="53.3" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.3" y="606.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate$$Lambda$446/1530018831.test (4 samples, 0.10%)</title><rect x="53.6" y="595.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.6" y="606.0"></text>
</g>
<g>
<title>java/util/function/BiPredicate.lambda$and$0 (4 samples, 0.10%)</title><rect x="53.6" y="579.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$87/888473870.test (4 samples, 0.10%)</title><rect x="53.6" y="563.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$10 (4 samples, 0.10%)</title><rect x="53.6" y="547.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.6" y="558.0"></text>
</g>
<g>
<title>java/util/function/Predicate$$Lambda$80/1714550218.test (4 samples, 0.10%)</title><rect x="53.6" y="531.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.6" y="542.0"></text>
</g>
<g>
<title>java/util/function/Predicate.lambda$negate$1 (4 samples, 0.10%)</title><rect x="53.6" y="515.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$79/718068661.test (4 samples, 0.10%)</title><rect x="53.6" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.6" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$3 (4 samples, 0.10%)</title><rect x="53.6" y="483.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.10%)</title><rect x="53.6" y="467.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.6" y="478.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.10%)</title><rect x="53.6" y="451.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.6" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.10%)</title><rect x="53.6" y="435.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.6" y="446.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="54.9" y="595.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="57.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$87/888473870.test (1 samples, 0.03%)</title><rect x="55.5" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.5" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.build (15 samples, 0.39%)</title><rect x="55.8" y="611.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.8" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (15 samples, 0.39%)</title><rect x="55.8" y="595.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.8" y="606.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (13 samples, 0.33%)</title><rect x="55.8" y="579.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.8" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (12 samples, 0.31%)</title><rect x="56.1" y="563.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="59.1" y="574.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (10 samples, 0.26%)</title><rect x="56.7" y="547.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.7" y="558.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (10 samples, 0.26%)</title><rect x="56.7" y="531.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.7" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="56.7" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.7" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="56.7" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.7" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.get$Lambda (1 samples, 0.03%)</title><rect x="56.7" y="483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="56.7" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="59.7" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="56.7" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="59.7" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="56.7" y="435.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="59.7" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="56.7" y="419.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="59.7" y="430.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="56.7" y="403.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="59.7" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (3 samples, 0.08%)</title><rect x="57.0" y="515.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.0" y="526.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (3 samples, 0.08%)</title><rect x="57.0" y="499.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.0" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.08%)</title><rect x="57.0" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.0" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (6 samples, 0.15%)</title><rect x="57.9" y="515.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="59.4" y="499.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="59.4" y="483.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="62.4" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="59.4" y="467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.headerFilter (2 samples, 0.05%)</title><rect x="59.7" y="579.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.requestURI (4 samples, 0.10%)</title><rect x="60.3" y="627.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.getPathAndQuery (4 samples, 0.10%)</title><rect x="60.3" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="60.9" y="595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.9" y="606.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="61.2" y="595.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="64.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (10 samples, 0.26%)</title><rect x="61.5" y="627.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.5" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.10%)</title><rect x="62.7" y="611.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="65.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="63.3" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="63.3" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="66.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="63.3" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="66.3" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="63.7" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.7" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="64.0" y="611.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="67.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.on (2 samples, 0.05%)</title><rect x="64.6" y="643.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.&lt;init&gt; (7 samples, 0.18%)</title><rect x="65.2" y="707.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (7 samples, 0.18%)</title><rect x="65.2" y="691.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (7 samples, 0.18%)</title><rect x="65.2" y="675.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.2" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (7 samples, 0.18%)</title><rect x="65.2" y="659.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (4 samples, 0.10%)</title><rect x="66.1" y="643.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (1 samples, 0.03%)</title><rect x="66.1" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peek (1 samples, 0.03%)</title><rect x="66.1" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.peekFirst (1 samples, 0.03%)</title><rect x="66.1" y="595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (3 samples, 0.08%)</title><rect x="66.4" y="627.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (2 samples, 0.05%)</title><rect x="66.7" y="611.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (2 samples, 0.05%)</title><rect x="66.7" y="595.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (2 samples, 0.05%)</title><rect x="66.7" y="579.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (2 samples, 0.05%)</title><rect x="66.7" y="563.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.onSubscribe (2 samples, 0.05%)</title><rect x="66.7" y="547.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1AsyncDelegateSubscription.request (1 samples, 0.03%)</title><rect x="67.0" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="67.0" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="67.3" y="819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="67.3" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.05%)</title><rect x="67.6" y="851.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.05%)</title><rect x="67.6" y="835.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.05%)</title><rect x="67.6" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.6" y="830.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$53/1336735375.apply (1 samples, 0.03%)</title><rect x="67.9" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (102 samples, 2.62%)</title><rect x="68.2" y="851.0" width="30.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.2" y="862.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.03%)</title><rect x="68.2" y="835.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (101 samples, 2.59%)</title><rect x="68.5" y="835.0" width="30.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.5" y="846.0">jd..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (91 samples, 2.34%)</title><rect x="68.5" y="819.0" width="27.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.5" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (91 samples, 2.34%)</title><rect x="68.5" y="803.0" width="27.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="71.5" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (88 samples, 2.26%)</title><rect x="68.5" y="787.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.5" y="798.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$208/234148462.apply (88 samples, 2.26%)</title><rect x="68.5" y="771.0" width="26.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.5" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$get$0 (88 samples, 2.26%)</title><rect x="68.5" y="755.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.5" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createExchangeImpl (88 samples, 2.26%)</title><rect x="68.5" y="739.0" width="26.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.5" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (48 samples, 1.23%)</title><rect x="68.5" y="723.0" width="14.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="71.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (46 samples, 1.18%)</title><rect x="69.1" y="707.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="72.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (46 samples, 1.18%)</title><rect x="69.1" y="691.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$331/604314710.apply (46 samples, 1.18%)</title><rect x="69.1" y="675.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (46 samples, 1.18%)</title><rect x="69.1" y="659.0" width="13.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (46 samples, 1.18%)</title><rect x="69.1" y="643.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (46 samples, 1.18%)</title><rect x="69.1" y="627.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (43 samples, 1.10%)</title><rect x="69.1" y="611.0" width="13.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.1" y="622.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (2 samples, 0.05%)</title><rect x="69.1" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.1" y="606.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (2 samples, 0.05%)</title><rect x="69.1" y="579.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="72.1" y="590.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode0 (1 samples, 0.03%)</title><rect x="69.1" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.1" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getClientSettings (1 samples, 0.03%)</title><rect x="69.4" y="563.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.4" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.03%)</title><rect x="69.7" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getClientSettings (34 samples, 0.87%)</title><rect x="70.0" y="595.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getParameter (32 samples, 0.82%)</title><rect x="70.0" y="579.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getIntegerNetProperty (32 samples, 0.82%)</title><rect x="70.0" y="563.0" width="9.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.0" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (31 samples, 0.80%)</title><rect x="70.3" y="547.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="73.3" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="70.9" y="531.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="73.9" y="542.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (25 samples, 0.64%)</title><rect x="71.2" y="531.0" width="7.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="74.2" y="542.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="72.1" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="75.1" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.05%)</title><rect x="72.4" y="515.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="75.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="72.7" y="499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="75.7" y="510.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="72.7" y="483.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="75.7" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 0.21%)</title><rect x="73.0" y="515.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="76.0" y="526.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="73.0" y="499.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="76.0" y="510.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="73.0" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="76.0" y="494.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="73.3" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="76.3" y="510.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (5 samples, 0.13%)</title><rect x="73.7" y="499.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="76.7" y="510.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="74.0" y="483.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="77.0" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="74.0" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="77.0" y="478.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="74.3" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="77.3" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="74.6" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="77.6" y="494.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="74.9" y="483.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="77.9" y="494.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="75.2" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="78.2" y="510.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="75.5" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="78.5" y="526.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="75.5" y="499.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="78.5" y="510.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="75.5" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="78.5" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="75.8" y="515.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="78.8" y="526.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="75.8" y="499.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="78.8" y="510.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="75.8" y="483.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="78.8" y="494.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="76.1" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.1" y="526.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (8 samples, 0.21%)</title><rect x="76.4" y="515.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="79.4" y="526.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="76.4" y="499.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="79.4" y="510.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (7 samples, 0.18%)</title><rect x="76.7" y="499.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.7" y="510.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (7 samples, 0.18%)</title><rect x="76.7" y="483.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="79.7" y="494.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.08%)</title><rect x="76.7" y="467.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="79.7" y="478.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.05%)</title><rect x="77.0" y="451.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="80.0" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (4 samples, 0.10%)</title><rect x="77.6" y="467.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="80.6" y="478.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.03%)</title><rect x="78.2" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="81.2" y="462.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.03%)</title><rect x="78.5" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="81.5" y="462.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="78.8" y="531.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="81.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$75/1932274274.run (2 samples, 0.05%)</title><rect x="79.1" y="531.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$getIntegerNetProperty$11 (2 samples, 0.05%)</title><rect x="79.1" y="515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="82.1" y="526.0"></text>
</g>
<g>
<title>sun/net/NetProperties.getInteger (2 samples, 0.05%)</title><rect x="79.1" y="499.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.1" y="510.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (1 samples, 0.03%)</title><rect x="79.1" y="483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.1" y="494.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="79.1" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.1" y="478.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="79.1" y="451.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="82.1" y="462.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="79.4" y="483.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="79.4" y="467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.&lt;init&gt; (1 samples, 0.03%)</title><rect x="79.7" y="579.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.&lt;init&gt; (1 samples, 0.03%)</title><rect x="79.7" y="563.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="82.7" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.setParameter (1 samples, 0.03%)</title><rect x="80.0" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteArray (6 samples, 0.15%)</title><rect x="80.3" y="595.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="80.3" y="579.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="80.3" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="80.3" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.length (2 samples, 0.05%)</title><rect x="80.6" y="579.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteBuffer (3 samples, 0.08%)</title><rect x="81.2" y="579.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putInt (2 samples, 0.05%)</title><rect x="81.2" y="563.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.2" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.03%)</title><rect x="81.2" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.03%)</title><rect x="81.2" y="531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putIntUnaligned (1 samples, 0.03%)</title><rect x="81.5" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="84.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="81.5" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.5" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (1 samples, 0.03%)</title><rect x="81.8" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putShortUnaligned (1 samples, 0.03%)</title><rect x="81.8" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (1 samples, 0.03%)</title><rect x="81.8" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.8" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/HttpHeadersBuilder.setHeader (3 samples, 0.08%)</title><rect x="82.1" y="611.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.1" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3 samples, 0.08%)</title><rect x="82.1" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.1" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="82.7" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (40 samples, 1.03%)</title><rect x="83.0" y="723.0" width="12.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (40 samples, 1.03%)</title><rect x="83.0" y="707.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.&lt;init&gt; (1 samples, 0.03%)</title><rect x="83.4" y="691.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.03%)</title><rect x="83.4" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getDebugLogger (1 samples, 0.03%)</title><rect x="83.4" y="659.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.createHttpLogger (1 samples, 0.03%)</title><rect x="83.4" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/DebugLogger.levelEnabledFor (1 samples, 0.03%)</title><rect x="83.4" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="638.0"></text>
</g>
<g>
<title>sun/util/logging/internal/LoggingProviderImpl$JULWrapper.isLoggable (1 samples, 0.03%)</title><rect x="83.4" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="83.7" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Demand.&lt;init&gt; (1 samples, 0.03%)</title><rect x="83.7" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.7" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (11 samples, 0.28%)</title><rect x="84.0" y="691.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.getConnection (8 samples, 0.21%)</title><rect x="84.6" y="675.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.6" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.08%)</title><rect x="84.9" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="87.9" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.08%)</title><rect x="84.9" y="643.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="87.9" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="84.9" y="627.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="87.9" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title><rect x="84.9" y="611.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="87.9" y="622.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="85.5" y="627.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="88.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.findConnection (4 samples, 0.10%)</title><rect x="85.8" y="659.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="85.8" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="85.8" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.8" y="638.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.hashCode (1 samples, 0.03%)</title><rect x="85.8" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.remove (3 samples, 0.08%)</title><rect x="86.1" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.1" y="654.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (3 samples, 0.08%)</title><rect x="86.1" y="627.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.1" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (3 samples, 0.08%)</title><rect x="86.1" y="611.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.1" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (3 samples, 0.08%)</title><rect x="86.1" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (3 samples, 0.08%)</title><rect x="86.1" y="579.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.resolveAddress (1 samples, 0.03%)</title><rect x="87.0" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.proxy (1 samples, 0.03%)</title><rect x="87.0" y="659.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (26 samples, 0.67%)</title><rect x="87.3" y="691.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.3" y="702.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (25 samples, 0.64%)</title><rect x="87.6" y="675.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.6" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="87.6" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="90.6" y="670.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="87.9" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="90.9" y="670.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (15 samples, 0.39%)</title><rect x="88.2" y="659.0" width="4.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="91.2" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="88.8" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="91.8" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="89.1" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="92.1" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="89.1" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.1" y="638.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="89.1" y="611.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="92.1" y="622.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (4 samples, 0.10%)</title><rect x="89.4" y="643.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.4" y="654.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="89.7" y="627.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="92.7" y="638.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.05%)</title><rect x="90.0" y="627.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="93.0" y="638.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="90.3" y="611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="93.3" y="622.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="90.6" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="93.6" y="654.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.05%)</title><rect x="90.9" y="643.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.9" y="654.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="90.9" y="627.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="93.9" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.05%)</title><rect x="90.9" y="611.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="93.9" y="622.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="91.5" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="94.5" y="654.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="91.8" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="94.8" y="654.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="91.8" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="94.8" y="638.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.05%)</title><rect x="92.1" y="643.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="95.1" y="654.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="92.1" y="627.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="95.1" y="638.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="92.4" y="627.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="95.4" y="638.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="92.4" y="611.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="95.4" y="622.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.03%)</title><rect x="92.4" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="95.4" y="606.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.03%)</title><rect x="92.4" y="579.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl$$Lambda$231/2052440742.run (8 samples, 0.21%)</title><rect x="92.7" y="659.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="95.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.lambda$getAddress$5 (7 samples, 0.18%)</title><rect x="93.1" y="643.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.1" y="654.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (1 samples, 0.03%)</title><rect x="93.1" y="627.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.1" y="638.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (6 samples, 0.15%)</title><rect x="93.4" y="627.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="638.0"></text>
</g>
<g>
<title>java/net/InetAddress.getByName (6 samples, 0.15%)</title><rect x="93.4" y="611.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="622.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (6 samples, 0.15%)</title><rect x="93.4" y="595.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="606.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName (6 samples, 0.15%)</title><rect x="93.4" y="579.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="93.4" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.4" y="574.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (1 samples, 0.03%)</title><rect x="93.4" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="558.0"></text>
</g>
<g>
<title>java/net/InetAddress.getAllByName0 (5 samples, 0.13%)</title><rect x="93.7" y="563.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.05%)</title><rect x="93.7" y="547.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.7" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="94.3" y="547.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="97.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="94.6" y="547.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="97.6" y="558.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="94.9" y="531.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="97.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.08%)</title><rect x="95.2" y="787.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (3 samples, 0.08%)</title><rect x="95.2" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.2" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="95.2" y="755.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="98.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$208/234148462.apply (2 samples, 0.05%)</title><rect x="95.5" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="96.1" y="819.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.03%)</title><rect x="96.1" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="99.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.03%)</title><rect x="96.1" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.1" y="798.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$53/1336735375.apply (1 samples, 0.03%)</title><rect x="96.1" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getConnectionFor (9 samples, 0.23%)</title><rect x="96.4" y="819.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.4" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="97.0" y="803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="100.0" y="814.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="97.0" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="100.0" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="97.0" y="771.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="100.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="97.0" y="755.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.0" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyFor (5 samples, 0.13%)</title><rect x="97.3" y="803.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="100.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="97.3" y="787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="100.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2Connection.keyString (4 samples, 0.10%)</title><rect x="97.6" y="787.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="100.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1377865909.linkToTargetMethod (4 samples, 0.10%)</title><rect x="97.6" y="771.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1557127930.invoke (4 samples, 0.10%)</title><rect x="97.6" y="755.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1456441596.invoke (4 samples, 0.10%)</title><rect x="97.6" y="739.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="97.6" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.03%)</title><rect x="97.9" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.03%)</title><rect x="97.9" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.9" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1254526270.invoke (2 samples, 0.05%)</title><rect x="98.2" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.2" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.05%)</title><rect x="98.2" y="707.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.05%)</title><rect x="98.2" y="691.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.05%)</title><rect x="98.2" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.2" y="686.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="98.5" y="659.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="101.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.03%)</title><rect x="98.8" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.03%)</title><rect x="98.8" y="787.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.03%)</title><rect x="98.8" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerTimer (26 samples, 0.67%)</title><rect x="99.1" y="899.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.1" y="910.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (6 samples, 0.15%)</title><rect x="99.4" y="883.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="102.4" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.addTo (1 samples, 0.03%)</title><rect x="99.4" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.4" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (5 samples, 0.13%)</title><rect x="99.7" y="867.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.7" y="878.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (2 samples, 0.05%)</title><rect x="100.6" y="851.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.wakeupSelector (19 samples, 0.49%)</title><rect x="101.2" y="883.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.2" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (19 samples, 0.49%)</title><rect x="101.2" y="867.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="101.5" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="104.5" y="862.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="101.5" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="104.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (17 samples, 0.44%)</title><rect x="101.8" y="851.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.8" y="862.0"></text>
</g>
<g>
<title>write (17 samples, 0.44%)</title><rect x="101.8" y="835.0" width="5.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="104.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.getExchange (1 samples, 0.03%)</title><rect x="107.0" y="899.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.0" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="107.0" y="883.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="110.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="107.0" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="110.0" y="878.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="107.0" y="851.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="110.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.requestFilters (11 samples, 0.28%)</title><rect x="107.3" y="899.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="110.3" y="910.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (1 samples, 0.03%)</title><rect x="107.6" y="883.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="110.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.request (8 samples, 0.21%)</title><rect x="107.9" y="883.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.9" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (6 samples, 0.15%)</title><rect x="108.2" y="867.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.2" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="108.5" y="851.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="111.5" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="108.5" y="835.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="111.5" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.05%)</title><rect x="108.5" y="819.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="111.5" y="830.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (3 samples, 0.08%)</title><rect x="109.1" y="851.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.1" y="862.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.getTable (1 samples, 0.03%)</title><rect x="109.1" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.1" y="846.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.expungeStaleEntries (1 samples, 0.03%)</title><rect x="109.1" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.03%)</title><rect x="109.1" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.03%)</title><rect x="109.1" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.1" y="798.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (2 samples, 0.05%)</title><rect x="109.4" y="835.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.4" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.05%)</title><rect x="109.4" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.4" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="109.4" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="112.4" y="814.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="109.7" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="112.7" y="814.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="109.7" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="112.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getProxyURI (1 samples, 0.03%)</title><rect x="110.0" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.proxy (1 samples, 0.03%)</title><rect x="110.0" y="851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RedirectFilter.request (1 samples, 0.03%)</title><rect x="110.3" y="883.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="113.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (4 samples, 0.10%)</title><rect x="110.6" y="899.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="113.6" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (2 samples, 0.05%)</title><rect x="111.2" y="883.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.2" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (2 samples, 0.05%)</title><rect x="111.2" y="867.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.2" y="878.0"></text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.03%)</title><rect x="111.2" y="851.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.2" y="862.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="111.2" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="114.2" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="111.2" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.2" y="830.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="111.2" y="803.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="114.2" y="814.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.03%)</title><rect x="111.2" y="787.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.2" y="798.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="111.2" y="771.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="114.2" y="782.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.03%)</title><rect x="111.5" y="851.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.addTo (1 samples, 0.03%)</title><rect x="111.5" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="114.5" y="846.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.03%)</title><rect x="111.5" y="819.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.5" y="830.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.03%)</title><rect x="111.5" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.5" y="814.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (1 samples, 0.03%)</title><rect x="111.5" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.5" y="798.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.03%)</title><rect x="111.5" y="771.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.5" y="782.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.03%)</title><rect x="111.5" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="766.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.03%)</title><rect x="111.5" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="114.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$167/1428045455.get (3 samples, 0.08%)</title><rect x="111.8" y="963.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="114.8" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$120/308330111.get (1,236 samples, 31.75%)</title><rect x="112.8" y="979.0" width="374.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.8" y="990.0">ru/mail/polis/service/ReplicationHandler$$Lambda$12..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.lambda$multipleUpsert$1 (1,236 samples, 31.75%)</title><rect x="112.8" y="963.0" width="374.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.8" y="974.0">ru/mail/polis/service/ReplicationHandler.lambda$mul..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="112.8" y="947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="115.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="112.8" y="931.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="115.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="112.8" y="915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="115.8" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="112.8" y="899.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="115.8" y="910.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="112.8" y="883.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="115.8" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="112.8" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="115.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="112.8" y="851.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="115.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="112.8" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="115.8" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="112.8" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="115.8" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.upsertValue (1,232 samples, 31.65%)</title><rect x="113.1" y="947.0" width="373.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="116.1" y="958.0">ru/mail/polis/dao/DaoEngine.upsertValue</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,231 samples, 31.62%)</title><rect x="113.1" y="931.0" width="373.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="116.1" y="942.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="113.7" y="915.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="116.7" y="926.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,227 samples, 31.52%)</title><rect x="114.0" y="915.0" width="371.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.0" y="926.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,227 samples, 31.52%)</title><rect x="114.0" y="899.0" width="371.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="117.0" y="910.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="114.6" y="883.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="117.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2 samples, 0.05%)</title><rect x="114.9" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="117.9" y="894.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,222 samples, 31.39%)</title><rect x="115.5" y="883.0" width="370.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="118.5" y="894.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="115.5" y="867.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="118.5" y="878.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="115.8" y="867.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="118.8" y="878.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.05%)</title><rect x="116.1" y="867.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="119.1" y="878.0"></text>
</g>
<g>
<title>tiny_free_no_lock (2 samples, 0.05%)</title><rect x="116.1" y="851.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="119.1" y="862.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (2 samples, 0.05%)</title><rect x="116.1" y="835.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="119.1" y="846.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.05%)</title><rect x="116.7" y="867.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="119.7" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="116.7" y="851.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="119.7" y="862.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="116.7" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="119.7" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="117.0" y="835.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="120.0" y="846.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="117.0" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="120.0" y="830.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="117.0" y="803.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="120.0" y="814.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="117.0" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="120.0" y="798.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="117.0" y="771.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="120.0" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="117.3" y="867.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="120.3" y="878.0"></text>
</g>
<g>
<title>oopDesc* BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="117.3" y="851.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="120.3" y="862.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.05%)</title><rect x="117.6" y="867.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="120.6" y="878.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="118.2" y="867.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="121.2" y="878.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="118.2" y="851.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="121.2" y="862.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.05%)</title><rect x="118.2" y="835.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="121.2" y="846.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.05%)</title><rect x="118.2" y="819.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="121.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,211 samples, 31.11%)</title><rect x="118.8" y="867.0" width="367.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="121.8" y="878.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,211 samples, 31.11%)</title><rect x="118.8" y="851.0" width="367.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="121.8" y="862.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;,..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,208 samples, 31.03%)</title><rect x="118.8" y="835.0" width="366.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="121.8" y="846.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, roc..</text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="118.8" y="819.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="121.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="119.1" y="819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="122.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,196 samples, 30.72%)</title><rect x="119.4" y="819.0" width="362.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="122.4" y="830.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions cons..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (1 samples, 0.03%)</title><rect x="119.7" y="803.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="122.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,194 samples, 30.67%)</title><rect x="120.0" y="803.0" width="361.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="123.0" y="814.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions ..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (105 samples, 2.70%)</title><rect x="122.2" y="787.0" width="31.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="125.2" y="798.0">ro..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (104 samples, 2.67%)</title><rect x="122.5" y="771.0" width="31.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="125.5" y="782.0">ro..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (103 samples, 2.65%)</title><rect x="122.8" y="755.0" width="31.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="125.8" y="766.0">ro..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="123.1" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="126.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (94 samples, 2.41%)</title><rect x="123.4" y="739.0" width="28.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="126.4" y="750.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="123.7" y="723.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="126.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="124.0" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="127.0" y="734.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (91 samples, 2.34%)</title><rect x="124.3" y="723.0" width="27.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="127.3" y="734.0">r..</text>
</g>
<g>
<title>write (91 samples, 2.34%)</title><rect x="124.3" y="707.0" width="27.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="127.3" y="718.0">w..</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.10%)</title><rect x="151.9" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="154.9" y="750.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (3 samples, 0.08%)</title><rect x="153.1" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="156.1" y="750.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="153.1" y="723.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="156.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.05%)</title><rect x="153.4" y="723.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="156.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.03%)</title><rect x="154.0" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="157.0" y="798.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="154.3" y="787.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="157.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (47 samples, 1.21%)</title><rect x="154.6" y="787.0" width="14.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="157.6" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="154.9" y="771.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="157.9" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (45 samples, 1.16%)</title><rect x="155.2" y="771.0" width="13.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.05%)</title><rect x="155.8" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 1.05%)</title><rect x="156.4" y="755.0" width="12.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="159.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (41 samples, 1.05%)</title><rect x="156.4" y="739.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="159.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (35 samples, 0.90%)</title><rect x="156.7" y="723.0" width="10.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="159.7" y="734.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="157.9" y="707.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="160.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="158.5" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="161.5" y="718.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (28 samples, 0.72%)</title><rect x="158.8" y="707.0" width="8.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="161.8" y="718.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="164.9" y="691.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="167.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="165.2" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="168.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.15%)</title><rect x="165.5" y="691.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="168.5" y="702.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="166.4" y="675.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="169.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.05%)</title><rect x="166.7" y="675.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="169.7" y="686.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="167.0" y="659.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="170.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.08%)</title><rect x="167.3" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="170.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="168.2" y="723.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="171.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (4 samples, 0.10%)</title><rect x="168.8" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="171.8" y="798.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.10%)</title><rect x="168.8" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="171.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.10%)</title><rect x="168.8" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="171.8" y="766.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.10%)</title><rect x="168.8" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="171.8" y="750.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="168.8" y="723.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="171.8" y="734.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="168.8" y="707.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="171.8" y="718.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="168.8" y="691.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="171.8" y="702.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="168.8" y="675.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="171.8" y="686.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="168.8" y="659.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="171.8" y="670.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="168.8" y="643.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="171.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.03%)</title><rect x="169.1" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="172.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.05%)</title><rect x="169.4" y="723.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="172.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.05%)</title><rect x="169.4" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="172.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.05%)</title><rect x="169.4" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="172.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (670 samples, 17.21%)</title><rect x="170.0" y="787.0" width="203.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="173.0" y="798.0">rocksdb::WriteThread::Await..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="174.0" y="771.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="177.0" y="782.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (652 samples, 16.75%)</title><rect x="174.3" y="771.0" width="197.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="177.3" y="782.0">si_module_static_mdns.mdns..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.08%)</title><rect x="371.9" y="771.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="374.9" y="782.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="371.9" y="755.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="374.9" y="766.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="372.8" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="375.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (355 samples, 9.12%)</title><rect x="373.1" y="787.0" width="107.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="376.1" y="798.0">rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (355 samples, 9.12%)</title><rect x="373.1" y="771.0" width="107.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="376.1" y="782.0">rocksdb::Writ..</text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="374.3" y="755.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="377.3" y="766.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (349 samples, 8.96%)</title><rect x="374.6" y="755.0" width="105.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="377.6" y="766.0">si_module_sta..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="480.4" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="483.4" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="480.4" y="739.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="483.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.10%)</title><rect x="480.7" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="483.7" y="798.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="481.9" y="819.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="484.9" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="482.2" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="485.2" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="482.2" y="803.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="485.2" y="814.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="482.2" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="485.2" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="482.2" y="771.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="485.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.10%)</title><rect x="482.5" y="819.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="485.5" y="830.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="482.5" y="803.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="485.5" y="814.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.05%)</title><rect x="483.2" y="803.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="486.2" y="814.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="483.2" y="787.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="486.2" y="798.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="483.5" y="787.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="486.5" y="798.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="483.5" y="771.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="486.5" y="782.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="483.5" y="755.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="486.5" y="766.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="483.5" y="739.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="486.5" y="750.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="483.5" y="723.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="486.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.08%)</title><rect x="483.8" y="819.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="486.8" y="830.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="483.8" y="803.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="486.8" y="814.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.05%)</title><rect x="484.1" y="803.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="487.1" y="814.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="484.7" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="487.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="485.0" y="835.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="488.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="485.6" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="488.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="485.9" y="915.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="488.9" y="926.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="485.9" y="899.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="488.9" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.getValueBytes (1 samples, 0.03%)</title><rect x="486.2" y="931.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="489.2" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="486.2" y="915.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="489.2" y="926.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="486.2" y="899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="486.2" y="883.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="489.2" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.2" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.2" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="489.2" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="486.2" y="835.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="489.2" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="486.2" y="819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="489.2" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="486.2" y="803.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="489.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="486.2" y="787.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="489.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteBuffer (3 samples, 0.08%)</title><rect x="486.5" y="947.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.5" y="958.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.08%)</title><rect x="486.5" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.5" y="942.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.08%)</title><rect x="486.5" y="915.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.5" y="926.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.08%)</title><rect x="486.5" y="899.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.5" y="910.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.08%)</title><rect x="486.5" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="486.8" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.8" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.8" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="489.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="486.8" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="489.8" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="486.8" y="819.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="489.8" y="830.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="486.8" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="489.8" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="486.8" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="489.8" y="798.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="486.8" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="489.8" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="487.1" y="867.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="490.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (15 samples, 0.39%)</title><rect x="487.4" y="995.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (15 samples, 0.39%)</title><rect x="487.4" y="979.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="490.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (14 samples, 0.36%)</title><rect x="487.4" y="963.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="490.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (14 samples, 0.36%)</title><rect x="487.4" y="947.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.tryFire (14 samples, 0.36%)</title><rect x="487.4" y="931.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.36%)</title><rect x="487.4" y="915.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.4" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.36%)</title><rect x="487.4" y="899.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.4" y="910.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="487.4" y="883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="490.4" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.33%)</title><rect x="487.7" y="883.0" width="3.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="490.7" y="894.0"></text>
</g>
<g>
<title>__psynch_cvsignal (13 samples, 0.33%)</title><rect x="487.7" y="867.0" width="3.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="490.7" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$186/1205736169.apply (1 samples, 0.03%)</title><rect x="491.6" y="963.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.6" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.lambda$multipleUpsert$2 (1 samples, 0.03%)</title><rect x="491.6" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (611 samples, 15.69%)</title><rect x="491.9" y="995.0" width="185.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.9" y="1006.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="492.9" y="979.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="495.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (607 samples, 15.59%)</title><rect x="493.2" y="979.0" width="183.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.2" y="990.0">java/util/concurrent/Arr..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="495.0" y="963.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (537 samples, 13.79%)</title><rect x="495.3" y="963.0" width="162.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="498.3" y="974.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.21%)</title><rect x="495.3" y="947.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.21%)</title><rect x="495.3" y="931.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="498.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.21%)</title><rect x="495.3" y="915.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.3" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.21%)</title><rect x="495.3" y="899.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.3" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.21%)</title><rect x="495.3" y="883.0" width="2.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="498.3" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.21%)</title><rect x="495.3" y="867.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.3" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.21%)</title><rect x="495.3" y="851.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="498.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (24 samples, 0.62%)</title><rect x="497.7" y="947.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 0.62%)</title><rect x="497.7" y="931.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (24 samples, 0.62%)</title><rect x="497.7" y="915.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="500.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (24 samples, 0.62%)</title><rect x="497.7" y="899.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.7" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.59%)</title><rect x="498.0" y="883.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.0" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (23 samples, 0.59%)</title><rect x="498.0" y="867.0" width="7.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="501.0" y="878.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="498.3" y="851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.3" y="862.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="498.3" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="501.3" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="498.6" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="501.6" y="862.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="498.6" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="501.6" y="846.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="498.9" y="851.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="501.9" y="862.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="498.9" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.9" y="846.0"></text>
</g>
<g>
<title>__psynch_cvsignal (18 samples, 0.46%)</title><rect x="499.2" y="851.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="502.2" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="504.7" y="851.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="507.7" y="862.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="504.7" y="835.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="507.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.15%)</title><rect x="505.0" y="947.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="508.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.15%)</title><rect x="505.0" y="931.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (499 samples, 12.82%)</title><rect x="506.8" y="947.0" width="151.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.8" y="958.0">java/util/concurren..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (498 samples, 12.79%)</title><rect x="507.1" y="931.0" width="150.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.1" y="942.0">jdk/internal/misc/U..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="512.9" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="515.9" y="926.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (2 samples, 0.05%)</title><rect x="513.2" y="915.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="516.2" y="926.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="513.8" y="915.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="516.8" y="926.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (475 samples, 12.20%)</title><rect x="514.1" y="915.0" width="143.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="517.1" y="926.0">Unsafe_Park(JNIEnv..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.05%)</title><rect x="514.1" y="899.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="517.1" y="910.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="514.4" y="883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="517.4" y="894.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="514.7" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="517.7" y="910.0"></text>
</g>
<g>
<title>JavaThread::get_thread_stat() const (1 samples, 0.03%)</title><rect x="515.0" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="518.0" y="910.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="515.3" y="899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="518.3" y="910.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="515.6" y="899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="518.6" y="910.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="515.6" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="518.6" y="894.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="515.6" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="518.6" y="878.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.08%)</title><rect x="515.9" y="899.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="518.9" y="910.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="515.9" y="883.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="518.9" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="516.2" y="867.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="519.2" y="878.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="516.5" y="883.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="519.5" y="894.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="516.8" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="519.8" y="910.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.05%)</title><rect x="517.1" y="899.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="520.1" y="910.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.05%)</title><rect x="517.1" y="883.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="520.1" y="894.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="517.4" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="520.4" y="878.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="517.7" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="520.7" y="910.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (445 samples, 11.43%)</title><rect x="518.0" y="899.0" width="134.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="521.0" y="910.0">Parker::park(bool..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (4 samples, 0.10%)</title><rect x="518.0" y="883.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="521.0" y="894.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="518.0" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="521.0" y="878.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="518.3" y="867.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.3" y="878.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.05%)</title><rect x="518.6" y="867.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="521.6" y="878.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="519.2" y="883.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="522.2" y="894.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="519.2" y="867.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="522.2" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (436 samples, 11.20%)</title><rect x="519.5" y="883.0" width="132.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="522.5" y="894.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.08%)</title><rect x="651.7" y="883.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="654.7" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="652.6" y="883.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="655.6" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="652.9" y="899.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="655.9" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.08%)</title><rect x="653.2" y="899.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="656.2" y="910.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="653.2" y="883.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="656.2" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="653.2" y="867.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="656.2" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="653.5" y="851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="656.5" y="862.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="653.5" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.5" y="846.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="653.5" y="819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="656.5" y="830.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="653.8" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="656.8" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.10%)</title><rect x="654.1" y="899.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="657.1" y="910.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="654.4" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="657.4" y="894.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="654.7" y="883.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="657.7" y="894.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="655.0" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="658.0" y="878.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="655.0" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="658.0" y="862.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="655.0" y="835.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="658.0" y="846.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="655.3" y="899.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="658.3" y="910.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="655.6" y="899.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="658.6" y="910.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="655.9" y="899.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="658.9" y="910.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="656.2" y="899.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="659.2" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="656.5" y="899.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="659.5" y="910.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.08%)</title><rect x="657.1" y="899.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="660.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (18 samples, 0.46%)</title><rect x="658.0" y="963.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="661.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (18 samples, 0.46%)</title><rect x="658.0" y="947.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (18 samples, 0.46%)</title><rect x="658.0" y="931.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (18 samples, 0.46%)</title><rect x="658.0" y="915.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 0.46%)</title><rect x="658.0" y="899.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (18 samples, 0.46%)</title><rect x="658.0" y="883.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.0" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (17 samples, 0.44%)</title><rect x="658.3" y="867.0" width="5.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="661.3" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.44%)</title><rect x="658.3" y="851.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.3" y="862.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.44%)</title><rect x="658.3" y="835.0" width="5.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="661.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (45 samples, 1.16%)</title><rect x="663.5" y="963.0" width="13.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (45 samples, 1.16%)</title><rect x="663.5" y="947.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (45 samples, 1.16%)</title><rect x="663.5" y="931.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="666.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (45 samples, 1.16%)</title><rect x="663.5" y="915.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.5" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (44 samples, 1.13%)</title><rect x="663.8" y="899.0" width="13.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.8" y="910.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="664.4" y="883.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="667.4" y="894.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="664.7" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="667.7" y="894.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.05%)</title><rect x="665.0" y="883.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.0" y="894.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (38 samples, 0.98%)</title><rect x="665.6" y="883.0" width="11.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="668.6" y="894.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="665.9" y="867.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="668.9" y="878.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="665.9" y="851.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="668.9" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="666.2" y="867.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="669.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.05%)</title><rect x="666.2" y="851.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="669.2" y="862.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title><rect x="666.2" y="835.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="669.2" y="846.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="666.2" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="669.2" y="830.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="666.2" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="669.2" y="814.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="666.5" y="819.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="669.5" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="666.8" y="867.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="669.8" y="878.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="666.8" y="851.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="669.8" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="667.1" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="670.1" y="878.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="667.1" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.1" y="862.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.69%)</title><rect x="667.4" y="867.0" width="8.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="670.4" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="675.6" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="678.6" y="878.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="675.9" y="867.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="678.9" y="878.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="676.2" y="867.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="679.2" y="878.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.03%)</title><rect x="676.5" y="867.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="679.5" y="878.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="676.8" y="867.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="679.8" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$445/383899907.run (227 samples, 5.83%)</title><rect x="677.1" y="995.0" width="68.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="680.1" y="1006.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (227 samples, 5.83%)</title><rect x="677.1" y="979.0" width="68.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="680.1" y="990.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (227 samples, 5.83%)</title><rect x="677.1" y="963.0" width="68.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="680.1" y="974.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (222 samples, 5.70%)</title><rect x="678.1" y="947.0" width="67.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.1" y="958.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (222 samples, 5.70%)</title><rect x="678.1" y="931.0" width="67.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.1" y="942.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (222 samples, 5.70%)</title><rect x="678.1" y="915.0" width="67.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.1" y="926.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (222 samples, 5.70%)</title><rect x="678.1" y="899.0" width="67.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.1" y="910.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (222 samples, 5.70%)</title><rect x="678.1" y="883.0" width="67.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.1" y="894.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (222 samples, 5.70%)</title><rect x="678.1" y="867.0" width="67.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.1" y="878.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (222 samples, 5.70%)</title><rect x="678.1" y="851.0" width="67.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="681.1" y="862.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$WriteTask.run (222 samples, 5.70%)</title><rect x="678.1" y="835.0" width="67.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="681.1" y="846.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (38 samples, 0.98%)</title><rect x="678.4" y="819.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="681.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (31 samples, 0.80%)</title><rect x="679.0" y="803.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (1 samples, 0.03%)</title><rect x="679.9" y="787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (27 samples, 0.69%)</title><rect x="680.2" y="787.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (25 samples, 0.64%)</title><rect x="680.5" y="771.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="683.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (25 samples, 0.64%)</title><rect x="680.5" y="755.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.5" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="680.8" y="739.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="683.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (8 samples, 0.21%)</title><rect x="681.1" y="739.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="684.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.13%)</title><rect x="681.4" y="723.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="684.4" y="734.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="681.4" y="707.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="684.4" y="718.0"></text>
</g>
<g>
<title>java/util/function/Function$$Lambda$53/1336735375.apply (2 samples, 0.05%)</title><rect x="682.0" y="707.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="685.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$469/603544558.apply (1 samples, 0.03%)</title><rect x="682.6" y="707.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.6" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$469/603544558.apply (2 samples, 0.05%)</title><rect x="682.9" y="723.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="685.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$sendRequestBody$6 (2 samples, 0.05%)</title><rect x="682.9" y="707.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="685.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getResponseAsync (2 samples, 0.05%)</title><rect x="682.9" y="691.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="685.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readHeadersAsync (2 samples, 0.05%)</title><rect x="682.9" y="675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApplyAsync (2 samples, 0.05%)</title><rect x="682.9" y="659.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyStage (2 samples, 0.05%)</title><rect x="682.9" y="643.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="685.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniApplyNow (2 samples, 0.05%)</title><rect x="682.9" y="627.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$331/604314710.apply (2 samples, 0.05%)</title><rect x="682.9" y="611.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="685.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$createExchangeImpl$1 (2 samples, 0.05%)</title><rect x="682.9" y="595.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="685.9" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.h2Upgrade (2 samples, 0.05%)</title><rect x="682.9" y="579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.setH2Upgrade (2 samples, 0.05%)</title><rect x="682.9" y="563.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="685.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http2ClientImpl.getSettingsString (2 samples, 0.05%)</title><rect x="682.9" y="547.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="685.9" y="558.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encodeToString (1 samples, 0.03%)</title><rect x="682.9" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.9" y="542.0"></text>
</g>
<g>
<title>java/util/Base64$Encoder.encode (1 samples, 0.03%)</title><rect x="682.9" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="685.9" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.toByteArray (1 samples, 0.03%)</title><rect x="683.2" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="686.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/frame/SettingsFrame.length (1 samples, 0.03%)</title><rect x="683.2" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="686.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (13 samples, 0.33%)</title><rect x="683.5" y="739.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (11 samples, 0.28%)</title><rect x="684.1" y="723.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="687.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.10%)</title><rect x="684.1" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.1" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.apply (3 samples, 0.08%)</title><rect x="684.4" y="691.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="687.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.apply (7 samples, 0.18%)</title><rect x="685.3" y="707.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="688.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$7 (7 samples, 0.18%)</title><rect x="685.3" y="691.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (7 samples, 0.18%)</title><rect x="685.3" y="675.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$191/1609992908.apply (6 samples, 0.15%)</title><rect x="685.3" y="659.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.3" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.sendRequestBody (6 samples, 0.15%)</title><rect x="685.3" y="643.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="688.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.03%)</title><rect x="685.3" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendBodyAsync (5 samples, 0.13%)</title><rect x="685.6" y="627.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenAccept (4 samples, 0.10%)</title><rect x="685.6" y="611.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptStage (4 samples, 0.10%)</title><rect x="685.6" y="595.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniAcceptNow (4 samples, 0.10%)</title><rect x="685.6" y="579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="688.6" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$459/1048917100.accept (1 samples, 0.03%)</title><rect x="685.9" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.9" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$7 (1 samples, 0.03%)</title><rect x="685.9" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.cancelIfFailed (1 samples, 0.03%)</title><rect x="685.9" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenCompleteAsync (1 samples, 0.03%)</title><rect x="685.9" y="515.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.03%)</title><rect x="685.9" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.9" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="685.9" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="688.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="685.9" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="688.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="685.9" y="451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$466/120837901.accept (2 samples, 0.05%)</title><rect x="686.2" y="563.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.lambda$sendBodyAsync$8 (2 samples, 0.05%)</title><rect x="686.2" y="547.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="689.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.requestMoreBody (2 samples, 0.05%)</title><rect x="686.2" y="531.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.2" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1BodySubscriber.request (2 samples, 0.05%)</title><rect x="686.2" y="515.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="689.2" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription.request (2 samples, 0.05%)</title><rect x="686.2" y="499.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.2" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="686.2" y="483.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.2" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (2 samples, 0.05%)</title><rect x="686.2" y="467.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (2 samples, 0.05%)</title><rect x="686.2" y="451.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="689.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (2 samples, 0.05%)</title><rect x="686.2" y="435.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.2" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PullPublisher$Subscription$PullTask.run (2 samples, 0.05%)</title><rect x="686.2" y="419.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.2" y="430.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onComplete (1 samples, 0.03%)</title><rect x="686.2" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="689.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="686.2" y="387.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="689.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="686.2" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.add (1 samples, 0.03%)</title><rect x="686.2" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="689.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.offerLast (1 samples, 0.03%)</title><rect x="686.2" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="689.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.linkLast (1 samples, 0.03%)</title><rect x="686.2" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.newNode (1 samples, 0.03%)</title><rect x="686.2" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="689.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="686.2" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.03%)</title><rect x="686.5" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request$FixedContentSubscriber.onNext (1 samples, 0.03%)</title><rect x="686.5" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="689.5" y="398.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="686.5" y="371.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="689.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.appendToOutgoing (1 samples, 0.03%)</title><rect x="686.5" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="689.5" y="366.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="686.5" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="689.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="686.5" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.5" y="334.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Request.continueRequest (1 samples, 0.03%)</title><rect x="686.8" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.8" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/RequestPublishers$ByteArrayPublisher.subscribe (1 samples, 0.03%)</title><rect x="686.8" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.8" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$197/68056152.apply (1 samples, 0.03%)</title><rect x="687.1" y="659.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (1 samples, 0.03%)</title><rect x="687.1" y="643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="690.1" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="687.1" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="687.1" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$413/20756969.get$Lambda (1 samples, 0.03%)</title><rect x="687.1" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="690.1" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$191/1609992908.apply (1 samples, 0.03%)</title><rect x="687.1" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.03%)</title><rect x="687.4" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.03%)</title><rect x="687.4" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="690.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="687.4" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="690.4" y="718.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="687.7" y="739.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="690.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="688.1" y="771.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="691.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="688.1" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="688.1" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="691.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="688.1" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="688.1" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="688.1" y="691.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="691.1" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="688.1" y="675.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="691.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.pollFirst (3 samples, 0.08%)</title><rect x="688.4" y="803.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.unlink (2 samples, 0.05%)</title><rect x="688.7" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.skipDeletedPredecessors (1 samples, 0.03%)</title><rect x="688.7" y="771.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="691.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedDeque.skipDeletedSuccessors (1 samples, 0.03%)</title><rect x="689.0" y="771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="692.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (2 samples, 0.05%)</title><rect x="689.3" y="803.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="692.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="689.3" y="787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="689.3" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="689.3" y="755.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="692.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="689.3" y="739.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="692.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="689.3" y="723.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="692.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="689.3" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$488/511336869.run (2 samples, 0.05%)</title><rect x="689.3" y="691.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (183 samples, 4.70%)</title><rect x="689.9" y="819.0" width="55.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="692.9" y="830.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onNext (183 samples, 4.70%)</title><rect x="689.9" y="803.0" width="55.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="692.9" y="814.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onNext (183 samples, 4.70%)</title><rect x="689.9" y="787.0" width="55.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="692.9" y="798.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.getOutgoing (1 samples, 0.03%)</title><rect x="690.2" y="771.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.tryFlushCurrent (181 samples, 4.65%)</title><rect x="690.5" y="771.0" width="54.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="693.5" y="782.0">jdk/i..</text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$483/1745407499.run (4 samples, 0.10%)</title><rect x="690.8" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.requestMore (4 samples, 0.10%)</title><rect x="690.8" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.requestMore (3 samples, 0.08%)</title><rect x="691.1" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="694.1" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher$Http1WriteSubscription.request (1 samples, 0.03%)</title><rect x="691.4" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="694.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="691.4" y="691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="694.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.debugState (1 samples, 0.03%)</title><rect x="691.7" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="694.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.writeAvailable (176 samples, 4.52%)</title><rect x="692.0" y="755.0" width="53.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.0" y="766.0">jdk/i..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (172 samples, 4.42%)</title><rect x="692.0" y="739.0" width="52.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.0" y="750.0">java/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (172 samples, 4.42%)</title><rect x="692.0" y="723.0" width="52.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="695.0" y="734.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (169 samples, 4.34%)</title><rect x="692.9" y="707.0" width="51.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.9" y="718.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (169 samples, 4.34%)</title><rect x="692.9" y="691.0" width="51.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.9" y="702.0">sun/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.13%)</title><rect x="692.9" y="675.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.9" y="686.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (5 samples, 0.13%)</title><rect x="692.9" y="659.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.9" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.writev (164 samples, 4.21%)</title><rect x="694.4" y="675.0" width="49.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="697.4" y="686.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.writev0 (159 samples, 4.08%)</title><rect x="695.9" y="659.0" width="48.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.9" y="670.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_writev0 (4 samples, 0.10%)</title><rect x="696.5" y="643.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="699.5" y="654.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="697.1" y="627.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="700.1" y="638.0"></text>
</g>
<g>
<title>writev (153 samples, 3.93%)</title><rect x="697.8" y="643.0" width="46.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="700.8" y="654.0">writev</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (4 samples, 0.10%)</title><rect x="744.1" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.1" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.debugState (2 samples, 0.05%)</title><rect x="745.3" y="947.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="748.3" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (196 samples, 5.03%)</title><rect x="745.9" y="995.0" width="59.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="748.9" y="1006.0">jdk/in..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (195 samples, 5.01%)</title><rect x="746.2" y="979.0" width="59.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.2" y="990.0">jdk/in..</text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="746.2" y="963.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="749.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (94 samples, 2.41%)</title><rect x="746.6" y="963.0" width="28.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="749.6" y="974.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (94 samples, 2.41%)</title><rect x="746.6" y="947.0" width="28.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="749.6" y="958.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (94 samples, 2.41%)</title><rect x="746.6" y="931.0" width="28.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="749.6" y="942.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkForErrors (1 samples, 0.03%)</title><rect x="746.6" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.6" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (1 samples, 0.03%)</title><rect x="746.6" y="899.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.6" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.checkRequestMore (28 samples, 0.72%)</title><rect x="746.9" y="915.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.9" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.requestMore (28 samples, 0.72%)</title><rect x="746.9" y="899.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.9" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (26 samples, 0.67%)</title><rect x="747.5" y="883.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (26 samples, 0.67%)</title><rect x="747.5" y="867.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="750.5" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/890545344.linkToTargetMethod (1 samples, 0.03%)</title><rect x="747.5" y="851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="750.5" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/802243390.invoke (1 samples, 0.03%)</title><rect x="747.5" y="835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="750.5" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="747.5" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="750.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.03%)</title><rect x="747.5" y="803.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.5" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.03%)</title><rect x="747.5" y="787.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.5" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="747.5" y="771.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="750.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (25 samples, 0.64%)</title><rect x="747.8" y="851.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="750.8" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (25 samples, 0.64%)</title><rect x="747.8" y="835.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="750.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (25 samples, 0.64%)</title><rect x="747.8" y="819.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="750.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (21 samples, 0.54%)</title><rect x="749.0" y="803.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="752.0" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (21 samples, 0.54%)</title><rect x="749.0" y="787.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="752.0" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="749.0" y="771.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.0" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.05%)</title><rect x="749.0" y="755.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.0" y="766.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (1 samples, 0.03%)</title><rect x="749.0" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.0" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="749.0" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="752.0" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="749.3" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="752.3" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (19 samples, 0.49%)</title><rect x="749.6" y="771.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.6" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="750.2" y="755.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="753.2" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="750.2" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="753.2" y="750.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="750.2" y="723.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="753.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (16 samples, 0.41%)</title><rect x="750.5" y="755.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="753.5" y="766.0"></text>
</g>
<g>
<title>write (15 samples, 0.39%)</title><rect x="750.8" y="739.0" width="4.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="753.8" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (1 samples, 0.03%)</title><rect x="755.3" y="915.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="755.3" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="755.3" y="883.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="758.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$383/883977638.get$Lambda (1 samples, 0.03%)</title><rect x="755.3" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.tryAsyncReceive (64 samples, 1.64%)</title><rect x="755.6" y="915.0" width="19.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.6" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Receiver.accept (64 samples, 1.64%)</title><rect x="755.6" y="899.0" width="19.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="758.6" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (64 samples, 1.64%)</title><rect x="755.6" y="883.0" width="19.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.6" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$HeadersReader.handle (64 samples, 1.64%)</title><rect x="755.6" y="867.0" width="19.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (32 samples, 0.82%)</title><rect x="755.6" y="851.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (32 samples, 0.82%)</title><rect x="755.6" y="835.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (32 samples, 0.82%)</title><rect x="755.6" y="819.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (32 samples, 0.82%)</title><rect x="755.6" y="803.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="758.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (32 samples, 0.82%)</title><rect x="755.6" y="787.0" width="9.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.run (32 samples, 0.82%)</title><rect x="755.6" y="771.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (32 samples, 0.82%)</title><rect x="755.6" y="755.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.03%)</title><rect x="755.6" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (29 samples, 0.74%)</title><rect x="755.9" y="739.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (29 samples, 0.74%)</title><rect x="755.9" y="723.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="758.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (21 samples, 0.54%)</title><rect x="756.3" y="707.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="756.3" y="691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.3" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="756.3" y="675.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="759.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$421/1707489388.apply (1 samples, 0.03%)</title><rect x="756.6" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="759.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$159/1117015311.apply (16 samples, 0.41%)</title><rect x="756.9" y="691.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$4 (16 samples, 0.41%)</title><rect x="756.9" y="675.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="759.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenApply (1 samples, 0.03%)</title><rect x="756.9" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.9" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (1 samples, 0.03%)</title><rect x="756.9" y="643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.9" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.readBodyAsync (15 samples, 0.39%)</title><rect x="757.2" y="659.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.readBodyAsync (15 samples, 0.39%)</title><rect x="757.2" y="643.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.readBody (15 samples, 0.39%)</title><rect x="757.2" y="627.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.2" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/658369320.linkToTargetMethod (1 samples, 0.03%)</title><rect x="757.2" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1252363019.invokeStatic (1 samples, 0.03%)</title><rect x="757.2" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.2" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$526/101177499.get$Lambda (1 samples, 0.03%)</title><rect x="757.2" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="760.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="757.2" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="757.2" y="547.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="760.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="757.2" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="757.2" y="515.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.2" y="526.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="757.2" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="760.2" y="510.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValueAsLong (5 samples, 0.13%)</title><rect x="757.5" y="611.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.5" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (2 samples, 0.05%)</title><rect x="757.5" y="595.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.05%)</title><rect x="757.5" y="579.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="760.5" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.03%)</title><rect x="757.8" y="563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.8" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.03%)</title><rect x="757.8" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="760.8" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="757.8" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.8" y="542.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.03%)</title><rect x="758.1" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="758.1" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="761.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.03%)</title><rect x="758.1" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/LongPipeline.findFirst (2 samples, 0.05%)</title><rect x="758.4" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="761.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.05%)</title><rect x="758.4" y="579.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (2 samples, 0.05%)</title><rect x="758.4" y="563.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="758.7" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.7" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="758.7" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="761.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.03%)</title><rect x="758.7" y="515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.03%)</title><rect x="758.7" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="761.7" y="510.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.03%)</title><rect x="758.7" y="483.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$5$1.accept (1 samples, 0.03%)</title><rect x="758.7" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindSink$OfLong.accept (1 samples, 0.03%)</title><rect x="758.7" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="761.7" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.03%)</title><rect x="758.7" y="435.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="761.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (9 samples, 0.23%)</title><rect x="759.0" y="611.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="762.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="759.0" y="595.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="759.0" y="579.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="762.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="759.0" y="563.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="759.0" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="759.0" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="759.0" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.0" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$526/101177499.run (1 samples, 0.03%)</title><rect x="759.0" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="762.0" y="510.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$526/101177499.run (8 samples, 0.21%)</title><rect x="759.3" y="595.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="762.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$3 (8 samples, 0.21%)</title><rect x="759.3" y="579.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.05%)</title><rect x="759.6" y="563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="762.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.03%)</title><rect x="759.9" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.03%)</title><rect x="759.9" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="762.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.subscribe (1 samples, 0.03%)</title><rect x="760.2" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (1 samples, 0.03%)</title><rect x="760.2" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$ClientRefCountTracker.acquire (1 samples, 0.03%)</title><rect x="760.5" y="563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="763.5" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.reference (1 samples, 0.03%)</title><rect x="760.5" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="763.5" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.addTrailingOperation (3 samples, 0.08%)</title><rect x="760.8" y="563.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.8" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations.add (2 samples, 0.05%)</title><rect x="761.1" y="547.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.1" y="558.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (2 samples, 0.05%)</title><rect x="761.1" y="531.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.1" y="542.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.hash (2 samples, 0.05%)</title><rect x="761.1" y="515.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.1" y="526.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.03%)</title><rect x="761.4" y="499.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="764.4" y="510.0"></text>
</g>
<g>
<title>jsqrt (1 samples, 0.03%)</title><rect x="761.4" y="483.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="764.4" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$421/1707489388.apply (3 samples, 0.08%)</title><rect x="761.7" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.7" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$6 (3 samples, 0.08%)</title><rect x="761.7" y="675.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="764.7" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseFilters (3 samples, 0.08%)</title><rect x="761.7" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="764.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.response (3 samples, 0.08%)</title><rect x="761.7" y="643.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.7" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AuthenticationFilter.getCache (2 samples, 0.05%)</title><rect x="762.0" y="627.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.0" y="638.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.get (2 samples, 0.05%)</title><rect x="762.0" y="611.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="765.0" y="622.0"></text>
</g>
<g>
<title>java/util/WeakHashMap.hash (2 samples, 0.05%)</title><rect x="762.0" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="765.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.hashCode (2 samples, 0.05%)</title><rect x="762.0" y="579.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="765.0" y="590.0"></text>
</g>
<g>
<title>JVM_IHashCode (1 samples, 0.03%)</title><rect x="762.3" y="563.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="765.3" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::FastHashCode(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="762.3" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniHandle.tryFire (6 samples, 0.15%)</title><rect x="762.6" y="707.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="765.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (5 samples, 0.13%)</title><rect x="762.9" y="691.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.05%)</title><rect x="762.9" y="675.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.03%)</title><rect x="763.2" y="659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="766.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$428/1145134436.apply (3 samples, 0.08%)</title><rect x="763.5" y="675.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.5" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="763.5" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.5" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="763.5" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="766.5" y="654.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="763.5" y="627.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="766.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsyncImpl$7 (2 samples, 0.05%)</title><rect x="763.8" y="659.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.8" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.cancelTimer (1 samples, 0.03%)</title><rect x="763.8" y="643.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="766.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.cancelTimer (1 samples, 0.03%)</title><rect x="763.8" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="766.8" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.completedFuture (1 samples, 0.03%)</title><rect x="764.1" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="767.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (1 samples, 0.03%)</title><rect x="764.4" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.03%)</title><rect x="764.4" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="764.4" y="675.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$496/833363224.apply (2 samples, 0.05%)</title><rect x="764.7" y="739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="767.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readHeadersAsync$0 (2 samples, 0.05%)</title><rect x="764.7" y="723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="767.7" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (2 samples, 0.05%)</title><rect x="764.7" y="707.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="767.7" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="765.0" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.0" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.getLocalAddress (1 samples, 0.03%)</title><rect x="765.0" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="768.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.parse (31 samples, 0.80%)</title><rect x="765.3" y="851.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="766.0" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.0" y="846.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1 samples, 0.03%)</title><rect x="766.3" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.canContinueParsing (2 samples, 0.05%)</title><rect x="766.6" y="835.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeHeader (4 samples, 0.10%)</title><rect x="767.2" y="835.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.05%)</title><rect x="767.8" y="819.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.8" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.05%)</title><rect x="767.8" y="803.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.8" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readResumeStatusLine (1 samples, 0.03%)</title><rect x="768.4" y="835.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="771.4" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.readStatusLineFeed (2 samples, 0.05%)</title><rect x="768.7" y="835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="771.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.05%)</title><rect x="768.7" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.7" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrEndHeaders (5 samples, 0.13%)</title><rect x="769.3" y="835.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="772.3" y="846.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (5 samples, 0.13%)</title><rect x="769.3" y="819.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="772.3" y="830.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (5 samples, 0.13%)</title><rect x="769.3" y="803.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="772.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (5 samples, 0.13%)</title><rect x="769.3" y="787.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.3" y="798.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (5 samples, 0.13%)</title><rect x="769.3" y="771.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.3" y="782.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (3 samples, 0.08%)</title><rect x="769.9" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="772.9" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.05%)</title><rect x="769.9" y="739.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.9" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (1 samples, 0.03%)</title><rect x="769.9" y="723.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="772.9" y="734.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (1 samples, 0.03%)</title><rect x="769.9" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$76/1373419525.test (1 samples, 0.03%)</title><rect x="770.2" y="723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (1 samples, 0.03%)</title><rect x="770.5" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.resumeOrSecondCR (13 samples, 0.33%)</title><rect x="770.8" y="835.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.03%)</title><rect x="770.8" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.8" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="770.8" y="803.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.8" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="770.8" y="787.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="773.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.addHeaderFromString (12 samples, 0.31%)</title><rect x="771.1" y="819.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (3 samples, 0.08%)</title><rect x="771.1" y="803.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (3 samples, 0.08%)</title><rect x="771.1" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="774.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.trim (2 samples, 0.05%)</title><rect x="772.0" y="803.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="775.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (2 samples, 0.05%)</title><rect x="772.0" y="787.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.0" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="772.3" y="771.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="775.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.computeIfAbsent (7 samples, 0.18%)</title><rect x="772.6" y="803.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="773.8" y="787.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser$$Lambda$504/1187071485.apply (1 samples, 0.03%)</title><rect x="774.4" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.4" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1HeaderParser.lambda$addHeaderFromString$0 (1 samples, 0.03%)</title><rect x="774.4" y="771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="777.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="774.4" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="777.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$366/132964022.accept (1 samples, 0.03%)</title><rect x="774.7" y="851.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="777.7" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (1 samples, 0.03%)</title><rect x="774.7" y="835.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="777.7" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (100 samples, 2.57%)</title><rect x="775.0" y="963.0" width="30.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.0" y="974.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$CompleteRestartableTask.run (100 samples, 2.57%)</title><rect x="775.0" y="947.0" width="30.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.0" y="958.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SynchronizedRestartableTask.run (98 samples, 2.52%)</title><rect x="775.0" y="931.0" width="29.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="778.0" y="942.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$$Lambda$319/797402868.run (98 samples, 2.52%)</title><rect x="775.0" y="915.0" width="29.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.0" y="926.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.flush (98 samples, 2.52%)</title><rect x="775.0" y="899.0" width="29.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.0" y="910.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.handlePendingDelegate (95 samples, 2.44%)</title><rect x="776.0" y="883.0" width="28.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.0" y="894.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onSubscribe (95 samples, 2.44%)</title><rect x="776.0" y="867.0" width="28.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.0" y="878.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.advance (1 samples, 0.03%)</title><rect x="776.0" y="851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="779.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseContent$FixedLengthBodyParser.onSubscribe (94 samples, 2.41%)</title><rect x="776.3" y="851.0" width="28.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.3" y="862.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$530/1893889011.run (66 samples, 1.70%)</title><rect x="776.3" y="835.0" width="20.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.onFinished (66 samples, 1.70%)</title><rect x="776.3" y="819.0" width="20.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.3" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.closeOrReturnToCache (66 samples, 1.70%)</title><rect x="776.3" y="803.0" width="20.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="779.3" y="814.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (5 samples, 0.13%)</title><rect x="776.3" y="787.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.findFirst (5 samples, 0.13%)</title><rect x="776.3" y="771.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="779.3" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.03%)</title><rect x="776.6" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.08%)</title><rect x="776.9" y="755.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.9" y="766.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="776.9" y="739.0" width="0.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="779.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/FindOps$FindOp.evaluateSequential (1 samples, 0.03%)</title><rect x="777.5" y="739.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="777.5" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="780.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="777.5" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="780.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.03%)</title><rect x="777.5" y="691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.5" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (61 samples, 1.57%)</title><rect x="777.8" y="787.0" width="18.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.8" y="798.0"></text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.03%)</title><rect x="777.8" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.8" y="782.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="777.8" y="755.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="777.8" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.8" y="750.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (1 samples, 0.03%)</title><rect x="777.8" y="723.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="780.8" y="734.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (1 samples, 0.03%)</title><rect x="777.8" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="780.8" y="718.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.03%)</title><rect x="777.8" y="691.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="780.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.returnToPool (60 samples, 1.54%)</title><rect x="778.1" y="771.0" width="18.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.1" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.13%)</title><rect x="778.4" y="755.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="781.4" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (5 samples, 0.13%)</title><rect x="778.4" y="739.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="781.4" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.13%)</title><rect x="778.4" y="723.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.4" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.add (41 samples, 1.05%)</title><rect x="779.9" y="755.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="782.9" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.putConnection (1 samples, 0.03%)</title><rect x="792.3" y="755.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="795.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="792.3" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="792.3" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="795.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CacheKey.hashCode (1 samples, 0.03%)</title><rect x="792.3" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.registerCleanupTrigger (12 samples, 0.31%)</title><rect x="792.6" y="755.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="795.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.connectFlows (12 samples, 0.31%)</title><rect x="792.6" y="739.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.subscribe (1 samples, 0.03%)</title><rect x="792.6" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="795.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (1 samples, 0.03%)</title><rect x="792.6" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.6" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.onSubscribe (1 samples, 0.03%)</title><rect x="792.6" y="691.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="795.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$WriteSubscription.dropSubscription (1 samples, 0.03%)</title><rect x="792.6" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$Http1Publisher.subscribe (1 samples, 0.03%)</title><rect x="792.9" y="723.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.onSubscribe (1 samples, 0.03%)</title><rect x="792.9" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (1 samples, 0.03%)</title><rect x="792.9" y="691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="795.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.subscribe (10 samples, 0.26%)</title><rect x="793.2" y="723.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="796.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher.subscribe (10 samples, 0.26%)</title><rect x="793.2" y="707.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalSubscribe (10 samples, 0.26%)</title><rect x="793.2" y="691.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="796.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.registerEvent (8 samples, 0.21%)</title><rect x="793.2" y="675.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.2" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.register (8 samples, 0.21%)</title><rect x="793.2" y="659.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="796.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (8 samples, 0.21%)</title><rect x="793.2" y="643.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (7 samples, 0.18%)</title><rect x="793.5" y="627.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.5" y="638.0"></text>
</g>
<g>
<title>write (7 samples, 0.18%)</title><rect x="793.5" y="611.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="796.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.isStopped (2 samples, 0.05%)</title><rect x="795.7" y="675.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.7" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="795.7" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.7" y="670.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="796.0" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$542/2024545176.accept (2 samples, 0.05%)</title><rect x="796.3" y="835.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.3" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$1 (2 samples, 0.05%)</title><rect x="796.3" y="819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="799.3" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$BodyReader.onComplete (2 samples, 0.05%)</title><rect x="796.3" y="803.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.05%)</title><rect x="796.3" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.05%)</title><rect x="796.3" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.05%)</title><rect x="796.3" y="755.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.05%)</title><rect x="796.3" y="739.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.03%)</title><rect x="796.3" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="799.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$557/234067677.accept (1 samples, 0.03%)</title><rect x="796.3" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="799.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection$TrailingOperations$$Lambda$557/234067677.accept (1 samples, 0.03%)</title><rect x="796.6" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.onComplete (26 samples, 0.67%)</title><rect x="796.9" y="835.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.9" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$Http1BodySubscriber.complete (26 samples, 0.67%)</title><rect x="796.9" y="819.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="799.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$MappingSubscriber.onComplete (1 samples, 0.03%)</title><rect x="796.9" y="803.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="799.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseSubscribers$NullSubscriber.onComplete (25 samples, 0.64%)</title><rect x="797.2" y="803.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (25 samples, 0.64%)</title><rect x="797.2" y="787.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (25 samples, 0.64%)</title><rect x="797.2" y="771.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (23 samples, 0.59%)</title><rect x="797.8" y="755.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 0.59%)</title><rect x="797.8" y="739.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (4 samples, 0.10%)</title><rect x="797.8" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="800.8" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$563/1604018323.accept (2 samples, 0.05%)</title><rect x="798.4" y="707.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="801.4" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$563/1604018323.accept (19 samples, 0.49%)</title><rect x="799.0" y="723.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response.lambda$readBody$4 (19 samples, 0.49%)</title><rect x="799.0" y="707.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 0.49%)</title><rect x="799.0" y="691.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="802.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 0.49%)</title><rect x="799.0" y="675.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (1 samples, 0.03%)</title><rect x="799.0" y="659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.0" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$579/1449206276.apply (1 samples, 0.03%)</title><rect x="799.0" y="643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="802.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$3 (1 samples, 0.03%)</title><rect x="799.0" y="627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniRelay.tryFire (2 samples, 0.05%)</title><rect x="799.3" y="659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.03%)</title><rect x="799.6" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="802.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.03%)</title><rect x="799.6" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (16 samples, 0.41%)</title><rect x="799.9" y="659.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="802.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 0.41%)</title><rect x="799.9" y="643.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="802.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (16 samples, 0.41%)</title><rect x="799.9" y="627.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="802.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.execute (14 samples, 0.36%)</title><rect x="799.9" y="611.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="802.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalSubmit (14 samples, 0.36%)</title><rect x="799.9" y="595.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.externalPush (14 samples, 0.36%)</title><rect x="799.9" y="579.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="802.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (14 samples, 0.36%)</title><rect x="799.9" y="563.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.36%)</title><rect x="799.9" y="547.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (14 samples, 0.36%)</title><rect x="799.9" y="531.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.9" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (14 samples, 0.36%)</title><rect x="799.9" y="515.0" width="4.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="802.9" y="526.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="799.9" y="499.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.9" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.26%)</title><rect x="800.2" y="499.0" width="3.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="803.2" y="510.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.08%)</title><rect x="803.2" y="499.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="806.2" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (2 samples, 0.05%)</title><rect x="803.5" y="483.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="806.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Response$$Lambda$568/1313816771.accept (1 samples, 0.03%)</title><rect x="804.1" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.1" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$173/1240135518.accept (1 samples, 0.03%)</title><rect x="804.4" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (2 samples, 0.05%)</title><rect x="804.7" y="931.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinWorkerThread.run (63 samples, 1.62%)</title><rect x="805.4" y="1043.0" width="19.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.runWorker (63 samples, 1.62%)</title><rect x="805.4" y="1027.0" width="19.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="808.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.scan (7 samples, 0.18%)</title><rect x="805.7" y="1011.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool$WorkQueue.topLevelExec (6 samples, 0.15%)</title><rect x="805.7" y="995.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="808.7" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (6 samples, 0.15%)</title><rect x="805.7" y="979.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Completion.exec (6 samples, 0.15%)</title><rect x="805.7" y="963.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.13%)</title><rect x="806.0" y="947.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.08%)</title><rect x="806.0" y="931.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.08%)</title><rect x="806.0" y="915.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniApply.tryFire (3 samples, 0.08%)</title><rect x="806.0" y="899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (3 samples, 0.08%)</title><rect x="806.0" y="883.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="809.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.08%)</title><rect x="806.0" y="867.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="809.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.08%)</title><rect x="806.0" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="809.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="806.0" y="835.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="806.0" y="819.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="806.0" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="806.0" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="806.3" y="835.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="806.3" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="809.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="806.3" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="806.3" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="809.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.05%)</title><rect x="806.3" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="809.3" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.05%)</title><rect x="806.3" y="755.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="809.3" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="806.3" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="809.3" y="750.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="806.6" y="739.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="809.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.05%)</title><rect x="806.9" y="931.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="809.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.03%)</title><rect x="807.2" y="915.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$$Lambda$180/520013764.accept (1 samples, 0.03%)</title><rect x="807.2" y="899.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.signalWork (1 samples, 0.03%)</title><rect x="807.5" y="995.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="807.5" y="979.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.5" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="807.5" y="963.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.5" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="807.5" y="947.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="810.5" y="958.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="807.5" y="931.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="810.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="807.8" y="1011.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="810.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="807.8" y="995.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.8" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="807.8" y="979.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="810.8" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="807.8" y="963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="810.8" y="974.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="807.8" y="947.0" width="0.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="810.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkUntil (50 samples, 1.28%)</title><rect x="808.4" y="1011.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.4" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (50 samples, 1.28%)</title><rect x="808.4" y="995.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.4" y="1006.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (46 samples, 1.18%)</title><rect x="809.6" y="979.0" width="13.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="812.6" y="990.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (42 samples, 1.08%)</title><rect x="809.9" y="963.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="812.9" y="974.0"></text>
</g>
<g>
<title>__gettimeofday (3 samples, 0.08%)</title><rect x="810.2" y="947.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="813.2" y="958.0"></text>
</g>
<g>
<title>__psynch_cvwait (37 samples, 0.95%)</title><rect x="811.1" y="947.0" width="11.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="814.1" y="958.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="822.3" y="947.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="825.3" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="822.6" y="963.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.6" y="974.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="822.6" y="947.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="825.6" y="958.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title><rect x="822.6" y="931.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="825.6" y="942.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.05%)</title><rect x="822.6" y="915.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="825.6" y="926.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)</title><rect x="822.6" y="899.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="825.6" y="910.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="822.6" y="883.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.6" y="894.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="822.9" y="883.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="825.9" y="894.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="823.2" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.2" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="823.5" y="1011.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="826.5" y="1022.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="823.5" y="995.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="826.5" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="823.8" y="995.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="826.8" y="1006.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="824.1" y="979.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="827.1" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.run (674 samples, 17.31%)</title><rect x="824.5" y="1043.0" width="204.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="827.5" y="1054.0">jdk/internal/net/http/HttpC..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="825.1" y="1027.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="828.1" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="825.1" y="1011.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.1" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="825.1" y="995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="828.1" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="825.4" y="1027.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.4" y="1038.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.05%)</title><rect x="825.4" y="1011.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="828.4" y="1022.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.05%)</title><rect x="825.4" y="995.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="828.4" y="1006.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.keyFor (3 samples, 0.08%)</title><rect x="826.0" y="1027.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.0" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.clear (9 samples, 0.23%)</title><rect x="826.9" y="1027.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="829.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="828.4" y="1011.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.4" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$430/877989757.run (1 samples, 0.03%)</title><rect x="828.7" y="1011.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="831.7" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$282/549125360.run (1 samples, 0.03%)</title><rect x="829.0" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="832.0" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$297/974608749.run (1 samples, 0.03%)</title><rect x="829.3" y="1011.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.3" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (45 samples, 1.16%)</title><rect x="829.6" y="1027.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.6" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$434/1816691911.accept (41 samples, 1.05%)</title><rect x="829.9" y="1011.0" width="12.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="832.9" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$3 (41 samples, 1.05%)</title><rect x="829.9" y="995.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.9" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.handleEvent (41 samples, 1.05%)</title><rect x="829.9" y="979.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.9" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowEvent.handle (40 samples, 1.03%)</title><rect x="830.2" y="963.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.2" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadEvent.signalEvent (40 samples, 1.03%)</title><rect x="830.2" y="947.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="833.2" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (1 samples, 0.03%)</title><rect x="830.2" y="931.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.2" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.03%)</title><rect x="830.2" y="915.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.2" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.03%)</title><rect x="830.2" y="899.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.2" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.signalReadable (39 samples, 1.00%)</title><rect x="830.5" y="931.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.5" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (39 samples, 1.00%)</title><rect x="830.5" y="915.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.5" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (39 samples, 1.00%)</title><rect x="830.5" y="899.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.5" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (39 samples, 1.00%)</title><rect x="830.5" y="883.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (39 samples, 1.00%)</title><rect x="830.5" y="867.0" width="11.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.5" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$270/1384667838.run (38 samples, 0.98%)</title><rect x="830.5" y="851.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.5" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (38 samples, 0.98%)</title><rect x="830.5" y="835.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.5" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (12 samples, 0.31%)</title><rect x="830.8" y="819.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onNext (12 samples, 0.31%)</title><rect x="830.8" y="803.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.8" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver.asyncReceive (12 samples, 0.31%)</title><rect x="830.8" y="787.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.8" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (12 samples, 0.31%)</title><rect x="830.8" y="771.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (11 samples, 0.28%)</title><rect x="831.1" y="755.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (11 samples, 0.28%)</title><rect x="831.1" y="739.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="834.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.28%)</title><rect x="831.1" y="723.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (11 samples, 0.28%)</title><rect x="831.1" y="707.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="834.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="831.1" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="834.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="831.1" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="831.1" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="831.1" y="643.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="831.1" y="627.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="834.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="831.1" y="611.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.1" y="622.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.08%)</title><rect x="831.1" y="595.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="834.1" y="606.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="831.1" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="834.1" y="590.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="831.1" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.1" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="831.1" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="834.1" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="831.4" y="579.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="834.4" y="590.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="831.4" y="563.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="834.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.21%)</title><rect x="832.0" y="691.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="835.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.21%)</title><rect x="832.0" y="675.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.21%)</title><rect x="832.0" y="659.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="835.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.21%)</title><rect x="832.0" y="643.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="835.0" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.21%)</title><rect x="832.0" y="627.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="835.0" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.18%)</title><rect x="832.0" y="611.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="835.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="832.0" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="835.0" y="606.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.15%)</title><rect x="832.3" y="595.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="835.3" y="606.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="834.2" y="611.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="837.2" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (1 samples, 0.03%)</title><rect x="834.5" y="819.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="837.5" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.readAvailable (24 samples, 0.62%)</title><rect x="834.8" y="819.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SliceBufferSource.append (2 samples, 0.05%)</title><rect x="836.0" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.05%)</title><rect x="836.0" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.0" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="836.3" y="771.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="839.3" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (18 samples, 0.46%)</title><rect x="836.6" y="803.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.6" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.46%)</title><rect x="836.6" y="787.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.6" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.41%)</title><rect x="837.2" y="771.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="840.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.36%)</title><rect x="837.2" y="755.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="840.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 0.36%)</title><rect x="837.2" y="739.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (12 samples, 0.31%)</title><rect x="837.8" y="723.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="840.8" y="734.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="837.8" y="707.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="840.8" y="718.0"></text>
</g>
<g>
<title>si_module_with_name.modules (1 samples, 0.03%)</title><rect x="837.8" y="691.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="840.8" y="702.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.28%)</title><rect x="838.1" y="707.0" width="3.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="841.1" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="841.4" y="755.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.03%)</title><rect x="842.0" y="851.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.0" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$442/2143991438.accept (3 samples, 0.08%)</title><rect x="842.3" y="1011.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$5 (3 samples, 0.08%)</title><rect x="842.3" y="995.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager$$Lambda$430/877989757.run (2 samples, 0.05%)</title><rect x="842.6" y="979.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="845.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.lambda$run$2 (2 samples, 0.05%)</title><rect x="842.6" y="963.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="845.6" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.resetInterestOps (2 samples, 0.05%)</title><rect x="842.6" y="947.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="842.6" y="931.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="845.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="842.6" y="915.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="842.9" y="931.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="842.9" y="915.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.9" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="842.9" y="899.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="845.9" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="842.9" y="883.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.9" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="843.2" y="1027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.2" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (4 samples, 0.10%)</title><rect x="843.5" y="1027.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.10%)</title><rect x="843.5" y="1011.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="846.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (3 samples, 0.08%)</title><rect x="843.5" y="995.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (3 samples, 0.08%)</title><rect x="843.5" y="979.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.5" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.08%)</title><rect x="843.5" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.05%)</title><rect x="843.5" y="947.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.05%)</title><rect x="843.5" y="931.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.03%)</title><rect x="843.5" y="915.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="846.5" y="926.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.tryAdvance (1 samples, 0.03%)</title><rect x="843.5" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="846.5" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="843.5" y="883.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="846.5" y="894.0"></text>
</g>
<g>
<title>java/util/stream/Sink.begin (1 samples, 0.03%)</title><rect x="843.9" y="915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.9" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.03%)</title><rect x="844.2" y="947.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="847.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.getOpFlags (1 samples, 0.03%)</title><rect x="844.5" y="995.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/AsyncTriggerEvent.handle (33 samples, 0.85%)</title><rect x="844.8" y="1027.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="847.8" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$282/549125360.run (21 samples, 0.54%)</title><rect x="844.8" y="1011.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="847.8" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handleSubscribeEvent (21 samples, 0.54%)</title><rect x="844.8" y="995.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="847.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (21 samples, 0.54%)</title><rect x="844.8" y="979.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="847.8" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (19 samples, 0.49%)</title><rect x="845.4" y="963.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="848.4" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="845.4" y="947.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="845.4" y="931.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="848.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="845.4" y="915.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="848.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="845.4" y="899.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="848.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="845.4" y="883.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="845.4" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="845.4" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="848.4" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$SchedulableTask.run (18 samples, 0.46%)</title><rect x="845.7" y="947.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="848.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$SocketFlowTask.run (17 samples, 0.44%)</title><rect x="846.0" y="931.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="849.0" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription$$Lambda$270/1384667838.run (16 samples, 0.41%)</title><rect x="846.0" y="915.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.0" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.read (16 samples, 0.41%)</title><rect x="846.0" y="899.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.0" y="910.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (15 samples, 0.39%)</title><rect x="846.3" y="883.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.3" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.signalOnSubscribe (14 samples, 0.36%)</title><rect x="846.6" y="867.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="849.6" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$CleanupTrigger.onSubscribe (5 samples, 0.13%)</title><rect x="846.6" y="851.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="849.6" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$ReadSubscription.request (5 samples, 0.13%)</title><rect x="846.6" y="835.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="849.6" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.request (5 samples, 0.13%)</title><rect x="846.6" y="819.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="849.6" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/890545344.linkToTargetMethod (1 samples, 0.03%)</title><rect x="846.6" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="849.6" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/802243390.invoke (1 samples, 0.03%)</title><rect x="846.6" y="787.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.6" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="846.6" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1 samples, 0.03%)</title><rect x="846.6" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.6" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1 samples, 0.03%)</title><rect x="846.6" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="849.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.03%)</title><rect x="846.6" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="849.6" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.resumeReadEvent (4 samples, 0.10%)</title><rect x="846.9" y="803.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="849.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube.resumeEvent (4 samples, 0.10%)</title><rect x="846.9" y="787.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="849.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.eventUpdated (3 samples, 0.08%)</title><rect x="847.2" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorManager.eventUpdated (1 samples, 0.03%)</title><rect x="847.8" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.03%)</title><rect x="847.8" y="739.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="847.8" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="847.8" y="707.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="847.8" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="850.8" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1AsyncReceiver$Http1TubeSubscriber.onSubscribe (9 samples, 0.23%)</title><rect x="848.1" y="851.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.1" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (9 samples, 0.23%)</title><rect x="848.1" y="835.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.1" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler.runOrSchedule (6 samples, 0.15%)</title><rect x="849.0" y="819.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.0" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (6 samples, 0.15%)</title><rect x="849.0" y="803.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.15%)</title><rect x="849.0" y="787.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="852.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.15%)</title><rect x="849.0" y="771.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="849.0" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="849.0" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="849.0" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="849.0" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="849.3" y="755.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="849.3" y="739.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="849.3" y="723.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="849.3" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="849.3" y="691.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="849.3" y="675.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="849.3" y="659.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="852.3" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="849.3" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="852.3" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="849.3" y="627.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="852.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.08%)</title><rect x="849.9" y="755.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="852.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.08%)</title><rect x="849.9" y="739.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.08%)</title><rect x="849.9" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.08%)</title><rect x="849.9" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.9" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.08%)</title><rect x="849.9" y="691.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.9" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.05%)</title><rect x="850.2" y="675.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="853.2" y="686.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="850.2" y="659.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="853.2" y="670.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="850.5" y="659.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="853.5" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/SequentialScheduler$TryEndDeferredCompleter.complete (1 samples, 0.03%)</title><rect x="850.8" y="915.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="853.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$297/974608749.run (12 samples, 0.31%)</title><rect x="851.1" y="1011.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="854.1" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber.startSubscription (12 samples, 0.31%)</title><rect x="851.1" y="995.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="851.1" y="979.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="854.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="851.1" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.1" y="974.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalWriteSubscriber$$Lambda$445/383899907.get$Lambda (1 samples, 0.03%)</title><rect x="851.1" y="947.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.1" y="958.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="851.1" y="931.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.1" y="942.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (9 samples, 0.23%)</title><rect x="851.4" y="979.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.23%)</title><rect x="851.4" y="963.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.23%)</title><rect x="851.4" y="947.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.05%)</title><rect x="851.4" y="931.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="851.4" y="915.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.05%)</title><rect x="851.4" y="899.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.05%)</title><rect x="851.4" y="883.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="854.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="852.0" y="931.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="852.0" y="915.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="852.0" y="899.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="855.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="852.0" y="883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="852.0" y="867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="852.0" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.0" y="862.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.08%)</title><rect x="852.0" y="835.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="855.0" y="846.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="852.0" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.0" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="852.3" y="819.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="855.3" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="852.3" y="803.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="855.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.10%)</title><rect x="852.9" y="931.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.10%)</title><rect x="852.9" y="915.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="852.9" y="899.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.10%)</title><rect x="852.9" y="883.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.9" y="894.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.10%)</title><rect x="852.9" y="867.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.9" y="878.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.10%)</title><rect x="852.9" y="851.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="855.9" y="862.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="852.9" y="835.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="855.9" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/SocketTube$InternalReadPublisher$InternalReadSubscription.handlePending (2 samples, 0.05%)</title><rect x="854.2" y="979.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="857.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (26 samples, 0.67%)</title><rect x="854.8" y="1027.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="857.8" y="1038.0"></text>
</g>
<g>
<title>java/time/Instant.now (1 samples, 0.03%)</title><rect x="854.8" y="1011.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="857.8" y="1022.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (1 samples, 0.03%)</title><rect x="854.8" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.8" y="1006.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.03%)</title><rect x="854.8" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.8" y="990.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.03%)</title><rect x="854.8" y="963.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.8" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="854.8" y="947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="857.8" y="958.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="854.8" y="931.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="857.8" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="854.8" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="857.8" y="926.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="854.8" y="899.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="857.8" y="910.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="854.8" y="883.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="857.8" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool.purgeExpiredConnectionsAndReturnNextDeadline (25 samples, 0.64%)</title><rect x="855.1" y="1011.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.1" y="1022.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="856.6" y="995.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.6" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.21%)</title><rect x="856.9" y="995.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="859.9" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.21%)</title><rect x="856.9" y="979.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="859.9" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="856.9" y="963.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="859.9" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (7 samples, 0.18%)</title><rect x="857.2" y="963.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.2" y="974.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.08%)</title><rect x="858.4" y="947.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="861.4" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="859.3" y="995.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="862.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="859.6" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="859.6" y="979.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$$Lambda$593/1526447846.get$Lambda (1 samples, 0.03%)</title><rect x="859.6" y="963.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.6" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="859.6" y="947.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.6" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="859.6" y="931.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="862.6" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="859.6" y="915.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.6" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="859.6" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.6" y="910.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="859.6" y="883.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="862.6" y="894.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="859.6" y="867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="862.6" y="878.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="859.6" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="859.6" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="862.6" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (2 samples, 0.05%)</title><rect x="859.9" y="995.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.9" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.03%)</title><rect x="860.5" y="995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.5" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementAt (1 samples, 0.03%)</title><rect x="860.5" y="979.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.5" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.03%)</title><rect x="860.8" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.8" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ConnectionPool$ExpiryList.purgeUntil (5 samples, 0.13%)</title><rect x="861.1" y="995.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="864.1" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$SelectorAttachment.register (1 samples, 0.03%)</title><rect x="862.6" y="1027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="865.6" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="862.6" y="1011.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="865.6" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="862.6" y="995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.6" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="862.6" y="979.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="865.6" y="990.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.purgeTimeoutsAndReturnNextDeadline (31 samples, 0.80%)</title><rect x="862.9" y="1027.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="865.9" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="864.2" y="1011.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="867.2" y="1022.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="864.2" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="867.2" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.03%)</title><rect x="864.2" y="979.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="867.2" y="990.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="864.2" y="963.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="867.2" y="974.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="864.2" y="947.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="867.2" y="958.0"></text>
</g>
<g>
<title>java/time/Instant.now (11 samples, 0.28%)</title><rect x="864.5" y="1011.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="867.5" y="1022.0"></text>
</g>
<g>
<title>java/time/Clock$SystemClock.instant (11 samples, 0.28%)</title><rect x="864.5" y="995.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.5" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/VM.getNanoTimeAdjustment (9 samples, 0.23%)</title><rect x="865.1" y="979.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.1" y="990.0"></text>
</g>
<g>
<title>JVM_GetNanoTimeAdjustment (7 samples, 0.18%)</title><rect x="865.7" y="963.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="868.7" y="974.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="866.3" y="947.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="869.3" y="958.0"></text>
</g>
<g>
<title>os::javaTimeSystemUTC(long&amp;, long&amp;) (4 samples, 0.10%)</title><rect x="866.6" y="947.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="869.6" y="958.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="866.6" y="931.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="869.6" y="942.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="866.9" y="931.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="869.9" y="942.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.08%)</title><rect x="866.9" y="915.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="869.9" y="926.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.08%)</title><rect x="866.9" y="899.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="869.9" y="910.0"></text>
</g>
<g>
<title>java/time/Instant.until (4 samples, 0.10%)</title><rect x="867.8" y="1011.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="870.8" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="869.0" y="1011.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.0" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (2 samples, 0.05%)</title><rect x="869.0" y="995.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="872.0" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (2 samples, 0.05%)</title><rect x="869.0" y="979.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.0" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (3 samples, 0.08%)</title><rect x="869.6" y="1011.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="872.6" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.03%)</title><rect x="870.5" y="1011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="873.5" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (5 samples, 0.13%)</title><rect x="870.8" y="1011.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="873.8" y="1022.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="872.0" y="995.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.0" y="1006.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.03%)</title><rect x="872.0" y="979.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.0" y="990.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.03%)</title><rect x="872.0" y="963.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="875.0" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (499 samples, 12.82%)</title><rect x="872.3" y="1027.0" width="151.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="875.3" y="1038.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (499 samples, 12.82%)</title><rect x="872.3" y="1011.0" width="151.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="875.3" y="1022.0">sun/nio/ch/Selector..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (495 samples, 12.72%)</title><rect x="873.6" y="995.0" width="150.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.6" y="1006.0">sun/nio/ch/KQueueSe..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (445 samples, 11.43%)</title><rect x="873.9" y="979.0" width="134.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.9" y="990.0">sun/nio/ch/KQueue..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="879.3" y="963.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="882.3" y="974.0"></text>
</g>
<g>
<title>kevent (426 samples, 10.94%)</title><rect x="879.6" y="963.0" width="129.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="882.6" y="974.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (46 samples, 1.18%)</title><rect x="1008.7" y="979.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1011.7" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.08%)</title><rect x="1008.7" y="963.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1011.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.08%)</title><rect x="1008.7" y="947.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1011.7" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (3 samples, 0.08%)</title><rect x="1008.7" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1011.7" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="1009.0" y="915.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="1009.0" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1012.0" y="910.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1009.0" y="883.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1012.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="1009.3" y="899.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.3" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (38 samples, 0.98%)</title><rect x="1009.7" y="963.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1012.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (38 samples, 0.98%)</title><rect x="1009.7" y="947.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1012.7" y="958.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_drain (5 samples, 0.13%)</title><rect x="1010.3" y="931.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1013.3" y="942.0"></text>
</g>
<g>
<title>rpc_errlist (31 samples, 0.80%)</title><rect x="1011.8" y="931.0" width="9.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1014.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (5 samples, 0.13%)</title><rect x="1021.2" y="963.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="1021.8" y="947.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1024.8" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="1021.8" y="931.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1024.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1021.8" y="915.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1024.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="1021.8" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1024.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.03%)</title><rect x="1022.1" y="947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1025.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="1022.4" y="947.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1025.4" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="1022.7" y="979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1025.7" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="1022.7" y="963.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.7" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="1022.7" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.7" y="958.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="1022.7" y="931.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1025.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="1022.7" y="915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1025.7" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.05%)</title><rect x="1023.0" y="979.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1026.0" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (2 samples, 0.05%)</title><rect x="1023.0" y="963.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1026.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.05%)</title><rect x="1023.0" y="947.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.0" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (11 samples, 0.28%)</title><rect x="1023.6" y="1027.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1026.6" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (11 samples, 0.28%)</title><rect x="1023.6" y="1011.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1026.6" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (10 samples, 0.26%)</title><rect x="1023.9" y="995.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (6 samples, 0.15%)</title><rect x="1023.9" y="979.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.9" y="990.0"></text>
</g>
<g>
<title>kevent (6 samples, 0.15%)</title><rect x="1023.9" y="963.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1026.9" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.05%)</title><rect x="1025.7" y="979.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.7" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.clearInterrupt (2 samples, 0.05%)</title><rect x="1025.7" y="963.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.7" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.03%)</title><rect x="1026.0" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.0" y="958.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="1026.0" y="931.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1029.0" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.05%)</title><rect x="1026.3" y="979.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1029.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (3 samples, 0.08%)</title><rect x="1026.9" y="1027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1029.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (3 samples, 0.08%)</title><rect x="1026.9" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1029.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (3 samples, 0.08%)</title><rect x="1026.9" y="995.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1029.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (3 samples, 0.08%)</title><rect x="1027.8" y="1027.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1030.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="1028.4" y="1011.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1031.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="1028.4" y="995.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.4" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1028.4" y="979.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1031.4" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1028.4" y="963.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.4" y="974.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (510 samples, 13.10%)</title><rect x="1028.7" y="1043.0" width="154.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1031.7" y="1054.0">one/nio/server/Selec..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="1029.7" y="1027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1032.7" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (1 samples, 0.03%)</title><rect x="1029.7" y="1011.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (90 samples, 2.31%)</title><rect x="1030.0" y="1027.0" width="27.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.0" y="1038.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (6 samples, 0.15%)</title><rect x="1030.3" y="1011.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (4 samples, 0.10%)</title><rect x="1030.9" y="995.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1033.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4 samples, 0.10%)</title><rect x="1030.9" y="979.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1033.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.08%)</title><rect x="1031.2" y="963.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1034.2" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1031.2" y="947.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1031.2" y="931.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1034.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="1032.1" y="1011.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1035.1" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (80 samples, 2.05%)</title><rect x="1032.7" y="1011.0" width="24.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.7" y="1022.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (80 samples, 2.05%)</title><rect x="1032.7" y="995.0" width="24.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1035.7" y="1006.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (80 samples, 2.05%)</title><rect x="1032.7" y="979.0" width="24.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1035.7" y="990.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (69 samples, 1.77%)</title><rect x="1032.7" y="963.0" width="20.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1035.7" y="974.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.05%)</title><rect x="1034.5" y="947.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1037.5" y="958.0"></text>
</g>
<g>
<title>kevent (61 samples, 1.57%)</title><rect x="1035.1" y="947.0" width="18.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1038.1" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.15%)</title><rect x="1053.6" y="963.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1056.6" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (6 samples, 0.15%)</title><rect x="1053.6" y="947.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1056.6" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="1053.9" y="931.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1056.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="1054.2" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1057.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="1054.2" y="915.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1057.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1054.2" y="899.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="1054.2" y="883.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="1054.5" y="931.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="1054.5" y="915.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1057.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="1054.5" y="899.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1057.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndUpdateReadyOps (1 samples, 0.03%)</title><rect x="1054.8" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.8" y="942.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="1054.8" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1057.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="1055.1" y="931.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.1" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="1055.4" y="963.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.4" y="974.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="1055.4" y="947.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.4" y="958.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="1055.4" y="931.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1058.4" y="942.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="1055.4" y="915.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1058.4" y="926.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="1055.4" y="899.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.4" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (3 samples, 0.08%)</title><rect x="1056.0" y="963.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1059.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="1056.6" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.03%)</title><rect x="1056.6" y="931.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1059.6" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="1056.9" y="1011.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1059.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="1056.9" y="995.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.9" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="1056.9" y="979.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1059.9" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1056.9" y="963.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1059.9" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (416 samples, 10.69%)</title><rect x="1057.2" y="1027.0" width="126.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1060.2" y="1038.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (414 samples, 10.63%)</title><rect x="1057.8" y="1011.0" width="125.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.8" y="1022.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (385 samples, 9.89%)</title><rect x="1057.8" y="995.0" width="116.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1060.8" y="1006.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2 samples, 0.05%)</title><rect x="1059.1" y="979.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.1" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="1059.7" y="979.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1062.7" y="990.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="1060.0" y="979.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1063.0" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (369 samples, 9.48%)</title><rect x="1060.3" y="979.0" width="111.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1063.3" y="990.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (369 samples, 9.48%)</title><rect x="1060.3" y="963.0" width="111.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1063.3" y="974.0">one/nio/http/..</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (366 samples, 9.40%)</title><rect x="1060.3" y="947.0" width="110.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.3" y="958.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.05%)</title><rect x="1060.6" y="931.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1063.6" y="942.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1060.9" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1063.9" y="926.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1060.9" y="899.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.9" y="910.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (3 samples, 0.08%)</title><rect x="1061.2" y="931.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.2" y="942.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.08%)</title><rect x="1061.2" y="915.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1064.2" y="926.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1061.2" y="899.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.2" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1061.2" y="883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1064.2" y="894.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1061.5" y="899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1064.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1061.5" y="883.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.5" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1061.5" y="867.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1064.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1061.5" y="851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1064.5" y="862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1061.5" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1064.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1061.5" y="819.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.5" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1061.5" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1064.5" y="814.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="1061.5" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="1061.8" y="899.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1064.8" y="910.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1061.8" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.8" y="894.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1061.8" y="867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1064.8" y="878.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1061.8" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.8" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.entity (360 samples, 9.25%)</title><rect x="1062.1" y="931.0" width="109.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1065.1" y="942.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="1062.4" y="915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1065.4" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleUpsert (1 samples, 0.03%)</title><rect x="1062.4" y="899.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1065.4" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.handle (358 samples, 9.20%)</title><rect x="1062.7" y="915.0" width="108.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.7" y="926.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleUpsert (356 samples, 9.14%)</title><rect x="1062.7" y="899.0" width="107.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1065.7" y="910.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="1062.7" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="1062.7" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1062.7" y="851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1065.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1062.7" y="835.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1065.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (28 samples, 0.72%)</title><rect x="1063.0" y="883.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (28 samples, 0.72%)</title><rect x="1063.0" y="867.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1066.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (28 samples, 0.72%)</title><rect x="1063.0" y="851.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1066.0" y="862.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="1063.9" y="835.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1066.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (23 samples, 0.59%)</title><rect x="1064.5" y="835.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="1064.5" y="819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1067.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="1064.5" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="1064.5" y="787.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1067.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="1064.5" y="771.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1067.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="1064.5" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1067.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="1064.8" y="819.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="1064.8" y="803.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="1064.8" y="787.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1067.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="1064.8" y="771.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1067.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="1064.8" y="755.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.8" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="1064.8" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1067.8" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="1065.1" y="723.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1068.1" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1065.1" y="707.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.1" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1065.1" y="691.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1068.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 0.51%)</title><rect x="1065.4" y="819.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1068.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 0.51%)</title><rect x="1065.4" y="803.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 0.51%)</title><rect x="1065.4" y="787.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 0.51%)</title><rect x="1065.4" y="771.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.4" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (20 samples, 0.51%)</title><rect x="1065.4" y="755.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.4" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1065.4" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.4" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (19 samples, 0.49%)</title><rect x="1065.7" y="739.0" width="5.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1068.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1065.7" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.7" y="734.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1065.7" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.7" y="718.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1065.7" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1068.7" y="702.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1065.7" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1068.7" y="686.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1065.7" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.7" y="670.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1066.0" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1069.0" y="734.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1066.0" y="707.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1069.0" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1066.3" y="723.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.3" y="734.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="1066.3" y="707.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1069.3" y="718.0"></text>
</g>
<g>
<title>__psynch_cvsignal (15 samples, 0.39%)</title><rect x="1066.6" y="723.0" width="4.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1069.6" y="734.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1071.2" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.2" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (67 samples, 1.72%)</title><rect x="1071.5" y="883.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1074.5" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (67 samples, 1.72%)</title><rect x="1071.5" y="867.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1074.5" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (67 samples, 1.72%)</title><rect x="1071.5" y="851.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1074.5" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (67 samples, 1.72%)</title><rect x="1071.5" y="835.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1074.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.05%)</title><rect x="1071.5" y="819.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1074.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.05%)</title><rect x="1071.5" y="803.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.05%)</title><rect x="1071.5" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1074.5" y="798.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (37 samples, 0.95%)</title><rect x="1072.1" y="819.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (2 samples, 0.05%)</title><rect x="1072.1" y="803.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="1072.4" y="787.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.4" y="798.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.firstValue (4 samples, 0.10%)</title><rect x="1072.7" y="803.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.7" y="814.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.allValues (1 samples, 0.03%)</title><rect x="1073.0" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1076.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.03%)</title><rect x="1073.0" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.0" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.get (1 samples, 0.03%)</title><rect x="1073.0" y="755.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1076.0" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.03%)</title><rect x="1073.0" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1076.0" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="1073.0" y="723.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.05%)</title><rect x="1073.3" y="787.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1076.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.05%)</title><rect x="1073.3" y="771.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (2 samples, 0.05%)</title><rect x="1073.3" y="755.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1076.3" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractList$RandomAccessSpliterator.characteristics (1 samples, 0.03%)</title><rect x="1073.6" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1076.6" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (8 samples, 0.21%)</title><rect x="1073.9" y="803.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.9" y="814.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (8 samples, 0.21%)</title><rect x="1073.9" y="787.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1076.9" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="1074.2" y="771.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1077.2" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (6 samples, 0.15%)</title><rect x="1074.5" y="771.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1077.5" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (5 samples, 0.13%)</title><rect x="1074.8" y="755.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.8" y="766.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (4 samples, 0.10%)</title><rect x="1074.8" y="739.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.8" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (4 samples, 0.10%)</title><rect x="1074.8" y="723.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1077.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.08%)</title><rect x="1074.8" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.8" y="718.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$133/1917796656.accept (3 samples, 0.08%)</title><rect x="1074.8" y="691.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.8" y="702.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (3 samples, 0.08%)</title><rect x="1074.8" y="675.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1077.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.trim (1 samples, 0.03%)</title><rect x="1074.8" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.trim (1 samples, 0.03%)</title><rect x="1074.8" y="643.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1077.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$78/212683148.test (2 samples, 0.05%)</title><rect x="1075.1" y="659.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1078.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (2 samples, 0.05%)</title><rect x="1075.1" y="643.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1078.1" y="654.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (2 samples, 0.05%)</title><rect x="1075.1" y="627.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1078.1" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (2 samples, 0.05%)</title><rect x="1075.1" y="611.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1078.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (2 samples, 0.05%)</title><rect x="1075.1" y="595.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.1" y="606.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (2 samples, 0.05%)</title><rect x="1075.1" y="579.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1078.1" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (2 samples, 0.05%)</title><rect x="1075.1" y="563.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1078.1" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (2 samples, 0.05%)</title><rect x="1075.1" y="547.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1078.1" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="1075.4" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1078.4" y="542.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1075.7" y="707.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1078.7" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="1076.0" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.0" y="750.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$ListItr.hasNext (1 samples, 0.03%)</title><rect x="1076.0" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.0" y="734.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkURI (1 samples, 0.03%)</title><rect x="1076.3" y="803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1079.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.toLowerCase (1 samples, 0.03%)</title><rect x="1076.3" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1079.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="1076.3" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1079.3" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.retrieveProxy (22 samples, 0.57%)</title><rect x="1076.6" y="803.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1079.6" y="814.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector.select (22 samples, 0.57%)</title><rect x="1076.6" y="787.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1079.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title><rect x="1076.6" y="771.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1079.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="1076.6" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1079.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="1076.6" y="739.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.6" y="750.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (20 samples, 0.51%)</title><rect x="1077.2" y="771.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.2" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1077.2" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.2" y="766.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (7 samples, 0.18%)</title><rect x="1077.5" y="755.0" width="2.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.5" y="766.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="1077.8" y="739.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.8" y="750.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="1077.8" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1080.8" y="734.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="1078.2" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="734.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="1078.2" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.2" y="718.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="1078.5" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.5" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1078.5" y="723.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.5" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="1078.5" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.5" y="718.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (3 samples, 0.08%)</title><rect x="1078.8" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.8" y="750.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="1078.8" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.8" y="734.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="1078.8" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.8" y="718.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (2 samples, 0.05%)</title><rect x="1079.1" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.1" y="734.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.05%)</title><rect x="1079.1" y="707.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.1" y="718.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="1079.1" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1082.1" y="702.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.03%)</title><rect x="1079.1" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.1" y="686.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.03%)</title><rect x="1079.4" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.4" y="702.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.03%)</title><rect x="1079.7" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.7" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1080.0" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.0" y="766.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (10 samples, 0.26%)</title><rect x="1080.3" y="755.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1083.3" y="766.0"></text>
</g>
<g>
<title>sun/net/spi/DefaultProxySelector$4.run (8 samples, 0.21%)</title><rect x="1080.9" y="739.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1083.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title><rect x="1080.9" y="723.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1083.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1081.2" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1084.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1081.2" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.08%)</title><rect x="1081.5" y="723.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1084.5" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.08%)</title><rect x="1081.5" y="707.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1084.5" y="718.0"></text>
</g>
<g>
<title>sun/net/NetProperties.get (3 samples, 0.08%)</title><rect x="1082.4" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.4" y="734.0"></text>
</g>
<g>
<title>java/lang/System.getProperty (2 samples, 0.05%)</title><rect x="1082.4" y="707.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.4" y="718.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (2 samples, 0.05%)</title><rect x="1082.4" y="691.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1085.4" y="702.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.03%)</title><rect x="1082.7" y="675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1085.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="1082.7" y="659.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1085.7" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1083.0" y="707.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1086.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.&lt;init&gt; (7 samples, 0.18%)</title><rect x="1083.3" y="819.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1086.3" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1083.3" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.3" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.filterChain (6 samples, 0.15%)</title><rect x="1083.6" y="803.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1086.6" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/FilterFactory.getFilterChain (6 samples, 0.15%)</title><rect x="1083.6" y="787.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1086.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor (1 samples, 0.03%)</title><rect x="1083.6" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1086.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Class.getConstructor0 (1 samples, 0.03%)</title><rect x="1083.6" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Class.privateGetDeclaredConstructors (1 samples, 0.03%)</title><rect x="1083.6" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1086.6" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.05%)</title><rect x="1083.9" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1086.9" y="782.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.checkAccess (2 samples, 0.05%)</title><rect x="1083.9" y="755.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1086.9" y="766.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.verifyAccess (2 samples, 0.05%)</title><rect x="1083.9" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.9" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/AccessibleObject.slowVerifyAccess (2 samples, 0.05%)</title><rect x="1083.9" y="723.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1086.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.verifyMemberAccess (2 samples, 0.05%)</title><rect x="1083.9" y="707.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1086.9" y="718.0"></text>
</g>
<g>
<title>java/util/AbstractSequentialList.iterator (1 samples, 0.03%)</title><rect x="1084.5" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1087.5" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractList.listIterator (1 samples, 0.03%)</title><rect x="1084.5" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.5" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.listIterator (1 samples, 0.03%)</title><rect x="1084.5" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.5" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList$ListItr.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1084.5" y="723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1087.5" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList.node (1 samples, 0.03%)</title><rect x="1084.8" y="771.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1087.8" y="782.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="1085.1" y="771.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1088.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (21 samples, 0.54%)</title><rect x="1085.4" y="819.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (19 samples, 0.49%)</title><rect x="1085.4" y="803.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (18 samples, 0.46%)</title><rect x="1085.4" y="787.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1088.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (18 samples, 0.46%)</title><rect x="1085.4" y="771.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.08%)</title><rect x="1085.4" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1088.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.08%)</title><rect x="1085.4" y="739.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1088.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.08%)</title><rect x="1085.4" y="723.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1088.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.08%)</title><rect x="1085.4" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1088.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1086.0" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1089.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="1086.0" y="675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 0.21%)</title><rect x="1086.3" y="755.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1089.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.21%)</title><rect x="1086.3" y="739.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1089.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.21%)</title><rect x="1086.3" y="723.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1089.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.21%)</title><rect x="1086.3" y="707.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1089.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.21%)</title><rect x="1086.3" y="691.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1089.3" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.21%)</title><rect x="1086.3" y="675.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1089.3" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.21%)</title><rect x="1086.3" y="659.0" width="2.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1089.3" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.21%)</title><rect x="1086.3" y="643.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.3" y="654.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.18%)</title><rect x="1086.3" y="627.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1089.3" y="638.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1088.5" y="627.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1091.5" y="638.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="1088.5" y="611.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1091.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.18%)</title><rect x="1088.8" y="755.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1091.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.18%)</title><rect x="1088.8" y="739.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1091.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.18%)</title><rect x="1088.8" y="723.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1091.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.18%)</title><rect x="1088.8" y="707.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1091.8" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.18%)</title><rect x="1088.8" y="691.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1091.8" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.18%)</title><rect x="1088.8" y="675.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1091.8" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1088.8" y="659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.8" y="670.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="1088.8" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.8" y="654.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="1089.1" y="659.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1092.1" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.05%)</title><rect x="1090.0" y="659.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1093.0" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1090.6" y="659.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1093.6" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl$DelegatingExecutor.execute (1 samples, 0.03%)</title><rect x="1090.9" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1093.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="1090.9" y="771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1093.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="1090.9" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1093.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="1090.9" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1093.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="1090.9" y="723.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1093.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="1090.9" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1093.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="1090.9" y="691.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1093.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (2 samples, 0.05%)</title><rect x="1091.2" y="803.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1094.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (2 samples, 0.05%)</title><rect x="1091.2" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1094.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (2 samples, 0.05%)</title><rect x="1091.2" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1094.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="1091.5" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1094.5" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.03%)</title><rect x="1091.5" y="739.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1094.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.build (3 samples, 0.08%)</title><rect x="1091.8" y="883.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1094.8" y="894.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ImmutableHttpRequest.&lt;init&gt; (3 samples, 0.08%)</title><rect x="1091.8" y="867.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1094.8" y="878.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (3 samples, 0.08%)</title><rect x="1091.8" y="851.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1094.8" y="862.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (3 samples, 0.08%)</title><rect x="1091.8" y="835.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1094.8" y="846.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (2 samples, 0.05%)</title><rect x="1092.1" y="819.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1095.1" y="830.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$126/732975962.accept (2 samples, 0.05%)</title><rect x="1092.1" y="803.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1095.1" y="814.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (2 samples, 0.05%)</title><rect x="1092.1" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (2 samples, 0.05%)</title><rect x="1092.1" y="771.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1095.1" y="782.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.05%)</title><rect x="1092.1" y="755.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1095.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (67 samples, 1.72%)</title><rect x="1092.7" y="883.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.7" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (66 samples, 1.70%)</title><rect x="1093.0" y="867.0" width="20.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.03%)</title><rect x="1093.0" y="851.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1096.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1093.3" y="851.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (64 samples, 1.64%)</title><rect x="1093.6" y="851.0" width="19.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1096.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1093.6" y="835.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (63 samples, 1.62%)</title><rect x="1093.9" y="835.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.9" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (62 samples, 1.59%)</title><rect x="1093.9" y="819.0" width="18.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1096.9" y="830.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (62 samples, 1.59%)</title><rect x="1093.9" y="803.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (62 samples, 1.59%)</title><rect x="1093.9" y="787.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1096.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (62 samples, 1.59%)</title><rect x="1093.9" y="771.0" width="18.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1096.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (62 samples, 1.59%)</title><rect x="1093.9" y="755.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1096.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (62 samples, 1.59%)</title><rect x="1093.9" y="739.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1096.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (62 samples, 1.59%)</title><rect x="1093.9" y="723.0" width="18.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1096.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (56 samples, 1.44%)</title><rect x="1095.7" y="707.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1098.7" y="718.0"></text>
</g>
<g>
<title>write (54 samples, 1.39%)</title><rect x="1096.3" y="691.0" width="16.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1099.3" y="702.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1112.7" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1115.7" y="830.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1112.7" y="803.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1115.7" y="814.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="1112.7" y="787.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1115.7" y="798.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="1112.7" y="771.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1115.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.futureHelper (169 samples, 4.34%)</title><rect x="1113.0" y="883.0" width="51.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1116.0" y="894.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.count (169 samples, 4.34%)</title><rect x="1113.0" y="867.0" width="51.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.0" y="878.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.get (169 samples, 4.34%)</title><rect x="1113.0" y="851.0" width="51.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1116.0" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.waitingGet (167 samples, 4.29%)</title><rect x="1113.6" y="835.0" width="50.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.6" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.managedBlock (166 samples, 4.26%)</title><rect x="1113.9" y="819.0" width="50.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1116.9" y="830.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$Signaller.block (166 samples, 4.26%)</title><rect x="1113.9" y="803.0" width="50.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.9" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (165 samples, 4.24%)</title><rect x="1114.2" y="787.0" width="50.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.2" y="798.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (165 samples, 4.24%)</title><rect x="1114.2" y="771.0" width="50.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.2" y="782.0">jdk/i..</text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="1115.4" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.4" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (160 samples, 4.11%)</title><rect x="1115.7" y="755.0" width="48.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1118.7" y="766.0">Unsa..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1116.0" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.0" y="750.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1116.0" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (1 samples, 0.03%)</title><rect x="1116.3" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.3" y="750.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.05%)</title><rect x="1116.6" y="739.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.6" y="750.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="1116.6" y="723.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.6" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.05%)</title><rect x="1116.6" y="707.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.6" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (146 samples, 3.75%)</title><rect x="1117.3" y="739.0" width="44.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.3" y="750.0">Park..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.05%)</title><rect x="1117.6" y="723.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.6" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.05%)</title><rect x="1118.2" y="723.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.2" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1118.2" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.2" y="718.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1118.5" y="707.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1121.5" y="718.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1118.8" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.8" y="734.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="1119.1" y="723.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.1" y="734.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1119.1" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.1" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (130 samples, 3.34%)</title><rect x="1119.4" y="723.0" width="39.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1122.4" y="734.0">__p..</text>
</g>
<g>
<title>_pthread_cond_wait (7 samples, 0.18%)</title><rect x="1158.8" y="723.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1161.8" y="734.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="1160.6" y="707.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.6" y="718.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1160.9" y="723.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1161.2" y="723.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="1161.5" y="739.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.5" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="1161.5" y="723.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.5" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1161.5" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1161.5" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1161.5" y="675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.5" y="686.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1161.5" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="670.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="1161.8" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="1162.1" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.03%)</title><rect x="1162.1" y="723.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1162.4" y="723.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.4" y="734.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1162.4" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.4" y="718.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1162.4" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.4" y="702.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1162.4" y="675.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.4" y="686.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1162.4" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.4" y="670.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1162.4" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="1162.7" y="739.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1165.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="1163.0" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (2 samples, 0.05%)</title><rect x="1163.3" y="739.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1166.3" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1163.9" y="739.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.setProxyHeader (21 samples, 0.54%)</title><rect x="1164.2" y="883.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1167.2" y="894.0"></text>
</g>
<g>
<title>java/net/URI.create (15 samples, 0.39%)</title><rect x="1164.2" y="867.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1167.2" y="878.0"></text>
</g>
<g>
<title>java/net/URI.&lt;init&gt; (15 samples, 0.39%)</title><rect x="1164.2" y="851.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1167.2" y="862.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (14 samples, 0.36%)</title><rect x="1164.5" y="835.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1167.5" y="846.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChar (1 samples, 0.03%)</title><rect x="1164.5" y="819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1167.5" y="830.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHierarchical (13 samples, 0.33%)</title><rect x="1164.8" y="819.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1167.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1165.1" y="803.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1168.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1165.1" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1168.1" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1165.1" y="771.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1168.1" y="782.0"></text>
</g>
<g>
<title>java/net/URI$Parser.checkChars (3 samples, 0.08%)</title><rect x="1165.4" y="803.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1168.4" y="814.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (3 samples, 0.08%)</title><rect x="1165.4" y="787.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1168.4" y="798.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseAuthority (2 samples, 0.05%)</title><rect x="1166.4" y="803.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1169.4" y="814.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseServer (1 samples, 0.03%)</title><rect x="1166.4" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1169.4" y="798.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parseHostname (1 samples, 0.03%)</title><rect x="1166.4" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1169.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1166.4" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1169.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1166.4" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1169.4" y="750.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (1 samples, 0.03%)</title><rect x="1166.7" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1169.7" y="798.0"></text>
</g>
<g>
<title>java/net/URI$Parser.scan (6 samples, 0.15%)</title><rect x="1167.0" y="803.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="1167.6" y="787.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1170.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1168.2" y="787.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1171.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1168.2" y="771.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1171.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1168.2" y="755.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1171.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.setHeader (4 samples, 0.10%)</title><rect x="1168.8" y="867.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1171.8" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.setHeader (4 samples, 0.10%)</title><rect x="1168.8" y="851.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1171.8" y="862.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.checkNameAndValue (4 samples, 0.10%)</title><rect x="1168.8" y="835.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1171.8" y="846.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (3 samples, 0.08%)</title><rect x="1168.8" y="819.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1171.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (3 samples, 0.08%)</title><rect x="1168.8" y="803.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1171.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (3 samples, 0.08%)</title><rect x="1168.8" y="787.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1171.8" y="798.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (3 samples, 0.08%)</title><rect x="1168.8" y="771.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1171.8" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (3 samples, 0.08%)</title><rect x="1168.8" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1171.8" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (3 samples, 0.08%)</title><rect x="1168.8" y="739.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1171.8" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntryUsingComparator (1 samples, 0.03%)</title><rect x="1169.4" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1172.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="1169.4" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1172.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (1 samples, 0.03%)</title><rect x="1169.4" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1172.4" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (1 samples, 0.03%)</title><rect x="1169.4" y="675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1172.4" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.03%)</title><rect x="1169.4" y="659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1172.4" y="670.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.isValidValue (1 samples, 0.03%)</title><rect x="1169.7" y="819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$77/1716093734.test (1 samples, 0.03%)</title><rect x="1169.7" y="803.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1172.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.timeout (1 samples, 0.03%)</title><rect x="1170.0" y="867.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1173.0" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (1 samples, 0.03%)</title><rect x="1170.3" y="867.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1173.3" y="878.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestBuilderImpl.uri (1 samples, 0.03%)</title><rect x="1170.3" y="851.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1173.3" y="862.0"></text>
</g>
<g>
<title>java/net/URI$Parser.parse (1 samples, 0.03%)</title><rect x="1170.3" y="835.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.getNodeReplica (2 samples, 0.05%)</title><rect x="1170.6" y="899.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.getReplicas (2 samples, 0.05%)</title><rect x="1170.6" y="883.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="1170.6" y="867.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1173.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="1170.9" y="867.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1173.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="1170.9" y="851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1173.9" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1170.9" y="835.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1173.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.03%)</title><rect x="1170.9" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1173.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.05%)</title><rect x="1171.2" y="947.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1174.2" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="1171.2" y="931.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1174.2" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="1171.2" y="915.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1174.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1171.5" y="915.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.5" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="1171.5" y="899.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1174.5" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="1171.5" y="883.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1174.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="1171.8" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="1171.8" y="931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.10%)</title><rect x="1172.1" y="979.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1175.1" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="1172.4" y="963.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1175.4" y="974.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="1172.4" y="947.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1175.4" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="1173.0" y="963.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.0" y="974.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="1173.3" y="979.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1176.3" y="990.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1173.6" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1173.6" y="947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.05%)</title><rect x="1173.9" y="979.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1174.2" y="963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1177.2" y="974.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (28 samples, 0.72%)</title><rect x="1174.5" y="995.0" width="8.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (28 samples, 0.72%)</title><rect x="1174.5" y="979.0" width="8.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1177.5" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 0.64%)</title><rect x="1175.5" y="963.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1178.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1175.5" y="947.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1178.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1175.5" y="931.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1178.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1175.5" y="915.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1178.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1175.5" y="899.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1178.5" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.62%)</title><rect x="1175.8" y="947.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1178.8" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (24 samples, 0.62%)</title><rect x="1175.8" y="931.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1178.8" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (23 samples, 0.59%)</title><rect x="1175.8" y="915.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1178.8" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (23 samples, 0.59%)</title><rect x="1175.8" y="899.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1178.8" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (22 samples, 0.57%)</title><rect x="1176.1" y="883.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1176.1" y="867.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1176.1" y="851.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1176.4" y="867.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>rpc_errlist (20 samples, 0.51%)</title><rect x="1176.7" y="867.0" width="6.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1179.7" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1182.7" y="915.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1182.7" y="899.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1185.7" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1183.0" y="995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.0" y="1006.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1183.0" y="979.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1186.0" y="990.0"></text>
</g>
<g>
<title>thread_start (22 samples, 0.57%)</title><rect x="1183.3" y="1043.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.3" y="1054.0"></text>
</g>
<g>
<title>_pthread_start (22 samples, 0.57%)</title><rect x="1183.3" y="1027.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1186.3" y="1038.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.23%)</title><rect x="1183.3" y="1011.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.23%)</title><rect x="1183.3" y="995.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.18%)</title><rect x="1183.3" y="979.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 0.15%)</title><rect x="1183.3" y="963.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.10%)</title><rect x="1183.3" y="947.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.03%)</title><rect x="1183.3" y="931.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.03%)</title><rect x="1183.3" y="915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1183.3" y="899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1183.3" y="883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1183.3" y="867.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.08%)</title><rect x="1183.6" y="931.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="942.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (3 samples, 0.08%)</title><rect x="1183.6" y="915.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1186.6" y="926.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.5" y="947.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.5" y="931.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.5" y="915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1184.5" y="899.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.5" y="883.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.03%)</title><rect x="1184.5" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.03%)</title><rect x="1184.5" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.03%)</title><rect x="1184.5" y="835.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1184.5" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>G1Allocator::survivor_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1184.5" y="803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1184.5" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="1184.5" y="771.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="1184.5" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1184.5" y="739.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.8" y="947.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1184.8" y="931.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="942.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1184.8" y="915.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="926.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1184.8" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="910.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1185.2" y="963.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="974.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="1185.2" y="947.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1188.2" y="958.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="1185.5" y="979.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="990.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="1185.5" y="963.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.5" y="974.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1185.5" y="947.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1188.5" y="958.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="1185.5" y="931.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1188.5" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1185.8" y="979.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.8" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1185.8" y="963.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.8" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.03%)</title><rect x="1185.8" y="947.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="1185.8" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.8" y="942.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.03%)</title><rect x="1185.8" y="915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.03%)</title><rect x="1185.8" y="899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.8" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1185.8" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.8" y="894.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.03%)</title><rect x="1185.8" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.8" y="878.0"></text>
</g>
<g>
<title>OopStorage::ActiveArray::block_count() const (1 samples, 0.03%)</title><rect x="1185.8" y="851.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="862.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, void (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt;(void*) (13 samples, 0.33%)</title><rect x="1186.1" y="1011.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="1022.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (13 samples, 0.33%)</title><rect x="1186.1" y="995.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.1" y="1006.0"></text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (13 samples, 0.33%)</title><rect x="1186.1" y="979.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.1" y="990.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (13 samples, 0.33%)</title><rect x="1186.1" y="963.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="974.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (13 samples, 0.33%)</title><rect x="1186.1" y="947.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="958.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (13 samples, 0.33%)</title><rect x="1186.1" y="931.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="942.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt; &gt;&amp;, unsigned long long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (13 samples, 0.33%)</title><rect x="1186.1" y="915.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="926.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (13 samples, 0.33%)</title><rect x="1186.1" y="899.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="910.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (12 samples, 0.31%)</title><rect x="1186.1" y="883.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="894.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, rocksdb::FileSystem*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::__1::default_delete&lt;rocks (12 samples, 0.31%)</title><rect x="1186.1" y="867.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="878.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.10%)</title><rect x="1186.1" y="851.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (3 samples, 0.08%)</title><rect x="1186.1" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.1" y="846.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (3 samples, 0.08%)</title><rect x="1186.1" y="819.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (3 samples, 0.08%)</title><rect x="1186.1" y="803.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="814.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (3 samples, 0.08%)</title><rect x="1186.1" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="798.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (3 samples, 0.08%)</title><rect x="1186.1" y="771.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.1" y="782.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (3 samples, 0.08%)</title><rect x="1186.1" y="755.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.1" y="766.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (3 samples, 0.08%)</title><rect x="1186.1" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="750.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (3 samples, 0.08%)</title><rect x="1186.1" y="723.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="734.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1186.1" y="707.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1189.1" y="718.0"></text>
</g>
<g>
<title>snappy::Bits::Log2Floor(unsigned int) (2 samples, 0.05%)</title><rect x="1186.4" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="718.0"></text>
</g>
<g>
<title>std::__1::_DeallocateCaller::__do_call(void*) (1 samples, 0.03%)</title><rect x="1186.7" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::PartitionedIndexBuilder::NumPartitions() const (1 samples, 0.03%)</title><rect x="1187.0" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::FindShortestSeparator(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1187.0" y="819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1187.0" y="803.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1190.0" y="814.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (7 samples, 0.18%)</title><rect x="1187.3" y="851.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="862.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (7 samples, 0.18%)</title><rect x="1187.3" y="835.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.3" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.05%)</title><rect x="1188.5" y="819.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.5" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1188.8" y="803.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1189.1" y="819.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::PartitionedIndexBuilder::NumPartitions() const (1 samples, 0.03%)</title><rect x="1189.4" y="851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.4" y="862.0"></text>
</g>
<g>
<title>rocksdb::MemTableList::TryInstallMemtableFlushResults(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, rocksdb::autovector&lt;rocksdb::MemTable*, 8ul&gt; const&amp;, rocksdb::LogsWithPrepTracker*, rocksdb::VersionSet*, rocksdb::InstrumentedMutex*, unsigned long long, rocksdb::autovector&lt;rocksdb::MemTable*, 8ul&gt;*, rocksdb::FSDirectory*, rocksdb::LogBuffer*, std::__1::list&lt;std::__1::unique_ptr&lt;rocksdb::FlushJobInfo, std::__1::default_delete&lt;rocksdb::FlushJobInfo&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FlushJobInfo, std::__1::default_delete&lt;rocksdb::FlushJobInfo&gt; &gt; &gt; &gt;*, rocksdb::IOStatus*) (1 samples, 0.03%)</title><rect x="1189.7" y="883.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.7" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTableList::TryInstallMemtableFlushResults(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, rocksdb::autovector&lt;rocksdb::MemTable*, 8ul&gt; const&amp;, rocksdb::LogsWithPrepTracker*, rocksdb::VersionSet*, rocksdb::InstrumentedMutex*, unsigned long long, rocksdb::autovector&lt;rocksdb::MemTable*, 8ul&gt;*, rocksdb::FSDirectory*, rocksdb::LogBuffer*, std::__1::list&lt;std::__1::unique_ptr&lt;rocksdb::FlushJobInfo, std::__1::default_delete&lt;rocksdb::FlushJobInfo&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FlushJobInfo, std::__1::default_delete&lt;rocksdb::FlushJobInfo&gt; &gt; &gt; &gt;*, rocksdb::IOStatus*) (1 samples, 0.03%)</title><rect x="1189.7" y="867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.7" y="878.0"></text>
</g>
<g>
<title>rocksdb::VersionSet::LogAndApply(rocksdb::autovector&lt;rocksdb::ColumnFamilyData*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::MutableCFOptions const*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::autovector&lt;rocksdb::VersionEdit*, 8ul&gt;, 8ul&gt; const&amp;, rocksdb::InstrumentedMutex*, rocksdb::FSDirectory*, bool, rocksdb::ColumnFamilyOptions const*) (1 samples, 0.03%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>rocksdb::VersionSet::ProcessManifestWrites(std::__1::deque&lt;rocksdb::VersionSet::ManifestWriter, std::__1::allocator&lt;rocksdb::VersionSet::ManifestWriter&gt; &gt;&amp;, rocksdb::InstrumentedMutex*, rocksdb::FSDirectory*, bool, rocksdb::ColumnFamilyOptions const*) (1 samples, 0.03%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
<g>
<title>rocksdb::SyncManifest(rocksdb::Env*, rocksdb::ImmutableDBOptions const*, rocksdb::WritableFileWriter*) (1 samples, 0.03%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Sync(bool) (1 samples, 0.03%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::SyncInternal(bool) (1 samples, 0.03%)</title><rect x="1189.7" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.7" y="798.0"></text>
</g>
<g>
<title>fsync (1 samples, 0.03%)</title><rect x="1189.7" y="771.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1192.7" y="782.0"></text>
</g>
</g>
</svg>
