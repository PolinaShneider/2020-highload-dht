<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (2,382 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>[Attach Listener tid=44291] (1 samples, 0.04%)</title><rect x="10.0" y="419.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.04%)</title><rect x="10.0" y="403.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.04%)</title><rect x="10.0" y="387.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="371.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.04%)</title><rect x="10.0" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="10.0" y="339.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="10.0" y="323.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="10.0" y="307.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>BsdAttachOperation::complete(int, bufferedStream*) (1 samples, 0.04%)</title><rect x="10.0" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>write (1 samples, 0.04%)</title><rect x="10.0" y="275.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=12803] (2 samples, 0.08%)</title><rect x="10.5" y="419.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.5" y="430.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.08%)</title><rect x="10.5" y="403.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.5" y="414.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.08%)</title><rect x="10.5" y="387.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.5" y="398.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.08%)</title><rect x="10.5" y="371.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.5" y="382.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.08%)</title><rect x="10.5" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.5" y="366.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.08%)</title><rect x="10.5" y="339.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="350.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.08%)</title><rect x="10.5" y="323.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="334.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (1 samples, 0.04%)</title><rect x="10.5" y="307.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.5" y="318.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.04%)</title><rect x="10.5" y="291.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.5" y="302.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (1 samples, 0.04%)</title><rect x="10.5" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.5" y="286.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.04%)</title><rect x="10.5" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.5" y="270.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.04%)</title><rect x="10.5" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.5" y="254.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.04%)</title><rect x="11.0" y="307.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.0" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="11.0" y="291.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.0" y="302.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="11.0" y="275.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.0" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="11.0" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.0" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="11.0" y="243.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="14.0" y="254.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=23299] (1 samples, 0.04%)</title><rect x="11.5" y="419.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.04%)</title><rect x="11.5" y="403.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.04%)</title><rect x="11.5" y="387.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.5" y="398.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="11.5" y="371.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="14.5" y="382.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.04%)</title><rect x="11.5" y="355.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="11.5" y="339.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.5" y="350.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.04%)</title><rect x="11.5" y="323.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="334.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.04%)</title><rect x="11.5" y="307.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="318.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.04%)</title><rect x="11.5" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.5" y="302.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="11.5" y="275.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="286.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="11.5" y="259.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="14.5" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=25095] (170 samples, 7.14%)</title><rect x="12.0" y="419.0" width="84.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="15.0" y="430.0">[NIO Selec..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (170 samples, 7.14%)</title><rect x="12.0" y="403.0" width="84.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="414.0">one/nio/se..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (132 samples, 5.54%)</title><rect x="12.0" y="387.0" width="65.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.0" y="398.0">one/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (132 samples, 5.54%)</title><rect x="12.0" y="371.0" width="65.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.0" y="382.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (132 samples, 5.54%)</title><rect x="12.0" y="355.0" width="65.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="366.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (131 samples, 5.50%)</title><rect x="12.5" y="339.0" width="64.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.5" y="350.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (121 samples, 5.08%)</title><rect x="12.5" y="323.0" width="59.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.5" y="334.0">sun/ni..</text>
</g>
<g>
<title>kevent (112 samples, 4.70%)</title><rect x="16.9" y="307.0" width="55.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="19.9" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (6 samples, 0.25%)</title><rect x="72.4" y="323.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="75.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.17%)</title><rect x="72.4" y="307.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.17%)</title><rect x="72.4" y="291.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.08%)</title><rect x="74.4" y="307.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="77.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.04%)</title><rect x="74.9" y="291.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.04%)</title><rect x="74.9" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="74.9" y="259.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="77.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="74.9" y="243.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.04%)</title><rect x="75.4" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.04%)</title><rect x="75.9" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.9" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.04%)</title><rect x="75.9" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.9" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="75.9" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.9" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="75.9" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.9" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="75.9" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.08%)</title><rect x="76.4" y="323.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.4" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.04%)</title><rect x="76.4" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="76.9" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.9" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.04%)</title><rect x="76.9" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (37 samples, 1.55%)</title><rect x="77.4" y="387.0" width="18.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (36 samples, 1.51%)</title><rect x="77.9" y="371.0" width="17.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (18 samples, 0.76%)</title><rect x="77.9" y="355.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (16 samples, 0.67%)</title><rect x="78.4" y="339.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (16 samples, 0.67%)</title><rect x="78.4" y="323.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.4" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (15 samples, 0.63%)</title><rect x="78.4" y="307.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="81.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.17%)</title><rect x="78.4" y="291.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.13%)</title><rect x="78.9" y="275.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="81.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="79.4" y="259.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="79.4" y="243.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.4" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="79.4" y="227.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (11 samples, 0.46%)</title><rect x="80.3" y="291.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (9 samples, 0.38%)</title><rect x="80.3" y="275.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.38%)</title><rect x="80.3" y="259.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.38%)</title><rect x="80.3" y="243.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.08%)</title><rect x="80.3" y="227.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.08%)</title><rect x="80.3" y="211.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.08%)</title><rect x="80.3" y="195.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="80.3" y="179.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="80.3" y="163.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.3" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="80.3" y="147.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.3" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.08%)</title><rect x="80.3" y="131.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="83.3" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="80.3" y="115.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="83.3" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="80.3" y="99.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="83.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.29%)</title><rect x="81.3" y="227.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.29%)</title><rect x="81.3" y="211.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="84.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.29%)</title><rect x="81.3" y="195.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.29%)</title><rect x="81.3" y="179.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.3" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.29%)</title><rect x="81.3" y="163.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.3" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="81.8" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="84.8" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="82.3" y="147.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="85.3" y="158.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="82.8" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.8" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.04%)</title><rect x="82.8" y="115.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="85.8" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="83.3" y="131.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="86.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.08%)</title><rect x="84.8" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.8" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.08%)</title><rect x="84.8" y="259.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="87.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.08%)</title><rect x="84.8" y="243.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/663506241.get$Lambda (2 samples, 0.08%)</title><rect x="84.8" y="227.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/663506241.&lt;init&gt; (2 samples, 0.08%)</title><rect x="84.8" y="211.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="87.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.08%)</title><rect x="84.8" y="195.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="87.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.04%)</title><rect x="85.8" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="85.8" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="85.8" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="85.8" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.04%)</title><rect x="86.3" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.3" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="86.3" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="86.3" y="307.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.3" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 0.76%)</title><rect x="86.8" y="355.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (17 samples, 0.71%)</title><rect x="87.3" y="339.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (17 samples, 0.71%)</title><rect x="87.3" y="323.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="87.3" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="87.3" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="87.3" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="87.8" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="87.8" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="87.8" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.8" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="87.8" y="259.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="90.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.63%)</title><rect x="88.3" y="307.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.63%)</title><rect x="88.3" y="291.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.63%)</title><rect x="88.3" y="275.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (15 samples, 0.63%)</title><rect x="88.3" y="259.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="91.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (13 samples, 0.55%)</title><rect x="89.3" y="243.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.3" y="254.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="89.3" y="227.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="92.3" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="89.8" y="227.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="92.8" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.46%)</title><rect x="90.3" y="227.0" width="5.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="93.3" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="95.7" y="387.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="98.7" y="398.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.04%)</title><rect x="95.7" y="371.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="98.7" y="382.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25859] (169 samples, 7.09%)</title><rect x="96.2" y="419.0" width="83.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="99.2" y="430.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (169 samples, 7.09%)</title><rect x="96.2" y="403.0" width="83.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.2" y="414.0">one/nio/s..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="96.7" y="387.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="99.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (126 samples, 5.29%)</title><rect x="97.2" y="387.0" width="62.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.2" y="398.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.13%)</title><rect x="97.7" y="371.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="100.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.04%)</title><rect x="98.7" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.7" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="98.7" y="339.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.7" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.04%)</title><rect x="98.7" y="323.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="101.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="98.7" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.04%)</title><rect x="98.7" y="291.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.7" y="302.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="99.2" y="371.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="102.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (121 samples, 5.08%)</title><rect x="99.7" y="371.0" width="59.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="102.7" y="382.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (121 samples, 5.08%)</title><rect x="99.7" y="355.0" width="59.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.7" y="366.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (120 samples, 5.04%)</title><rect x="100.2" y="339.0" width="59.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.2" y="350.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (116 samples, 4.87%)</title><rect x="100.2" y="323.0" width="57.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.2" y="334.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.08%)</title><rect x="105.1" y="307.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="108.1" y="318.0"></text>
</g>
<g>
<title>kevent (104 samples, 4.37%)</title><rect x="106.1" y="307.0" width="51.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="109.1" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.08%)</title><rect x="157.6" y="323.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.08%)</title><rect x="157.6" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="160.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.08%)</title><rect x="157.6" y="291.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.08%)</title><rect x="157.6" y="275.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.08%)</title><rect x="157.6" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.08%)</title><rect x="157.6" y="243.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.04%)</title><rect x="158.6" y="323.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.04%)</title><rect x="158.6" y="307.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="158.6" y="291.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.04%)</title><rect x="159.1" y="323.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.1" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.04%)</title><rect x="159.1" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.1" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="159.1" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="162.1" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="159.1" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.1" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="159.1" y="259.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.1" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (40 samples, 1.68%)</title><rect x="159.6" y="387.0" width="19.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="162.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (39 samples, 1.64%)</title><rect x="160.1" y="371.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (19 samples, 0.80%)</title><rect x="160.1" y="355.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15 samples, 0.63%)</title><rect x="160.1" y="339.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (15 samples, 0.63%)</title><rect x="160.1" y="323.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.1" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (14 samples, 0.59%)</title><rect x="160.1" y="307.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="160.1" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.1" y="302.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="160.1" y="275.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="163.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (13 samples, 0.55%)</title><rect x="160.6" y="291.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (13 samples, 0.55%)</title><rect x="160.6" y="275.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 0.55%)</title><rect x="160.6" y="259.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (13 samples, 0.55%)</title><rect x="160.6" y="243.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.04%)</title><rect x="160.6" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="160.6" y="211.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="160.6" y="195.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.25%)</title><rect x="161.1" y="227.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="164.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.25%)</title><rect x="161.1" y="211.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="164.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.25%)</title><rect x="161.1" y="195.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.25%)</title><rect x="161.1" y="179.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.25%)</title><rect x="161.1" y="163.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="164.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.25%)</title><rect x="161.1" y="147.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.1" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.25%)</title><rect x="161.1" y="131.0" width="3.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="164.1" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.25%)</title><rect x="161.1" y="115.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="164.1" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.25%)</title><rect x="161.1" y="99.0" width="3.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="164.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.25%)</title><rect x="164.1" y="227.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.25%)</title><rect x="164.1" y="211.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="167.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.25%)</title><rect x="164.1" y="195.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.25%)</title><rect x="164.1" y="179.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.25%)</title><rect x="164.1" y="163.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.1" y="174.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.04%)</title><rect x="164.1" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="167.1" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="164.6" y="147.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="167.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.21%)</title><rect x="164.6" y="131.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="167.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.04%)</title><rect x="167.0" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="167.0" y="291.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="167.0" y="275.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.0" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="167.0" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.0" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="167.0" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.13%)</title><rect x="167.5" y="339.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.04%)</title><rect x="168.5" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="171.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="169.0" y="339.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (20 samples, 0.84%)</title><rect x="169.5" y="355.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (18 samples, 0.76%)</title><rect x="169.5" y="339.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (18 samples, 0.76%)</title><rect x="169.5" y="323.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="172.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="169.5" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="169.5" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="169.5" y="275.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.71%)</title><rect x="170.0" y="307.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.71%)</title><rect x="170.0" y="291.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.71%)</title><rect x="170.0" y="275.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="173.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (17 samples, 0.71%)</title><rect x="170.0" y="259.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (15 samples, 0.63%)</title><rect x="171.0" y="243.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="174.0" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (13 samples, 0.55%)</title><rect x="172.0" y="227.0" width="6.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="175.0" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.08%)</title><rect x="178.4" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="181.4" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.04%)</title><rect x="178.9" y="323.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.9" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="179.4" y="387.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="182.4" y="398.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="179.4" y="371.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="182.4" y="382.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="179.4" y="355.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="182.4" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=26627] (185 samples, 7.77%)</title><rect x="179.9" y="419.0" width="91.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="182.9" y="430.0">[NIO Select..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (185 samples, 7.77%)</title><rect x="179.9" y="403.0" width="91.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.9" y="414.0">one/nio/ser..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (138 samples, 5.79%)</title><rect x="179.9" y="387.0" width="68.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="182.9" y="398.0">one/nio..</text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="179.9" y="371.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="182.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (137 samples, 5.75%)</title><rect x="180.4" y="371.0" width="67.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.4" y="382.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (137 samples, 5.75%)</title><rect x="180.4" y="355.0" width="67.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.4" y="366.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (137 samples, 5.75%)</title><rect x="180.4" y="339.0" width="67.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.4" y="350.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (135 samples, 5.67%)</title><rect x="180.4" y="323.0" width="66.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.4" y="334.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.08%)</title><rect x="182.9" y="307.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="185.9" y="318.0"></text>
</g>
<g>
<title>kevent (128 samples, 5.37%)</title><rect x="183.9" y="307.0" width="63.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="186.9" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.08%)</title><rect x="247.3" y="323.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="247.3" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="250.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="247.3" y="291.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.04%)</title><rect x="247.8" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.04%)</title><rect x="247.8" y="291.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.04%)</title><rect x="247.8" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="250.8" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="247.8" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.8" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="247.8" y="243.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.8" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (47 samples, 1.97%)</title><rect x="248.3" y="387.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.3" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (47 samples, 1.97%)</title><rect x="248.3" y="371.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.3" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (27 samples, 1.13%)</title><rect x="248.3" y="355.0" width="13.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (22 samples, 0.92%)</title><rect x="248.3" y="339.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (21 samples, 0.88%)</title><rect x="248.8" y="323.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.8" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (16 samples, 0.67%)</title><rect x="248.8" y="307.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.08%)</title><rect x="248.8" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="248.8" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="248.8" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="248.8" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.8" y="254.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="249.3" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="252.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (14 samples, 0.59%)</title><rect x="249.8" y="291.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (14 samples, 0.59%)</title><rect x="249.8" y="275.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (14 samples, 0.59%)</title><rect x="249.8" y="259.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (14 samples, 0.59%)</title><rect x="249.8" y="243.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.25%)</title><rect x="249.8" y="227.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.25%)</title><rect x="249.8" y="211.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.25%)</title><rect x="249.8" y="195.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.25%)</title><rect x="249.8" y="179.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.25%)</title><rect x="249.8" y="163.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.8" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.25%)</title><rect x="249.8" y="147.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.8" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.21%)</title><rect x="250.3" y="131.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="253.3" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (5 samples, 0.21%)</title><rect x="250.3" y="115.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="253.3" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.21%)</title><rect x="250.3" y="99.0" width="2.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="253.3" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.34%)</title><rect x="252.7" y="227.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.34%)</title><rect x="252.7" y="211.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.34%)</title><rect x="252.7" y="195.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="255.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.34%)</title><rect x="252.7" y="179.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="255.7" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.34%)</title><rect x="252.7" y="163.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.7" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.29%)</title><rect x="253.2" y="147.0" width="3.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="256.2" y="158.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.04%)</title><rect x="253.2" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="256.2" y="142.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="253.2" y="115.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="256.2" y="126.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="253.2" y="99.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="256.2" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="253.7" y="131.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="256.7" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.21%)</title><rect x="254.2" y="131.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="257.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.13%)</title><rect x="256.7" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.13%)</title><rect x="256.7" y="291.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.13%)</title><rect x="256.7" y="275.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.13%)</title><rect x="256.7" y="259.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.08%)</title><rect x="258.2" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.08%)</title><rect x="258.2" y="291.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="258.7" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.7" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.13%)</title><rect x="259.2" y="339.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.13%)</title><rect x="259.2" y="323.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.13%)</title><rect x="259.2" y="307.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="262.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="260.7" y="339.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="263.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (20 samples, 0.84%)</title><rect x="261.7" y="355.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (20 samples, 0.84%)</title><rect x="261.7" y="339.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (20 samples, 0.84%)</title><rect x="261.7" y="323.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.08%)</title><rect x="261.7" y="307.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.08%)</title><rect x="261.7" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.08%)</title><rect x="261.7" y="275.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.7" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="262.1" y="259.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="265.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.76%)</title><rect x="262.6" y="307.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.76%)</title><rect x="262.6" y="291.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (18 samples, 0.76%)</title><rect x="262.6" y="275.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (18 samples, 0.76%)</title><rect x="262.6" y="259.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (16 samples, 0.67%)</title><rect x="263.6" y="243.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.6" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.08%)</title><rect x="264.1" y="227.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="267.1" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="264.6" y="211.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="267.6" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (13 samples, 0.55%)</title><rect x="265.1" y="227.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="268.1" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=40451] (145 samples, 6.09%)</title><rect x="271.6" y="419.0" width="71.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="274.6" y="430.0">[NIO Sel..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (145 samples, 6.09%)</title><rect x="271.6" y="403.0" width="71.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.6" y="414.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (102 samples, 4.28%)</title><rect x="272.1" y="387.0" width="50.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.1" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.04%)</title><rect x="272.1" y="371.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.1" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="272.6" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="275.6" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="272.6" y="355.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="275.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (100 samples, 4.20%)</title><rect x="273.0" y="371.0" width="49.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.0" y="382.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (100 samples, 4.20%)</title><rect x="273.0" y="355.0" width="49.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.0" y="366.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (100 samples, 4.20%)</title><rect x="273.0" y="339.0" width="49.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.0" y="350.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (98 samples, 4.11%)</title><rect x="273.0" y="323.0" width="48.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.0" y="334.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.04%)</title><rect x="274.0" y="307.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="277.0" y="318.0"></text>
</g>
<g>
<title>kevent (95 samples, 3.99%)</title><rect x="274.5" y="307.0" width="47.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="277.5" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.04%)</title><rect x="321.6" y="323.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.6" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.04%)</title><rect x="321.6" y="307.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="324.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="321.6" y="291.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.04%)</title><rect x="322.1" y="323.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.1" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.04%)</title><rect x="322.1" y="307.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.1" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="322.1" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.1" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="322.1" y="275.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.1" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="322.1" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="325.1" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (42 samples, 1.76%)</title><rect x="322.6" y="387.0" width="20.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (42 samples, 1.76%)</title><rect x="322.6" y="371.0" width="20.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (24 samples, 1.01%)</title><rect x="322.6" y="355.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (18 samples, 0.76%)</title><rect x="324.1" y="339.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (18 samples, 0.76%)</title><rect x="324.1" y="323.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.1" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (15 samples, 0.63%)</title><rect x="324.1" y="307.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (15 samples, 0.63%)</title><rect x="324.1" y="291.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (15 samples, 0.63%)</title><rect x="324.1" y="275.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (15 samples, 0.63%)</title><rect x="324.1" y="259.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (15 samples, 0.63%)</title><rect x="324.1" y="243.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.21%)</title><rect x="324.6" y="227.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.21%)</title><rect x="324.6" y="211.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.21%)</title><rect x="324.6" y="195.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.21%)</title><rect x="324.6" y="179.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.21%)</title><rect x="324.6" y="163.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.6" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.21%)</title><rect x="324.6" y="147.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="327.6" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.17%)</title><rect x="325.1" y="131.0" width="1.9" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="328.1" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.13%)</title><rect x="325.1" y="115.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="328.1" y="126.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="325.1" y="99.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="328.1" y="110.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="325.6" y="99.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="328.6" y="110.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="326.5" y="115.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="329.5" y="126.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="326.5" y="99.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="329.5" y="110.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="326.5" y="83.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="329.5" y="94.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="326.5" y="67.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.5" y="78.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="326.5" y="51.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="329.5" y="62.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="326.5" y="35.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="329.5" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.38%)</title><rect x="327.0" y="227.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.38%)</title><rect x="327.0" y="211.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="330.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.38%)</title><rect x="327.0" y="195.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.29%)</title><rect x="328.0" y="179.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="331.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.29%)</title><rect x="328.0" y="163.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.0" y="174.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.04%)</title><rect x="328.0" y="147.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="331.0" y="158.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.25%)</title><rect x="328.5" y="147.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="331.5" y="158.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="328.5" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="331.5" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="328.5" y="115.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="331.5" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="329.0" y="131.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="332.0" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="331.0" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="334.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.04%)</title><rect x="331.5" y="307.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.04%)</title><rect x="331.5" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.5" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="331.5" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="334.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="331.5" y="259.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="331.5" y="243.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="334.5" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="331.5" y="227.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="334.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.08%)</title><rect x="332.0" y="307.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="332.5" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.5" y="302.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (1 samples, 0.04%)</title><rect x="332.5" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.04%)</title><rect x="333.0" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="333.0" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="333.5" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="334.0" y="323.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="337.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="334.0" y="307.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="337.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 0.76%)</title><rect x="334.5" y="355.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (18 samples, 0.76%)</title><rect x="334.5" y="339.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (18 samples, 0.76%)</title><rect x="334.5" y="323.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="334.5" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="334.5" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="334.5" y="275.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.71%)</title><rect x="335.0" y="307.0" width="8.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.71%)</title><rect x="335.0" y="291.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="338.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.71%)</title><rect x="335.0" y="275.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (17 samples, 0.71%)</title><rect x="335.0" y="259.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (16 samples, 0.67%)</title><rect x="335.5" y="243.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.5" y="254.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.04%)</title><rect x="336.0" y="227.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="339.0" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (14 samples, 0.59%)</title><rect x="336.5" y="227.0" width="6.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="339.5" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=39939] (132 samples, 5.54%)</title><rect x="343.4" y="419.0" width="65.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="346.4" y="430.0">[NIO Se..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (132 samples, 5.54%)</title><rect x="343.4" y="403.0" width="65.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.4" y="414.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (102 samples, 4.28%)</title><rect x="343.4" y="387.0" width="50.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="346.4" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.08%)</title><rect x="344.4" y="371.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (98 samples, 4.11%)</title><rect x="345.4" y="371.0" width="48.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.4" y="382.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (98 samples, 4.11%)</title><rect x="345.4" y="355.0" width="48.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="348.4" y="366.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (98 samples, 4.11%)</title><rect x="345.4" y="339.0" width="48.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.4" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (93 samples, 3.90%)</title><rect x="345.4" y="323.0" width="46.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.4" y="334.0">sun/..</text>
</g>
<g>
<title>kevent (90 samples, 3.78%)</title><rect x="346.9" y="307.0" width="44.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="349.9" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.17%)</title><rect x="391.4" y="323.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="394.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.17%)</title><rect x="391.4" y="307.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.13%)</title><rect x="391.9" y="291.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.13%)</title><rect x="391.9" y="275.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="392.9" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.9" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="392.9" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.04%)</title><rect x="393.4" y="323.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="396.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (30 samples, 1.26%)</title><rect x="393.9" y="387.0" width="14.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="396.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (29 samples, 1.22%)</title><rect x="394.4" y="371.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="397.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15 samples, 0.63%)</title><rect x="394.4" y="355.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (12 samples, 0.50%)</title><rect x="394.4" y="339.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (12 samples, 0.50%)</title><rect x="394.4" y="323.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="397.4" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (11 samples, 0.46%)</title><rect x="394.4" y="307.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (11 samples, 0.46%)</title><rect x="394.4" y="291.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (11 samples, 0.46%)</title><rect x="394.4" y="275.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.46%)</title><rect x="394.4" y="259.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 0.42%)</title><rect x="394.9" y="243.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.29%)</title><rect x="394.9" y="227.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="397.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.29%)</title><rect x="394.9" y="211.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.29%)</title><rect x="394.9" y="195.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.29%)</title><rect x="394.9" y="179.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.29%)</title><rect x="394.9" y="163.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.9" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.29%)</title><rect x="394.9" y="147.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.9" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.29%)</title><rect x="394.9" y="131.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="397.9" y="142.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.04%)</title><rect x="394.9" y="115.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="397.9" y="126.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.04%)</title><rect x="394.9" y="99.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.9" y="110.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.25%)</title><rect x="395.4" y="115.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="398.4" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.25%)</title><rect x="395.4" y="99.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="398.4" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.13%)</title><rect x="398.4" y="227.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.13%)</title><rect x="398.4" y="211.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="401.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.13%)</title><rect x="398.4" y="195.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.13%)</title><rect x="398.4" y="179.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.4" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.13%)</title><rect x="398.4" y="163.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="401.4" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.13%)</title><rect x="398.4" y="147.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="401.4" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.08%)</title><rect x="398.4" y="131.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="401.4" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="399.4" y="131.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="402.4" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.04%)</title><rect x="399.9" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="402.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="399.9" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="399.9" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="402.9" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="399.9" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="402.9" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.08%)</title><rect x="400.4" y="339.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="400.4" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="400.4" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.04%)</title><rect x="400.9" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="401.4" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.4" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="401.4" y="323.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (14 samples, 0.59%)</title><rect x="401.8" y="355.0" width="7.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (14 samples, 0.59%)</title><rect x="401.8" y="339.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (14 samples, 0.59%)</title><rect x="401.8" y="323.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.13%)</title><rect x="401.8" y="307.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="404.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.13%)</title><rect x="401.8" y="291.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="404.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.13%)</title><rect x="401.8" y="275.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.8" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="402.3" y="259.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="405.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.46%)</title><rect x="403.3" y="307.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.46%)</title><rect x="403.3" y="291.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.46%)</title><rect x="403.3" y="275.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (11 samples, 0.46%)</title><rect x="403.3" y="259.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="406.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (11 samples, 0.46%)</title><rect x="403.3" y="243.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (10 samples, 0.42%)</title><rect x="403.8" y="227.0" width="5.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="406.8" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=39171] (161 samples, 6.76%)</title><rect x="408.8" y="419.0" width="79.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="411.8" y="430.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (161 samples, 6.76%)</title><rect x="408.8" y="403.0" width="79.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="411.8" y="414.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.04%)</title><rect x="409.3" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (109 samples, 4.58%)</title><rect x="409.8" y="387.0" width="54.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.8" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.04%)</title><rect x="410.3" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="410.8" y="371.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="413.8" y="382.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="410.8" y="355.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="413.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (106 samples, 4.45%)</title><rect x="411.3" y="371.0" width="52.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.3" y="382.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (106 samples, 4.45%)</title><rect x="411.3" y="355.0" width="52.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.3" y="366.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (105 samples, 4.41%)</title><rect x="411.8" y="339.0" width="52.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="414.8" y="350.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (99 samples, 4.16%)</title><rect x="412.3" y="323.0" width="49.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="415.3" y="334.0">sun/n..</text>
</g>
<g>
<title>kevent (98 samples, 4.11%)</title><rect x="412.7" y="307.0" width="48.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="415.7" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.08%)</title><rect x="461.3" y="323.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="464.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="461.3" y="307.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.08%)</title><rect x="461.3" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="464.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.04%)</title><rect x="462.3" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="465.3" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.04%)</title><rect x="462.3" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.3" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="462.3" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.3" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="462.3" y="275.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="465.3" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="462.3" y="259.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.08%)</title><rect x="462.8" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.04%)</title><rect x="463.3" y="307.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="466.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.04%)</title><rect x="463.3" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (50 samples, 2.10%)</title><rect x="463.8" y="387.0" width="24.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.8" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (50 samples, 2.10%)</title><rect x="463.8" y="371.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="466.8" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (25 samples, 1.05%)</title><rect x="463.8" y="355.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.8" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (20 samples, 0.84%)</title><rect x="464.3" y="339.0" width="9.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (19 samples, 0.80%)</title><rect x="464.8" y="323.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.8" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (17 samples, 0.71%)</title><rect x="464.8" y="307.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.17%)</title><rect x="464.8" y="291.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="467.8" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="466.2" y="275.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="466.2" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="466.2" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="466.2" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="469.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (13 samples, 0.55%)</title><rect x="466.7" y="291.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (12 samples, 0.50%)</title><rect x="467.2" y="275.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 0.50%)</title><rect x="467.2" y="259.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (12 samples, 0.50%)</title><rect x="467.2" y="243.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.04%)</title><rect x="467.2" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="467.2" y="211.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="467.2" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.17%)</title><rect x="467.7" y="227.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.17%)</title><rect x="467.7" y="211.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="470.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.17%)</title><rect x="467.7" y="195.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="470.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.17%)</title><rect x="467.7" y="179.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.17%)</title><rect x="467.7" y="163.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.7" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.17%)</title><rect x="467.7" y="147.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.7" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.17%)</title><rect x="467.7" y="131.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="470.7" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.17%)</title><rect x="467.7" y="115.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="470.7" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.17%)</title><rect x="467.7" y="99.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="470.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.29%)</title><rect x="469.7" y="227.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.29%)</title><rect x="469.7" y="211.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.29%)</title><rect x="469.7" y="195.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.25%)</title><rect x="470.2" y="179.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.2" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.25%)</title><rect x="470.2" y="163.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.2" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.25%)</title><rect x="470.2" y="147.0" width="3.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="473.2" y="158.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.04%)</title><rect x="470.2" y="131.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="473.2" y="142.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="470.7" y="131.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="473.7" y="142.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="470.7" y="115.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="473.7" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="471.2" y="131.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="474.2" y="142.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.04%)</title><rect x="472.7" y="131.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="475.7" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.08%)</title><rect x="473.2" y="307.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="476.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="473.2" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="476.2" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="473.2" y="275.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="476.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="473.2" y="259.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.2" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="473.7" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="476.7" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="473.7" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="473.7" y="243.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.7" y="254.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="473.7" y="227.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="476.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.08%)</title><rect x="474.2" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="474.7" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="477.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.04%)</title><rect x="474.7" y="307.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="475.2" y="339.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="475.7" y="323.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="475.7" y="307.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="478.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (25 samples, 1.05%)</title><rect x="476.2" y="355.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (23 samples, 0.97%)</title><rect x="477.1" y="339.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (23 samples, 0.97%)</title><rect x="477.1" y="323.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.04%)</title><rect x="477.1" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="477.1" y="291.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="477.1" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="480.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="477.6" y="307.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="477.6" y="291.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="480.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.92%)</title><rect x="477.6" y="275.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="480.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.92%)</title><rect x="477.6" y="259.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (20 samples, 0.84%)</title><rect x="478.6" y="243.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="481.6" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (20 samples, 0.84%)</title><rect x="478.6" y="227.0" width="9.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="481.6" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=38915] (169 samples, 7.09%)</title><rect x="488.5" y="419.0" width="83.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="491.5" y="430.0">[NIO Sele..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (169 samples, 7.09%)</title><rect x="488.5" y="403.0" width="83.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.5" y="414.0">one/nio/s..</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (2 samples, 0.08%)</title><rect x="488.5" y="387.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.5" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="489.0" y="371.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="492.0" y="382.0"></text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.04%)</title><rect x="489.0" y="355.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="492.0" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.04%)</title><rect x="489.0" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="492.0" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="489.0" y="323.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="492.0" y="334.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.04%)</title><rect x="489.0" y="307.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="492.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (119 samples, 5.00%)</title><rect x="489.5" y="387.0" width="59.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="492.5" y="398.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.04%)</title><rect x="489.5" y="371.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="492.5" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="490.0" y="371.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="493.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (117 samples, 4.91%)</title><rect x="490.5" y="371.0" width="58.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="493.5" y="382.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (117 samples, 4.91%)</title><rect x="490.5" y="355.0" width="58.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.5" y="366.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (116 samples, 4.87%)</title><rect x="491.0" y="339.0" width="57.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.0" y="350.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (105 samples, 4.41%)</title><rect x="492.0" y="323.0" width="52.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.0" y="334.0">sun/n..</text>
</g>
<g>
<title>kevent (102 samples, 4.28%)</title><rect x="493.5" y="307.0" width="50.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="496.5" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.21%)</title><rect x="544.0" y="323.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="544.0" y="307.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="547.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.08%)</title><rect x="544.0" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="544.5" y="275.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.13%)</title><rect x="545.0" y="307.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.0" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.13%)</title><rect x="545.0" y="291.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="548.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.13%)</title><rect x="545.0" y="275.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="548.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.08%)</title><rect x="545.5" y="259.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="548.5" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="546.0" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.0" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.04%)</title><rect x="546.5" y="323.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="549.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.13%)</title><rect x="547.0" y="323.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.0" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.13%)</title><rect x="547.0" y="307.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.13%)</title><rect x="547.0" y="291.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.0" y="302.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.13%)</title><rect x="547.0" y="275.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.13%)</title><rect x="547.0" y="259.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.0" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (48 samples, 2.02%)</title><rect x="548.5" y="387.0" width="23.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="551.5" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (47 samples, 1.97%)</title><rect x="549.0" y="371.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="552.0" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (21 samples, 0.88%)</title><rect x="549.0" y="355.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="552.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (17 samples, 0.71%)</title><rect x="549.5" y="339.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (17 samples, 0.71%)</title><rect x="549.5" y="323.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.5" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (17 samples, 0.71%)</title><rect x="549.5" y="307.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="552.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.13%)</title><rect x="549.5" y="291.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="552.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.13%)</title><rect x="549.5" y="275.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="552.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="549.5" y="259.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.13%)</title><rect x="549.5" y="243.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="552.5" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.13%)</title><rect x="549.5" y="227.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (14 samples, 0.59%)</title><rect x="551.0" y="291.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="554.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (13 samples, 0.55%)</title><rect x="551.5" y="275.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="554.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (13 samples, 0.55%)</title><rect x="551.5" y="259.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="554.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (13 samples, 0.55%)</title><rect x="551.5" y="243.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="554.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.08%)</title><rect x="551.5" y="227.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.08%)</title><rect x="551.5" y="211.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.08%)</title><rect x="551.5" y="195.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="554.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="551.5" y="179.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="554.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="551.5" y="163.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.5" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="551.5" y="147.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.5" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.08%)</title><rect x="551.5" y="131.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="554.5" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="551.5" y="115.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="554.5" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="551.5" y="99.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="554.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.46%)</title><rect x="552.4" y="227.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.46%)</title><rect x="552.4" y="211.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="555.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.46%)</title><rect x="552.4" y="195.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.42%)</title><rect x="552.9" y="179.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="555.9" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (10 samples, 0.42%)</title><rect x="552.9" y="163.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.9" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (10 samples, 0.42%)</title><rect x="552.9" y="147.0" width="5.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="555.9" y="158.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.04%)</title><rect x="552.9" y="131.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.29%)</title><rect x="553.4" y="131.0" width="3.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="556.4" y="142.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.08%)</title><rect x="556.9" y="131.0" width="1.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="559.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.13%)</title><rect x="557.9" y="339.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="558.4" y="323.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="558.4" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="561.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (26 samples, 1.09%)</title><rect x="559.4" y="355.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (25 samples, 1.05%)</title><rect x="559.4" y="339.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (25 samples, 1.05%)</title><rect x="559.4" y="323.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.13%)</title><rect x="559.4" y="307.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="562.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.13%)</title><rect x="559.4" y="291.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="562.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.13%)</title><rect x="559.4" y="275.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.4" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="560.4" y="259.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="563.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="560.9" y="307.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="560.9" y="291.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="563.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.92%)</title><rect x="560.9" y="275.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.92%)</title><rect x="560.9" y="259.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (21 samples, 0.88%)</title><rect x="561.4" y="243.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="564.4" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.04%)</title><rect x="561.4" y="227.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="564.4" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="561.9" y="227.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="564.9" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (19 samples, 0.80%)</title><rect x="562.4" y="227.0" width="9.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="565.4" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (1 samples, 0.04%)</title><rect x="571.8" y="339.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.8" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=28163] (176 samples, 7.39%)</title><rect x="572.3" y="419.0" width="87.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="575.3" y="430.0">[NIO Selec..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (176 samples, 7.39%)</title><rect x="572.3" y="403.0" width="87.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="575.3" y="414.0">one/nio/se..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="573.2" y="387.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="576.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (132 samples, 5.54%)</title><rect x="573.7" y="387.0" width="65.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="576.7" y="398.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.04%)</title><rect x="573.7" y="371.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="576.7" y="382.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.04%)</title><rect x="574.2" y="371.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="577.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (130 samples, 5.46%)</title><rect x="574.7" y="371.0" width="64.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.7" y="382.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (130 samples, 5.46%)</title><rect x="574.7" y="355.0" width="64.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="577.7" y="366.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (130 samples, 5.46%)</title><rect x="574.7" y="339.0" width="64.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="577.7" y="350.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (125 samples, 5.25%)</title><rect x="574.7" y="323.0" width="62.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="577.7" y="334.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.04%)</title><rect x="578.2" y="307.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="581.2" y="318.0"></text>
</g>
<g>
<title>kevent (117 samples, 4.91%)</title><rect x="578.7" y="307.0" width="58.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="581.7" y="318.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (5 samples, 0.21%)</title><rect x="636.7" y="323.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.7" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="636.7" y="307.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.7" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.08%)</title><rect x="636.7" y="291.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.13%)</title><rect x="637.6" y="307.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.13%)</title><rect x="637.6" y="291.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.13%)</title><rect x="637.6" y="275.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="640.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.13%)</title><rect x="637.6" y="259.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.6" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.04%)</title><rect x="637.6" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="640.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.04%)</title><rect x="638.1" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.1" y="254.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.04%)</title><rect x="638.6" y="243.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="641.6" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (40 samples, 1.68%)</title><rect x="639.1" y="387.0" width="19.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (40 samples, 1.68%)</title><rect x="639.1" y="371.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (18 samples, 0.76%)</title><rect x="639.1" y="355.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15 samples, 0.63%)</title><rect x="640.1" y="339.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="643.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (15 samples, 0.63%)</title><rect x="640.1" y="323.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.1" y="334.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (13 samples, 0.55%)</title><rect x="640.1" y="307.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.1" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.04%)</title><rect x="640.1" y="291.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.1" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="640.1" y="275.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="640.1" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="643.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.04%)</title><rect x="640.1" y="243.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.04%)</title><rect x="640.1" y="227.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="643.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (12 samples, 0.50%)</title><rect x="640.6" y="291.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (12 samples, 0.50%)</title><rect x="640.6" y="275.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 0.50%)</title><rect x="640.6" y="259.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (12 samples, 0.50%)</title><rect x="640.6" y="243.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="643.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.04%)</title><rect x="640.6" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.04%)</title><rect x="640.6" y="211.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="640.6" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.17%)</title><rect x="641.1" y="227.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.17%)</title><rect x="641.1" y="211.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.13%)</title><rect x="641.1" y="195.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.13%)</title><rect x="641.1" y="179.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.13%)</title><rect x="641.1" y="163.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="644.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.13%)</title><rect x="641.1" y="147.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.1" y="158.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.13%)</title><rect x="641.1" y="131.0" width="1.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="644.1" y="142.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.13%)</title><rect x="641.1" y="115.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="644.1" y="126.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.13%)</title><rect x="641.1" y="99.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="644.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="642.6" y="195.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.04%)</title><rect x="642.6" y="179.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.29%)</title><rect x="643.1" y="227.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.29%)</title><rect x="643.1" y="211.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.29%)</title><rect x="643.1" y="195.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.21%)</title><rect x="644.1" y="179.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.21%)</title><rect x="644.1" y="163.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.1" y="174.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.17%)</title><rect x="644.6" y="147.0" width="2.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="647.6" y="158.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="644.6" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="647.6" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="645.1" y="131.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="648.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.08%)</title><rect x="646.6" y="307.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="649.6" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.08%)</title><rect x="646.6" y="291.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="649.6" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="646.6" y="275.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="646.6" y="259.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="649.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="646.6" y="243.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="647.1" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="650.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="647.1" y="259.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="650.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="647.1" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="647.6" y="339.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="650.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (22 samples, 0.92%)</title><rect x="648.1" y="355.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="651.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (22 samples, 0.92%)</title><rect x="648.1" y="339.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (22 samples, 0.92%)</title><rect x="648.1" y="323.0" width="10.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="651.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="648.1" y="307.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (22 samples, 0.92%)</title><rect x="648.1" y="291.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="651.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (22 samples, 0.92%)</title><rect x="648.1" y="275.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (22 samples, 0.92%)</title><rect x="648.1" y="259.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (19 samples, 0.80%)</title><rect x="649.5" y="243.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="652.5" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (18 samples, 0.76%)</title><rect x="650.0" y="227.0" width="9.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="653.0" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="659.0" y="387.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="662.0" y="398.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.04%)</title><rect x="659.0" y="371.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="662.0" y="382.0"></text>
</g>
<g>
<title>[async_worker_0 tid=29187] (121 samples, 5.08%)</title><rect x="659.4" y="419.0" width="60.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="662.4" y="430.0">[async..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="659.4" y="403.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="662.4" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="659.4" y="387.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="662.4" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.04%)</title><rect x="659.4" y="371.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="662.4" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.04%)</title><rect x="659.4" y="355.0" width="0.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="662.4" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.run (120 samples, 5.04%)</title><rect x="659.9" y="403.0" width="59.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.9" y="414.0">java/l..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (120 samples, 5.04%)</title><rect x="659.9" y="387.0" width="59.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.9" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (120 samples, 5.04%)</title><rect x="659.9" y="371.0" width="59.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.9" y="382.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (70 samples, 2.94%)</title><rect x="659.9" y="355.0" width="34.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="662.9" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (70 samples, 2.94%)</title><rect x="659.9" y="339.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.9" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (62 samples, 2.60%)</title><rect x="659.9" y="323.0" width="30.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.9" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="659.9" y="307.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="662.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="659.9" y="291.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="662.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="659.9" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="659.9" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="662.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="659.9" y="243.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="662.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="659.9" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="662.9" y="238.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.04%)</title><rect x="659.9" y="211.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="662.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.25%)</title><rect x="660.4" y="307.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.25%)</title><rect x="660.4" y="291.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.21%)</title><rect x="660.9" y="275.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.21%)</title><rect x="660.9" y="259.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.21%)</title><rect x="660.9" y="243.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="660.9" y="227.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="663.9" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="660.9" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="663.9" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="660.9" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="663.9" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="661.4" y="211.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="664.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (55 samples, 2.31%)</title><rect x="663.4" y="307.0" width="27.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.4" y="318.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (55 samples, 2.31%)</title><rect x="663.4" y="291.0" width="27.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.4" y="302.0">j..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (54 samples, 2.27%)</title><rect x="663.9" y="275.0" width="26.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="666.9" y="286.0">U..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="663.9" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="666.9" y="270.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.04%)</title><rect x="663.9" y="243.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="666.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (50 samples, 2.10%)</title><rect x="664.4" y="259.0" width="24.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="667.4" y="270.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="664.9" y="243.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="667.9" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="664.9" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="667.9" y="238.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="664.9" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="667.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (48 samples, 2.02%)</title><rect x="665.4" y="243.0" width="23.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="668.4" y="254.0">_..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.08%)</title><rect x="689.2" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.2" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.08%)</title><rect x="689.2" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="692.2" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.08%)</title><rect x="689.2" y="227.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="692.2" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.08%)</title><rect x="689.2" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="692.2" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.08%)</title><rect x="689.2" y="195.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="692.2" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.04%)</title><rect x="689.2" y="179.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.2" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="689.7" y="179.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="692.7" y="190.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.04%)</title><rect x="690.2" y="259.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="693.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.13%)</title><rect x="690.7" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.13%)</title><rect x="690.7" y="307.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.13%)</title><rect x="690.7" y="291.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.13%)</title><rect x="690.7" y="275.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="693.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.13%)</title><rect x="690.7" y="259.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.13%)</title><rect x="690.7" y="243.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="693.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.13%)</title><rect x="690.7" y="227.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="693.7" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="691.2" y="211.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="694.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="691.2" y="195.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="694.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.21%)</title><rect x="692.1" y="323.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.21%)</title><rect x="692.1" y="307.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.21%)</title><rect x="692.1" y="291.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.21%)</title><rect x="692.1" y="275.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.21%)</title><rect x="692.1" y="259.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="692.1" y="243.0" width="2.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="695.1" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="692.1" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="695.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="692.1" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="695.1" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="692.1" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.1" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="692.6" y="227.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="695.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (50 samples, 2.10%)</title><rect x="694.6" y="355.0" width="24.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.6" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (50 samples, 2.10%)</title><rect x="694.6" y="339.0" width="24.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.6" y="350.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (24 samples, 1.01%)</title><rect x="694.6" y="323.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.6" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="695.6" y="307.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="698.6" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="695.6" y="291.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="698.6" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="695.6" y="275.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="698.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="696.1" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="696.1" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="699.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="696.1" y="275.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="696.1" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="699.1" y="270.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="696.1" y="243.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="699.1" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="696.1" y="227.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="699.1" y="238.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="696.1" y="211.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="699.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (20 samples, 0.84%)</title><rect x="696.6" y="307.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="696.6" y="291.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="699.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="696.6" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="699.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="696.6" y="259.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="696.6" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="699.6" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="696.6" y="227.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="699.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 0.80%)</title><rect x="697.1" y="291.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 0.80%)</title><rect x="697.1" y="275.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (19 samples, 0.80%)</title><rect x="697.1" y="259.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.1" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (19 samples, 0.80%)</title><rect x="697.1" y="243.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="700.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="697.1" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="700.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="697.1" y="211.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="697.1" y="195.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="700.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="697.1" y="179.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="697.1" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="700.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="697.1" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.1" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="697.1" y="131.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.1" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 0.76%)</title><rect x="697.6" y="227.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="697.6" y="211.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="697.6" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="700.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="697.6" y="179.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.6" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.04%)</title><rect x="697.6" y="163.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.6" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="697.6" y="147.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="700.6" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.71%)</title><rect x="698.1" y="211.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="701.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.71%)</title><rect x="698.1" y="195.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.71%)</title><rect x="698.1" y="179.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="701.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.71%)</title><rect x="698.1" y="163.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="701.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (17 samples, 0.71%)</title><rect x="698.1" y="147.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.1" y="158.0"></text>
</g>
<g>
<title>write (17 samples, 0.71%)</title><rect x="698.1" y="131.0" width="8.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="701.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="706.5" y="323.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (25 samples, 1.05%)</title><rect x="707.0" y="323.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="710.0" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (25 samples, 1.05%)</title><rect x="707.0" y="307.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.0" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (25 samples, 1.05%)</title><rect x="707.0" y="291.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="710.0" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (25 samples, 1.05%)</title><rect x="707.0" y="275.0" width="12.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="710.0" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="707.5" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="710.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.04%)</title><rect x="708.0" y="259.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="711.0" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (22 samples, 0.92%)</title><rect x="708.5" y="259.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="711.5" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.08%)</title><rect x="709.0" y="243.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="712.0" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.08%)</title><rect x="709.0" y="227.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="712.0" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="709.0" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="712.0" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="709.0" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="712.0" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.08%)</title><rect x="709.0" y="179.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (2 samples, 0.08%)</title><rect x="709.0" y="163.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="712.0" y="174.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="710.0" y="243.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="713.0" y="254.0"></text>
</g>
<g>
<title>free (2 samples, 0.08%)</title><rect x="710.5" y="243.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="713.5" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.04%)</title><rect x="711.0" y="227.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="714.0" y="238.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.04%)</title><rect x="711.0" y="211.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="714.0" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.08%)</title><rect x="711.5" y="243.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="714.5" y="254.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="711.5" y="227.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="714.5" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="712.0" y="211.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="715.0" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="712.0" y="195.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="715.0" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="712.0" y="179.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="715.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (14 samples, 0.59%)</title><rect x="712.5" y="243.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="715.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (14 samples, 0.59%)</title><rect x="712.5" y="227.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (13 samples, 0.55%)</title><rect x="712.5" y="211.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="715.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (13 samples, 0.55%)</title><rect x="712.5" y="195.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="715.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (12 samples, 0.50%)</title><rect x="712.5" y="179.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="715.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="712.9" y="163.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="715.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.13%)</title><rect x="713.4" y="163.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="716.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.08%)</title><rect x="713.9" y="147.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="716.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (6 samples, 0.25%)</title><rect x="714.9" y="163.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.21%)</title><rect x="715.4" y="147.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="718.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.13%)</title><rect x="715.9" y="131.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="718.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="716.9" y="115.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="719.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="717.4" y="131.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="720.4" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="717.9" y="163.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="720.9" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="718.4" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (1 samples, 0.04%)</title><rect x="718.9" y="211.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.9" y="222.0"></text>
</g>
<g>
<title>[async_worker_1 tid=35331] (136 samples, 5.71%)</title><rect x="719.4" y="419.0" width="67.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="722.4" y="430.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (136 samples, 5.71%)</title><rect x="719.4" y="403.0" width="67.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.4" y="414.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (136 samples, 5.71%)</title><rect x="719.4" y="387.0" width="67.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.4" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (136 samples, 5.71%)</title><rect x="719.4" y="371.0" width="67.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="722.4" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (75 samples, 3.15%)</title><rect x="719.4" y="355.0" width="37.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.4" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (73 samples, 3.06%)</title><rect x="719.4" y="339.0" width="36.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.4" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (55 samples, 2.31%)</title><rect x="719.4" y="323.0" width="27.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.4" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="719.4" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="722.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="719.4" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="722.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="719.4" y="275.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="719.4" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="722.4" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="719.4" y="243.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="722.4" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="719.4" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="722.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="719.4" y="211.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="722.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.08%)</title><rect x="719.9" y="307.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="722.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.08%)</title><rect x="719.9" y="291.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.08%)</title><rect x="719.9" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.08%)</title><rect x="719.9" y="259.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="722.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.08%)</title><rect x="719.9" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.08%)</title><rect x="719.9" y="227.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="722.9" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="719.9" y="211.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="722.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="719.9" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="722.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="719.9" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="722.9" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="719.9" y="163.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="722.9" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="719.9" y="147.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="722.9" y="158.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="719.9" y="131.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="722.9" y="142.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="720.4" y="211.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="723.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (52 samples, 2.18%)</title><rect x="720.9" y="307.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="723.9" y="318.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (52 samples, 2.18%)</title><rect x="720.9" y="291.0" width="25.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.9" y="302.0">j..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="721.9" y="275.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="724.9" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (49 samples, 2.06%)</title><rect x="722.4" y="275.0" width="24.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="725.4" y="286.0">U..</text>
</g>
<g>
<title>Parker::park(bool, long) (48 samples, 2.02%)</title><rect x="722.4" y="259.0" width="23.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="725.4" y="270.0">P..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="722.4" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="725.4" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="722.4" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.4" y="238.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="722.9" y="243.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="725.9" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="722.9" y="227.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="725.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 1.93%)</title><rect x="723.4" y="243.0" width="22.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="726.4" y="254.0">_..</text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.04%)</title><rect x="746.1" y="259.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (5 samples, 0.21%)</title><rect x="746.6" y="323.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="749.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.21%)</title><rect x="746.6" y="307.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="749.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (5 samples, 0.21%)</title><rect x="746.6" y="291.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="749.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.21%)</title><rect x="746.6" y="275.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="749.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.21%)</title><rect x="746.6" y="259.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.21%)</title><rect x="746.6" y="243.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (5 samples, 0.21%)</title><rect x="746.6" y="227.0" width="2.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="749.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.04%)</title><rect x="746.6" y="211.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="749.6" y="222.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.17%)</title><rect x="747.1" y="211.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="750.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.17%)</title><rect x="747.1" y="195.0" width="2.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="750.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.55%)</title><rect x="749.1" y="323.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="752.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.55%)</title><rect x="749.1" y="307.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.55%)</title><rect x="749.1" y="291.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.55%)</title><rect x="749.1" y="275.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.55%)</title><rect x="749.1" y="259.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="752.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.55%)</title><rect x="749.1" y="243.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="752.1" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="749.1" y="227.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="752.1" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="749.1" y="211.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="752.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (11 samples, 0.46%)</title><rect x="749.6" y="227.0" width="5.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="752.6" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="755.1" y="227.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="758.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (2 samples, 0.08%)</title><rect x="755.5" y="339.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.5" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.08%)</title><rect x="755.5" y="323.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="758.5" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="756.5" y="355.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="759.5" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (60 samples, 2.52%)</title><rect x="757.0" y="355.0" width="29.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.0" y="366.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (60 samples, 2.52%)</title><rect x="757.0" y="339.0" width="29.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.0" y="350.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (32 samples, 1.34%)</title><rect x="757.0" y="323.0" width="15.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.0" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="757.0" y="307.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="760.0" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="757.0" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.0" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="757.0" y="275.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="760.0" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.04%)</title><rect x="757.0" y="259.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="760.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (31 samples, 1.30%)</title><rect x="757.5" y="307.0" width="15.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="757.5" y="291.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="760.5" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="757.5" y="275.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="760.5" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="757.5" y="259.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.5" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="757.5" y="243.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="760.5" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 1.26%)</title><rect x="758.0" y="291.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 1.26%)</title><rect x="758.0" y="275.0" width="14.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="761.0" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (29 samples, 1.22%)</title><rect x="758.5" y="259.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (29 samples, 1.22%)</title><rect x="758.5" y="243.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="761.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="758.5" y="227.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="758.5" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="758.5" y="195.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="761.5" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="758.5" y="179.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="761.5" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="758.5" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.5" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="758.5" y="147.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="761.5" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="758.5" y="131.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="761.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (28 samples, 1.18%)</title><rect x="759.0" y="227.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.08%)</title><rect x="759.0" y="211.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.08%)</title><rect x="759.0" y="195.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.04%)</title><rect x="759.5" y="179.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.04%)</title><rect x="759.5" y="163.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="762.5" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.04%)</title><rect x="759.5" y="147.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 1.09%)</title><rect x="760.0" y="211.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="763.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 1.09%)</title><rect x="760.0" y="195.0" width="12.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="763.0" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (26 samples, 1.09%)</title><rect x="760.0" y="179.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (26 samples, 1.09%)</title><rect x="760.0" y="163.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (26 samples, 1.09%)</title><rect x="760.0" y="147.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.0" y="158.0"></text>
</g>
<g>
<title>write (26 samples, 1.09%)</title><rect x="760.0" y="131.0" width="12.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="763.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (28 samples, 1.18%)</title><rect x="772.9" y="323.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="775.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="773.4" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="773.4" y="291.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="776.4" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="773.4" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="773.4" y="259.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="773.4" y="243.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="773.4" y="227.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="773.4" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.4" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="773.4" y="195.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.4" y="206.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (26 samples, 1.09%)</title><rect x="773.9" y="307.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.9" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (26 samples, 1.09%)</title><rect x="773.9" y="291.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.9" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (26 samples, 1.09%)</title><rect x="773.9" y="275.0" width="12.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="776.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.04%)</title><rect x="774.4" y="259.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="777.4" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (24 samples, 1.01%)</title><rect x="774.9" y="259.0" width="11.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="777.9" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (8 samples, 0.34%)</title><rect x="774.9" y="243.0" width="3.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="777.9" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="775.4" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="778.4" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.21%)</title><rect x="775.9" y="227.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="778.9" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="775.9" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="778.9" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="776.4" y="211.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="779.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="776.9" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="779.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="776.9" y="195.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="779.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="776.9" y="179.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="779.9" y="190.0"></text>
</g>
<g>
<title>JavaThread::get_polling_page() (1 samples, 0.04%)</title><rect x="776.9" y="163.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.9" y="174.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="777.3" y="211.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="780.3" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="777.3" y="195.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="780.3" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="777.3" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="780.3" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="777.8" y="179.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="780.8" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="778.3" y="227.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="781.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="778.3" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="781.3" y="222.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="778.3" y="195.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="781.3" y="206.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="778.3" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="781.3" y="190.0"></text>
</g>
<g>
<title>free (1 samples, 0.04%)</title><rect x="778.8" y="243.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="781.8" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.04%)</title><rect x="778.8" y="227.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="781.8" y="238.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.04%)</title><rect x="778.8" y="211.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="781.8" y="222.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.08%)</title><rect x="779.3" y="243.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="782.3" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.04%)</title><rect x="779.8" y="227.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="782.8" y="238.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="780.3" y="243.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="783.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="780.3" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="780.3" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.3" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.08%)</title><rect x="780.8" y="243.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="783.8" y="254.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="780.8" y="227.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="783.8" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.04%)</title><rect x="780.8" y="211.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="783.8" y="222.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.04%)</title><rect x="781.3" y="211.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="784.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.42%)</title><rect x="781.8" y="243.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.38%)</title><rect x="782.3" y="227.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="785.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (9 samples, 0.38%)</title><rect x="782.3" y="211.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="785.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (9 samples, 0.38%)</title><rect x="782.3" y="195.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="785.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (9 samples, 0.38%)</title><rect x="782.3" y="179.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="785.3" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="783.3" y="163.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="786.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (6 samples, 0.25%)</title><rect x="783.8" y="163.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="786.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.21%)</title><rect x="784.3" y="147.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="787.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.13%)</title><rect x="785.3" y="131.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.13%)</title><rect x="785.3" y="115.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.3" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.08%)</title><rect x="785.8" y="99.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="788.8" y="110.0"></text>
</g>
<g>
<title>[async_worker_2 tid=36867] (144 samples, 6.05%)</title><rect x="786.8" y="419.0" width="71.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="789.8" y="430.0">[async_w..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="786.8" y="403.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="789.8" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="786.8" y="387.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="789.8" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.04%)</title><rect x="786.8" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="789.8" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.04%)</title><rect x="786.8" y="355.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="789.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="786.8" y="339.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="789.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.run (143 samples, 6.00%)</title><rect x="787.3" y="403.0" width="70.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="790.3" y="414.0">java/lan..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (143 samples, 6.00%)</title><rect x="787.3" y="387.0" width="70.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.3" y="398.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (143 samples, 6.00%)</title><rect x="787.3" y="371.0" width="70.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="790.3" y="382.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (80 samples, 3.36%)</title><rect x="787.3" y="355.0" width="39.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.3" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (80 samples, 3.36%)</title><rect x="787.3" y="339.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="790.3" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (69 samples, 2.90%)</title><rect x="787.3" y="323.0" width="34.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="790.3" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="787.3" y="307.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="787.3" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="787.3" y="275.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="787.3" y="259.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.3" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="787.3" y="243.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="790.3" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="787.3" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="790.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="787.3" y="211.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="790.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.38%)</title><rect x="787.7" y="307.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="790.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.38%)</title><rect x="787.7" y="291.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="790.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.38%)</title><rect x="787.7" y="275.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.34%)</title><rect x="788.2" y="259.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.34%)</title><rect x="788.2" y="243.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.2" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.34%)</title><rect x="788.2" y="227.0" width="4.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="791.2" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.04%)</title><rect x="788.2" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.2" y="222.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="788.7" y="211.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="791.7" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="788.7" y="195.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="791.7" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="789.2" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="792.2" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.04%)</title><rect x="789.2" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="792.2" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="789.7" y="211.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="792.7" y="222.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="789.7" y="195.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="792.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="790.2" y="211.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="793.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (59 samples, 2.48%)</title><rect x="792.2" y="307.0" width="29.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="795.2" y="318.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (59 samples, 2.48%)</title><rect x="792.2" y="291.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.2" y="302.0">jd..</text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.04%)</title><rect x="793.7" y="275.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="796.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (55 samples, 2.31%)</title><rect x="794.2" y="275.0" width="27.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="797.2" y="286.0">U..</text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="794.2" y="259.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.2" y="270.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (1 samples, 0.04%)</title><rect x="794.7" y="259.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="797.7" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="795.2" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="798.2" y="270.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.04%)</title><rect x="795.2" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="798.2" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.04%)</title><rect x="795.2" y="227.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="798.2" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (51 samples, 2.14%)</title><rect x="795.7" y="259.0" width="25.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="798.7" y="270.0">P..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="796.2" y="243.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.2" y="254.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.08%)</title><rect x="796.7" y="243.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="799.7" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="796.7" y="227.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.7" y="238.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.04%)</title><rect x="796.7" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="799.7" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="797.2" y="227.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="800.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 1.93%)</title><rect x="797.7" y="243.0" width="22.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="800.7" y="254.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="820.4" y="243.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="823.4" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="820.9" y="259.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="823.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.04%)</title><rect x="821.4" y="323.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="824.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.04%)</title><rect x="821.4" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="824.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.04%)</title><rect x="821.4" y="291.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="821.4" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="824.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="821.4" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="824.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="821.4" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="824.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="821.4" y="227.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="824.4" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="821.4" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="821.4" y="195.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="824.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.42%)</title><rect x="821.9" y="323.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.42%)</title><rect x="821.9" y="307.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.42%)</title><rect x="821.9" y="291.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.34%)</title><rect x="822.9" y="275.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="825.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.34%)</title><rect x="822.9" y="259.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="825.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.25%)</title><rect x="823.4" y="243.0" width="3.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="826.4" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="823.4" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.4" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="823.4" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="826.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="823.9" y="227.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="826.9" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="825.9" y="227.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="828.9" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.04%)</title><rect x="826.4" y="243.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="829.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (63 samples, 2.64%)</title><rect x="826.9" y="355.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="829.9" y="366.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (63 samples, 2.64%)</title><rect x="826.9" y="339.0" width="31.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="829.9" y="350.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (31 samples, 1.30%)</title><rect x="826.9" y="323.0" width="15.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="829.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (30 samples, 1.26%)</title><rect x="826.9" y="307.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="829.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="826.9" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (29 samples, 1.22%)</title><rect x="827.4" y="291.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="830.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (29 samples, 1.22%)</title><rect x="827.4" y="275.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="830.4" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (29 samples, 1.22%)</title><rect x="827.4" y="259.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="830.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (29 samples, 1.22%)</title><rect x="827.4" y="243.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="830.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (29 samples, 1.22%)</title><rect x="827.4" y="227.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="830.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 1.22%)</title><rect x="827.4" y="211.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="830.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 1.22%)</title><rect x="827.4" y="195.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="830.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (29 samples, 1.22%)</title><rect x="827.4" y="179.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (29 samples, 1.22%)</title><rect x="827.4" y="163.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="830.4" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (29 samples, 1.22%)</title><rect x="827.4" y="147.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="830.4" y="158.0"></text>
</g>
<g>
<title>write (28 samples, 1.18%)</title><rect x="827.9" y="131.0" width="13.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="830.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="841.7" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (32 samples, 1.34%)</title><rect x="842.2" y="323.0" width="15.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="845.2" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (28 samples, 1.18%)</title><rect x="842.2" y="307.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.2" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (28 samples, 1.18%)</title><rect x="842.2" y="291.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.2" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (28 samples, 1.18%)</title><rect x="842.2" y="275.0" width="13.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="845.2" y="286.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (28 samples, 1.18%)</title><rect x="842.2" y="259.0" width="13.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="845.2" y="270.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="842.2" y="243.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="845.2" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.13%)</title><rect x="842.7" y="243.0" width="1.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="845.7" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.04%)</title><rect x="842.7" y="227.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="845.7" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="842.7" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="845.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="842.7" y="195.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="845.7" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="842.7" y="179.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="845.7" y="190.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="842.7" y="163.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.7" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="842.7" y="147.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="845.7" y="158.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.08%)</title><rect x="843.2" y="227.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="846.2" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.08%)</title><rect x="843.2" y="211.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="846.2" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="843.2" y="195.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="846.2" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="843.2" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="846.2" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="843.2" y="163.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.2" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="843.2" y="147.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="846.2" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="843.2" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.2" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="843.7" y="195.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="846.7" y="206.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.08%)</title><rect x="844.2" y="243.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="847.2" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.08%)</title><rect x="845.2" y="243.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="848.2" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="845.7" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="848.7" y="238.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="845.7" y="211.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="848.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (20 samples, 0.84%)</title><rect x="846.2" y="243.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (20 samples, 0.84%)</title><rect x="846.2" y="227.0" width="9.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="849.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (20 samples, 0.84%)</title><rect x="846.2" y="211.0" width="9.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="849.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.84%)</title><rect x="846.2" y="195.0" width="9.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="849.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.04%)</title><rect x="846.2" y="179.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (19 samples, 0.80%)</title><rect x="846.7" y="179.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="847.2" y="163.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="850.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.04%)</title><rect x="847.7" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (15 samples, 0.63%)</title><rect x="848.2" y="163.0" width="7.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="851.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.04%)</title><rect x="849.2" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.50%)</title><rect x="849.7" y="147.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="852.7" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="850.7" y="131.0" width="0.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="853.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.04%)</title><rect x="851.2" y="131.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.29%)</title><rect x="851.7" y="131.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.7" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="852.1" y="115.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="855.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (5 samples, 0.21%)</title><rect x="852.6" y="115.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.6" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.13%)</title><rect x="853.6" y="99.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="856.6" y="110.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="855.1" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.04%)</title><rect x="855.6" y="163.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="858.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (4 samples, 0.17%)</title><rect x="856.1" y="307.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="859.1" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.17%)</title><rect x="856.1" y="291.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="859.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.17%)</title><rect x="856.1" y="275.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="859.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.17%)</title><rect x="856.1" y="259.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="859.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="856.6" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.6" y="254.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.08%)</title><rect x="857.1" y="243.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.1" y="254.0"></text>
</g>
<g>
<title>[async_worker_3 tid=30979] (143 samples, 6.00%)</title><rect x="858.1" y="419.0" width="70.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="861.1" y="430.0">[async_w..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="858.1" y="403.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="861.1" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="858.1" y="387.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="861.1" y="398.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.04%)</title><rect x="858.1" y="371.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (142 samples, 5.96%)</title><rect x="858.6" y="403.0" width="70.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="861.6" y="414.0">java/lan..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (142 samples, 5.96%)</title><rect x="858.6" y="387.0" width="70.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="861.6" y="398.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (142 samples, 5.96%)</title><rect x="858.6" y="371.0" width="70.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.6" y="382.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (65 samples, 2.73%)</title><rect x="858.6" y="355.0" width="32.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.6" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (65 samples, 2.73%)</title><rect x="858.6" y="339.0" width="32.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.6" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (55 samples, 2.31%)</title><rect x="858.6" y="323.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="858.6" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="858.6" y="291.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="858.6" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="861.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="858.6" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.6" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="858.6" y="243.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="861.6" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="858.6" y="227.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="861.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="858.6" y="211.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="861.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.25%)</title><rect x="859.1" y="307.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.25%)</title><rect x="859.1" y="291.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.25%)</title><rect x="859.1" y="275.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="862.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.25%)</title><rect x="859.1" y="259.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.25%)</title><rect x="859.1" y="243.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.1" y="254.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.04%)</title><rect x="859.1" y="227.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="862.1" y="238.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="859.6" y="227.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="862.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="859.6" y="211.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="862.6" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="859.6" y="195.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="862.6" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="860.1" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.1" y="222.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="860.1" y="195.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="863.1" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="860.6" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.6" y="222.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="860.6" y="195.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.6" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.08%)</title><rect x="861.1" y="211.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="864.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (48 samples, 2.02%)</title><rect x="862.1" y="307.0" width="23.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="865.1" y="318.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (48 samples, 2.02%)</title><rect x="862.1" y="291.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.1" y="302.0">j..</text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.04%)</title><rect x="862.6" y="275.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="865.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (46 samples, 1.93%)</title><rect x="863.0" y="275.0" width="22.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="866.0" y="286.0">U..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="863.0" y="259.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.0" y="270.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.04%)</title><rect x="863.5" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="866.5" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="864.0" y="259.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.0" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (43 samples, 1.81%)</title><rect x="864.5" y="259.0" width="21.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="867.5" y="270.0">P..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="864.5" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="867.5" y="254.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="864.5" y="227.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.5" y="238.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="865.0" y="243.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="868.0" y="254.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.04%)</title><rect x="865.0" y="227.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.0" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (40 samples, 1.68%)</title><rect x="865.5" y="243.0" width="19.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="868.5" y="254.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="885.3" y="243.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="888.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.17%)</title><rect x="885.8" y="323.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="888.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.17%)</title><rect x="885.8" y="307.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="888.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.17%)</title><rect x="885.8" y="291.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="888.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.17%)</title><rect x="885.8" y="275.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="888.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.17%)</title><rect x="885.8" y="259.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.8" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.17%)</title><rect x="885.8" y="243.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="888.8" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.17%)</title><rect x="885.8" y="227.0" width="2.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="888.8" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.17%)</title><rect x="885.8" y="211.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="888.8" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.17%)</title><rect x="885.8" y="195.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="888.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.25%)</title><rect x="887.8" y="323.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="890.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.25%)</title><rect x="887.8" y="307.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="890.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.25%)</title><rect x="887.8" y="291.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="890.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.25%)</title><rect x="887.8" y="275.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="890.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.25%)</title><rect x="887.8" y="259.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="890.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="888.3" y="243.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="891.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="888.3" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="891.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.04%)</title><rect x="888.3" y="211.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.3" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="888.8" y="227.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="889.3" y="227.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="892.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (77 samples, 3.23%)</title><rect x="890.8" y="355.0" width="38.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="893.8" y="366.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (77 samples, 3.23%)</title><rect x="890.8" y="339.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="893.8" y="350.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (37 samples, 1.55%)</title><rect x="890.8" y="323.0" width="18.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.8" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.25%)</title><rect x="890.8" y="307.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.8" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (6 samples, 0.25%)</title><rect x="890.8" y="291.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="893.8" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.08%)</title><rect x="890.8" y="275.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="893.8" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.17%)</title><rect x="891.8" y="275.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (31 samples, 1.30%)</title><rect x="893.8" y="307.0" width="15.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="896.8" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="893.8" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 1.26%)</title><rect x="894.3" y="291.0" width="14.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 1.26%)</title><rect x="894.3" y="275.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (30 samples, 1.26%)</title><rect x="894.3" y="259.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (30 samples, 1.26%)</title><rect x="894.3" y="243.0" width="14.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="897.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (30 samples, 1.26%)</title><rect x="894.3" y="227.0" width="14.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="897.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.08%)</title><rect x="894.3" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="897.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.08%)</title><rect x="894.3" y="195.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="897.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="894.3" y="179.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="897.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="894.3" y="163.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="897.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.08%)</title><rect x="894.3" y="147.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (28 samples, 1.18%)</title><rect x="895.2" y="211.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (27 samples, 1.13%)</title><rect x="895.7" y="195.0" width="13.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="898.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (27 samples, 1.13%)</title><rect x="895.7" y="179.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="898.7" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (27 samples, 1.13%)</title><rect x="895.7" y="163.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="898.7" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (27 samples, 1.13%)</title><rect x="895.7" y="147.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="898.7" y="158.0"></text>
</g>
<g>
<title>write (26 samples, 1.09%)</title><rect x="896.2" y="131.0" width="12.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="899.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="909.1" y="323.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="912.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (39 samples, 1.64%)</title><rect x="909.6" y="323.0" width="19.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="912.6" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="909.6" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="912.6" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="909.6" y="291.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="909.6" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="912.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="909.6" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="912.6" y="270.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (36 samples, 1.51%)</title><rect x="910.1" y="307.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="913.1" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (36 samples, 1.51%)</title><rect x="910.1" y="291.0" width="17.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.1" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (36 samples, 1.51%)</title><rect x="910.1" y="275.0" width="17.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="913.1" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="910.6" y="259.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="913.6" y="270.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.04%)</title><rect x="911.1" y="259.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="914.1" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.04%)</title><rect x="911.6" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="914.6" y="270.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="912.1" y="259.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="915.1" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (31 samples, 1.30%)</title><rect x="912.6" y="259.0" width="15.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="915.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="912.6" y="243.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.6" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (5 samples, 0.21%)</title><rect x="913.1" y="243.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="916.1" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.17%)</title><rect x="913.1" y="227.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="916.1" y="238.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.04%)</title><rect x="913.1" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.1" y="222.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="913.6" y="211.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="916.6" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.08%)</title><rect x="914.1" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.1" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.08%)</title><rect x="914.1" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="917.1" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="914.1" y="179.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="917.1" y="190.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="914.1" y="163.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="917.1" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="914.6" y="179.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="917.6" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="915.1" y="227.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="918.1" y="238.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="915.6" y="243.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="918.6" y="254.0"></text>
</g>
<g>
<title>free (1 samples, 0.04%)</title><rect x="916.1" y="243.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="919.1" y="254.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.04%)</title><rect x="916.1" y="227.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="919.1" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.08%)</title><rect x="916.5" y="243.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="919.5" y="254.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="916.5" y="227.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="919.5" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.08%)</title><rect x="916.5" y="211.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="919.5" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="916.5" y="195.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="919.5" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="916.5" y="179.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="919.5" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="916.5" y="163.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="919.5" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="917.0" y="195.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="920.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (20 samples, 0.84%)</title><rect x="917.5" y="243.0" width="9.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="920.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (20 samples, 0.84%)</title><rect x="917.5" y="227.0" width="9.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (20 samples, 0.84%)</title><rect x="917.5" y="211.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="920.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (20 samples, 0.84%)</title><rect x="917.5" y="195.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (20 samples, 0.84%)</title><rect x="917.5" y="179.0" width="9.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.5" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.08%)</title><rect x="918.0" y="163.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="921.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.08%)</title><rect x="919.0" y="163.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="919.5" y="147.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.04%)</title><rect x="920.0" y="163.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.04%)</title><rect x="920.0" y="147.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="923.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (11 samples, 0.46%)</title><rect x="920.5" y="163.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="923.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.46%)</title><rect x="920.5" y="147.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="923.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.04%)</title><rect x="923.0" y="131.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.08%)</title><rect x="923.5" y="131.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="926.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.08%)</title><rect x="924.5" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.5" y="142.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="925.5" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="928.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.04%)</title><rect x="926.0" y="163.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.0" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.08%)</title><rect x="926.5" y="163.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="929.5" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.04%)</title><rect x="927.4" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="930.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (2 samples, 0.08%)</title><rect x="927.9" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.08%)</title><rect x="927.9" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="930.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="927.9" y="275.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="930.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="927.9" y="259.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="930.9" y="270.0"></text>
</g>
<g>
<title>[async_worker_4 tid=35587] (116 samples, 4.87%)</title><rect x="928.9" y="419.0" width="57.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="931.9" y="430.0">[async..</text>
</g>
<g>
<title>java/lang/Thread.run (116 samples, 4.87%)</title><rect x="928.9" y="403.0" width="57.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.9" y="414.0">java/l..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (116 samples, 4.87%)</title><rect x="928.9" y="387.0" width="57.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="931.9" y="398.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (116 samples, 4.87%)</title><rect x="928.9" y="371.0" width="57.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="931.9" y="382.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (62 samples, 2.60%)</title><rect x="928.9" y="355.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="931.9" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (60 samples, 2.52%)</title><rect x="929.9" y="339.0" width="29.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.9" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (51 samples, 2.14%)</title><rect x="929.9" y="323.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="932.9" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.13%)</title><rect x="929.9" y="307.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.13%)</title><rect x="929.9" y="291.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="932.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.13%)</title><rect x="929.9" y="275.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.13%)</title><rect x="929.9" y="259.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="932.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.13%)</title><rect x="929.9" y="243.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="932.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.13%)</title><rect x="929.9" y="227.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="932.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="929.9" y="211.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="932.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (48 samples, 2.02%)</title><rect x="931.4" y="307.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.4" y="318.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (48 samples, 2.02%)</title><rect x="931.4" y="291.0" width="23.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="934.4" y="302.0">j..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (46 samples, 1.93%)</title><rect x="932.4" y="275.0" width="22.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="935.4" y="286.0">U..</text>
</g>
<g>
<title>Parker::park(bool, long) (43 samples, 1.81%)</title><rect x="932.4" y="259.0" width="21.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="935.4" y="270.0">P..</text>
</g>
<g>
<title>__psynch_cvwait (43 samples, 1.81%)</title><rect x="932.4" y="243.0" width="21.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="935.4" y="254.0">_..</text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.04%)</title><rect x="953.7" y="259.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="956.7" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="954.2" y="259.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="957.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.38%)</title><rect x="955.2" y="323.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="958.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.38%)</title><rect x="955.2" y="307.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="958.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.38%)</title><rect x="955.2" y="291.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.38%)</title><rect x="955.2" y="275.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.38%)</title><rect x="955.2" y="259.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="958.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.34%)</title><rect x="955.7" y="243.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="958.7" y="254.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.04%)</title><rect x="955.7" y="227.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="958.7" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.29%)</title><rect x="956.2" y="227.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="959.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (54 samples, 2.27%)</title><rect x="959.6" y="355.0" width="26.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="962.6" y="366.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (54 samples, 2.27%)</title><rect x="959.6" y="339.0" width="26.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="962.6" y="350.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (26 samples, 1.09%)</title><rect x="959.6" y="323.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="962.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="960.1" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="963.1" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="960.1" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.1" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="960.1" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="963.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="960.1" y="259.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="963.1" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.04%)</title><rect x="960.1" y="243.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="963.1" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (24 samples, 1.01%)</title><rect x="960.6" y="307.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="963.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="960.6" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="963.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="960.6" y="275.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="960.6" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="963.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="960.6" y="243.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="963.6" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 0.97%)</title><rect x="961.1" y="291.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="964.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (23 samples, 0.97%)</title><rect x="961.1" y="275.0" width="11.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="964.1" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (23 samples, 0.97%)</title><rect x="961.1" y="259.0" width="11.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="964.1" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (23 samples, 0.97%)</title><rect x="961.1" y="243.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.1" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.08%)</title><rect x="961.1" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="964.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="961.1" y="211.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="964.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="961.1" y="195.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="964.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="961.6" y="179.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="964.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (21 samples, 0.88%)</title><rect x="962.1" y="227.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="965.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (21 samples, 0.88%)</title><rect x="962.1" y="211.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (21 samples, 0.88%)</title><rect x="962.1" y="195.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (21 samples, 0.88%)</title><rect x="962.1" y="179.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="965.1" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (21 samples, 0.88%)</title><rect x="962.1" y="163.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="965.1" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (21 samples, 0.88%)</title><rect x="962.1" y="147.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="965.1" y="158.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.04%)</title><rect x="962.6" y="131.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="965.6" y="142.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="962.6" y="115.0" width="0.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="965.6" y="126.0"></text>
</g>
<g>
<title>write (19 samples, 0.80%)</title><rect x="963.1" y="131.0" width="9.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="966.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.04%)</title><rect x="972.5" y="323.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="975.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (27 samples, 1.13%)</title><rect x="973.0" y="323.0" width="13.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="976.0" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (26 samples, 1.09%)</title><rect x="973.0" y="307.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="976.0" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (26 samples, 1.09%)</title><rect x="973.0" y="291.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="976.0" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (24 samples, 1.01%)</title><rect x="974.0" y="275.0" width="11.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="977.0" y="286.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.04%)</title><rect x="974.0" y="259.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="977.0" y="270.0"></text>
</g>
<g>
<title>free (1 samples, 0.04%)</title><rect x="974.5" y="259.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="977.5" y="270.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="975.0" y="259.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="978.0" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (21 samples, 0.88%)</title><rect x="975.5" y="259.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.5" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.08%)</title><rect x="976.0" y="243.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="979.0" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="976.0" y="227.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="979.0" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.04%)</title><rect x="976.5" y="227.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="979.5" y="238.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="976.5" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="979.5" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="976.5" y="195.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.5" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="976.5" y="179.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.5" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="976.5" y="163.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="979.5" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="977.0" y="243.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.0" y="254.0"></text>
</g>
<g>
<title>free (1 samples, 0.04%)</title><rect x="977.5" y="243.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="980.5" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.04%)</title><rect x="977.5" y="227.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="980.5" y="238.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.04%)</title><rect x="977.5" y="211.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="980.5" y="222.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.04%)</title><rect x="978.0" y="243.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="981.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (15 samples, 0.63%)</title><rect x="978.5" y="243.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (15 samples, 0.63%)</title><rect x="978.5" y="227.0" width="7.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="981.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (15 samples, 0.63%)</title><rect x="978.5" y="211.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.63%)</title><rect x="978.5" y="195.0" width="7.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (15 samples, 0.63%)</title><rect x="978.5" y="179.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.04%)</title><rect x="978.5" y="163.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (13 samples, 0.55%)</title><rect x="979.0" y="163.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (12 samples, 0.50%)</title><rect x="979.5" y="147.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="982.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.08%)</title><rect x="982.4" y="131.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="982.9" y="115.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="985.9" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="982.9" y="99.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="985.9" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.13%)</title><rect x="983.4" y="131.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.4" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="983.9" y="115.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="986.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="984.4" y="115.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.4" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="984.4" y="99.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="987.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="984.9" y="131.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="985.4" y="163.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.04%)</title><rect x="985.9" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="988.9" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.04%)</title><rect x="985.9" y="291.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="988.9" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="985.9" y="275.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="988.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="985.9" y="259.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.9" y="270.0"></text>
</g>
<g>
<title>[async_worker_5 tid=33795] (145 samples, 6.09%)</title><rect x="986.4" y="419.0" width="71.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="989.4" y="430.0">[async_w..</text>
</g>
<g>
<title>java/lang/Thread.run (145 samples, 6.09%)</title><rect x="986.4" y="403.0" width="71.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.4" y="414.0">java/lan..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (145 samples, 6.09%)</title><rect x="986.4" y="387.0" width="71.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="989.4" y="398.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (145 samples, 6.09%)</title><rect x="986.4" y="371.0" width="71.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="989.4" y="382.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (74 samples, 3.11%)</title><rect x="986.4" y="355.0" width="36.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="989.4" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (74 samples, 3.11%)</title><rect x="986.4" y="339.0" width="36.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="989.4" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (63 samples, 2.64%)</title><rect x="986.4" y="323.0" width="31.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="989.4" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.08%)</title><rect x="986.4" y="307.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="986.4" y="291.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="989.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="986.4" y="275.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="989.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="986.4" y="259.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="989.4" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="986.9" y="243.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="989.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="986.9" y="227.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="986.9" y="211.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="989.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.08%)</title><rect x="987.4" y="307.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="990.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.08%)</title><rect x="987.4" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="990.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.08%)</title><rect x="987.4" y="275.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="990.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.08%)</title><rect x="987.4" y="259.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="990.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.08%)</title><rect x="987.4" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="990.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.08%)</title><rect x="987.4" y="227.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="990.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.08%)</title><rect x="987.4" y="211.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="990.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (59 samples, 2.48%)</title><rect x="988.4" y="307.0" width="29.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="991.4" y="318.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (59 samples, 2.48%)</title><rect x="988.4" y="291.0" width="29.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="991.4" y="302.0">jd..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (55 samples, 2.31%)</title><rect x="990.4" y="275.0" width="27.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="993.4" y="286.0">U..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="990.4" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="993.4" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (54 samples, 2.27%)</title><rect x="990.9" y="259.0" width="26.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.9" y="270.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="990.9" y="243.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="993.9" y="254.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.04%)</title><rect x="991.4" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="994.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (51 samples, 2.14%)</title><rect x="991.8" y="243.0" width="25.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="994.8" y="254.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1017.1" y="243.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1020.1" y="254.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.04%)</title><rect x="1017.1" y="227.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1020.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.13%)</title><rect x="1017.6" y="323.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.13%)</title><rect x="1017.6" y="307.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.13%)</title><rect x="1017.6" y="291.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1020.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.13%)</title><rect x="1017.6" y="275.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.13%)</title><rect x="1017.6" y="259.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.13%)</title><rect x="1017.6" y="243.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.08%)</title><rect x="1018.1" y="227.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1021.1" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.08%)</title><rect x="1018.1" y="211.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.08%)</title><rect x="1018.1" y="195.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1021.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.34%)</title><rect x="1019.1" y="323.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1022.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.34%)</title><rect x="1019.1" y="307.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1022.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.34%)</title><rect x="1019.1" y="291.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1022.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.34%)</title><rect x="1019.1" y="275.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1022.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.34%)</title><rect x="1019.1" y="259.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1022.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.29%)</title><rect x="1019.6" y="243.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1022.6" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="1019.6" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.17%)</title><rect x="1020.1" y="227.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1023.1" y="238.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.04%)</title><rect x="1022.1" y="227.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1025.1" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1022.6" y="227.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1025.6" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (71 samples, 2.98%)</title><rect x="1023.1" y="355.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1026.1" y="366.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (71 samples, 2.98%)</title><rect x="1023.1" y="339.0" width="35.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1026.1" y="350.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (36 samples, 1.51%)</title><rect x="1023.1" y="323.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.1" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="1023.6" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.6" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="1023.6" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.6" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="1023.6" y="275.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.04%)</title><rect x="1024.0" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1027.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="1024.0" y="291.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1027.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="1024.0" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1027.0" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1024.0" y="259.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1027.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (33 samples, 1.39%)</title><rect x="1024.5" y="307.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="1024.5" y="291.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1027.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (32 samples, 1.34%)</title><rect x="1025.0" y="291.0" width="15.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (32 samples, 1.34%)</title><rect x="1025.0" y="275.0" width="15.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.0" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (31 samples, 1.30%)</title><rect x="1025.5" y="259.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1028.5" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (31 samples, 1.30%)</title><rect x="1025.5" y="243.0" width="15.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="1025.5" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.5" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1025.5" y="211.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.5" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1025.5" y="195.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1028.5" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1025.5" y="179.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1028.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (30 samples, 1.26%)</title><rect x="1026.0" y="227.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.04%)</title><rect x="1026.0" y="211.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1029.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.04%)</title><rect x="1026.0" y="195.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1029.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.04%)</title><rect x="1026.0" y="179.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1029.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.04%)</title><rect x="1026.0" y="163.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1029.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.04%)</title><rect x="1026.0" y="147.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1029.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 1.22%)</title><rect x="1026.5" y="211.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1029.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 1.22%)</title><rect x="1026.5" y="195.0" width="14.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1029.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (29 samples, 1.22%)</title><rect x="1026.5" y="179.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.5" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (29 samples, 1.22%)</title><rect x="1026.5" y="163.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.5" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (29 samples, 1.22%)</title><rect x="1026.5" y="147.0" width="14.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.5" y="158.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.08%)</title><rect x="1027.0" y="131.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1030.0" y="142.0"></text>
</g>
<g>
<title>write (26 samples, 1.09%)</title><rect x="1028.0" y="131.0" width="12.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1031.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (35 samples, 1.47%)</title><rect x="1040.9" y="323.0" width="17.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1043.9" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (32 samples, 1.34%)</title><rect x="1041.9" y="307.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1044.9" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (32 samples, 1.34%)</title><rect x="1041.9" y="291.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1044.9" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (32 samples, 1.34%)</title><rect x="1041.9" y="275.0" width="15.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1044.9" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="1041.9" y="259.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1044.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.04%)</title><rect x="1042.4" y="259.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.4" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (30 samples, 1.26%)</title><rect x="1042.9" y="259.0" width="14.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.9" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (4 samples, 0.17%)</title><rect x="1042.9" y="243.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1045.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1042.9" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.9" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.08%)</title><rect x="1043.4" y="227.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1046.4" y="238.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.04%)</title><rect x="1043.9" y="211.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.9" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="1044.4" y="227.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1047.4" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="1044.4" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.4" y="222.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.04%)</title><rect x="1044.9" y="243.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1047.9" y="254.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="1045.3" y="243.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1048.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1045.3" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.3" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="1045.3" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1048.3" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1045.3" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.3" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1045.3" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.3" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1045.3" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1048.3" y="174.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.04%)</title><rect x="1045.3" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1048.3" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="1045.8" y="243.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1048.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1045.8" y="227.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.8" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="1045.8" y="211.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1048.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1045.8" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (22 samples, 0.92%)</title><rect x="1046.3" y="243.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (22 samples, 0.92%)</title><rect x="1046.3" y="227.0" width="10.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (22 samples, 0.92%)</title><rect x="1046.3" y="211.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (22 samples, 0.92%)</title><rect x="1046.3" y="195.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (20 samples, 0.84%)</title><rect x="1046.8" y="179.0" width="9.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.04%)</title><rect x="1047.3" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.04%)</title><rect x="1047.3" y="147.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (17 samples, 0.71%)</title><rect x="1047.8" y="163.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.04%)</title><rect x="1048.8" y="147.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (14 samples, 0.59%)</title><rect x="1049.3" y="147.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.08%)</title><rect x="1051.8" y="131.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="1052.3" y="115.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.21%)</title><rect x="1052.8" y="131.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.8" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1053.3" y="115.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1056.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.13%)</title><rect x="1053.8" y="115.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.08%)</title><rect x="1054.3" y="99.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1057.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="1055.3" y="131.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.3" y="142.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1055.8" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.8" y="142.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="1056.2" y="163.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.04%)</title><rect x="1056.7" y="179.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.04%)</title><rect x="1057.2" y="243.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.04%)</title><rect x="1057.7" y="307.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1060.7" y="318.0"></text>
</g>
<g>
<title>[async_worker_6 tid=29699] (131 samples, 5.50%)</title><rect x="1058.2" y="419.0" width="64.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1061.2" y="430.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (131 samples, 5.50%)</title><rect x="1058.2" y="403.0" width="64.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1061.2" y="414.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (131 samples, 5.50%)</title><rect x="1058.2" y="387.0" width="64.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1061.2" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (131 samples, 5.50%)</title><rect x="1058.2" y="371.0" width="64.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.2" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (73 samples, 3.06%)</title><rect x="1058.2" y="355.0" width="36.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1061.2" y="366.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (73 samples, 3.06%)</title><rect x="1058.2" y="339.0" width="36.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1061.2" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (59 samples, 2.48%)</title><rect x="1058.2" y="323.0" width="29.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1061.2" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (5 samples, 0.21%)</title><rect x="1058.7" y="307.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.21%)</title><rect x="1058.7" y="291.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.21%)</title><rect x="1058.7" y="275.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1061.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.21%)</title><rect x="1058.7" y="259.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1061.7" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.21%)</title><rect x="1058.7" y="243.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1061.7" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.21%)</title><rect x="1058.7" y="227.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1061.7" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1058.7" y="211.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.13%)</title><rect x="1059.2" y="211.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1062.2" y="222.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1060.7" y="211.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1063.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (53 samples, 2.23%)</title><rect x="1061.2" y="307.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.2" y="318.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (53 samples, 2.23%)</title><rect x="1061.2" y="291.0" width="26.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.2" y="302.0">j..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="1062.2" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (50 samples, 2.10%)</title><rect x="1062.7" y="275.0" width="24.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1065.7" y="286.0">U..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="1062.7" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.7" y="270.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="1062.7" y="243.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.7" y="254.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.04%)</title><rect x="1063.2" y="259.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.2" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (45 samples, 1.89%)</title><rect x="1063.7" y="259.0" width="22.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.7" y="270.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.04%)</title><rect x="1063.7" y="243.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1066.7" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (43 samples, 1.81%)</title><rect x="1064.2" y="243.0" width="21.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1067.2" y="254.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1085.5" y="243.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1088.5" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.08%)</title><rect x="1086.0" y="259.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.0" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1086.5" y="243.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.5" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1086.5" y="227.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.5" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1086.5" y="211.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1086.5" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.5" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1086.5" y="179.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.5" y="190.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.04%)</title><rect x="1087.0" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1090.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.04%)</title><rect x="1087.5" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.04%)</title><rect x="1087.5" y="307.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.04%)</title><rect x="1087.5" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="1087.5" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="1087.5" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1090.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="1087.5" y="243.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1090.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.55%)</title><rect x="1088.0" y="323.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1091.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.55%)</title><rect x="1088.0" y="307.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1091.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.55%)</title><rect x="1088.0" y="291.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1091.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 0.55%)</title><rect x="1088.0" y="275.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1091.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (13 samples, 0.55%)</title><rect x="1088.0" y="259.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1091.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (12 samples, 0.50%)</title><rect x="1088.4" y="243.0" width="6.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1091.4" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.04%)</title><rect x="1088.4" y="227.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.4" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.04%)</title><rect x="1088.4" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.4" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.04%)</title><rect x="1088.4" y="195.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.4" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.04%)</title><rect x="1088.4" y="179.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.4" y="190.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="1088.4" y="163.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.4" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1088.9" y="227.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.9" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="1088.9" y="211.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.9" y="222.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="1088.9" y="195.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.9" y="206.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.04%)</title><rect x="1089.4" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.4" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1089.4" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1092.4" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1089.4" y="195.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.4" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1089.4" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.4" y="190.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.04%)</title><rect x="1089.4" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1092.4" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.04%)</title><rect x="1089.9" y="227.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.9" y="238.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.04%)</title><rect x="1089.9" y="211.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (8 samples, 0.34%)</title><rect x="1090.4" y="227.0" width="4.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1093.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (58 samples, 2.43%)</title><rect x="1094.4" y="355.0" width="28.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1097.4" y="366.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (58 samples, 2.43%)</title><rect x="1094.4" y="339.0" width="28.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.4" y="350.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (29 samples, 1.22%)</title><rect x="1094.4" y="323.0" width="14.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1097.4" y="334.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.08%)</title><rect x="1094.4" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1097.4" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.08%)</title><rect x="1094.4" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.4" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="1094.4" y="275.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1097.4" y="286.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.04%)</title><rect x="1094.4" y="259.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.4" y="270.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (1 samples, 0.04%)</title><rect x="1094.9" y="275.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1097.9" y="286.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.08%)</title><rect x="1095.4" y="307.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1098.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="1095.4" y="291.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1098.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="1095.4" y="275.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1098.4" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1095.9" y="259.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1098.9" y="270.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1095.9" y="243.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1098.9" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.04%)</title><rect x="1095.9" y="227.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1098.9" y="238.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="1095.9" y="211.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1098.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (24 samples, 1.01%)</title><rect x="1096.4" y="307.0" width="11.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.08%)</title><rect x="1096.4" y="291.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1099.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.08%)</title><rect x="1096.4" y="275.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1099.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.08%)</title><rect x="1096.4" y="259.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1099.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="1096.4" y="243.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1099.4" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 0.92%)</title><rect x="1097.4" y="291.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1100.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 0.92%)</title><rect x="1097.4" y="275.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1100.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.04%)</title><rect x="1097.4" y="259.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.4" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (21 samples, 0.88%)</title><rect x="1097.9" y="259.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1100.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (21 samples, 0.88%)</title><rect x="1097.9" y="243.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1100.9" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.08%)</title><rect x="1097.9" y="227.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1100.9" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="1097.9" y="211.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.9" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.08%)</title><rect x="1097.9" y="195.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1100.9" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1097.9" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1100.9" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="1097.9" y="163.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1100.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="1097.9" y="147.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.9" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="1097.9" y="131.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1100.9" y="142.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1098.4" y="179.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1101.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (19 samples, 0.80%)</title><rect x="1098.8" y="227.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1101.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.80%)</title><rect x="1098.8" y="211.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1101.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.80%)</title><rect x="1098.8" y="195.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1101.8" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="1098.8" y="179.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1101.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (18 samples, 0.76%)</title><rect x="1099.3" y="179.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1102.3" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (18 samples, 0.76%)</title><rect x="1099.3" y="163.0" width="9.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1102.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (18 samples, 0.76%)</title><rect x="1099.3" y="147.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1102.3" y="158.0"></text>
</g>
<g>
<title>write (16 samples, 0.67%)</title><rect x="1100.3" y="131.0" width="8.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1103.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.04%)</title><rect x="1108.3" y="307.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="1108.3" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.3" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="1108.3" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1111.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (29 samples, 1.22%)</title><rect x="1108.8" y="323.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.8" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (28 samples, 1.18%)</title><rect x="1108.8" y="307.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1111.8" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (28 samples, 1.18%)</title><rect x="1108.8" y="291.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.8" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (28 samples, 1.18%)</title><rect x="1108.8" y="275.0" width="13.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1111.8" y="286.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.04%)</title><rect x="1108.8" y="259.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1111.8" y="270.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (26 samples, 1.09%)</title><rect x="1109.3" y="259.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.3" y="270.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (8 samples, 0.34%)</title><rect x="1109.3" y="243.0" width="3.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1112.3" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="1109.7" y="227.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.7" y="238.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.04%)</title><rect x="1110.2" y="227.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1113.2" y="238.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.08%)</title><rect x="1110.7" y="227.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1113.7" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="1110.7" y="211.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.7" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1111.2" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.2" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1111.2" y="195.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.2" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1111.2" y="179.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.2" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.04%)</title><rect x="1111.2" y="163.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.2" y="174.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.13%)</title><rect x="1111.7" y="227.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1114.7" y="238.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="1112.7" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.7" y="222.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.04%)</title><rect x="1112.7" y="195.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.7" y="206.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="1113.2" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.2" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.17%)</title><rect x="1113.7" y="243.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1116.7" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1114.7" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="1114.7" y="211.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.04%)</title><rect x="1114.7" y="195.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="206.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.04%)</title><rect x="1115.2" y="227.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.2" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.08%)</title><rect x="1115.7" y="243.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1118.7" y="254.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.08%)</title><rect x="1115.7" y="227.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1118.7" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.08%)</title><rect x="1115.7" y="211.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1118.7" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.04%)</title><rect x="1116.2" y="195.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1119.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.42%)</title><rect x="1116.7" y="243.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.42%)</title><rect x="1116.7" y="227.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (10 samples, 0.42%)</title><rect x="1116.7" y="211.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (10 samples, 0.42%)</title><rect x="1116.7" y="195.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (10 samples, 0.42%)</title><rect x="1116.7" y="179.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.7" y="190.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1117.2" y="163.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1120.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.29%)</title><rect x="1117.7" y="163.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.29%)</title><rect x="1117.7" y="147.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.7" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1117.7" y="131.0" width="0.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1120.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.04%)</title><rect x="1118.2" y="131.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (5 samples, 0.21%)</title><rect x="1118.7" y="131.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.08%)</title><rect x="1120.2" y="115.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.2" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="1120.6" y="99.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1123.6" y="110.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="1121.1" y="163.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.04%)</title><rect x="1121.6" y="243.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.6" y="254.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.04%)</title><rect x="1122.1" y="259.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1125.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.04%)</title><rect x="1122.6" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1125.6" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.04%)</title><rect x="1122.6" y="291.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.6" y="275.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.6" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.6" y="259.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.6" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.6" y="243.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1122.6" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1122.6" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1125.6" y="222.0"></text>
</g>
<g>
<title>[async_worker_7 tid=34563] (135 samples, 5.67%)</title><rect x="1123.1" y="419.0" width="66.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1126.1" y="430.0">[async_..</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.04%)</title><rect x="1123.1" y="403.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1126.1" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="1123.1" y="387.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="398.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.04%)</title><rect x="1123.1" y="371.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.1" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.run (134 samples, 5.63%)</title><rect x="1123.6" y="403.0" width="66.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1126.6" y="414.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (134 samples, 5.63%)</title><rect x="1123.6" y="387.0" width="66.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1126.6" y="398.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (134 samples, 5.63%)</title><rect x="1123.6" y="371.0" width="66.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1126.6" y="382.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (54 samples, 2.27%)</title><rect x="1123.6" y="355.0" width="26.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.6" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (54 samples, 2.27%)</title><rect x="1123.6" y="339.0" width="26.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1126.6" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (43 samples, 1.81%)</title><rect x="1123.6" y="323.0" width="21.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1126.6" y="334.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.04%)</title><rect x="1123.6" y="307.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1126.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.04%)</title><rect x="1123.6" y="291.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.04%)</title><rect x="1123.6" y="275.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1126.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.04%)</title><rect x="1123.6" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1126.6" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.04%)</title><rect x="1123.6" y="243.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1126.6" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="1123.6" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1123.6" y="211.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1126.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.04%)</title><rect x="1124.1" y="307.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.04%)</title><rect x="1124.1" y="291.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1127.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.04%)</title><rect x="1124.1" y="275.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1127.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.04%)</title><rect x="1124.1" y="259.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.04%)</title><rect x="1124.1" y="243.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1127.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.04%)</title><rect x="1124.1" y="227.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1127.1" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.04%)</title><rect x="1124.1" y="211.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1127.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (41 samples, 1.72%)</title><rect x="1124.6" y="307.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1127.6" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (41 samples, 1.72%)</title><rect x="1124.6" y="291.0" width="20.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1127.6" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (40 samples, 1.68%)</title><rect x="1125.1" y="275.0" width="19.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1128.1" y="286.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.04%)</title><rect x="1125.1" y="259.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1128.1" y="270.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.04%)</title><rect x="1125.1" y="243.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.1" y="254.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.04%)</title><rect x="1125.6" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1128.6" y="270.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.04%)</title><rect x="1125.6" y="243.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.6" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (37 samples, 1.55%)</title><rect x="1126.1" y="259.0" width="18.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.1" y="270.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="1126.1" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (36 samples, 1.51%)</title><rect x="1126.6" y="243.0" width="17.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1129.6" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1144.4" y="259.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1147.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.08%)</title><rect x="1144.9" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1147.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.08%)</title><rect x="1144.9" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1147.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.08%)</title><rect x="1144.9" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.08%)</title><rect x="1144.9" y="275.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1147.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.08%)</title><rect x="1144.9" y="259.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1147.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.08%)</title><rect x="1144.9" y="243.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.08%)</title><rect x="1144.9" y="227.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1147.9" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.04%)</title><rect x="1144.9" y="211.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.04%)</title><rect x="1144.9" y="195.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1147.9" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="1145.4" y="211.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1148.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.38%)</title><rect x="1145.9" y="323.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1148.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.38%)</title><rect x="1145.9" y="307.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1148.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.38%)</title><rect x="1145.9" y="291.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1148.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.38%)</title><rect x="1145.9" y="275.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1148.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.38%)</title><rect x="1145.9" y="259.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1148.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.38%)</title><rect x="1145.9" y="243.0" width="4.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1148.9" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.04%)</title><rect x="1145.9" y="227.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.04%)</title><rect x="1145.9" y="211.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.29%)</title><rect x="1146.4" y="227.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1149.4" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.04%)</title><rect x="1149.9" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$83/168350619.run (80 samples, 3.36%)</title><rect x="1150.4" y="355.0" width="39.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1153.4" y="366.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$1 (80 samples, 3.36%)</title><rect x="1150.4" y="339.0" width="39.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1153.4" y="350.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (49 samples, 2.06%)</title><rect x="1150.4" y="323.0" width="24.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.4" y="334.0">o..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.04%)</title><rect x="1150.4" y="307.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.04%)</title><rect x="1150.4" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.04%)</title><rect x="1150.4" y="275.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (48 samples, 2.02%)</title><rect x="1150.9" y="307.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1153.9" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.08%)</title><rect x="1150.9" y="291.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1153.9" y="302.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.04%)</title><rect x="1151.4" y="275.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1154.4" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="1151.4" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1154.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="1151.4" y="243.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1154.4" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 1.93%)</title><rect x="1151.9" y="291.0" width="22.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1154.9" y="302.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (46 samples, 1.93%)</title><rect x="1151.9" y="275.0" width="22.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1154.9" y="286.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (1 samples, 0.04%)</title><rect x="1151.9" y="259.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1154.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (45 samples, 1.89%)</title><rect x="1152.4" y="259.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.4" y="270.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (45 samples, 1.89%)</title><rect x="1152.4" y="243.0" width="22.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1155.4" y="254.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="1152.4" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1155.4" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1152.4" y="211.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1155.4" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1152.4" y="195.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1155.4" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1152.4" y="179.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1155.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (44 samples, 1.85%)</title><rect x="1152.8" y="227.0" width="21.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.8" y="238.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (44 samples, 1.85%)</title><rect x="1152.8" y="211.0" width="21.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1155.8" y="222.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (44 samples, 1.85%)</title><rect x="1152.8" y="195.0" width="21.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1155.8" y="206.0">s..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.04%)</title><rect x="1152.8" y="179.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1155.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (43 samples, 1.81%)</title><rect x="1153.3" y="179.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1156.3" y="190.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (43 samples, 1.81%)</title><rect x="1153.3" y="163.0" width="21.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.3" y="174.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (43 samples, 1.81%)</title><rect x="1153.3" y="147.0" width="21.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1156.3" y="158.0">s..</text>
</g>
<g>
<title>write (38 samples, 1.60%)</title><rect x="1155.8" y="131.0" width="18.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1158.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (31 samples, 1.30%)</title><rect x="1174.6" y="323.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1177.6" y="334.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (29 samples, 1.22%)</title><rect x="1174.6" y="307.0" width="14.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1177.6" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (29 samples, 1.22%)</title><rect x="1174.6" y="291.0" width="14.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1177.6" y="302.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (29 samples, 1.22%)</title><rect x="1174.6" y="275.0" width="14.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1177.6" y="286.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (28 samples, 1.18%)</title><rect x="1175.1" y="259.0" width="13.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.1" y="270.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="1175.1" y="243.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="254.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (5 samples, 0.21%)</title><rect x="1175.6" y="243.0" width="2.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1178.6" y="254.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.13%)</title><rect x="1175.6" y="227.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1178.6" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.08%)</title><rect x="1176.1" y="211.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.1" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.08%)</title><rect x="1177.1" y="227.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1177.6" y="211.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="1177.6" y="195.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.6" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="1177.6" y="179.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="1177.6" y="163.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.6" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="1177.6" y="147.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="158.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="1177.6" y="131.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="142.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="1178.1" y="243.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1181.1" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="1178.1" y="227.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="1178.1" y="211.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.1" y="222.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.04%)</title><rect x="1178.6" y="243.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1181.6" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1178.6" y="227.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1181.6" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (5 samples, 0.21%)</title><rect x="1179.1" y="243.0" width="2.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>malloc (5 samples, 0.21%)</title><rect x="1179.1" y="227.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.13%)</title><rect x="1179.6" y="211.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.08%)</title><rect x="1180.1" y="195.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1183.1" y="206.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.04%)</title><rect x="1181.1" y="211.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1184.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (15 samples, 0.63%)</title><rect x="1181.6" y="243.0" width="7.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (15 samples, 0.63%)</title><rect x="1181.6" y="227.0" width="7.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (15 samples, 0.63%)</title><rect x="1181.6" y="211.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (15 samples, 0.63%)</title><rect x="1181.6" y="195.0" width="7.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="206.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1181.6" y="179.0" width="0.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1184.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (13 samples, 0.55%)</title><rect x="1182.1" y="179.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.08%)</title><rect x="1182.6" y="163.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="1182.6" y="147.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.04%)</title><rect x="1183.1" y="147.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.08%)</title><rect x="1183.6" y="163.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.08%)</title><rect x="1183.6" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.29%)</title><rect x="1184.6" y="163.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="1185.0" y="147.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.21%)</title><rect x="1185.5" y="147.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (2 samples, 0.08%)</title><rect x="1185.5" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.5" y="142.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.04%)</title><rect x="1186.0" y="115.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1189.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.08%)</title><rect x="1186.5" y="131.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="142.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1187.5" y="131.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.04%)</title><rect x="1188.0" y="163.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (1 samples, 0.04%)</title><rect x="1188.5" y="179.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.5" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (2 samples, 0.08%)</title><rect x="1189.0" y="307.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1192.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.08%)</title><rect x="1189.0" y="291.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1192.0" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1192.5" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1189.5" y="259.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1192.5" y="270.0"></text>
</g>
</g>
</svg>
