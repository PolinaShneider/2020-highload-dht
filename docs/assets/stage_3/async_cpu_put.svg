<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (3,833 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>[Attach Listener tid=44291] (1 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="10.0" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="10.0" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.03%)</title><rect x="10.0" y="323.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.03%)</title><rect x="10.0" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.03%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="10.0" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="10.0" y="259.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=19971] (1 samples, 0.03%)</title><rect x="10.3" y="451.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.3" y="435.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.3" y="419.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="403.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.3" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="10.3" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="10.3" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="366.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="10.3" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.3" y="350.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="10.3" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.3" y="334.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="10.3" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.3" y="318.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="10.3" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.3" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="10.3" y="275.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="13.3" y="286.0"></text>
</g>
<g>
<title>[Java: GC Thread#0 tid=11523] (1 samples, 0.03%)</title><rect x="10.6" y="451.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.6" y="462.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.6" y="435.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.6" y="446.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.6" y="419.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="13.6" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.6" y="403.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.6" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.6" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.6" y="398.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.03%)</title><rect x="10.6" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.6" y="382.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="10.6" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.6" y="366.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="10.6" y="339.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="13.6" y="350.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=13571] (1 samples, 0.03%)</title><rect x="10.9" y="451.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="13.9" y="462.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.9" y="435.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.9" y="446.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.9" y="419.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.9" y="430.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.9" y="403.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.9" y="414.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.9" y="387.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.9" y="398.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="10.9" y="371.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="382.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="10.9" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.9" y="366.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="10.9" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.9" y="350.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.03%)</title><rect x="10.9" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.9" y="334.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="10.9" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.9" y="318.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.03%)</title><rect x="10.9" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.9" y="302.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="10.9" y="275.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="13.9" y="286.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40203] (72 samples, 1.88%)</title><rect x="11.2" y="451.0" width="22.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.2" y="462.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (72 samples, 1.88%)</title><rect x="11.2" y="435.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="446.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (44 samples, 1.15%)</title><rect x="11.5" y="419.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.03%)</title><rect x="11.5" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.03%)</title><rect x="11.5" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (43 samples, 1.12%)</title><rect x="11.8" y="403.0" width="13.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (43 samples, 1.12%)</title><rect x="11.8" y="387.0" width="13.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (43 samples, 1.12%)</title><rect x="11.8" y="371.0" width="13.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (39 samples, 1.02%)</title><rect x="11.8" y="355.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="14.8" y="366.0"></text>
</g>
<g>
<title>kevent (32 samples, 0.83%)</title><rect x="14.0" y="339.0" width="9.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="17.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.05%)</title><rect x="23.9" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="23.9" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="23.9" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="24.2" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="24.2" y="323.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="24.2" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="24.5" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="24.8" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.8" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="24.8" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (27 samples, 0.70%)</title><rect x="25.1" y="419.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (27 samples, 0.70%)</title><rect x="25.1" y="403.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (11 samples, 0.29%)</title><rect x="25.1" y="387.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 0.21%)</title><rect x="25.1" y="371.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 0.21%)</title><rect x="25.1" y="355.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.1" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.18%)</title><rect x="25.1" y="339.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.08%)</title><rect x="25.1" y="323.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="25.1" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="25.1" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.1" y="302.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.05%)</title><rect x="25.4" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="318.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="25.7" y="291.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="25.7" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.10%)</title><rect x="26.0" y="323.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (4 samples, 0.10%)</title><rect x="26.0" y="307.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.10%)</title><rect x="26.0" y="291.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.10%)</title><rect x="26.0" y="275.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="26.0" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="26.0" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="26.0" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="26.0" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="26.3" y="259.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="26.3" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="29.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="26.3" y="227.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="29.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="26.3" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="29.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="26.3" y="195.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="26.3" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.3" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="26.3" y="163.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="29.3" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="26.3" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.3" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="26.3" y="131.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="29.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="26.6" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="26.9" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="26.9" y="243.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="26.9" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="26.9" y="211.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.9" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="26.9" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.9" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="26.9" y="179.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="29.9" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="26.9" y="163.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="29.9" y="174.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="27.2" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.2" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="27.2" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.2" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="27.2" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="27.2" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="27.2" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="27.5" y="371.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="30.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="27.9" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="30.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="27.9" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.9" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="27.9" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.9" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="27.9" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.9" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="27.9" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="30.9" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="27.9" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="30.9" y="286.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="27.9" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="30.9" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="27.9" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="30.9" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="28.2" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="28.2" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="28.2" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="28.2" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.2" y="334.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="28.2" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.2" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="28.2" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="31.2" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="28.2" y="275.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="31.2" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="28.2" y="259.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="31.2" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="28.2" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="31.2" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="28.2" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="31.2" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="28.2" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.2" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="28.2" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="31.2" y="206.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.03%)</title><rect x="28.2" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.2" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 0.42%)</title><rect x="28.5" y="387.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (16 samples, 0.42%)</title><rect x="28.5" y="371.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (16 samples, 0.42%)</title><rect x="28.5" y="355.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.42%)</title><rect x="28.5" y="339.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.42%)</title><rect x="28.5" y="323.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 0.42%)</title><rect x="28.5" y="307.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="31.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (16 samples, 0.42%)</title><rect x="28.5" y="291.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (16 samples, 0.42%)</title><rect x="28.5" y="275.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.5" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (16 samples, 0.42%)</title><rect x="28.5" y="259.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="31.5" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (105 samples, 2.74%)</title><rect x="33.4" y="451.0" width="32.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="36.4" y="462.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (105 samples, 2.74%)</title><rect x="33.4" y="435.0" width="32.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.4" y="446.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (73 samples, 1.90%)</title><rect x="33.4" y="419.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.4" y="430.0">o..</text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="33.7" y="403.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="36.7" y="414.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="33.7" y="387.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="36.7" y="398.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="34.0" y="387.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="37.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (70 samples, 1.83%)</title><rect x="34.3" y="403.0" width="21.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.3" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (70 samples, 1.83%)</title><rect x="34.3" y="387.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.3" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (70 samples, 1.83%)</title><rect x="34.3" y="371.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="37.3" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (68 samples, 1.77%)</title><rect x="34.3" y="355.0" width="21.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.3" y="366.0"></text>
</g>
<g>
<title>kevent (63 samples, 1.64%)</title><rect x="35.9" y="339.0" width="19.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="38.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="55.3" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="55.3" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="55.6" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.6" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="55.6" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="58.6" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="55.6" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.6" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="55.6" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="58.6" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="55.6" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (32 samples, 0.83%)</title><rect x="55.9" y="419.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="58.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (32 samples, 0.83%)</title><rect x="55.9" y="403.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15 samples, 0.39%)</title><rect x="55.9" y="387.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.23%)</title><rect x="55.9" y="371.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.23%)</title><rect x="55.9" y="355.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.9" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.18%)</title><rect x="55.9" y="339.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="55.9" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="58.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="55.9" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.9" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.16%)</title><rect x="56.2" y="323.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (6 samples, 0.16%)</title><rect x="56.2" y="307.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.16%)</title><rect x="56.2" y="291.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.16%)</title><rect x="56.2" y="275.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.16%)</title><rect x="56.2" y="259.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.13%)</title><rect x="56.5" y="243.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.13%)</title><rect x="56.5" y="227.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.13%)</title><rect x="56.5" y="211.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.13%)</title><rect x="56.5" y="195.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.5" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.13%)</title><rect x="56.5" y="179.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.5" y="190.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="56.5" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="59.5" y="174.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.10%)</title><rect x="56.8" y="163.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="59.8" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.08%)</title><rect x="56.8" y="147.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="59.8" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="56.8" y="131.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="59.8" y="142.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="57.7" y="147.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="60.7" y="158.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.05%)</title><rect x="58.0" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="58.0" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="58.0" y="307.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="61.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="58.0" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.0" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="58.0" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="61.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.10%)</title><rect x="58.6" y="371.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="59.3" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="59.3" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="59.3" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="59.3" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="59.6" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="59.9" y="371.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="59.9" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.9" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="59.9" y="339.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.9" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (17 samples, 0.44%)</title><rect x="60.5" y="387.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (17 samples, 0.44%)</title><rect x="60.5" y="371.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (17 samples, 0.44%)</title><rect x="60.5" y="355.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.44%)</title><rect x="60.5" y="339.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.44%)</title><rect x="60.5" y="323.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.44%)</title><rect x="60.5" y="307.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (17 samples, 0.44%)</title><rect x="60.5" y="291.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="63.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (17 samples, 0.44%)</title><rect x="60.5" y="275.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.5" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (17 samples, 0.44%)</title><rect x="60.5" y="259.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="63.5" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=39683] (67 samples, 1.75%)</title><rect x="65.7" y="451.0" width="20.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="68.7" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (67 samples, 1.75%)</title><rect x="65.7" y="435.0" width="20.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.7" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (45 samples, 1.17%)</title><rect x="65.7" y="419.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (45 samples, 1.17%)</title><rect x="65.7" y="403.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (45 samples, 1.17%)</title><rect x="65.7" y="387.0" width="13.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (45 samples, 1.17%)</title><rect x="65.7" y="371.0" width="13.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (40 samples, 1.04%)</title><rect x="65.7" y="355.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.7" y="366.0"></text>
</g>
<g>
<title>kevent (39 samples, 1.02%)</title><rect x="66.0" y="339.0" width="12.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="69.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="78.0" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="78.0" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="78.0" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="78.0" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="78.3" y="355.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="81.3" y="366.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="78.3" y="339.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="81.3" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.elementAt (1 samples, 0.03%)</title><rect x="78.3" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="78.7" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.7" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="78.7" y="339.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="78.7" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="78.7" y="307.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="81.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="78.7" y="291.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="79.3" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.3" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="79.3" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="79.3" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.3" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="79.3" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="79.3" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="82.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (22 samples, 0.57%)</title><rect x="79.6" y="419.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.57%)</title><rect x="79.6" y="403.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.13%)</title><rect x="79.9" y="387.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="82.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.13%)</title><rect x="79.9" y="371.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.13%)</title><rect x="79.9" y="355.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.9" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2 samples, 0.05%)</title><rect x="79.9" y="339.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="79.9" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="82.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="79.9" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.9" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="79.9" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (1 samples, 0.03%)</title><rect x="80.2" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.2" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="80.2" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.2" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="80.2" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="80.2" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.08%)</title><rect x="80.5" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="83.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.08%)</title><rect x="80.5" y="323.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="83.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.08%)</title><rect x="80.5" y="307.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.08%)</title><rect x="80.5" y="291.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.08%)</title><rect x="80.5" y="275.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.5" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 0.42%)</title><rect x="81.4" y="387.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (16 samples, 0.42%)</title><rect x="81.4" y="371.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title><rect x="81.4" y="355.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.4" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="81.4" y="339.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="81.4" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="81.7" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="81.7" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (14 samples, 0.37%)</title><rect x="82.0" y="355.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="82.0" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="85.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="82.0" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="82.0" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="82.0" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="85.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="82.0" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.34%)</title><rect x="82.3" y="339.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.34%)</title><rect x="82.3" y="323.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.34%)</title><rect x="82.3" y="307.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="85.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (13 samples, 0.34%)</title><rect x="82.3" y="291.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (13 samples, 0.34%)</title><rect x="82.3" y="275.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.3" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="82.3" y="259.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="85.3" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="82.3" y="243.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="85.3" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (12 samples, 0.31%)</title><rect x="82.7" y="259.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="85.7" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39171] (96 samples, 2.50%)</title><rect x="86.3" y="451.0" width="29.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="89.3" y="462.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (96 samples, 2.50%)</title><rect x="86.3" y="435.0" width="29.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.3" y="446.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (60 samples, 1.57%)</title><rect x="86.3" y="419.0" width="18.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (60 samples, 1.57%)</title><rect x="86.3" y="403.0" width="18.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (60 samples, 1.57%)</title><rect x="86.3" y="387.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (60 samples, 1.57%)</title><rect x="86.3" y="371.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (54 samples, 1.41%)</title><rect x="86.3" y="355.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="89.3" y="366.0"></text>
</g>
<g>
<title>kevent (51 samples, 1.33%)</title><rect x="87.3" y="339.0" width="15.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="90.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.05%)</title><rect x="103.0" y="355.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.0" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="103.0" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="106.0" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="103.0" y="323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="103.3" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="103.3" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="103.3" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="106.3" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="103.3" y="291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="103.6" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="106.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="103.9" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.9" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="103.9" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.9" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="103.9" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.9" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="103.9" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="106.9" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="103.9" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="104.2" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="104.2" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="104.2" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.2" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="104.2" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.2" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="104.2" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="104.5" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (36 samples, 0.94%)</title><rect x="104.8" y="419.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (35 samples, 0.91%)</title><rect x="104.8" y="403.0" width="10.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="107.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15 samples, 0.39%)</title><rect x="104.8" y="387.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="107.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10 samples, 0.26%)</title><rect x="105.1" y="371.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.26%)</title><rect x="105.1" y="355.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.1" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.23%)</title><rect x="105.1" y="339.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.10%)</title><rect x="105.1" y="323.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.1" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.08%)</title><rect x="105.1" y="307.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.1" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.08%)</title><rect x="105.1" y="291.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.1" y="302.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="106.1" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.13%)</title><rect x="106.4" y="323.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.4" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="106.7" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="106.7" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="106.7" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (3 samples, 0.08%)</title><rect x="107.0" y="307.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.08%)</title><rect x="107.0" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.08%)</title><rect x="107.0" y="275.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="107.0" y="259.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="107.0" y="243.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="107.0" y="227.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="107.0" y="211.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="107.0" y="195.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="107.0" y="179.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.0" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="107.0" y="163.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="110.0" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="107.0" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="110.0" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="107.0" y="131.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="110.0" y="142.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="107.3" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="110.3" y="158.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="107.3" y="131.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="110.3" y="142.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="107.3" y="115.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="110.3" y="126.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="107.3" y="99.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="110.3" y="110.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="107.3" y="83.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.3" y="94.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.03%)</title><rect x="107.3" y="67.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="110.3" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="107.6" y="227.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="110.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="107.6" y="211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="107.6" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.6" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="107.6" y="179.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="107.9" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="107.9" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.9" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="107.9" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="107.9" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="107.9" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="110.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="108.2" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="111.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="108.5" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="108.8" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="109.1" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.1" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="109.1" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (20 samples, 0.52%)</title><rect x="109.4" y="387.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="112.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (20 samples, 0.52%)</title><rect x="109.4" y="371.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (19 samples, 0.50%)</title><rect x="109.7" y="355.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="109.7" y="339.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="109.7" y="323.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="112.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="109.7" y="307.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="109.7" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="112.7" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="109.7" y="275.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="112.7" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="109.7" y="259.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="112.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="110.1" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="110.1" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="110.1" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.1" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="110.1" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="113.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="110.1" y="243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.1" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="110.1" y="227.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="113.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.44%)</title><rect x="110.4" y="339.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="113.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (17 samples, 0.44%)</title><rect x="110.4" y="323.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (17 samples, 0.44%)</title><rect x="110.4" y="307.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (17 samples, 0.44%)</title><rect x="110.4" y="291.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="113.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (17 samples, 0.44%)</title><rect x="110.4" y="275.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.4" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (16 samples, 0.42%)</title><rect x="110.7" y="259.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="113.7" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="115.6" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="118.6" y="414.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="115.6" y="387.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="118.6" y="398.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=38659] (65 samples, 1.70%)</title><rect x="115.9" y="451.0" width="20.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="118.9" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (65 samples, 1.70%)</title><rect x="115.9" y="435.0" width="20.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (42 samples, 1.10%)</title><rect x="115.9" y="419.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="118.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.03%)</title><rect x="115.9" y="403.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.03%)</title><rect x="115.9" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="118.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (41 samples, 1.07%)</title><rect x="116.2" y="403.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="119.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (41 samples, 1.07%)</title><rect x="116.2" y="387.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (41 samples, 1.07%)</title><rect x="116.2" y="371.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="119.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (32 samples, 0.83%)</title><rect x="116.2" y="355.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.2" y="366.0"></text>
</g>
<g>
<title>kevent (31 samples, 0.81%)</title><rect x="116.5" y="339.0" width="9.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="119.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.08%)</title><rect x="126.1" y="355.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.08%)</title><rect x="126.1" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (3 samples, 0.08%)</title><rect x="126.1" y="323.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.1" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.08%)</title><rect x="126.1" y="307.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.1" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.08%)</title><rect x="126.1" y="291.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="127.0" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.08%)</title><rect x="127.3" y="355.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.3" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.08%)</title><rect x="127.3" y="339.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.3" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="127.3" y="323.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="130.3" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.08%)</title><rect x="127.3" y="307.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.08%)</title><rect x="127.3" y="291.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.05%)</title><rect x="128.2" y="355.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="131.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.03%)</title><rect x="128.5" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (23 samples, 0.60%)</title><rect x="128.8" y="419.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.8" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="128.8" y="403.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="131.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.57%)</title><rect x="129.1" y="403.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 0.23%)</title><rect x="129.1" y="387.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="132.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 0.08%)</title><rect x="129.1" y="371.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="132.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.08%)</title><rect x="129.1" y="355.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.1" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (3 samples, 0.08%)</title><rect x="129.1" y="339.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.1" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (3 samples, 0.08%)</title><rect x="129.1" y="323.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="132.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (3 samples, 0.08%)</title><rect x="129.1" y="307.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="129.4" y="291.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="129.4" y="275.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="132.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="129.4" y="259.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="132.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="129.4" y="243.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.4" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="129.4" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="132.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="129.4" y="211.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="132.4" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="129.4" y="195.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.4" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="129.4" y="179.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.4" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="129.4" y="163.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="132.4" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="129.4" y="147.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="132.4" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="129.4" y="131.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="132.4" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="129.8" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="132.8" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="129.8" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="129.8" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="129.8" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.8" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="129.8" y="195.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.8" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="129.8" y="179.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="132.8" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="129.8" y="163.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="132.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.13%)</title><rect x="130.1" y="371.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="133.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="131.3" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="131.3" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="134.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="131.3" y="323.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="131.3" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="131.6" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="131.6" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="134.6" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="131.6" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 0.34%)</title><rect x="131.9" y="387.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (13 samples, 0.34%)</title><rect x="131.9" y="371.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (13 samples, 0.34%)</title><rect x="131.9" y="355.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="131.9" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="131.9" y="323.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="134.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="131.9" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="131.9" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="131.9" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="134.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="131.9" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="134.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="131.9" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="134.9" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="131.9" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="134.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.31%)</title><rect x="132.2" y="339.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.31%)</title><rect x="132.2" y="323.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.31%)</title><rect x="132.2" y="307.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (12 samples, 0.31%)</title><rect x="132.2" y="291.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (12 samples, 0.31%)</title><rect x="132.2" y="275.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="135.2" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.29%)</title><rect x="132.5" y="259.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="135.5" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38147] (55 samples, 1.43%)</title><rect x="135.9" y="451.0" width="16.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="138.9" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (55 samples, 1.43%)</title><rect x="135.9" y="435.0" width="16.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (39 samples, 1.02%)</title><rect x="135.9" y="419.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="138.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="135.9" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="138.9" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="135.9" y="387.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="138.9" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="135.9" y="371.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="138.9" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="135.9" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="138.9" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="135.9" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="138.9" y="350.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="135.9" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="138.9" y="334.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="135.9" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="138.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (38 samples, 0.99%)</title><rect x="136.2" y="403.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (38 samples, 0.99%)</title><rect x="136.2" y="387.0" width="11.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="139.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (38 samples, 0.99%)</title><rect x="136.2" y="371.0" width="11.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="139.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (33 samples, 0.86%)</title><rect x="136.2" y="355.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="139.2" y="366.0"></text>
</g>
<g>
<title>kevent (30 samples, 0.78%)</title><rect x="137.1" y="339.0" width="9.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="140.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="146.4" y="355.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="146.4" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="146.4" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="146.4" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="146.4" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="146.7" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="147.0" y="355.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.0" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="147.0" y="339.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="150.0" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="147.0" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.0" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="147.3" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.3" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="147.3" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="150.3" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="147.3" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="147.6" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (16 samples, 0.42%)</title><rect x="147.9" y="419.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (16 samples, 0.42%)</title><rect x="147.9" y="403.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.21%)</title><rect x="147.9" y="387.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4 samples, 0.10%)</title><rect x="147.9" y="371.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.10%)</title><rect x="147.9" y="355.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.9" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (4 samples, 0.10%)</title><rect x="147.9" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.10%)</title><rect x="147.9" y="323.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (4 samples, 0.10%)</title><rect x="147.9" y="307.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.10%)</title><rect x="147.9" y="291.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.10%)</title><rect x="147.9" y="275.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.10%)</title><rect x="147.9" y="259.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.10%)</title><rect x="147.9" y="243.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="147.9" y="227.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="147.9" y="211.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="147.9" y="195.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.9" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="147.9" y="179.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.9" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="147.9" y="163.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="150.9" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="147.9" y="147.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="150.9" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="147.9" y="131.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="150.9" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title><rect x="148.5" y="227.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title><rect x="148.5" y="211.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="148.8" y="195.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.8" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="149.1" y="371.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.1" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.05%)</title><rect x="149.8" y="371.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="150.1" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="150.1" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="153.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (8 samples, 0.21%)</title><rect x="150.4" y="387.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (8 samples, 0.21%)</title><rect x="150.4" y="371.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (8 samples, 0.21%)</title><rect x="150.4" y="355.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="150.4" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="153.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="150.4" y="323.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="150.4" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="150.4" y="291.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.4" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="150.4" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="153.4" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.03%)</title><rect x="150.4" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.4" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="150.7" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="153.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="150.7" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="153.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.03%)</title><rect x="150.7" y="275.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="153.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.16%)</title><rect x="151.0" y="339.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.16%)</title><rect x="151.0" y="323.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.16%)</title><rect x="151.0" y="307.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (6 samples, 0.16%)</title><rect x="151.0" y="291.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (6 samples, 0.16%)</title><rect x="151.0" y="275.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="154.0" y="286.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="151.0" y="259.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="154.0" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="151.0" y="243.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="154.0" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.13%)</title><rect x="151.3" y="259.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="154.3" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=37379] (94 samples, 2.45%)</title><rect x="152.8" y="451.0" width="29.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="155.8" y="462.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (94 samples, 2.45%)</title><rect x="152.8" y="435.0" width="29.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.8" y="446.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (72 samples, 1.88%)</title><rect x="152.8" y="419.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.8" y="430.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (4 samples, 0.10%)</title><rect x="152.8" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.05%)</title><rect x="153.5" y="387.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.05%)</title><rect x="153.5" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.05%)</title><rect x="153.5" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="153.5" y="339.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="153.5" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="156.5" y="334.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.05%)</title><rect x="154.1" y="403.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="157.1" y="414.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="154.1" y="387.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="157.1" y="398.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="154.4" y="387.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="157.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (66 samples, 1.72%)</title><rect x="154.7" y="403.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="157.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (66 samples, 1.72%)</title><rect x="154.7" y="387.0" width="20.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (66 samples, 1.72%)</title><rect x="154.7" y="371.0" width="20.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (63 samples, 1.64%)</title><rect x="154.7" y="355.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="157.7" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="155.9" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.9" y="350.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="155.9" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="158.9" y="334.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="155.9" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="158.9" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="155.9" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="158.9" y="302.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="155.9" y="275.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.9" y="286.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="155.9" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="158.9" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="155.9" y="243.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="158.9" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="156.2" y="339.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="159.2" y="350.0"></text>
</g>
<g>
<title>kevent (57 samples, 1.49%)</title><rect x="156.5" y="339.0" width="17.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="159.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.08%)</title><rect x="174.1" y="355.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.1" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="174.1" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.1" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="174.1" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="177.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.05%)</title><rect x="174.4" y="339.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.05%)</title><rect x="174.4" y="323.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.05%)</title><rect x="174.4" y="307.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="177.4" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.05%)</title><rect x="174.4" y="291.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.4" y="302.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="174.7" y="275.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="177.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (22 samples, 0.57%)</title><rect x="175.0" y="419.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.57%)</title><rect x="175.0" y="403.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7 samples, 0.18%)</title><rect x="175.0" y="387.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 0.08%)</title><rect x="175.0" y="371.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.08%)</title><rect x="175.0" y="355.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="178.0" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (3 samples, 0.08%)</title><rect x="175.0" y="339.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="175.0" y="323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.0" y="334.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="175.0" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (2 samples, 0.05%)</title><rect x="175.3" y="323.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.05%)</title><rect x="175.3" y="307.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="178.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.05%)</title><rect x="175.3" y="291.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.05%)</title><rect x="175.3" y="275.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="175.3" y="259.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="175.3" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="178.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="175.3" y="227.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="175.3" y="211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="175.3" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.3" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="175.3" y="179.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="175.6" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="175.6" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="175.6" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="175.6" y="211.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="175.6" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.6" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="175.6" y="179.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="178.6" y="190.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="175.6" y="163.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="178.6" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="175.6" y="147.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="178.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.05%)</title><rect x="175.9" y="371.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="176.2" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="176.5" y="371.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="176.5" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="176.5" y="339.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="176.9" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="176.9" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (15 samples, 0.39%)</title><rect x="177.2" y="387.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (15 samples, 0.39%)</title><rect x="177.2" y="371.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (15 samples, 0.39%)</title><rect x="177.2" y="355.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="180.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="177.2" y="339.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="177.2" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="177.2" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="180.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (1 samples, 0.03%)</title><rect x="177.2" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="177.2" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.2" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (1 samples, 0.03%)</title><rect x="177.2" y="259.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.37%)</title><rect x="177.5" y="339.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.37%)</title><rect x="177.5" y="323.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="180.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.37%)</title><rect x="177.5" y="307.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 0.37%)</title><rect x="177.5" y="291.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="180.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 0.37%)</title><rect x="177.5" y="275.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.5" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (13 samples, 0.34%)</title><rect x="177.8" y="259.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="180.8" y="270.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=37123] (76 samples, 1.98%)</title><rect x="181.8" y="451.0" width="23.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="184.8" y="462.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (76 samples, 1.98%)</title><rect x="181.8" y="435.0" width="23.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.8" y="446.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (55 samples, 1.43%)</title><rect x="181.8" y="419.0" width="16.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.8" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="181.8" y="403.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.03%)</title><rect x="182.1" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (53 samples, 1.38%)</title><rect x="182.4" y="403.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="185.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (53 samples, 1.38%)</title><rect x="182.4" y="387.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (53 samples, 1.38%)</title><rect x="182.4" y="371.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="185.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (47 samples, 1.23%)</title><rect x="182.4" y="355.0" width="14.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.4" y="366.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="183.9" y="339.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="186.9" y="350.0"></text>
</g>
<g>
<title>kevent (41 samples, 1.07%)</title><rect x="184.2" y="339.0" width="12.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="187.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.08%)</title><rect x="196.9" y="355.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.9" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="196.9" y="339.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.9" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="196.9" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="199.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="197.5" y="339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="200.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="197.5" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="197.5" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="197.5" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="200.5" y="302.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="197.5" y="275.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="200.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="197.8" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="200.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="198.1" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.1" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="198.1" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.1" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="198.1" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.1" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="198.4" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="201.4" y="334.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="198.4" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.4" y="318.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="198.4" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (21 samples, 0.55%)</title><rect x="198.7" y="419.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.7" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (19 samples, 0.50%)</title><rect x="198.7" y="403.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.16%)</title><rect x="199.0" y="387.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.16%)</title><rect x="199.0" y="371.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.16%)</title><rect x="199.0" y="355.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.0" y="366.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6 samples, 0.16%)</title><rect x="199.0" y="339.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="199.0" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="202.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="199.0" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.0" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="199.0" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="199.0" y="275.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.0" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="199.0" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.13%)</title><rect x="199.3" y="323.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (5 samples, 0.13%)</title><rect x="199.3" y="307.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="202.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.08%)</title><rect x="199.6" y="291.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.08%)</title><rect x="199.6" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="199.6" y="259.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="199.6" y="243.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="199.6" y="227.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="202.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="199.6" y="211.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="202.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="199.6" y="195.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="199.6" y="179.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.6" y="190.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="199.6" y="163.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="202.6" y="174.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="199.6" y="147.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="202.6" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="199.6" y="131.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="202.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="200.3" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.3" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="200.3" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="200.3" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="200.3" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.3" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="200.3" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.3" y="206.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="200.3" y="179.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="203.3" y="190.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="200.3" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="203.3" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="200.3" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="203.3" y="158.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="200.6" y="291.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="203.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.31%)</title><rect x="200.9" y="387.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.31%)</title><rect x="200.9" y="371.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.31%)</title><rect x="200.9" y="355.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="200.9" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="200.9" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="200.9" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="200.9" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="200.9" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.9" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="200.9" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="200.9" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.9" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="200.9" y="227.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="203.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.29%)</title><rect x="201.2" y="339.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.29%)</title><rect x="201.2" y="323.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.29%)</title><rect x="201.2" y="307.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (11 samples, 0.29%)</title><rect x="201.2" y="291.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (11 samples, 0.29%)</title><rect x="201.2" y="275.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.2" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (10 samples, 0.26%)</title><rect x="201.5" y="259.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="204.5" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="204.6" y="403.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="207.6" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="204.6" y="387.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="207.6" y="398.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="204.9" y="387.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="207.9" y="398.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="204.9" y="371.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="207.9" y="382.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="204.9" y="355.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="207.9" y="366.0"></text>
</g>
<g>
<title>[async_worker_0 tid=29699] (425 samples, 11.09%)</title><rect x="205.2" y="451.0" width="130.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="208.2" y="462.0">[async_worker_0 ..</text>
</g>
<g>
<title>java/lang/Thread.run (425 samples, 11.09%)</title><rect x="205.2" y="435.0" width="130.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.2" y="446.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (425 samples, 11.09%)</title><rect x="205.2" y="419.0" width="130.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.2" y="430.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (425 samples, 11.09%)</title><rect x="205.2" y="403.0" width="130.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.2" y="414.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="205.2" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="205.2" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="205.2" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 0.55%)</title><rect x="205.5" y="387.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (21 samples, 0.55%)</title><rect x="205.5" y="371.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 0.52%)</title><rect x="205.5" y="355.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (20 samples, 0.52%)</title><rect x="205.5" y="339.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (20 samples, 0.52%)</title><rect x="205.5" y="323.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.5" y="334.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="205.5" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="208.5" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (19 samples, 0.50%)</title><rect x="205.8" y="307.0" width="5.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="208.8" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.50%)</title><rect x="205.8" y="291.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="208.8" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.50%)</title><rect x="205.8" y="275.0" width="5.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="208.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="211.6" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="211.6" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="211.6" y="323.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="214.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="211.6" y="307.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (403 samples, 10.51%)</title><rect x="212.0" y="387.0" width="124.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.0" y="398.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (403 samples, 10.51%)</title><rect x="212.0" y="371.0" width="124.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.0" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (36 samples, 0.94%)</title><rect x="212.3" y="355.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="212.3" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="212.3" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="212.3" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (35 samples, 0.91%)</title><rect x="212.6" y="339.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="212.6" y="323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (34 samples, 0.89%)</title><rect x="212.9" y="323.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (34 samples, 0.89%)</title><rect x="212.9" y="307.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (34 samples, 0.89%)</title><rect x="212.9" y="291.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (34 samples, 0.89%)</title><rect x="212.9" y="275.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (34 samples, 0.89%)</title><rect x="212.9" y="259.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.08%)</title><rect x="212.9" y="243.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="215.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.08%)</title><rect x="212.9" y="227.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.08%)</title><rect x="212.9" y="211.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="215.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.08%)</title><rect x="212.9" y="195.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.9" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="212.9" y="179.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.9" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="213.5" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="216.5" y="174.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="213.5" y="147.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="216.5" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (31 samples, 0.81%)</title><rect x="213.8" y="243.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="216.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (31 samples, 0.81%)</title><rect x="213.8" y="227.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (31 samples, 0.81%)</title><rect x="213.8" y="211.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.8" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (31 samples, 0.81%)</title><rect x="213.8" y="195.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.8" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (31 samples, 0.81%)</title><rect x="213.8" y="179.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.8" y="190.0"></text>
</g>
<g>
<title>write (31 samples, 0.81%)</title><rect x="213.8" y="163.0" width="9.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="216.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (366 samples, 9.55%)</title><rect x="223.3" y="355.0" width="112.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.3" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (366 samples, 9.55%)</title><rect x="223.3" y="339.0" width="112.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.3" y="350.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (366 samples, 9.55%)</title><rect x="223.3" y="323.0" width="112.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.3" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (362 samples, 9.44%)</title><rect x="224.6" y="307.0" width="111.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="227.6" y="318.0">Java_org_rock..</text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="224.6" y="291.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="227.6" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (361 samples, 9.42%)</title><rect x="224.9" y="291.0" width="111.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="227.9" y="302.0">rocksdb_put_h..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="224.9" y="275.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="227.9" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="224.9" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="227.9" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="224.9" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (360 samples, 9.39%)</title><rect x="225.2" y="275.0" width="110.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="228.2" y="286.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (359 samples, 9.37%)</title><rect x="225.5" y="259.0" width="110.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="228.5" y="270.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (358 samples, 9.34%)</title><rect x="225.5" y="243.0" width="110.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="228.5" y="254.0">rocksdb::DB::..</text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="225.8" y="227.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="228.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (355 samples, 9.26%)</title><rect x="226.1" y="227.0" width="109.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="229.1" y="238.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (355 samples, 9.26%)</title><rect x="226.1" y="211.0" width="109.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="229.1" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (23 samples, 0.60%)</title><rect x="226.4" y="195.0" width="7.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="229.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (23 samples, 0.60%)</title><rect x="226.4" y="179.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="229.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (23 samples, 0.60%)</title><rect x="226.4" y="163.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="229.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (23 samples, 0.60%)</title><rect x="226.4" y="147.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="229.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (23 samples, 0.60%)</title><rect x="226.4" y="131.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="229.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="226.4" y="115.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="229.4" y="126.0"></text>
</g>
<g>
<title>write (22 samples, 0.57%)</title><rect x="226.7" y="115.0" width="6.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="229.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="233.5" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="236.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="233.5" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="236.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="233.5" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="236.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="233.5" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="236.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="233.5" y="131.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="236.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="233.5" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="236.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="233.5" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="236.5" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="233.5" y="83.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (14 samples, 0.37%)</title><rect x="233.8" y="195.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="236.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (12 samples, 0.31%)</title><rect x="234.4" y="179.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="237.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="234.7" y="163.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="237.7" y="174.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="234.7" y="147.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="237.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="235.0" y="147.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="238.0" y="158.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="235.0" y="131.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="238.0" y="142.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="235.0" y="115.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="238.0" y="126.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="235.0" y="99.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="238.0" y="110.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="235.0" y="83.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="238.0" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="235.0" y="67.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="238.0" y="78.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="235.0" y="51.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="238.0" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (9 samples, 0.23%)</title><rect x="235.3" y="131.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="238.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.23%)</title><rect x="235.3" y="115.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="238.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.18%)</title><rect x="236.0" y="99.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="239.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.08%)</title><rect x="237.2" y="83.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="240.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.08%)</title><rect x="237.2" y="67.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="240.2" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="237.5" y="51.0" width="0.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="240.5" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (108 samples, 2.82%)</title><rect x="238.1" y="195.0" width="33.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="241.1" y="206.0">ro..</text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="250.4" y="179.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="253.4" y="190.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (4 samples, 0.10%)</title><rect x="250.7" y="179.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="253.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (63 samples, 1.64%)</title><rect x="252.0" y="179.0" width="19.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="255.0" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (62 samples, 1.62%)</title><rect x="252.0" y="163.0" width="19.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="255.0" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="271.1" y="163.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="274.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="271.1" y="147.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="274.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="271.1" y="131.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="274.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (199 samples, 5.19%)</title><rect x="271.4" y="195.0" width="61.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="274.4" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (198 samples, 5.17%)</title><rect x="271.4" y="179.0" width="60.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="274.4" y="190.0">rocksd..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (167 samples, 4.36%)</title><rect x="279.7" y="163.0" width="51.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="282.7" y="174.0">si_mo..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="331.1" y="163.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="334.1" y="174.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="331.1" y="147.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="334.1" y="158.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="331.1" y="131.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="334.1" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.08%)</title><rect x="331.4" y="163.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="334.4" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="331.4" y="147.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="334.4" y="158.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="332.3" y="179.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="335.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.10%)</title><rect x="332.6" y="195.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="335.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.10%)</title><rect x="332.6" y="179.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="335.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.08%)</title><rect x="332.9" y="163.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="335.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="332.9" y="147.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="335.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="333.9" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="336.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="333.9" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="336.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (4 samples, 0.10%)</title><rect x="334.2" y="195.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="337.2" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.10%)</title><rect x="334.2" y="179.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="337.2" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="334.2" y="163.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="337.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="335.4" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="338.4" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="335.4" y="211.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="338.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1 samples, 0.03%)</title><rect x="335.7" y="243.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="338.7" y="254.0"></text>
</g>
<g>
<title>[async_worker_1 tid=35075] (410 samples, 10.70%)</title><rect x="336.0" y="451.0" width="126.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="339.0" y="462.0">[async_worker_1 ..</text>
</g>
<g>
<title>java/lang/Thread.run (410 samples, 10.70%)</title><rect x="336.0" y="435.0" width="126.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.0" y="446.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (410 samples, 10.70%)</title><rect x="336.0" y="419.0" width="126.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.0" y="430.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (410 samples, 10.70%)</title><rect x="336.0" y="403.0" width="126.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.0" y="414.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="336.0" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="336.0" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="336.0" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 0.39%)</title><rect x="336.3" y="387.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="339.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (15 samples, 0.39%)</title><rect x="336.3" y="371.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 0.31%)</title><rect x="336.3" y="355.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="339.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 0.31%)</title><rect x="336.3" y="339.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.3" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 0.31%)</title><rect x="336.3" y="323.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.3" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.29%)</title><rect x="336.6" y="307.0" width="3.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="339.6" y="318.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="336.6" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="339.6" y="302.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="336.6" y="275.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="339.6" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.23%)</title><rect x="336.9" y="291.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="339.9" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.23%)</title><rect x="336.9" y="275.0" width="2.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="339.9" y="286.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.03%)</title><rect x="339.7" y="291.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="342.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.08%)</title><rect x="340.0" y="355.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.08%)</title><rect x="340.0" y="339.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.08%)</title><rect x="340.0" y="323.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.08%)</title><rect x="340.0" y="307.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.0" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.08%)</title><rect x="340.0" y="291.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="343.0" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.08%)</title><rect x="340.0" y="275.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="343.0" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="340.0" y="259.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="343.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (394 samples, 10.28%)</title><rect x="340.9" y="387.0" width="121.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="343.9" y="398.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (394 samples, 10.28%)</title><rect x="340.9" y="371.0" width="121.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.9" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (23 samples, 0.60%)</title><rect x="341.2" y="355.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (23 samples, 0.60%)</title><rect x="341.2" y="339.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.05%)</title><rect x="341.2" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (21 samples, 0.55%)</title><rect x="341.9" y="323.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.9" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (21 samples, 0.55%)</title><rect x="341.9" y="307.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (21 samples, 0.55%)</title><rect x="341.9" y="291.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.9" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (21 samples, 0.55%)</title><rect x="341.9" y="275.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (21 samples, 0.55%)</title><rect x="341.9" y="259.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="341.9" y="243.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="344.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="341.9" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="341.9" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="344.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="341.9" y="195.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (20 samples, 0.52%)</title><rect x="342.2" y="243.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="345.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (20 samples, 0.52%)</title><rect x="342.2" y="227.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="345.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (20 samples, 0.52%)</title><rect x="342.2" y="211.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (20 samples, 0.52%)</title><rect x="342.2" y="195.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="345.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (20 samples, 0.52%)</title><rect x="342.2" y="179.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.2" y="190.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="342.8" y="163.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="345.8" y="174.0"></text>
</g>
<g>
<title>write (17 samples, 0.44%)</title><rect x="343.1" y="163.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="346.1" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (370 samples, 9.65%)</title><rect x="348.3" y="355.0" width="113.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.3" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (369 samples, 9.63%)</title><rect x="348.3" y="339.0" width="113.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.3" y="350.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (369 samples, 9.63%)</title><rect x="348.3" y="323.0" width="113.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.3" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (368 samples, 9.60%)</title><rect x="348.6" y="307.0" width="113.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="351.6" y="318.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="348.6" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="351.6" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (367 samples, 9.57%)</title><rect x="348.9" y="291.0" width="113.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="351.9" y="302.0">rocksdb_put_he..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="348.9" y="275.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="351.9" y="286.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="349.3" y="275.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="352.3" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="349.3" y="259.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="352.3" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="349.6" y="275.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="352.6" y="286.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="349.6" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="352.6" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="349.9" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="352.9" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="350.2" y="275.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="353.2" y="286.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="350.2" y="259.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="353.2" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.05%)</title><rect x="350.2" y="243.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="353.2" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="350.2" y="227.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="353.2" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="350.5" y="211.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="353.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (361 samples, 9.42%)</title><rect x="350.8" y="275.0" width="111.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="353.8" y="286.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (361 samples, 9.42%)</title><rect x="350.8" y="259.0" width="111.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="353.8" y="270.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (361 samples, 9.42%)</title><rect x="350.8" y="243.0" width="111.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="353.8" y="254.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (360 samples, 9.39%)</title><rect x="350.8" y="227.0" width="110.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.8" y="238.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (360 samples, 9.39%)</title><rect x="350.8" y="211.0" width="110.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.8" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (25 samples, 0.65%)</title><rect x="351.7" y="195.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="354.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (25 samples, 0.65%)</title><rect x="351.7" y="179.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="354.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (25 samples, 0.65%)</title><rect x="351.7" y="163.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="354.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (22 samples, 0.57%)</title><rect x="351.7" y="147.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (22 samples, 0.57%)</title><rect x="351.7" y="131.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="354.7" y="142.0"></text>
</g>
<g>
<title>write (21 samples, 0.55%)</title><rect x="352.0" y="115.0" width="6.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="355.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="358.5" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="361.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.05%)</title><rect x="358.8" y="147.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="361.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.05%)</title><rect x="358.8" y="131.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="361.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="359.4" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="362.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="359.4" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="359.4" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="359.4" y="147.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="359.4" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="362.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="359.4" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="362.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (16 samples, 0.42%)</title><rect x="359.7" y="195.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.7" y="206.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="360.3" y="179.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="363.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="360.6" y="179.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (12 samples, 0.31%)</title><rect x="361.0" y="179.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="364.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="361.3" y="163.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="364.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="361.3" y="147.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="364.3" y="158.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="361.3" y="131.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="364.3" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="361.6" y="131.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="364.6" y="142.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="361.6" y="115.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="364.6" y="126.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.05%)</title><rect x="361.6" y="99.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="364.6" y="110.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="361.6" y="83.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="364.6" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="361.6" y="67.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="364.6" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="361.9" y="51.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="364.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.21%)</title><rect x="362.2" y="131.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="365.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.21%)</title><rect x="362.2" y="115.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="365.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.21%)</title><rect x="362.2" y="99.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="365.2" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="363.4" y="83.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="366.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.08%)</title><rect x="363.7" y="83.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="366.7" y="94.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="364.0" y="67.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="367.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="364.3" y="67.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="367.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (111 samples, 2.90%)</title><rect x="364.6" y="195.0" width="34.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="367.6" y="206.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (1 samples, 0.03%)</title><rect x="376.3" y="179.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="379.3" y="190.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="376.7" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="379.7" y="190.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="376.7" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="379.7" y="174.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="376.7" y="147.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="379.7" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (71 samples, 1.85%)</title><rect x="377.0" y="179.0" width="21.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.0" y="190.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (67 samples, 1.75%)</title><rect x="377.0" y="163.0" width="20.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="380.0" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.10%)</title><rect x="397.6" y="163.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="400.6" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.05%)</title><rect x="397.9" y="147.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="400.9" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.05%)</title><rect x="397.9" y="131.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="400.9" y="142.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="398.5" y="147.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="401.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (194 samples, 5.06%)</title><rect x="398.8" y="195.0" width="59.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="401.8" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (194 samples, 5.06%)</title><rect x="398.8" y="179.0" width="59.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="401.8" y="190.0">rocksd..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="407.7" y="163.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="410.7" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (158 samples, 4.12%)</title><rect x="408.1" y="163.0" width="48.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="411.1" y="174.0">si_m..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.08%)</title><rect x="456.7" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="459.7" y="174.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="457.0" y="147.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="460.0" y="158.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.05%)</title><rect x="457.0" y="131.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="460.0" y="142.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (3 samples, 0.08%)</title><rect x="457.6" y="163.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="460.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.08%)</title><rect x="457.6" y="147.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="460.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (2 samples, 0.05%)</title><rect x="458.5" y="195.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="461.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.05%)</title><rect x="458.5" y="179.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="461.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.05%)</title><rect x="458.5" y="163.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="461.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.05%)</title><rect x="458.5" y="147.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="461.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.05%)</title><rect x="459.2" y="195.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="462.2" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.05%)</title><rect x="459.2" y="179.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="462.2" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.05%)</title><rect x="459.2" y="163.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="462.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="459.8" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="462.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="459.8" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="462.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (4 samples, 0.10%)</title><rect x="460.1" y="195.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="463.1" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.10%)</title><rect x="460.1" y="179.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="463.1" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="460.1" y="163.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="463.1" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="461.3" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="464.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="461.6" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="464.6" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="461.6" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="464.6" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="461.6" y="195.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="464.6" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="461.6" y="179.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="464.6" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="461.6" y="163.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="464.6" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="461.6" y="147.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="464.6" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="461.6" y="131.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="464.6" y="142.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.03%)</title><rect x="461.6" y="115.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="464.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="461.9" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="350.0"></text>
</g>
<g>
<title>[async_worker_2 tid=29187] (407 samples, 10.62%)</title><rect x="462.2" y="451.0" width="125.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="465.2" y="462.0">[async_worker_2..</text>
</g>
<g>
<title>java/lang/Thread.run (407 samples, 10.62%)</title><rect x="462.2" y="435.0" width="125.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.2" y="446.0">java/lang/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (407 samples, 10.62%)</title><rect x="462.2" y="419.0" width="125.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="465.2" y="430.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (407 samples, 10.62%)</title><rect x="462.2" y="403.0" width="125.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.2" y="414.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 0.44%)</title><rect x="462.2" y="387.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="465.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (17 samples, 0.44%)</title><rect x="462.2" y="371.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 0.37%)</title><rect x="462.2" y="355.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.34%)</title><rect x="462.5" y="339.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.34%)</title><rect x="462.5" y="323.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="465.5" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.34%)</title><rect x="462.5" y="307.0" width="4.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="465.5" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.31%)</title><rect x="462.5" y="291.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="465.5" y="302.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="462.5" y="275.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="465.5" y="286.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="462.5" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="465.5" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.29%)</title><rect x="462.9" y="275.0" width="3.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="465.9" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="466.2" y="291.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="469.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.05%)</title><rect x="466.5" y="355.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.05%)</title><rect x="466.5" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.05%)</title><rect x="466.5" y="323.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="469.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="466.5" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="466.5" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="469.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="466.5" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="469.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="466.5" y="259.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="469.5" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="466.5" y="243.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="469.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="466.5" y="227.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="469.5" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="467.2" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="467.2" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="467.2" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="467.2" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.2" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="467.2" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.2" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="467.2" y="275.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="470.2" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="467.2" y="259.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="470.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (390 samples, 10.17%)</title><rect x="467.5" y="387.0" width="120.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.5" y="398.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (390 samples, 10.17%)</title><rect x="467.5" y="371.0" width="120.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.5" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (24 samples, 0.63%)</title><rect x="467.5" y="355.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title><rect x="467.5" y="339.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="470.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="467.5" y="323.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="470.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="467.5" y="307.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.5" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="467.8" y="291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="470.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (22 samples, 0.57%)</title><rect x="468.1" y="339.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 0.57%)</title><rect x="468.1" y="323.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="471.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 0.57%)</title><rect x="468.1" y="307.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (22 samples, 0.57%)</title><rect x="468.1" y="291.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (22 samples, 0.57%)</title><rect x="468.1" y="275.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (22 samples, 0.57%)</title><rect x="468.1" y="259.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (22 samples, 0.57%)</title><rect x="468.1" y="243.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (22 samples, 0.57%)</title><rect x="468.1" y="227.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.1" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="468.1" y="211.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.1" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.03%)</title><rect x="468.1" y="195.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.1" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="468.1" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.1" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.03%)</title><rect x="468.1" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.1" y="174.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.03%)</title><rect x="468.1" y="147.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.1" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="468.1" y="131.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.1" y="142.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="468.1" y="115.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.1" y="126.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (21 samples, 0.55%)</title><rect x="468.4" y="211.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (21 samples, 0.55%)</title><rect x="468.4" y="195.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (21 samples, 0.55%)</title><rect x="468.4" y="179.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.4" y="190.0"></text>
</g>
<g>
<title>write (21 samples, 0.55%)</title><rect x="468.4" y="163.0" width="6.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="471.4" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (366 samples, 9.55%)</title><rect x="474.9" y="355.0" width="112.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="477.9" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (365 samples, 9.52%)</title><rect x="474.9" y="339.0" width="112.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.9" y="350.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (365 samples, 9.52%)</title><rect x="474.9" y="323.0" width="112.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="477.9" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (365 samples, 9.52%)</title><rect x="474.9" y="307.0" width="112.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="477.9" y="318.0">Java_org_rocks..</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="474.9" y="291.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="477.9" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (364 samples, 9.50%)</title><rect x="475.2" y="291.0" width="112.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="478.2" y="302.0">rocksdb_put_he..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="475.2" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="478.2" y="286.0"></text>
</g>
<g>
<title>__ulock_wake (1 samples, 0.03%)</title><rect x="475.5" y="275.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="478.5" y="286.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="475.8" y="275.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="478.8" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="475.8" y="259.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="478.8" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="476.1" y="275.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="479.1" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="476.1" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="479.1" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="476.4" y="275.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="479.4" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="476.4" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="479.4" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="476.4" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="479.4" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="476.4" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="479.4" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="476.4" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="479.4" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="476.4" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="479.4" y="206.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="476.4" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="479.4" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="476.7" y="275.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="479.7" y="286.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="476.7" y="259.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="479.7" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="476.7" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="479.7" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="476.7" y="227.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="479.7" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="476.7" y="211.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="479.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (358 samples, 9.34%)</title><rect x="477.0" y="275.0" width="110.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="480.0" y="286.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (358 samples, 9.34%)</title><rect x="477.0" y="259.0" width="110.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="480.0" y="270.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (358 samples, 9.34%)</title><rect x="477.0" y="243.0" width="110.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="480.0" y="254.0">rocksdb::DB::..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (352 samples, 9.18%)</title><rect x="477.0" y="227.0" width="108.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="480.0" y="238.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (351 samples, 9.16%)</title><rect x="477.0" y="211.0" width="108.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.0" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (20 samples, 0.52%)</title><rect x="478.9" y="195.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="481.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (20 samples, 0.52%)</title><rect x="478.9" y="179.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="481.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (19 samples, 0.50%)</title><rect x="479.2" y="163.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="482.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (18 samples, 0.47%)</title><rect x="479.2" y="147.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.2" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="479.2" y="131.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="482.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (17 samples, 0.44%)</title><rect x="479.5" y="131.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="482.5" y="142.0"></text>
</g>
<g>
<title>write (17 samples, 0.44%)</title><rect x="479.5" y="115.0" width="5.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="482.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="484.7" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="487.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="484.7" y="131.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="487.7" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="484.7" y="115.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="487.7" y="126.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.03%)</title><rect x="485.0" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.0" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="485.0" y="179.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="488.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.05%)</title><rect x="485.3" y="195.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="488.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="485.3" y="179.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="488.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="485.3" y="163.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="485.3" y="147.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="488.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.05%)</title><rect x="485.3" y="131.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="488.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="485.6" y="115.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="488.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (21 samples, 0.55%)</title><rect x="485.9" y="195.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="488.9" y="206.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="486.6" y="179.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="489.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (18 samples, 0.47%)</title><rect x="486.9" y="179.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="489.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.44%)</title><rect x="487.2" y="163.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="490.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (17 samples, 0.44%)</title><rect x="487.2" y="147.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="490.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (13 samples, 0.34%)</title><rect x="487.5" y="131.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="490.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="487.8" y="115.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="490.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (11 samples, 0.29%)</title><rect x="488.1" y="115.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="491.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (10 samples, 0.26%)</title><rect x="488.4" y="99.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="491.4" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="490.3" y="83.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="493.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.08%)</title><rect x="490.6" y="83.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="493.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.08%)</title><rect x="490.6" y="67.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="493.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="490.9" y="51.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="493.9" y="62.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.05%)</title><rect x="491.5" y="131.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="492.1" y="131.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="495.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (103 samples, 2.69%)</title><rect x="492.4" y="195.0" width="31.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="495.4" y="206.0">ro..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (67 samples, 1.75%)</title><rect x="503.2" y="179.0" width="20.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.2" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (65 samples, 1.70%)</title><rect x="503.2" y="163.0" width="20.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="506.2" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.05%)</title><rect x="523.2" y="163.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="526.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="523.2" y="147.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="526.2" y="158.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="523.5" y="147.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="526.5" y="158.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="523.8" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="526.8" y="190.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (1 samples, 0.03%)</title><rect x="523.8" y="163.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="526.8" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (1 samples, 0.03%)</title><rect x="523.8" y="147.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="526.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (188 samples, 4.90%)</title><rect x="524.1" y="195.0" width="57.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="527.1" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (187 samples, 4.88%)</title><rect x="524.4" y="179.0" width="57.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="527.4" y="190.0">rocksd..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (155 samples, 4.04%)</title><rect x="533.7" y="163.0" width="47.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="536.7" y="174.0">si_m..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.05%)</title><rect x="581.4" y="163.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.4" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="581.4" y="147.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="584.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="582.0" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="585.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="582.0" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="585.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="582.0" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="585.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="582.0" y="147.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="585.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.05%)</title><rect x="582.3" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="585.3" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="582.6" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="585.6" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="582.6" y="163.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="585.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.13%)</title><rect x="582.9" y="195.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.9" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.13%)</title><rect x="582.9" y="179.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.9" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="582.9" y="163.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="585.9" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="584.1" y="163.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="587.1" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="584.5" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="587.5" y="206.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="584.8" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="587.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="585.1" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="588.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="585.4" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="588.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="585.7" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="588.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="585.7" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="588.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="586.0" y="227.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.0" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.05%)</title><rect x="586.0" y="211.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.0" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (2 samples, 0.05%)</title><rect x="586.0" y="195.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="589.0" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="586.3" y="179.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="589.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.05%)</title><rect x="586.6" y="227.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.6" y="238.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="586.6" y="211.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="589.6" y="222.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="586.6" y="195.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="589.6" y="206.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="586.6" y="179.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="589.6" y="190.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="586.9" y="211.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="589.9" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="587.2" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.2" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="587.2" y="323.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="590.2" y="334.0"></text>
</g>
<g>
<title>[async_worker_3 tid=36099] (427 samples, 11.14%)</title><rect x="587.5" y="451.0" width="131.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="590.5" y="462.0">[async_worker_3 ..</text>
</g>
<g>
<title>java/lang/Thread.run (427 samples, 11.14%)</title><rect x="587.5" y="435.0" width="131.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.5" y="446.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (427 samples, 11.14%)</title><rect x="587.5" y="419.0" width="131.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.5" y="430.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (427 samples, 11.14%)</title><rect x="587.5" y="403.0" width="131.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="590.5" y="414.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (20 samples, 0.52%)</title><rect x="587.5" y="387.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (20 samples, 0.52%)</title><rect x="587.5" y="371.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="590.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 0.37%)</title><rect x="587.5" y="355.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="590.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="587.8" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="590.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="587.8" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="587.8" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="590.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="587.8" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="587.8" y="275.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="590.8" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="587.8" y="259.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="590.8" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="587.8" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.8" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="587.8" y="227.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="590.8" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="587.8" y="211.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="590.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 0.31%)</title><rect x="588.1" y="339.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="591.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 0.31%)</title><rect x="588.1" y="323.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.1" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 0.31%)</title><rect x="588.1" y="307.0" width="3.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="591.1" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.31%)</title><rect x="588.1" y="291.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="591.1" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.31%)</title><rect x="588.1" y="275.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="591.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.05%)</title><rect x="591.8" y="355.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="594.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.05%)</title><rect x="591.8" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.05%)</title><rect x="591.8" y="323.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="591.8" y="307.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="591.8" y="291.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="594.8" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="591.8" y="275.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.8" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.05%)</title><rect x="591.8" y="259.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="594.8" y="270.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="591.8" y="243.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="594.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="591.8" y="227.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="594.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.08%)</title><rect x="592.5" y="355.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.08%)</title><rect x="592.5" y="339.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="595.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.08%)</title><rect x="592.5" y="323.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="595.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.08%)</title><rect x="592.5" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="595.5" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.08%)</title><rect x="592.5" y="291.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.5" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.05%)</title><rect x="592.8" y="275.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="595.8" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="592.8" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="595.8" y="270.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="592.8" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="595.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="593.1" y="259.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="596.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="593.4" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="596.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (407 samples, 10.62%)</title><rect x="593.7" y="387.0" width="125.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.7" y="398.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (407 samples, 10.62%)</title><rect x="593.7" y="371.0" width="125.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="596.7" y="382.0">ru/mail/polis/s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 0.86%)</title><rect x="593.7" y="355.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="596.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (31 samples, 0.81%)</title><rect x="594.3" y="339.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="594.3" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.3" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.78%)</title><rect x="594.6" y="323.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="597.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.78%)</title><rect x="594.6" y="307.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (30 samples, 0.78%)</title><rect x="594.6" y="291.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (30 samples, 0.78%)</title><rect x="594.6" y="275.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="597.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (30 samples, 0.78%)</title><rect x="594.6" y="259.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="594.6" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="594.6" y="227.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="597.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="594.6" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="594.6" y="195.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="594.6" y="179.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 0.76%)</title><rect x="594.9" y="243.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="597.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (29 samples, 0.76%)</title><rect x="594.9" y="227.0" width="8.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="597.9" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (29 samples, 0.76%)</title><rect x="594.9" y="211.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (29 samples, 0.76%)</title><rect x="594.9" y="195.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (29 samples, 0.76%)</title><rect x="594.9" y="179.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.9" y="190.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="595.2" y="163.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="598.2" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="595.2" y="147.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="598.2" y="158.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="595.5" y="163.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="598.5" y="174.0"></text>
</g>
<g>
<title>write (26 samples, 0.68%)</title><rect x="595.8" y="163.0" width="8.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="598.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (374 samples, 9.76%)</title><rect x="603.8" y="355.0" width="115.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="606.8" y="366.0">ru/mail/polis/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (374 samples, 9.76%)</title><rect x="603.8" y="339.0" width="115.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="606.8" y="350.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (373 samples, 9.73%)</title><rect x="604.2" y="323.0" width="114.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="607.2" y="334.0">org/rocksdb/Ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (368 samples, 9.60%)</title><rect x="605.7" y="307.0" width="113.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="608.7" y="318.0">Java_org_rocks..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (368 samples, 9.60%)</title><rect x="605.7" y="291.0" width="113.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="608.7" y="302.0">rocksdb_put_he..</text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="605.7" y="275.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="608.7" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="605.7" y="259.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="608.7" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="605.7" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="608.7" y="254.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="606.0" y="275.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="609.0" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="606.0" y="259.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="609.0" y="270.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="606.0" y="243.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="609.0" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="606.3" y="275.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="609.3" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="606.3" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="609.3" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="606.3" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="609.3" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.08%)</title><rect x="606.6" y="275.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="609.6" y="286.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.08%)</title><rect x="606.6" y="259.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="609.6" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.08%)</title><rect x="606.6" y="243.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="609.6" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="606.6" y="227.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="609.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="606.6" y="211.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="609.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="607.2" y="195.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="610.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (362 samples, 9.44%)</title><rect x="607.5" y="275.0" width="111.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="610.5" y="286.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (362 samples, 9.44%)</title><rect x="607.5" y="259.0" width="111.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="610.5" y="270.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (361 samples, 9.42%)</title><rect x="607.9" y="243.0" width="111.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="610.9" y="254.0">rocksdb::DB::..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="608.2" y="227.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="611.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (355 samples, 9.26%)</title><rect x="608.5" y="227.0" width="109.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="611.5" y="238.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (353 samples, 9.21%)</title><rect x="608.5" y="211.0" width="108.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="611.5" y="222.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (22 samples, 0.57%)</title><rect x="609.1" y="195.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="612.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.03%)</title><rect x="609.1" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="612.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (1 samples, 0.03%)</title><rect x="609.1" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="612.1" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="609.1" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="612.1" y="158.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="609.1" y="131.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="612.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (21 samples, 0.55%)</title><rect x="609.4" y="179.0" width="6.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="612.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (20 samples, 0.52%)</title><rect x="609.7" y="163.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="612.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (20 samples, 0.52%)</title><rect x="609.7" y="147.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="612.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.03%)</title><rect x="609.7" y="131.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="612.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (19 samples, 0.50%)</title><rect x="610.0" y="131.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="613.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="610.0" y="115.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="613.0" y="126.0"></text>
</g>
<g>
<title>write (18 samples, 0.47%)</title><rect x="610.3" y="115.0" width="5.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="613.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.05%)</title><rect x="615.9" y="195.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="618.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="615.9" y="179.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="618.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="615.9" y="163.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="618.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="615.9" y="147.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="618.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.05%)</title><rect x="615.9" y="131.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="618.9" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="616.2" y="115.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="619.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (20 samples, 0.52%)</title><rect x="616.5" y="195.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="619.5" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.03%)</title><rect x="616.5" y="179.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="619.5" y="190.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="616.8" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="619.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.03%)</title><rect x="617.1" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="620.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.03%)</title><rect x="617.4" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="620.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.08%)</title><rect x="617.7" y="179.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="620.7" y="190.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.03%)</title><rect x="617.7" y="163.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="620.7" y="174.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="618.0" y="163.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="621.0" y="174.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="618.3" y="163.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="621.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (13 samples, 0.34%)</title><rect x="618.6" y="179.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="621.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (12 samples, 0.31%)</title><rect x="618.9" y="163.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="621.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="618.9" y="147.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="621.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="619.2" y="147.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (11 samples, 0.29%)</title><rect x="619.2" y="131.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="622.2" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="619.5" y="115.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="622.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.23%)</title><rect x="619.9" y="115.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="622.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.23%)</title><rect x="619.9" y="99.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="622.9" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="620.8" y="83.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="623.8" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="621.1" y="83.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="624.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="621.1" y="67.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.10%)</title><rect x="621.4" y="83.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="624.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.10%)</title><rect x="621.4" y="67.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="624.4" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.08%)</title><rect x="621.7" y="51.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="624.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (103 samples, 2.69%)</title><rect x="622.6" y="195.0" width="31.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="625.6" y="206.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.05%)</title><rect x="634.0" y="179.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="637.0" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (64 samples, 1.67%)</title><rect x="634.6" y="179.0" width="19.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="637.6" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (63 samples, 1.64%)</title><rect x="634.6" y="163.0" width="19.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="637.6" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="654.0" y="163.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="657.0" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="654.0" y="147.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="657.0" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="654.0" y="131.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="657.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (192 samples, 5.01%)</title><rect x="654.3" y="195.0" width="59.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="657.3" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (192 samples, 5.01%)</title><rect x="654.3" y="179.0" width="59.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="657.3" y="190.0">rocksd..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="661.7" y="163.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="664.7" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (167 samples, 4.36%)</title><rect x="662.0" y="163.0" width="51.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="665.0" y="174.0">si_mo..</text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="713.4" y="195.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="716.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.08%)</title><rect x="713.8" y="195.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="716.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.08%)</title><rect x="713.8" y="179.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="716.8" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (3 samples, 0.08%)</title><rect x="713.8" y="163.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="716.8" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="713.8" y="147.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="716.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="714.7" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="717.7" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="714.7" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="717.7" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="714.7" y="163.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="717.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (6 samples, 0.16%)</title><rect x="715.0" y="195.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="718.0" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (6 samples, 0.16%)</title><rect x="715.0" y="179.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="718.0" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.13%)</title><rect x="715.0" y="163.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="718.0" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="716.5" y="163.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="719.5" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (1 samples, 0.03%)</title><rect x="716.8" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="719.8" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (1 samples, 0.03%)</title><rect x="716.8" y="179.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="719.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="717.1" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="720.1" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (1 samples, 0.03%)</title><rect x="717.4" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="720.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="717.8" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="720.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="717.8" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="720.8" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="717.8" y="195.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="720.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.08%)</title><rect x="718.1" y="227.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="721.1" y="238.0"></text>
</g>
<g>
<title>free (2 samples, 0.05%)</title><rect x="718.1" y="211.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="721.1" y="222.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.05%)</title><rect x="718.1" y="195.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="721.1" y="206.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="718.4" y="179.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="721.4" y="190.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="718.7" y="211.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="721.7" y="222.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="718.7" y="195.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="721.7" y="206.0"></text>
</g>
<g>
<title>[async_worker_4 tid=36355] (410 samples, 10.70%)</title><rect x="719.0" y="451.0" width="126.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="722.0" y="462.0">[async_worker_4 ..</text>
</g>
<g>
<title>java/lang/Thread.run (410 samples, 10.70%)</title><rect x="719.0" y="435.0" width="126.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.0" y="446.0">java/lang/Thread..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (410 samples, 10.70%)</title><rect x="719.0" y="419.0" width="126.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="722.0" y="430.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (410 samples, 10.70%)</title><rect x="719.0" y="403.0" width="126.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="722.0" y="414.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 0.63%)</title><rect x="719.0" y="387.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="722.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (24 samples, 0.63%)</title><rect x="719.0" y="371.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (23 samples, 0.60%)</title><rect x="719.0" y="355.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (23 samples, 0.60%)</title><rect x="719.0" y="339.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.0" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (23 samples, 0.60%)</title><rect x="719.0" y="323.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="722.0" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (23 samples, 0.60%)</title><rect x="719.0" y="307.0" width="7.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="722.0" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 0.57%)</title><rect x="719.0" y="291.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="722.0" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (22 samples, 0.57%)</title><rect x="719.0" y="275.0" width="6.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="722.0" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="725.8" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.8" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="725.8" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.8" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="725.8" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="728.8" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="725.8" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.8" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="725.8" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="728.8" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="725.8" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="728.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="726.1" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="726.1" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="729.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="726.1" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="729.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="726.1" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="726.1" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="729.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="726.1" y="275.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="729.1" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="726.1" y="259.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="729.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (386 samples, 10.07%)</title><rect x="726.4" y="387.0" width="118.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="729.4" y="398.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (386 samples, 10.07%)</title><rect x="726.4" y="371.0" width="118.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="729.4" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (29 samples, 0.76%)</title><rect x="726.7" y="355.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="729.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (26 samples, 0.68%)</title><rect x="727.6" y="339.0" width="8.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 0.68%)</title><rect x="727.6" y="323.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (26 samples, 0.68%)</title><rect x="727.6" y="307.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="730.6" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (26 samples, 0.68%)</title><rect x="727.6" y="291.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.6" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (26 samples, 0.68%)</title><rect x="727.6" y="275.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="730.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (26 samples, 0.68%)</title><rect x="727.6" y="259.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="730.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 0.68%)</title><rect x="727.6" y="243.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 0.68%)</title><rect x="727.6" y="227.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="730.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (24 samples, 0.63%)</title><rect x="727.6" y="211.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="730.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (24 samples, 0.63%)</title><rect x="727.6" y="195.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.6" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="727.6" y="179.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="730.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (22 samples, 0.57%)</title><rect x="728.2" y="179.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.2" y="190.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="728.5" y="163.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="731.5" y="174.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="728.5" y="147.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="731.5" y="158.0"></text>
</g>
<g>
<title>write (20 samples, 0.52%)</title><rect x="728.8" y="163.0" width="6.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="731.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.05%)</title><rect x="735.0" y="211.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="738.0" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.05%)</title><rect x="735.0" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="735.0" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="738.0" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="735.0" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="738.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="735.0" y="147.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.0" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.03%)</title><rect x="735.0" y="131.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.0" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="735.3" y="179.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="735.3" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="735.3" y="147.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="738.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (356 samples, 9.29%)</title><rect x="735.6" y="355.0" width="109.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.6" y="366.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (354 samples, 9.24%)</title><rect x="735.6" y="339.0" width="109.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.6" y="350.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (354 samples, 9.24%)</title><rect x="735.6" y="323.0" width="109.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.6" y="334.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (353 samples, 9.21%)</title><rect x="735.9" y="307.0" width="108.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="738.9" y="318.0">Java_org_rock..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="735.9" y="291.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="738.9" y="302.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="736.2" y="291.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="739.2" y="302.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="736.5" y="291.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="739.5" y="302.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="736.8" y="291.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="739.8" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (349 samples, 9.11%)</title><rect x="737.1" y="291.0" width="107.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.1" y="302.0">rocksdb_put_h..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.05%)</title><rect x="737.1" y="275.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="740.1" y="286.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="737.1" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="740.1" y="270.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="737.1" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="740.1" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="737.5" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="740.5" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.05%)</title><rect x="737.8" y="275.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="740.8" y="286.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.05%)</title><rect x="737.8" y="259.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="740.8" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.05%)</title><rect x="737.8" y="243.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="740.8" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="737.8" y="227.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="740.8" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="737.8" y="211.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="740.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="737.8" y="195.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="740.8" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="738.1" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="741.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (344 samples, 8.97%)</title><rect x="738.4" y="275.0" width="105.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.4" y="286.0">rocksdb::Comp..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (344 samples, 8.97%)</title><rect x="738.4" y="259.0" width="105.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="741.4" y="270.0">rocksdb::DBIm..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (344 samples, 8.97%)</title><rect x="738.4" y="243.0" width="105.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="741.4" y="254.0">rocksdb::DB::..</text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="738.4" y="227.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="741.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (340 samples, 8.87%)</title><rect x="738.7" y="227.0" width="104.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="741.7" y="238.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (339 samples, 8.84%)</title><rect x="738.7" y="211.0" width="104.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="741.7" y="222.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (17 samples, 0.44%)</title><rect x="740.5" y="195.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="743.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (16 samples, 0.42%)</title><rect x="740.8" y="179.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (16 samples, 0.42%)</title><rect x="740.8" y="163.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="743.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (15 samples, 0.39%)</title><rect x="740.8" y="147.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (15 samples, 0.39%)</title><rect x="740.8" y="131.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="743.8" y="142.0"></text>
</g>
<g>
<title>write (15 samples, 0.39%)</title><rect x="740.8" y="115.0" width="4.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="743.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="745.5" y="147.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="748.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="745.5" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="748.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (17 samples, 0.44%)</title><rect x="745.8" y="195.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="748.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.08%)</title><rect x="746.1" y="179.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="749.1" y="190.0"></text>
</g>
<g>
<title>free (3 samples, 0.08%)</title><rect x="746.1" y="163.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="749.1" y="174.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.05%)</title><rect x="746.4" y="147.0" width="0.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="749.4" y="158.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.05%)</title><rect x="746.4" y="131.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="749.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (13 samples, 0.34%)</title><rect x="747.0" y="179.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="750.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="747.6" y="163.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="750.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="747.6" y="147.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="750.6" y="158.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="747.6" y="131.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="750.6" y="142.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="747.6" y="115.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="750.6" y="126.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="747.6" y="99.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="750.6" y="110.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="747.6" y="83.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="750.6" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="747.6" y="67.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="750.6" y="78.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="747.6" y="51.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="750.6" y="62.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="747.6" y="35.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="750.6" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (9 samples, 0.23%)</title><rect x="747.9" y="131.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="750.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.21%)</title><rect x="748.2" y="115.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="751.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.18%)</title><rect x="748.5" y="99.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="751.5" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="749.2" y="83.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="752.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.08%)</title><rect x="749.5" y="83.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="752.5" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="750.1" y="67.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="753.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="750.4" y="83.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="753.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="750.7" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="753.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (113 samples, 2.95%)</title><rect x="751.0" y="195.0" width="34.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="754.0" y="206.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.05%)</title><rect x="762.7" y="179.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="765.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (73 samples, 1.90%)</title><rect x="763.3" y="179.0" width="22.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="766.3" y="190.0">s..</text>
</g>
<g>
<title>__psynch_cvwait (69 samples, 1.80%)</title><rect x="763.3" y="163.0" width="21.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="766.3" y="174.0">_..</text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.08%)</title><rect x="784.6" y="163.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="787.6" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (1 samples, 0.03%)</title><rect x="784.6" y="147.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="787.6" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="784.9" y="147.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="787.9" y="158.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="785.2" y="147.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="788.2" y="158.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="785.5" y="163.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="788.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (168 samples, 4.38%)</title><rect x="785.8" y="195.0" width="51.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.8" y="206.0">rocks..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (168 samples, 4.38%)</title><rect x="785.8" y="179.0" width="51.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="788.8" y="190.0">rocks..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (151 samples, 3.94%)</title><rect x="790.7" y="163.0" width="46.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="793.7" y="174.0">si_m..</text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="837.2" y="163.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="840.2" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="837.2" y="147.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="840.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (4 samples, 0.10%)</title><rect x="837.5" y="195.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.10%)</title><rect x="837.5" y="179.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.5" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (4 samples, 0.10%)</title><rect x="837.5" y="163.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="840.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.10%)</title><rect x="837.5" y="147.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="840.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="838.7" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="839.0" y="195.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="842.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="839.0" y="179.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="842.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (10 samples, 0.26%)</title><rect x="839.4" y="195.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="842.4" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (10 samples, 0.26%)</title><rect x="839.4" y="179.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="842.4" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.23%)</title><rect x="839.4" y="163.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="842.4" y="174.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="842.1" y="163.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="845.1" y="174.0"></text>
</g>
<g>
<title>std::__1::mutex::~mutex() (1 samples, 0.03%)</title><rect x="842.4" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="845.4" y="206.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (1 samples, 0.03%)</title><rect x="842.4" y="179.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="845.4" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.03%)</title><rect x="842.7" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="842.7" y="179.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.7" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="843.0" y="211.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (3 samples, 0.08%)</title><rect x="843.4" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="846.4" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.08%)</title><rect x="843.4" y="211.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.4" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.08%)</title><rect x="843.4" y="195.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="846.4" y="206.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.08%)</title><rect x="843.4" y="179.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="846.4" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.08%)</title><rect x="843.4" y="163.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="846.4" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="843.4" y="147.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="846.4" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.08%)</title><rect x="843.4" y="131.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="846.4" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="843.7" y="115.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="846.7" y="126.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="844.0" y="99.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="847.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="844.3" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="847.3" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (2 samples, 0.05%)</title><rect x="844.6" y="339.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="847.6" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="844.9" y="323.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="847.9" y="334.0"></text>
</g>
<g>
<title>[async_worker_5 tid=34307] (408 samples, 10.64%)</title><rect x="845.2" y="451.0" width="125.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="848.2" y="462.0">[async_worker_5..</text>
</g>
<g>
<title>java/lang/Thread.run (408 samples, 10.64%)</title><rect x="845.2" y="435.0" width="125.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="848.2" y="446.0">java/lang/Threa..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (408 samples, 10.64%)</title><rect x="845.2" y="419.0" width="125.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="848.2" y="430.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (408 samples, 10.64%)</title><rect x="845.2" y="403.0" width="125.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="848.2" y="414.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.05%)</title><rect x="845.2" y="387.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="848.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="845.2" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="848.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="845.2" y="355.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.60%)</title><rect x="845.8" y="387.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="848.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (23 samples, 0.60%)</title><rect x="845.8" y="371.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 0.57%)</title><rect x="845.8" y="355.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 0.57%)</title><rect x="845.8" y="339.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="848.8" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (22 samples, 0.57%)</title><rect x="845.8" y="323.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="848.8" y="334.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="845.8" y="307.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.8" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.55%)</title><rect x="846.1" y="307.0" width="6.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="849.1" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.55%)</title><rect x="846.1" y="291.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.1" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (20 samples, 0.52%)</title><rect x="846.4" y="275.0" width="6.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="849.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="852.6" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="852.6" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="855.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="852.6" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="852.6" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="855.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="852.6" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="855.6" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="852.6" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="855.6" y="286.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="852.6" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="855.6" y="270.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="852.6" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="855.6" y="254.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="852.6" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="855.6" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="852.6" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="855.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (383 samples, 9.99%)</title><rect x="852.9" y="387.0" width="117.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="855.9" y="398.0">ru/mail/polis/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (383 samples, 9.99%)</title><rect x="852.9" y="371.0" width="117.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="855.9" y="382.0">ru/mail/polis/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="853.2" y="355.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="856.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 0.86%)</title><rect x="853.5" y="355.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (31 samples, 0.81%)</title><rect x="853.8" y="339.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="856.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="853.8" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="856.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="853.8" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="856.8" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="853.8" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="856.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="853.8" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.8" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.78%)</title><rect x="854.1" y="323.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.1" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (30 samples, 0.78%)</title><rect x="854.1" y="307.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.1" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (30 samples, 0.78%)</title><rect x="854.1" y="291.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.1" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (30 samples, 0.78%)</title><rect x="854.1" y="275.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (30 samples, 0.78%)</title><rect x="854.1" y="259.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="857.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="854.1" y="243.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="857.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="854.1" y="227.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="857.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="854.1" y="211.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="857.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="854.1" y="195.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="854.1" y="179.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.1" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="854.1" y="163.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="857.1" y="174.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="854.1" y="147.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="857.1" y="158.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="854.4" y="147.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="857.4" y="158.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="854.4" y="131.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="857.4" y="142.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="854.4" y="115.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="857.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="854.7" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="857.7" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="854.7" y="227.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="857.7" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="854.7" y="211.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="857.7" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="854.7" y="195.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="857.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (27 samples, 0.70%)</title><rect x="855.1" y="243.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (27 samples, 0.70%)</title><rect x="855.1" y="227.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="858.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (27 samples, 0.70%)</title><rect x="855.1" y="211.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (27 samples, 0.70%)</title><rect x="855.1" y="195.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (27 samples, 0.70%)</title><rect x="855.1" y="179.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.1" y="190.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="855.1" y="163.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="858.1" y="174.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="855.1" y="147.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="858.1" y="158.0"></text>
</g>
<g>
<title>write (25 samples, 0.65%)</title><rect x="855.7" y="163.0" width="7.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="858.7" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="863.4" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="866.4" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (348 samples, 9.08%)</title><rect x="863.7" y="355.0" width="107.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="866.7" y="366.0">ru/mail/polis..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (348 samples, 9.08%)</title><rect x="863.7" y="339.0" width="107.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.7" y="350.0">org/rocksdb/R..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (348 samples, 9.08%)</title><rect x="863.7" y="323.0" width="107.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="866.7" y="334.0">org/rocksdb/R..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (346 samples, 9.03%)</title><rect x="864.3" y="307.0" width="106.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="867.3" y="318.0">Java_org_rock..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (346 samples, 9.03%)</title><rect x="864.3" y="291.0" width="106.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="867.3" y="302.0">rocksdb_put_h..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="864.3" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.3" y="286.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="864.6" y="275.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="867.6" y="286.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="864.9" y="275.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="867.9" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="864.9" y="259.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="867.9" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="865.2" y="275.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="868.2" y="286.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="865.2" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="868.2" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.08%)</title><rect x="865.5" y="275.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="868.5" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="865.8" y="259.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="868.8" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="865.8" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="868.8" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="866.1" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="869.1" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="866.1" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="869.1" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="866.1" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="869.1" y="206.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="866.1" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="869.1" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="866.4" y="275.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="869.4" y="286.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="866.4" y="259.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="869.4" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="866.4" y="243.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="869.4" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="866.4" y="227.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="869.4" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="866.4" y="211.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="869.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (337 samples, 8.79%)</title><rect x="866.8" y="275.0" width="103.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="869.8" y="286.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (336 samples, 8.77%)</title><rect x="867.1" y="259.0" width="103.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="870.1" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (336 samples, 8.77%)</title><rect x="867.1" y="243.0" width="103.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="870.1" y="254.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="867.1" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (333 samples, 8.69%)</title><rect x="867.4" y="227.0" width="102.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="870.4" y="238.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (333 samples, 8.69%)</title><rect x="867.4" y="211.0" width="102.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.4" y="222.0">rocksdb::DBI..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="867.7" y="195.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="870.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (11 samples, 0.29%)</title><rect x="868.0" y="195.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="871.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (11 samples, 0.29%)</title><rect x="868.0" y="179.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (10 samples, 0.26%)</title><rect x="868.3" y="163.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="871.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (9 samples, 0.23%)</title><rect x="868.3" y="147.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (9 samples, 0.23%)</title><rect x="868.3" y="131.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.3" y="142.0"></text>
</g>
<g>
<title>write (9 samples, 0.23%)</title><rect x="868.3" y="115.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="871.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="871.1" y="147.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="874.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="871.1" y="131.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.13%)</title><rect x="871.4" y="195.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.13%)</title><rect x="871.4" y="179.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.13%)</title><rect x="871.4" y="163.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.10%)</title><rect x="871.7" y="147.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.03%)</title><rect x="871.7" y="131.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.7" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.05%)</title><rect x="872.0" y="131.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="875.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="872.3" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="875.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="872.3" y="99.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="875.3" y="110.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="872.3" y="83.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="875.3" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="872.6" y="131.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="875.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (15 samples, 0.39%)</title><rect x="872.9" y="195.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.9" y="206.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.03%)</title><rect x="873.2" y="179.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="876.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.03%)</title><rect x="873.5" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="873.8" y="179.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.8" y="190.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="873.8" y="163.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="876.8" y="174.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="873.8" y="147.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="876.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="874.1" y="179.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="877.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="874.1" y="163.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="877.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.29%)</title><rect x="874.1" y="147.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.1" y="158.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="874.8" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.8" y="142.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="875.1" y="131.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="878.1" y="142.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="875.1" y="115.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="878.1" y="126.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="875.1" y="99.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="878.1" y="110.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="875.1" y="83.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="878.1" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="875.1" y="67.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="878.1" y="78.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="875.1" y="51.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="878.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (7 samples, 0.18%)</title><rect x="875.4" y="131.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.18%)</title><rect x="875.4" y="115.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="878.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="875.4" y="99.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="878.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="875.4" y="83.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.16%)</title><rect x="875.7" y="99.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="878.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.05%)</title><rect x="876.6" y="83.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.05%)</title><rect x="876.6" y="67.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="879.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="876.6" y="51.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="879.6" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="877.2" y="83.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.2" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (99 samples, 2.58%)</title><rect x="877.5" y="195.0" width="30.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="880.5" y="206.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.05%)</title><rect x="886.1" y="179.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="889.1" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (68 samples, 1.77%)</title><rect x="886.8" y="179.0" width="20.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="889.8" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (64 samples, 1.67%)</title><rect x="886.8" y="163.0" width="19.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="889.8" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (4 samples, 0.10%)</title><rect x="906.5" y="163.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="909.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (3 samples, 0.08%)</title><rect x="906.8" y="147.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="909.8" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (3 samples, 0.08%)</title><rect x="906.8" y="131.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="909.8" y="142.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="907.7" y="179.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="910.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (193 samples, 5.04%)</title><rect x="908.0" y="195.0" width="59.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.0" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (192 samples, 5.01%)</title><rect x="908.0" y="179.0" width="59.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.0" y="190.0">rocksd..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (165 samples, 4.30%)</title><rect x="914.8" y="163.0" width="50.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="917.8" y="174.0">si_mo..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.08%)</title><rect x="965.6" y="163.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.6" y="174.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="965.6" y="147.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="968.6" y="158.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="965.6" y="131.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="968.6" y="142.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.03%)</title><rect x="965.9" y="131.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="968.9" y="142.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="965.9" y="115.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="968.9" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.03%)</title><rect x="966.2" y="147.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="969.2" y="158.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.05%)</title><rect x="966.5" y="163.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.5" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="966.5" y="147.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="969.5" y="158.0"></text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="967.1" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.05%)</title><rect x="967.4" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.4" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.05%)</title><rect x="967.4" y="179.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="970.4" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.05%)</title><rect x="967.4" y="163.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="970.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="968.0" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="971.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="968.0" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (5 samples, 0.13%)</title><rect x="968.3" y="195.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="971.3" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (5 samples, 0.13%)</title><rect x="968.3" y="179.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="971.3" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.13%)</title><rect x="968.3" y="163.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="971.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="969.9" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="969.9" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="970.2" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.2" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="970.2" y="211.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="973.2" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="970.2" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.2" y="206.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="970.2" y="179.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="973.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="970.5" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="973.5" y="286.0"></text>
</g>
<g>
<title>[async_worker_6 tid=33539] (352 samples, 9.18%)</title><rect x="970.8" y="451.0" width="108.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="973.8" y="462.0">[async_worker..</text>
</g>
<g>
<title>java/lang/Thread.run (352 samples, 9.18%)</title><rect x="970.8" y="435.0" width="108.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="973.8" y="446.0">java/lang/Thr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (352 samples, 9.18%)</title><rect x="970.8" y="419.0" width="108.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.8" y="430.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (352 samples, 9.18%)</title><rect x="970.8" y="403.0" width="108.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="973.8" y="414.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.42%)</title><rect x="970.8" y="387.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="973.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.42%)</title><rect x="970.8" y="371.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="973.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 0.39%)</title><rect x="970.8" y="355.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="973.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="970.8" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="970.8" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="973.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="970.8" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="973.8" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="970.8" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="973.8" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="970.8" y="275.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="973.8" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="970.8" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="973.8" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="970.8" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="973.8" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (14 samples, 0.37%)</title><rect x="971.1" y="339.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="974.1" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (14 samples, 0.37%)</title><rect x="971.1" y="323.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="974.1" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (14 samples, 0.37%)</title><rect x="971.1" y="307.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="974.1" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.37%)</title><rect x="971.1" y="291.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.1" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.37%)</title><rect x="971.1" y="275.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="974.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="975.4" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="978.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="975.4" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="975.4" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="978.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="975.4" y="307.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="978.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="975.4" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="978.4" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="975.4" y="275.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="978.4" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="975.4" y="259.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="978.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (336 samples, 8.77%)</title><rect x="975.7" y="387.0" width="103.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="978.7" y="398.0">ru/mail/poli..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (336 samples, 8.77%)</title><rect x="975.7" y="371.0" width="103.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="978.7" y="382.0">ru/mail/poli..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 0.47%)</title><rect x="975.7" y="355.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="978.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (18 samples, 0.47%)</title><rect x="975.7" y="339.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="978.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="975.7" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="978.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="975.7" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="978.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="975.7" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="978.7" y="302.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="975.7" y="275.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="978.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (17 samples, 0.44%)</title><rect x="976.0" y="323.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="979.0" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (17 samples, 0.44%)</title><rect x="976.0" y="307.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="979.0" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (17 samples, 0.44%)</title><rect x="976.0" y="291.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="979.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (17 samples, 0.44%)</title><rect x="976.0" y="275.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="979.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (17 samples, 0.44%)</title><rect x="976.0" y="259.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="976.0" y="243.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="979.0" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="976.0" y="227.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="979.0" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="976.0" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="976.0" y="195.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="979.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="976.0" y="179.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="979.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.42%)</title><rect x="976.4" y="243.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="979.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.42%)</title><rect x="976.4" y="227.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="979.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (16 samples, 0.42%)</title><rect x="976.4" y="211.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="979.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.42%)</title><rect x="976.4" y="195.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="979.4" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="976.4" y="179.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="979.4" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 0.39%)</title><rect x="976.7" y="179.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.7" y="190.0"></text>
</g>
<g>
<title>write (15 samples, 0.39%)</title><rect x="976.7" y="163.0" width="4.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="979.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (318 samples, 8.30%)</title><rect x="981.3" y="355.0" width="97.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="984.3" y="366.0">ru/mail/pol..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (316 samples, 8.24%)</title><rect x="981.3" y="339.0" width="97.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="984.3" y="350.0">org/rocksdb..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (316 samples, 8.24%)</title><rect x="981.3" y="323.0" width="97.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.3" y="334.0">org/rocksdb..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (314 samples, 8.19%)</title><rect x="981.9" y="307.0" width="96.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="984.9" y="318.0">Java_org_ro..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (314 samples, 8.19%)</title><rect x="981.9" y="291.0" width="96.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="984.9" y="302.0">rocksdb_put..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="981.9" y="275.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="984.9" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="981.9" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.9" y="270.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="982.2" y="275.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="985.2" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.08%)</title><rect x="982.5" y="275.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="985.5" y="286.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.08%)</title><rect x="982.5" y="259.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="985.5" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.08%)</title><rect x="982.5" y="243.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="985.5" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="982.5" y="227.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="985.5" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="982.5" y="211.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="985.5" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="982.8" y="195.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="985.8" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="983.1" y="227.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="986.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (309 samples, 8.06%)</title><rect x="983.4" y="275.0" width="95.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="986.4" y="286.0">rocksdb::Co..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (309 samples, 8.06%)</title><rect x="983.4" y="259.0" width="95.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="986.4" y="270.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (309 samples, 8.06%)</title><rect x="983.4" y="243.0" width="95.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="986.4" y="254.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (305 samples, 7.96%)</title><rect x="983.4" y="227.0" width="93.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.4" y="238.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (305 samples, 7.96%)</title><rect x="983.4" y="211.0" width="93.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.4" y="222.0">rocksdb::DB..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="983.7" y="195.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="986.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (9 samples, 0.23%)</title><rect x="984.0" y="195.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (9 samples, 0.23%)</title><rect x="984.0" y="179.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="987.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (9 samples, 0.23%)</title><rect x="984.0" y="163.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (9 samples, 0.23%)</title><rect x="984.0" y="147.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (9 samples, 0.23%)</title><rect x="984.0" y="131.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.0" y="142.0"></text>
</g>
<g>
<title>write (9 samples, 0.23%)</title><rect x="984.0" y="115.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="987.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="986.8" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="986.8" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="986.8" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="986.8" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="986.8" y="131.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="986.8" y="115.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (12 samples, 0.31%)</title><rect x="987.1" y="195.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="987.4" y="179.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.4" y="190.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="987.4" y="163.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="990.4" y="174.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="987.4" y="147.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="990.4" y="158.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="987.4" y="131.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="990.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="987.7" y="179.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="987.7" y="163.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="987.7" y="147.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.7" y="158.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="987.7" y="131.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="990.7" y="142.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="987.7" y="115.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="990.7" y="126.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="987.7" y="99.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="990.7" y="110.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="987.7" y="83.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="990.7" y="94.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="987.7" y="67.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="990.7" y="78.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.03%)</title><rect x="988.0" y="131.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="991.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.21%)</title><rect x="988.4" y="131.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="991.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.21%)</title><rect x="988.4" y="115.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.21%)</title><rect x="988.4" y="99.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="991.4" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.16%)</title><rect x="989.0" y="83.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.0" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="989.3" y="67.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="992.3" y="78.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.08%)</title><rect x="989.6" y="67.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.6" y="78.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="989.9" y="51.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="992.9" y="62.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="990.5" y="67.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.5" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (80 samples, 2.09%)</title><rect x="990.8" y="195.0" width="24.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.8" y="206.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (3 samples, 0.08%)</title><rect x="997.6" y="179.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1000.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (55 samples, 1.43%)</title><rect x="998.5" y="179.0" width="16.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1001.5" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (52 samples, 1.36%)</title><rect x="998.5" y="163.0" width="16.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1001.5" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.08%)</title><rect x="1014.5" y="163.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1017.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="1014.5" y="147.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1017.5" y="158.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.05%)</title><rect x="1014.8" y="147.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1017.8" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (2 samples, 0.05%)</title><rect x="1014.8" y="131.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1017.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (192 samples, 5.01%)</title><rect x="1015.4" y="195.0" width="59.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1018.4" y="206.0">rocksd..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="1015.4" y="179.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1018.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (191 samples, 4.98%)</title><rect x="1015.8" y="179.0" width="58.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.8" y="190.0">rocksd..</text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="1024.1" y="163.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1027.1" y="174.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (157 samples, 4.10%)</title><rect x="1024.4" y="163.0" width="48.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1027.4" y="174.0">si_m..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="1072.7" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.7" y="174.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="1072.7" y="147.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1075.7" y="158.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.03%)</title><rect x="1072.7" y="131.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1075.7" y="142.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="1072.7" y="115.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1075.7" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.13%)</title><rect x="1073.0" y="163.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.0" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.13%)</title><rect x="1073.0" y="147.0" width="1.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1076.0" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="1074.6" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1077.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1074.6" y="179.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1077.6" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="1074.6" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.6" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1074.6" y="147.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1077.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1074.9" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1077.9" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="1074.9" y="179.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.9" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1074.9" y="163.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1077.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (7 samples, 0.18%)</title><rect x="1075.2" y="195.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.2" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (7 samples, 0.18%)</title><rect x="1075.2" y="179.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.2" y="190.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.18%)</title><rect x="1075.2" y="163.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1078.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1077.3" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1080.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1077.3" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1080.3" y="222.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1077.3" y="195.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.05%)</title><rect x="1077.6" y="227.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.6" y="238.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1077.6" y="211.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1080.6" y="222.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1077.9" y="211.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1080.9" y="222.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1077.9" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1080.9" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="1078.2" y="227.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (2 samples, 0.05%)</title><rect x="1078.6" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1081.6" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1078.6" y="323.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1081.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="1078.9" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.9" y="334.0"></text>
</g>
<g>
<title>[async_worker_7 tid=33795] (360 samples, 9.39%)</title><rect x="1079.2" y="451.0" width="110.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1082.2" y="462.0">[async_worker..</text>
</g>
<g>
<title>java/lang/Thread.run (360 samples, 9.39%)</title><rect x="1079.2" y="435.0" width="110.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1082.2" y="446.0">java/lang/Thr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (360 samples, 9.39%)</title><rect x="1079.2" y="419.0" width="110.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1082.2" y="430.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (360 samples, 9.39%)</title><rect x="1079.2" y="403.0" width="110.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1082.2" y="414.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.42%)</title><rect x="1079.2" y="387.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1082.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.42%)</title><rect x="1079.2" y="371.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1082.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 0.31%)</title><rect x="1079.2" y="355.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1082.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="1079.2" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1082.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1079.2" y="323.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1082.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1079.2" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1082.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.29%)</title><rect x="1079.5" y="339.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1082.5" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.29%)</title><rect x="1079.5" y="323.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1082.5" y="334.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.29%)</title><rect x="1079.5" y="307.0" width="3.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1082.5" y="318.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.29%)</title><rect x="1079.5" y="291.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1082.5" y="302.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.29%)</title><rect x="1079.5" y="275.0" width="3.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1082.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.10%)</title><rect x="1082.9" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1085.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.10%)</title><rect x="1082.9" y="339.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.10%)</title><rect x="1082.9" y="323.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1085.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.10%)</title><rect x="1082.9" y="307.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1085.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.10%)</title><rect x="1082.9" y="291.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.9" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.10%)</title><rect x="1082.9" y="275.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1085.9" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.08%)</title><rect x="1082.9" y="259.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1085.9" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1083.8" y="259.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1086.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/456112930.run (344 samples, 8.97%)</title><rect x="1084.1" y="387.0" width="105.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1087.1" y="398.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$2 (344 samples, 8.97%)</title><rect x="1084.1" y="371.0" width="105.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1087.1" y="382.0">ru/mail/polis..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 0.42%)</title><rect x="1084.1" y="355.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.39%)</title><rect x="1084.4" y="339.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1087.4" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.39%)</title><rect x="1084.4" y="323.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1087.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.39%)</title><rect x="1084.4" y="307.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (15 samples, 0.39%)</title><rect x="1084.4" y="291.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1087.4" y="302.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (15 samples, 0.39%)</title><rect x="1084.4" y="275.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1087.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (15 samples, 0.39%)</title><rect x="1084.4" y="259.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1087.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 0.39%)</title><rect x="1084.4" y="243.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (15 samples, 0.39%)</title><rect x="1084.4" y="227.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1087.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (15 samples, 0.39%)</title><rect x="1084.4" y="211.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1087.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (15 samples, 0.39%)</title><rect x="1084.4" y="195.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 0.39%)</title><rect x="1084.4" y="179.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1087.4" y="190.0"></text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="1084.4" y="163.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1087.4" y="174.0"></text>
</g>
<g>
<title>write (14 samples, 0.37%)</title><rect x="1084.7" y="163.0" width="4.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1087.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (328 samples, 8.56%)</title><rect x="1089.0" y="355.0" width="101.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1092.0" y="366.0">ru/mail/poli..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (326 samples, 8.51%)</title><rect x="1089.0" y="339.0" width="100.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1092.0" y="350.0">org/rocksdb/..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (325 samples, 8.48%)</title><rect x="1089.3" y="323.0" width="100.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1092.3" y="334.0">org/rocksdb/..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (324 samples, 8.45%)</title><rect x="1089.6" y="307.0" width="99.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1092.6" y="318.0">Java_org_roc..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="1089.6" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1092.6" y="302.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (323 samples, 8.43%)</title><rect x="1089.9" y="291.0" width="99.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1092.9" y="302.0">rocksdb_put_..</text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1089.9" y="275.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1092.9" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1089.9" y="259.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1092.9" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1089.9" y="243.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1092.9" y="254.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1090.3" y="275.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1093.3" y="286.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="1090.3" y="259.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1093.3" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1090.6" y="275.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1093.6" y="286.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1090.6" y="259.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1093.6" y="270.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1090.6" y="243.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1093.6" y="254.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1090.6" y="227.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1093.6" y="238.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1090.6" y="211.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1093.6" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1090.6" y="195.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1093.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (320 samples, 8.35%)</title><rect x="1090.9" y="275.0" width="98.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.9" y="286.0">rocksdb::Com..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (320 samples, 8.35%)</title><rect x="1090.9" y="259.0" width="98.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.9" y="270.0">rocksdb::DBI..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (320 samples, 8.35%)</title><rect x="1090.9" y="243.0" width="98.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.9" y="254.0">rocksdb::DB:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (318 samples, 8.30%)</title><rect x="1091.2" y="227.0" width="97.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.2" y="238.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (316 samples, 8.24%)</title><rect x="1091.5" y="211.0" width="97.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1094.5" y="222.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.03%)</title><rect x="1092.1" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (18 samples, 0.47%)</title><rect x="1092.4" y="195.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.03%)</title><rect x="1092.4" y="179.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.4" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1092.4" y="163.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1095.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (17 samples, 0.44%)</title><rect x="1092.7" y="179.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (16 samples, 0.42%)</title><rect x="1093.0" y="163.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (15 samples, 0.39%)</title><rect x="1093.3" y="147.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="1093.3" y="131.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (14 samples, 0.37%)</title><rect x="1093.6" y="131.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.6" y="142.0"></text>
</g>
<g>
<title>write (14 samples, 0.37%)</title><rect x="1093.6" y="115.0" width="4.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1096.6" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1098.0" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="1098.3" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1098.3" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1098.3" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1098.3" y="147.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="1098.3" y="131.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.3" y="142.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1098.3" y="115.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1101.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (11 samples, 0.29%)</title><rect x="1098.6" y="195.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1098.6" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.6" y="190.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1098.6" y="163.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1101.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="1098.9" y="179.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="1098.9" y="163.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.26%)</title><rect x="1098.9" y="147.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1101.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (10 samples, 0.26%)</title><rect x="1098.9" y="131.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.23%)</title><rect x="1099.2" y="115.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (9 samples, 0.23%)</title><rect x="1099.2" y="99.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1102.2" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.10%)</title><rect x="1100.7" y="83.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.7" y="94.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="1101.6" y="67.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1104.6" y="78.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (72 samples, 1.88%)</title><rect x="1102.0" y="195.0" width="22.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="206.0">r..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.05%)</title><rect x="1108.7" y="179.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1111.7" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (48 samples, 1.25%)</title><rect x="1109.3" y="179.0" width="14.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.3" y="190.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 1.20%)</title><rect x="1109.3" y="163.0" width="14.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1112.3" y="174.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.05%)</title><rect x="1123.5" y="163.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1126.5" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1123.8" y="147.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1126.8" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1123.8" y="131.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1126.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (204 samples, 5.32%)</title><rect x="1124.1" y="195.0" width="62.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.1" y="206.0">rocksd..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (204 samples, 5.32%)</title><rect x="1124.1" y="179.0" width="62.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.1" y="190.0">rocksd..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (173 samples, 4.51%)</title><rect x="1132.1" y="163.0" width="53.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1135.1" y="174.0">si_mo..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="1185.4" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="174.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="1185.4" y="147.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1188.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.03%)</title><rect x="1185.4" y="131.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1188.4" y="142.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="1185.4" y="115.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.4" y="126.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.10%)</title><rect x="1185.7" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="174.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.10%)</title><rect x="1185.7" y="147.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1188.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="1186.9" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1186.9" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.9" y="190.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="1186.9" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.9" y="174.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1186.9" y="147.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1189.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1187.2" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="206.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="1187.2" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="190.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1187.2" y="163.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1190.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.05%)</title><rect x="1187.5" y="195.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.05%)</title><rect x="1187.5" y="179.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.5" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="1188.2" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.2" y="206.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.03%)</title><rect x="1188.5" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="1188.5" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.03%)</title><rect x="1188.8" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1189.1" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="238.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="1189.1" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1189.1" y="195.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1192.1" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1189.1" y="179.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.1" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1189.1" y="163.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1192.1" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1189.1" y="147.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1192.1" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1189.1" y="131.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1192.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (2 samples, 0.05%)</title><rect x="1189.4" y="339.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1192.4" y="350.0"></text>
</g>
</g>
</svg>
