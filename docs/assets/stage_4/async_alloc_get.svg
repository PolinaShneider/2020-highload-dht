<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (43,838 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (24,948 samples, 56.91%)</title><rect x="10.0" y="387.0" width="671.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (24,948 samples, 56.91%)</title><rect x="10.0" y="371.0" width="671.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (24,948 samples, 56.91%)</title><rect x="10.0" y="355.0" width="671.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,441 samples, 3.29%)</title><rect x="10.0" y="339.0" width="38.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="350.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,441 samples, 3.29%)</title><rect x="10.0" y="323.0" width="38.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="334.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,427 samples, 3.26%)</title><rect x="10.0" y="307.0" width="38.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="318.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,427 samples, 3.26%)</title><rect x="10.0" y="291.0" width="38.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.0" y="302.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,427 samples, 3.26%)</title><rect x="10.0" y="275.0" width="38.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="13.0" y="286.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (14 samples, 0.03%)</title><rect x="48.4" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (14 samples, 0.03%)</title><rect x="48.4" y="291.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="51.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (14 samples, 0.03%)</title><rect x="48.4" y="275.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (14 samples, 0.03%)</title><rect x="48.4" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.4" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (14 samples, 0.03%)</title><rect x="48.4" y="243.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="51.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.run (9,656 samples, 22.03%)</title><rect x="48.8" y="339.0" width="259.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.8" y="350.0">ru/mail/polis/service/ServiceAsyncI..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (9,656 samples, 22.03%)</title><rect x="48.8" y="323.0" width="259.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="334.0">ru/mail/polis/service/ServiceAsyncI..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (9,656 samples, 22.03%)</title><rect x="48.8" y="307.0" width="259.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.8" y="318.0">ru/mail/polis/service/ServiceAsyncI..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (149 samples, 0.34%)</title><rect x="48.8" y="291.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="51.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (149 samples, 0.34%)</title><rect x="48.8" y="275.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (101 samples, 0.23%)</title><rect x="48.8" y="259.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (101 samples, 0.23%)</title><rect x="48.8" y="243.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="254.0"></text>
</g>
<g>
<title>byte[] (101 samples, 0.23%)</title><rect x="48.8" y="227.0" width="2.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="51.8" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (48 samples, 0.11%)</title><rect x="51.5" y="259.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.5" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (48 samples, 0.11%)</title><rect x="51.5" y="243.0" width="1.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="54.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (9,507 samples, 21.69%)</title><rect x="52.8" y="291.0" width="255.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.8" y="302.0">ru/mail/polis/service/ServiceAsync..</text>
</g>
<g>
<title>java.lang.Object[] (50 samples, 0.11%)</title><rect x="52.8" y="275.0" width="1.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="55.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.format (787 samples, 1.80%)</title><rect x="54.1" y="275.0" width="21.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.1" y="286.0">j..</text>
</g>
<g>
<title>java.util.Formatter (33 samples, 0.08%)</title><rect x="54.1" y="259.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="57.1" y="270.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (115 samples, 0.26%)</title><rect x="55.0" y="259.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="58.0" y="270.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (18 samples, 0.04%)</title><rect x="55.0" y="243.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="58.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (27 samples, 0.06%)</title><rect x="55.5" y="243.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (27 samples, 0.06%)</title><rect x="55.5" y="227.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.5" y="238.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.06%)</title><rect x="55.5" y="211.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="58.5" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (70 samples, 0.16%)</title><rect x="56.2" y="243.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.2" y="254.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (70 samples, 0.16%)</title><rect x="56.2" y="227.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.2" y="238.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (70 samples, 0.16%)</title><rect x="56.2" y="211.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.2" y="222.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (70 samples, 0.16%)</title><rect x="56.2" y="195.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.2" y="206.0"></text>
</g>
<g>
<title>java.text.DecimalFormatSymbols (70 samples, 0.16%)</title><rect x="56.2" y="179.0" width="1.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="59.2" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.format (567 samples, 1.29%)</title><rect x="58.1" y="259.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.1" y="270.0"></text>
</g>
<g>
<title>java/util/Formatter.format (567 samples, 1.29%)</title><rect x="58.1" y="243.0" width="15.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.1" y="254.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (48 samples, 0.11%)</title><rect x="58.1" y="227.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.1" y="238.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (48 samples, 0.11%)</title><rect x="58.1" y="211.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.1" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (48 samples, 0.11%)</title><rect x="58.1" y="195.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.1" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (48 samples, 0.11%)</title><rect x="58.1" y="179.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.1" y="190.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="163.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.1" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="147.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.1" y="158.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="131.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="115.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.1" y="126.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="99.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="61.1" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (48 samples, 0.11%)</title><rect x="58.1" y="83.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.1" y="94.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (48 samples, 0.11%)</title><rect x="58.1" y="67.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.1" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (48 samples, 0.11%)</title><rect x="58.1" y="51.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.1" y="62.0"></text>
</g>
<g>
<title>byte[] (48 samples, 0.11%)</title><rect x="58.1" y="35.0" width="1.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="61.1" y="46.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (519 samples, 1.18%)</title><rect x="59.4" y="227.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.4" y="238.0"></text>
</g>
<g>
<title>java.util.Formatter$FixedString (34 samples, 0.08%)</title><rect x="59.4" y="211.0" width="0.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="62.4" y="222.0"></text>
</g>
<g>
<title>java.util.Formatter$FormatSpecifier (88 samples, 0.20%)</title><rect x="60.3" y="211.0" width="2.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="63.3" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (58 samples, 0.13%)</title><rect x="62.7" y="211.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="65.7" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (58 samples, 0.13%)</title><rect x="62.7" y="195.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.7" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (58 samples, 0.13%)</title><rect x="62.7" y="179.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.7" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (58 samples, 0.13%)</title><rect x="62.7" y="163.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (58 samples, 0.13%)</title><rect x="62.7" y="147.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="65.7" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (58 samples, 0.13%)</title><rect x="62.7" y="131.0" width="1.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="65.7" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (119 samples, 0.27%)</title><rect x="64.3" y="211.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.3" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkGeneral (92 samples, 0.21%)</title><rect x="64.3" y="195.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="67.3" y="206.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags[] (92 samples, 0.21%)</title><rect x="64.3" y="179.0" width="2.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="67.3" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.flags (27 samples, 0.06%)</title><rect x="66.7" y="195.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.7" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.parse (27 samples, 0.06%)</title><rect x="66.7" y="179.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.7" y="190.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags (27 samples, 0.06%)</title><rect x="66.7" y="163.0" width="0.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="69.7" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (220 samples, 0.50%)</title><rect x="67.5" y="211.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.5" y="222.0"></text>
</g>
<g>
<title>java.util.regex.Matcher (70 samples, 0.16%)</title><rect x="67.5" y="195.0" width="1.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="70.5" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (150 samples, 0.34%)</title><rect x="69.4" y="195.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.4" y="206.0"></text>
</g>
<g>
<title>int[] (142 samples, 0.32%)</title><rect x="69.4" y="179.0" width="3.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="72.4" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (72 samples, 0.16%)</title><rect x="73.4" y="259.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.4" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (72 samples, 0.16%)</title><rect x="73.4" y="243.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.4" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (72 samples, 0.16%)</title><rect x="73.4" y="227.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.4" y="238.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.05%)</title><rect x="73.4" y="211.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="76.4" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (49 samples, 0.11%)</title><rect x="74.0" y="211.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.0" y="222.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.11%)</title><rect x="74.0" y="195.0" width="1.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="77.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (8,670 samples, 19.78%)</title><rect x="75.3" y="275.0" width="233.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.3" y="286.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (8,670 samples, 19.78%)</title><rect x="75.3" y="259.0" width="233.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="270.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (45 samples, 0.10%)</title><rect x="75.3" y="243.0" width="1.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="78.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (7,740 samples, 17.66%)</title><rect x="76.5" y="243.0" width="208.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="79.5" y="254.0">one/nio/http/HttpClient$Res..</text>
</g>
<g>
<title>byte[] (4,690 samples, 10.70%)</title><rect x="76.5" y="227.0" width="126.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="79.5" y="238.0">byte[]</text>
</g>
<g>
<title>byte[] (2,754 samples, 6.28%)</title><rect x="202.8" y="227.0" width="74.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="205.8" y="238.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (296 samples, 0.68%)</title><rect x="276.9" y="227.0" width="8.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (296 samples, 0.68%)</title><rect x="276.9" y="211.0" width="8.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.9" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (296 samples, 0.68%)</title><rect x="276.9" y="195.0" width="8.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="279.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (606 samples, 1.38%)</title><rect x="284.9" y="243.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="287.9" y="254.0"></text>
</g>
<g>
<title>byte[] (37 samples, 0.08%)</title><rect x="284.9" y="227.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="287.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (34 samples, 0.08%)</title><rect x="285.9" y="227.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (34 samples, 0.08%)</title><rect x="285.9" y="211.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.9" y="222.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.04%)</title><rect x="285.9" y="195.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="288.9" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (18 samples, 0.04%)</title><rect x="286.3" y="195.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="206.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.04%)</title><rect x="286.3" y="179.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="289.3" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Response (21 samples, 0.05%)</title><rect x="286.8" y="227.0" width="0.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="289.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (440 samples, 1.00%)</title><rect x="287.4" y="227.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (440 samples, 1.00%)</title><rect x="287.4" y="211.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (440 samples, 1.00%)</title><rect x="287.4" y="195.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.4" y="206.0"></text>
</g>
<g>
<title>char[] (246 samples, 0.56%)</title><rect x="287.4" y="179.0" width="6.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="290.4" y="190.0"></text>
</g>
<g>
<title>java.lang.String (96 samples, 0.22%)</title><rect x="294.0" y="179.0" width="2.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="297.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (98 samples, 0.22%)</title><rect x="296.6" y="179.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (98 samples, 0.22%)</title><rect x="296.6" y="163.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (98 samples, 0.22%)</title><rect x="296.6" y="147.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.6" y="158.0"></text>
</g>
<g>
<title>byte[] (98 samples, 0.22%)</title><rect x="296.6" y="131.0" width="2.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="299.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (28 samples, 0.06%)</title><rect x="299.2" y="227.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.2" y="238.0"></text>
</g>
<g>
<title>java.lang.String[] (28 samples, 0.06%)</title><rect x="299.2" y="211.0" width="0.8" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="302.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (46 samples, 0.10%)</title><rect x="300.0" y="227.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.0" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (46 samples, 0.10%)</title><rect x="300.0" y="211.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.0" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (46 samples, 0.10%)</title><rect x="300.0" y="195.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.0" y="206.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.05%)</title><rect x="300.0" y="179.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="303.0" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (26 samples, 0.06%)</title><rect x="300.5" y="179.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.5" y="190.0"></text>
</g>
<g>
<title>byte[] (26 samples, 0.06%)</title><rect x="300.5" y="163.0" width="0.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="303.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (119 samples, 0.27%)</title><rect x="301.2" y="243.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.2" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (119 samples, 0.27%)</title><rect x="301.2" y="227.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.2" y="238.0"></text>
</g>
<g>
<title>byte[] (119 samples, 0.27%)</title><rect x="301.2" y="211.0" width="3.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="304.2" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (53 samples, 0.12%)</title><rect x="304.4" y="243.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (53 samples, 0.12%)</title><rect x="304.4" y="227.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (53 samples, 0.12%)</title><rect x="304.4" y="211.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="307.4" y="222.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.05%)</title><rect x="304.4" y="195.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="307.4" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (33 samples, 0.08%)</title><rect x="304.9" y="195.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="307.9" y="206.0"></text>
</g>
<g>
<title>byte[] (33 samples, 0.08%)</title><rect x="304.9" y="179.0" width="0.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="307.9" y="190.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (87 samples, 0.20%)</title><rect x="305.8" y="243.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.8" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (40 samples, 0.09%)</title><rect x="305.8" y="227.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (40 samples, 0.09%)</title><rect x="305.8" y="211.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (40 samples, 0.09%)</title><rect x="305.8" y="195.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.8" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (40 samples, 0.09%)</title><rect x="305.8" y="179.0" width="1.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="308.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (47 samples, 0.11%)</title><rect x="306.9" y="227.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.9" y="238.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (33 samples, 0.08%)</title><rect x="306.9" y="211.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (33 samples, 0.08%)</title><rect x="306.9" y="195.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (33 samples, 0.08%)</title><rect x="306.9" y="179.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.9" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (33 samples, 0.08%)</title><rect x="306.9" y="163.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.9" y="174.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (33 samples, 0.08%)</title><rect x="306.9" y="147.0" width="0.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="309.9" y="158.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (14 samples, 0.03%)</title><rect x="307.8" y="211.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="310.8" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (20 samples, 0.05%)</title><rect x="308.2" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.2" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (20 samples, 0.05%)</title><rect x="308.2" y="227.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.2" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (20 samples, 0.05%)</title><rect x="308.2" y="211.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.2" y="222.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (20 samples, 0.05%)</title><rect x="308.2" y="195.0" width="0.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="311.2" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$84/357390880.run (13,851 samples, 31.60%)</title><rect x="308.7" y="339.0" width="372.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.7" y="350.0">ru/mail/polis/service/ServiceAsyncImpl$$Lambda$84/3..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (13,851 samples, 31.60%)</title><rect x="308.7" y="323.0" width="372.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.7" y="334.0">ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (13,851 samples, 31.60%)</title><rect x="308.7" y="307.0" width="372.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.7" y="318.0">ru/mail/polis/service/ServiceAsyncImpl.getValue</text>
</g>
<g>
<title>one.nio.http.Response (1,236 samples, 2.82%)</title><rect x="308.7" y="291.0" width="33.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="311.7" y="302.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (5,116 samples, 11.67%)</title><rect x="342.0" y="291.0" width="137.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.0" y="302.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5,116 samples, 11.67%)</title><rect x="342.0" y="275.0" width="137.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.0" y="286.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3,500 samples, 7.98%)</title><rect x="342.0" y="259.0" width="94.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.0" y="270.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3,500 samples, 7.98%)</title><rect x="342.0" y="243.0" width="94.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="345.0" y="254.0">one/nio/uti..</text>
</g>
<g>
<title>byte[] (3,500 samples, 7.98%)</title><rect x="342.0" y="227.0" width="94.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="345.0" y="238.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (1,616 samples, 3.69%)</title><rect x="436.2" y="259.0" width="43.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.2" y="270.0">one/..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,616 samples, 3.69%)</title><rect x="436.2" y="243.0" width="43.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="439.2" y="254.0">one...</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3,742 samples, 8.54%)</title><rect x="479.7" y="291.0" width="100.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.7" y="302.0">one/nio/http..</text>
</g>
<g>
<title>byte[] (1,572 samples, 3.59%)</title><rect x="479.7" y="275.0" width="42.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="482.7" y="286.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (1,297 samples, 2.96%)</title><rect x="522.0" y="275.0" width="34.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="525.0" y="286.0">ja..</text>
</g>
<g>
<title>java.lang.String (873 samples, 1.99%)</title><rect x="556.9" y="275.0" width="23.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="559.9" y="286.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (2,451 samples, 5.59%)</title><rect x="580.4" y="291.0" width="66.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="583.4" y="302.0">ru/mail..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,450 samples, 3.31%)</title><rect x="580.4" y="275.0" width="39.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.4" y="286.0">org..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,450 samples, 3.31%)</title><rect x="580.4" y="259.0" width="39.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="583.4" y="270.0">org..</text>
</g>
<g>
<title>byte[] (1,450 samples, 3.31%)</title><rect x="580.4" y="243.0" width="39.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="583.4" y="254.0">byt..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1,001 samples, 2.28%)</title><rect x="619.4" y="275.0" width="27.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="622.4" y="286.0">r..</text>
</g>
<g>
<title>byte[] (1,001 samples, 2.28%)</title><rect x="619.4" y="259.0" width="27.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="622.4" y="270.0">b..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (1,306 samples, 2.98%)</title><rect x="646.4" y="291.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="649.4" y="302.0">ru/..</text>
</g>
<g>
<title>byte[] (1,306 samples, 2.98%)</title><rect x="646.4" y="275.0" width="35.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="649.4" y="286.0">byt..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18,890 samples, 43.09%)</title><rect x="681.5" y="387.0" width="508.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.5" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,501 samples, 5.71%)</title><rect x="681.5" y="371.0" width="67.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.5" y="382.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1,090 samples, 2.49%)</title><rect x="681.5" y="355.0" width="29.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="684.5" y="366.0">on..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (537 samples, 1.22%)</title><rect x="681.5" y="339.0" width="14.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="684.5" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (553 samples, 1.26%)</title><rect x="696.0" y="339.0" width="14.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="699.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,411 samples, 3.22%)</title><rect x="710.9" y="355.0" width="38.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.9" y="366.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,411 samples, 3.22%)</title><rect x="710.9" y="339.0" width="38.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.9" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,411 samples, 3.22%)</title><rect x="710.9" y="323.0" width="38.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="713.9" y="334.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1,411 samples, 3.22%)</title><rect x="710.9" y="307.0" width="38.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="713.9" y="318.0">sun..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (638 samples, 1.46%)</title><rect x="710.9" y="291.0" width="17.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.9" y="302.0"></text>
</g>
<g>
<title>java.lang.Integer (638 samples, 1.46%)</title><rect x="710.9" y="275.0" width="17.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="713.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (773 samples, 1.76%)</title><rect x="728.0" y="291.0" width="20.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (773 samples, 1.76%)</title><rect x="728.0" y="275.0" width="20.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (773 samples, 1.76%)</title><rect x="728.0" y="259.0" width="20.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.0" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (773 samples, 1.76%)</title><rect x="728.0" y="243.0" width="20.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.0" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (773 samples, 1.76%)</title><rect x="728.0" y="227.0" width="20.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.0" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (773 samples, 1.76%)</title><rect x="728.0" y="211.0" width="20.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="731.0" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (16,389 samples, 37.39%)</title><rect x="748.9" y="371.0" width="441.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="751.9" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (16,389 samples, 37.39%)</title><rect x="748.9" y="355.0" width="441.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="751.9" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15,243 samples, 34.77%)</title><rect x="748.9" y="339.0" width="410.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="751.9" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,644 samples, 10.59%)</title><rect x="748.9" y="323.0" width="125.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="751.9" y="334.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,644 samples, 10.59%)</title><rect x="748.9" y="307.0" width="125.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="751.9" y="318.0">one/nio/http/Ht..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3,383 samples, 7.72%)</title><rect x="748.9" y="291.0" width="91.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="751.9" y="302.0">RequestHand..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1,084 samples, 2.47%)</title><rect x="748.9" y="275.0" width="29.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="751.9" y="286.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,084 samples, 2.47%)</title><rect x="748.9" y="259.0" width="29.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.9" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,084 samples, 2.47%)</title><rect x="748.9" y="243.0" width="29.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="751.9" y="254.0">ja..</text>
</g>
<g>
<title>java.lang.String (553 samples, 1.26%)</title><rect x="748.9" y="227.0" width="14.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="751.9" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (531 samples, 1.21%)</title><rect x="763.7" y="227.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="766.7" y="238.0"></text>
</g>
<g>
<title>byte[] (531 samples, 1.21%)</title><rect x="763.7" y="211.0" width="14.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="766.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (2,299 samples, 5.24%)</title><rect x="778.0" y="275.0" width="61.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.0" y="286.0">ru/mai..</text>
</g>
<g>
<title>java/lang/String.getBytes (621 samples, 1.42%)</title><rect x="778.0" y="259.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="781.0" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (621 samples, 1.42%)</title><rect x="778.0" y="243.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (621 samples, 1.42%)</title><rect x="778.0" y="227.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.0" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (621 samples, 1.42%)</title><rect x="778.0" y="211.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.0" y="222.0"></text>
</g>
<g>
<title>byte[] (621 samples, 1.42%)</title><rect x="778.0" y="195.0" width="16.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="781.0" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (216 samples, 0.49%)</title><rect x="794.7" y="259.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="797.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (216 samples, 0.49%)</title><rect x="794.7" y="243.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.get$Lambda (216 samples, 0.49%)</title><rect x="794.7" y="227.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="797.7" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ServiceAsyncImpl$$Lambda$76 (216 samples, 0.49%)</title><rect x="794.7" y="211.0" width="5.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="797.7" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,018 samples, 2.32%)</title><rect x="800.6" y="259.0" width="27.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="803.6" y="270.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,018 samples, 2.32%)</title><rect x="800.6" y="243.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="803.6" y="254.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,018 samples, 2.32%)</title><rect x="800.6" y="227.0" width="27.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="803.6" y="238.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (443 samples, 1.01%)</title><rect x="828.0" y="259.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.0" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (437 samples, 1.00%)</title><rect x="828.0" y="243.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.0" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (437 samples, 1.00%)</title><rect x="828.0" y="227.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$84/357390880.get$Lambda (437 samples, 1.00%)</title><rect x="828.0" y="211.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="831.0" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ServiceAsyncImpl$$Lambda$84 (437 samples, 1.00%)</title><rect x="828.0" y="195.0" width="11.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="831.0" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,261 samples, 2.88%)</title><rect x="839.9" y="291.0" width="34.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="842.9" y="302.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (1,261 samples, 2.88%)</title><rect x="839.9" y="275.0" width="34.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="842.9" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,261 samples, 2.88%)</title><rect x="839.9" y="259.0" width="34.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="842.9" y="270.0">ja..</text>
</g>
<g>
<title>java.lang.String (580 samples, 1.32%)</title><rect x="839.9" y="243.0" width="15.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="842.9" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (681 samples, 1.55%)</title><rect x="855.5" y="243.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.5" y="254.0"></text>
</g>
<g>
<title>byte[] (681 samples, 1.55%)</title><rect x="855.5" y="227.0" width="18.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="858.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,558 samples, 12.68%)</title><rect x="873.9" y="323.0" width="149.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="876.9" y="334.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one.nio.http.Request (913 samples, 2.08%)</title><rect x="873.9" y="307.0" width="24.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="876.9" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,748 samples, 3.99%)</title><rect x="898.4" y="307.0" width="47.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="901.4" y="318.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (1,748 samples, 3.99%)</title><rect x="898.4" y="291.0" width="47.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="901.4" y="302.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,897 samples, 6.61%)</title><rect x="945.5" y="307.0" width="78.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="948.5" y="318.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,897 samples, 6.61%)</title><rect x="945.5" y="291.0" width="78.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="948.5" y="302.0">one/nio/u..</text>
</g>
<g>
<title>char[] (1,417 samples, 3.23%)</title><rect x="945.5" y="275.0" width="38.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="948.5" y="286.0">cha..</text>
</g>
<g>
<title>java.lang.String (598 samples, 1.36%)</title><rect x="983.6" y="275.0" width="16.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="986.6" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (882 samples, 2.01%)</title><rect x="999.7" y="275.0" width="23.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.7" y="286.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (882 samples, 2.01%)</title><rect x="999.7" y="259.0" width="23.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1002.7" y="270.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (882 samples, 2.01%)</title><rect x="999.7" y="243.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1002.7" y="254.0">j..</text>
</g>
<g>
<title>byte[] (882 samples, 2.01%)</title><rect x="999.7" y="227.0" width="23.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1002.7" y="238.0">b..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,041 samples, 11.50%)</title><rect x="1023.5" y="323.0" width="135.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1026.5" y="334.0">one/nio/util/Utf8..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,041 samples, 11.50%)</title><rect x="1023.5" y="307.0" width="135.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.5" y="318.0">one/nio/util/Utf8..</text>
</g>
<g>
<title>char[] (2,572 samples, 5.87%)</title><rect x="1023.5" y="291.0" width="69.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1026.5" y="302.0">char[]</text>
</g>
<g>
<title>java.lang.String (849 samples, 1.94%)</title><rect x="1092.7" y="291.0" width="22.8" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1095.7" y="302.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,620 samples, 3.70%)</title><rect x="1115.5" y="291.0" width="43.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.5" y="302.0">java..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,620 samples, 3.70%)</title><rect x="1115.5" y="275.0" width="43.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.5" y="286.0">java..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,620 samples, 3.70%)</title><rect x="1115.5" y="259.0" width="43.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1118.5" y="270.0">java..</text>
</g>
<g>
<title>byte[] (1,620 samples, 3.70%)</title><rect x="1115.5" y="243.0" width="43.7" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1118.5" y="254.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.read (1,146 samples, 2.61%)</title><rect x="1159.2" y="339.0" width="30.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1162.2" y="350.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1,146 samples, 2.61%)</title><rect x="1159.2" y="323.0" width="30.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1162.2" y="334.0">on..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,146 samples, 2.61%)</title><rect x="1159.2" y="307.0" width="30.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1162.2" y="318.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,146 samples, 2.61%)</title><rect x="1159.2" y="291.0" width="30.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1162.2" y="302.0">ja..</text>
</g>
</g>
</svg>
