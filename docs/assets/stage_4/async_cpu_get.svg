<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="597"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="597"> </text>
<g id="frames">
<g>
<title>all (3,269 samples, 100.00%)</title><rect x="10.0" y="563.0" width="1180.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="574.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="547.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="515.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.0" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.09%)</title><rect x="10.4" y="547.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.4" y="558.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.09%)</title><rect x="10.4" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.09%)</title><rect x="10.4" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.4" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="10.7" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.7" y="510.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="11.1" y="499.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.1" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="11.1" y="483.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="14.1" y="494.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="11.4" y="547.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="14.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="11.4" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.4" y="542.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="11.4" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.4" y="526.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="11.8" y="547.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="14.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="11.8" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.8" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="11.8" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.8" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,003 samples, 61.27%)</title><rect x="12.2" y="547.0" width="723.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="558.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,003 samples, 61.27%)</title><rect x="12.2" y="531.0" width="723.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.2" y="542.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,003 samples, 61.27%)</title><rect x="12.2" y="515.0" width="723.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="526.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (9 samples, 0.28%)</title><rect x="12.9" y="499.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.28%)</title><rect x="12.9" y="483.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (9 samples, 0.28%)</title><rect x="12.9" y="467.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="13.2" y="451.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="16.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.09%)</title><rect x="14.0" y="451.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.0" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.09%)</title><rect x="14.0" y="435.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.0" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.09%)</title><rect x="14.0" y="419.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.06%)</title><rect x="14.3" y="403.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.run (2 samples, 0.06%)</title><rect x="15.1" y="451.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$84/357390880.run (1 samples, 0.03%)</title><rect x="15.8" y="451.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.03%)</title><rect x="16.1" y="499.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="16.1" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (591 samples, 18.08%)</title><rect x="16.5" y="499.0" width="213.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.5" y="510.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (590 samples, 18.05%)</title><rect x="16.9" y="483.0" width="212.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="494.0">java/util/concurrent/ArrayBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (532 samples, 16.27%)</title><rect x="16.9" y="467.0" width="192.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="478.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.03%)</title><rect x="16.9" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.9" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="16.9" y="435.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="16.9" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="16.9" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="16.9" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="19.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="16.9" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="16.9" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="19.9" y="366.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="16.9" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="16.9" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="16.9" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="17.2" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 0.49%)</title><rect x="17.6" y="451.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.49%)</title><rect x="17.6" y="435.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="20.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.21%)</title><rect x="20.8" y="419.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.21%)</title><rect x="20.8" y="403.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.21%)</title><rect x="20.8" y="387.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.8" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="21.2" y="371.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="24.2" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="21.2" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="24.2" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="21.2" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.2" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="21.6" y="355.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="21.9" y="355.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="24.9" y="366.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="23.0" y="355.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="26.0" y="366.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="23.0" y="339.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="26.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (513 samples, 15.69%)</title><rect x="23.4" y="451.0" width="185.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.4" y="462.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (505 samples, 15.45%)</title><rect x="26.2" y="435.0" width="182.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.2" y="446.0">jdk/internal/misc/Unsafe..</text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="34.9" y="419.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="37.9" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="35.3" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="38.3" y="430.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="35.6" y="419.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="38.6" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (478 samples, 14.62%)</title><rect x="36.0" y="419.0" width="172.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="39.0" y="430.0">Unsafe_Park(JNIEnv_*, ..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="36.7" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="39.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="37.1" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="40.1" y="414.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (2 samples, 0.06%)</title><rect x="37.4" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="40.4" y="414.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="38.2" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="41.2" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="38.2" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.2" y="398.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="38.2" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="41.2" y="382.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.09%)</title><rect x="38.5" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="41.5" y="414.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="38.5" y="387.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="41.5" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="38.5" y="371.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="41.5" y="382.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (2 samples, 0.06%)</title><rect x="38.9" y="387.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.9" y="398.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (2 samples, 0.06%)</title><rect x="38.9" y="371.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="41.9" y="382.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="39.6" y="403.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="42.6" y="414.0"></text>
</g>
<g>
<title>JavaThread::threadObj() const (2 samples, 0.06%)</title><rect x="39.6" y="387.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="42.6" y="398.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.06%)</title><rect x="40.3" y="403.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="43.3" y="414.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.06%)</title><rect x="40.3" y="387.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="43.3" y="398.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="40.7" y="371.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="43.7" y="382.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="41.0" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="44.0" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (459 samples, 14.04%)</title><rect x="41.4" y="403.0" width="165.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="44.4" y="414.0">Parker::park(bool, lo..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="42.5" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="45.5" y="398.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.21%)</title><rect x="42.8" y="387.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="45.8" y="398.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="43.6" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.6" y="382.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.09%)</title><rect x="43.9" y="371.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="46.9" y="382.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.06%)</title><rect x="44.3" y="355.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="47.3" y="366.0"></text>
</g>
<g>
<title>Monitor::TryFast() (2 samples, 0.06%)</title><rect x="44.3" y="339.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="47.3" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="45.0" y="371.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="48.0" y="382.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="45.4" y="387.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="48.4" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (438 samples, 13.40%)</title><rect x="45.7" y="387.0" width="158.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="48.7" y="398.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.24%)</title><rect x="203.8" y="387.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="206.8" y="398.0"></text>
</g>
<g>
<title>_pthread_testcancel (3 samples, 0.09%)</title><rect x="205.6" y="371.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="208.6" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="206.7" y="387.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="209.7" y="398.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="207.1" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="210.1" y="414.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="207.4" y="403.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="210.4" y="414.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="207.4" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="210.4" y="398.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="207.4" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="210.4" y="382.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="207.8" y="403.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="210.8" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="208.2" y="403.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="211.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="208.5" y="451.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="211.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.09%)</title><rect x="208.9" y="467.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.09%)</title><rect x="208.9" y="451.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.09%)</title><rect x="208.9" y="435.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.09%)</title><rect x="208.9" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.09%)</title><rect x="208.9" y="403.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="208.9" y="387.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="208.9" y="371.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="211.9" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.09%)</title><rect x="208.9" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="211.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.09%)</title><rect x="208.9" y="339.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="211.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (55 samples, 1.68%)</title><rect x="210.0" y="467.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="213.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (55 samples, 1.68%)</title><rect x="210.0" y="451.0" width="19.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (55 samples, 1.68%)</title><rect x="210.0" y="435.0" width="19.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (53 samples, 1.62%)</title><rect x="210.3" y="419.0" width="19.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.3" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (53 samples, 1.62%)</title><rect x="210.3" y="403.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.3" y="414.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="211.1" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="214.1" y="398.0"></text>
</g>
<g>
<title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.03%)</title><rect x="211.4" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="214.4" y="398.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="211.8" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="214.8" y="398.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (48 samples, 1.47%)</title><rect x="212.1" y="387.0" width="17.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="215.1" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.09%)</title><rect x="212.1" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="215.1" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="212.9" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="215.9" y="366.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="212.9" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="215.9" y="350.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="212.9" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="215.9" y="334.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="212.9" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="215.9" y="318.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="213.2" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="216.2" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="213.6" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="216.6" y="382.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="213.9" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="216.9" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="214.3" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="214.3" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.3" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="214.7" y="371.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="217.7" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="215.0" y="371.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="218.0" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (34 samples, 1.04%)</title><rect x="216.1" y="371.0" width="12.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="219.1" y="382.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="228.4" y="371.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="231.4" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="228.7" y="371.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="231.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="229.5" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1 samples, 0.03%)</title><rect x="229.8" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.8" y="510.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="229.8" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="232.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="229.8" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="232.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="229.8" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.run (951 samples, 29.09%)</title><rect x="230.2" y="499.0" width="343.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.2" y="510.0">ru/mail/polis/service/ServiceAsyncImpl$$Lambda$..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (951 samples, 29.09%)</title><rect x="230.2" y="483.0" width="343.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.2" y="494.0">ru/mail/polis/service/ServiceAsyncImpl.lambda$e..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (951 samples, 29.09%)</title><rect x="230.2" y="467.0" width="343.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.2" y="478.0">ru/mail/polis/service/ServiceAsyncImpl.forwardR..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (149 samples, 4.56%)</title><rect x="230.2" y="451.0" width="53.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.2" y="462.0">one/n..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.06%)</title><rect x="230.6" y="435.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="233.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.06%)</title><rect x="230.6" y="419.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.06%)</title><rect x="230.6" y="403.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.06%)</title><rect x="230.6" y="387.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (138 samples, 4.22%)</title><rect x="231.3" y="435.0" width="49.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.3" y="446.0">one/n..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.24%)</title><rect x="232.0" y="419.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.0" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="232.4" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="235.4" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="232.4" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="235.4" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="232.4" y="371.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="235.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="232.4" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="235.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="232.4" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="235.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="232.4" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="235.4" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="232.4" y="307.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="235.4" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="232.4" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="235.4" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="232.4" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="235.4" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="232.4" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="235.4" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="232.4" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="235.4" y="254.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="232.4" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="235.4" y="238.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="232.4" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="235.4" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.18%)</title><rect x="232.7" y="403.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="235.7" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.12%)</title><rect x="232.7" y="387.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.7" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="233.8" y="371.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="236.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="234.2" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="234.2" y="371.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="234.2" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (128 samples, 3.92%)</title><rect x="234.9" y="419.0" width="46.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.9" y="430.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session.write (128 samples, 3.92%)</title><rect x="234.9" y="403.0" width="46.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.9" y="414.0">one/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (126 samples, 3.85%)</title><rect x="234.9" y="387.0" width="45.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.9" y="398.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (126 samples, 3.85%)</title><rect x="234.9" y="371.0" width="45.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="237.9" y="382.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (126 samples, 3.85%)</title><rect x="234.9" y="355.0" width="45.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.9" y="366.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="234.9" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="234.9" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="234.9" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (120 samples, 3.67%)</title><rect x="235.6" y="339.0" width="43.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="350.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (120 samples, 3.67%)</title><rect x="235.6" y="323.0" width="43.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.6" y="334.0">sun/..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="236.0" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="239.0" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="236.0" y="291.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="239.0" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (116 samples, 3.55%)</title><rect x="236.3" y="307.0" width="41.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.3" y="318.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (116 samples, 3.55%)</title><rect x="236.3" y="291.0" width="41.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.3" y="302.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (115 samples, 3.52%)</title><rect x="236.7" y="275.0" width="41.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.7" y="286.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.09%)</title><rect x="239.2" y="259.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="242.2" y="270.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.06%)</title><rect x="239.6" y="243.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="242.6" y="254.0"></text>
</g>
<g>
<title>write (105 samples, 3.21%)</title><rect x="240.3" y="259.0" width="37.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="243.3" y="270.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="278.2" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="278.2" y="291.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.2" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="278.2" y="275.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.2" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="278.2" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.2" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="278.2" y="243.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.2" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.03%)</title><rect x="278.2" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.2" y="238.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="278.6" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="278.6" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="278.6" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="281.6" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.rewind (1 samples, 0.03%)</title><rect x="278.6" y="227.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.6" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (4 samples, 0.12%)</title><rect x="278.9" y="339.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.9" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="280.0" y="323.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="283.0" y="334.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="280.0" y="307.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="283.0" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="280.0" y="291.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="283.0" y="302.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="280.0" y="275.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="283.0" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.06%)</title><rect x="280.4" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.24%)</title><rect x="281.1" y="435.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.15%)</title><rect x="282.2" y="419.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.15%)</title><rect x="282.2" y="403.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="284.0" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="284.0" y="435.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="284.0" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (801 samples, 24.50%)</title><rect x="284.3" y="451.0" width="289.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.3" y="462.0">ru/mail/polis/service/ServiceAsyncImpl...</text>
</g>
<g>
<title>java/lang/String.format (82 samples, 2.51%)</title><rect x="284.3" y="435.0" width="29.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.3" y="446.0">ja..</text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (13 samples, 0.40%)</title><rect x="284.3" y="419.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.3" y="430.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (13 samples, 0.40%)</title><rect x="284.3" y="403.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.3" y="414.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (13 samples, 0.40%)</title><rect x="284.3" y="387.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.3" y="398.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (13 samples, 0.40%)</title><rect x="284.3" y="371.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.3" y="382.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (6 samples, 0.18%)</title><rect x="285.8" y="355.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.8" y="366.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (6 samples, 0.18%)</title><rect x="285.8" y="339.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.8" y="350.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (6 samples, 0.18%)</title><rect x="285.8" y="323.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="288.8" y="334.0"></text>
</g>
<g>
<title>java/util/Locale.getUnicodeLocaleType (1 samples, 0.03%)</title><rect x="285.8" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.8" y="318.0"></text>
</g>
<g>
<title>java/util/Locale.hasExtensions (1 samples, 0.03%)</title><rect x="285.8" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.8" y="302.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLocaleResources (5 samples, 0.15%)</title><rect x="286.1" y="307.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.15%)</title><rect x="286.1" y="291.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.1" y="302.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (3 samples, 0.09%)</title><rect x="287.9" y="355.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.09%)</title><rect x="287.9" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.9" y="350.0"></text>
</g>
<g>
<title>java/util/Formatter.format (69 samples, 2.11%)</title><rect x="289.0" y="419.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.0" y="430.0">j..</text>
</g>
<g>
<title>java/util/Formatter.format (69 samples, 2.11%)</title><rect x="289.0" y="403.0" width="24.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.0" y="414.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.09%)</title><rect x="290.8" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.8" y="398.0"></text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (4 samples, 0.12%)</title><rect x="291.9" y="387.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.12%)</title><rect x="291.9" y="371.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 0.12%)</title><rect x="291.9" y="355.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.9" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 0.12%)</title><rect x="291.9" y="339.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.9" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (4 samples, 0.12%)</title><rect x="291.9" y="323.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.9" y="334.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (6 samples, 0.18%)</title><rect x="293.4" y="387.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.4" y="398.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (6 samples, 0.18%)</title><rect x="293.4" y="371.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.4" y="382.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (6 samples, 0.18%)</title><rect x="293.4" y="355.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.4" y="366.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (6 samples, 0.18%)</title><rect x="293.4" y="339.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="323.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="307.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.4" y="318.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="291.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="275.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="259.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.4" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.18%)</title><rect x="293.4" y="243.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.4" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.09%)</title><rect x="294.1" y="227.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.09%)</title><rect x="294.1" y="211.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.1" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="294.1" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="297.1" y="206.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="294.4" y="195.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="297.4" y="206.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="295.2" y="227.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.2" y="238.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (51 samples, 1.56%)</title><rect x="295.5" y="387.0" width="18.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="398.0"></text>
</g>
<g>
<title>java/util/Formatter.checkText (5 samples, 0.15%)</title><rect x="300.2" y="371.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.2" y="382.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (2 samples, 0.06%)</title><rect x="301.3" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.3" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (29 samples, 0.89%)</title><rect x="302.0" y="371.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="382.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (2 samples, 0.06%)</title><rect x="302.0" y="355.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.0" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (27 samples, 0.83%)</title><rect x="302.7" y="355.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.7" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (27 samples, 0.83%)</title><rect x="302.7" y="339.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="305.7" y="350.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (27 samples, 0.83%)</title><rect x="302.7" y="323.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="305.7" y="334.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (27 samples, 0.83%)</title><rect x="302.7" y="307.0" width="9.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.7" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (21 samples, 0.64%)</title><rect x="303.1" y="291.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.1" y="302.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (21 samples, 0.64%)</title><rect x="303.1" y="275.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.1" y="286.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="303.1" y="259.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.1" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (20 samples, 0.61%)</title><rect x="303.5" y="259.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="306.5" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (3 samples, 0.09%)</title><rect x="303.5" y="243.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.5" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (3 samples, 0.09%)</title><rect x="303.5" y="227.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.5" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (17 samples, 0.52%)</title><rect x="304.5" y="243.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.5" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="304.5" y="227.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.5" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (16 samples, 0.49%)</title><rect x="304.9" y="227.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.9" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (15 samples, 0.46%)</title><rect x="305.3" y="211.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.3" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (13 samples, 0.40%)</title><rect x="305.3" y="195.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.3" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (6 samples, 0.18%)</title><rect x="306.7" y="179.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.7" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (6 samples, 0.18%)</title><rect x="306.7" y="163.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.7" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (5 samples, 0.15%)</title><rect x="306.7" y="147.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.7" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$21/2015781843.is (1 samples, 0.03%)</title><rect x="307.1" y="131.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.1" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.03%)</title><rect x="307.1" y="115.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.1" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$21/2015781843.is (1 samples, 0.03%)</title><rect x="307.1" y="99.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.1" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (1 samples, 0.03%)</title><rect x="307.1" y="83.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.1" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="307.4" y="131.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.4" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.03%)</title><rect x="307.4" y="115.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.4" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.03%)</title><rect x="307.4" y="99.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.4" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (1 samples, 0.03%)</title><rect x="307.4" y="83.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.4" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.03%)</title><rect x="307.4" y="67.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="310.4" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$21/2015781843.is (1 samples, 0.03%)</title><rect x="307.4" y="51.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.4" y="62.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (2 samples, 0.06%)</title><rect x="307.8" y="131.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="310.8" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (2 samples, 0.06%)</title><rect x="307.8" y="115.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.8" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (2 samples, 0.06%)</title><rect x="307.8" y="99.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="310.8" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (2 samples, 0.06%)</title><rect x="307.8" y="83.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.8" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.06%)</title><rect x="307.8" y="67.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.8" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (2 samples, 0.06%)</title><rect x="307.8" y="51.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.8" y="62.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (2 samples, 0.06%)</title><rect x="307.8" y="35.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.8" y="46.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.03%)</title><rect x="308.5" y="147.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.5" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (1 samples, 0.03%)</title><rect x="308.5" y="131.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.5" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.03%)</title><rect x="308.5" y="115.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="311.5" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (3 samples, 0.09%)</title><rect x="308.9" y="179.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.9" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="308.9" y="163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.9" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$16/209833425.is (1 samples, 0.03%)</title><rect x="308.9" y="147.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.9" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.06%)</title><rect x="309.2" y="163.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="309.2" y="147.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.2" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (2 samples, 0.06%)</title><rect x="310.0" y="195.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.0" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.06%)</title><rect x="310.0" y="179.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.0" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (2 samples, 0.06%)</title><rect x="310.0" y="163.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.0" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (2 samples, 0.06%)</title><rect x="310.0" y="147.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.0" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (5 samples, 0.15%)</title><rect x="310.7" y="291.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="313.7" y="302.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (2 samples, 0.06%)</title><rect x="310.7" y="275.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.7" y="286.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (3 samples, 0.09%)</title><rect x="311.4" y="275.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.4" y="286.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (1 samples, 0.03%)</title><rect x="311.4" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.4" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.03%)</title><rect x="311.4" y="243.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.4" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$16/209833425.is (1 samples, 0.03%)</title><rect x="311.4" y="227.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.4" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (2 samples, 0.06%)</title><rect x="311.8" y="259.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.8" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (2 samples, 0.06%)</title><rect x="311.8" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.8" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (2 samples, 0.06%)</title><rect x="311.8" y="227.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.8" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (2 samples, 0.06%)</title><rect x="311.8" y="211.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.8" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.06%)</title><rect x="311.8" y="195.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.8" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (4 samples, 0.12%)</title><rect x="312.5" y="371.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="315.5" y="382.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (4 samples, 0.12%)</title><rect x="312.5" y="355.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.5" y="366.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (4 samples, 0.12%)</title><rect x="312.5" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.5" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.09%)</title><rect x="313.9" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.9" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.09%)</title><rect x="313.9" y="419.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.09%)</title><rect x="313.9" y="403.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.9" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.09%)</title><rect x="313.9" y="387.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.9" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="314.7" y="371.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="317.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (716 samples, 21.90%)</title><rect x="315.0" y="435.0" width="258.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.0" y="446.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (716 samples, 21.90%)</title><rect x="315.0" y="419.0" width="258.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.0" y="430.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.21%)</title><rect x="315.4" y="403.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.21%)</title><rect x="315.4" y="387.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="318.4" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.21%)</title><rect x="315.4" y="371.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (449 samples, 13.74%)</title><rect x="317.9" y="403.0" width="162.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.9" y="414.0">one/nio/http/HttpClie..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.09%)</title><rect x="320.8" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="323.8" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.09%)</title><rect x="320.8" y="371.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="323.8" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.09%)</title><rect x="320.8" y="355.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="323.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.09%)</title><rect x="320.8" y="339.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="323.8" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="320.8" y="323.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="323.8" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="320.8" y="307.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="323.8" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="320.8" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="323.8" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::print_stats(char const*) (1 samples, 0.03%)</title><rect x="320.8" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="323.8" y="286.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="321.2" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="324.2" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="321.2" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="324.2" y="286.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="321.2" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="324.2" y="270.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="321.5" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="324.5" y="334.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="321.5" y="307.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="324.5" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (2 samples, 0.06%)</title><rect x="321.9" y="387.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="324.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (436 samples, 13.34%)</title><rect x="322.6" y="387.0" width="157.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.6" y="398.0">one/nio/net/JavaSock..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="322.6" y="371.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.6" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="322.6" y="355.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="325.6" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="323.0" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.0" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="323.0" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (434 samples, 13.28%)</title><rect x="323.3" y="371.0" width="156.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.3" y="382.0">sun/nio/ch/SocketCha..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="324.8" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="324.8" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (421 samples, 12.88%)</title><rect x="325.1" y="355.0" width="152.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.1" y="366.0">sun/nio/ch/IOUtil.r..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="325.1" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (419 samples, 12.82%)</title><rect x="325.8" y="339.0" width="151.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="328.8" y="350.0">sun/nio/ch/IOUtil.r..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (409 samples, 12.51%)</title><rect x="326.6" y="323.0" width="147.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.6" y="334.0">sun/nio/ch/IOUtil.r..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (409 samples, 12.51%)</title><rect x="326.6" y="307.0" width="147.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="329.6" y="318.0">sun/nio/ch/SocketDi..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (409 samples, 12.51%)</title><rect x="326.6" y="291.0" width="147.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.6" y="302.0">sun/nio/ch/FileDisp..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.06%)</title><rect x="330.9" y="275.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="333.9" y="286.0"></text>
</g>
<g>
<title>rpc_errlist (395 samples, 12.08%)</title><rect x="331.6" y="275.0" width="142.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="334.6" y="286.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.24%)</title><rect x="474.2" y="323.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.2" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.09%)</title><rect x="474.2" y="307.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.2" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="474.9" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (5 samples, 0.15%)</title><rect x="475.3" y="307.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="478.3" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="476.7" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.7" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="476.7" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (8 samples, 0.24%)</title><rect x="477.1" y="355.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (6 samples, 0.18%)</title><rect x="477.8" y="339.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="480.8" y="350.0"></text>
</g>
<g>
<title>pthread_self (3 samples, 0.09%)</title><rect x="478.9" y="323.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="481.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (23 samples, 0.70%)</title><rect x="480.0" y="403.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="483.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (17 samples, 0.52%)</title><rect x="481.1" y="387.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.1" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.40%)</title><rect x="482.5" y="371.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="485.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.31%)</title><rect x="483.6" y="355.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="486.6" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="486.8" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="489.8" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="486.8" y="323.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="489.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.09%)</title><rect x="487.2" y="387.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="490.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="487.9" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="487.9" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="490.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (12 samples, 0.37%)</title><rect x="488.3" y="403.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="489.0" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="492.0" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.18%)</title><rect x="489.4" y="387.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="492.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.15%)</title><rect x="489.4" y="371.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.12%)</title><rect x="489.4" y="355.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.03%)</title><rect x="489.4" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.09%)</title><rect x="489.7" y="339.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="492.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="490.8" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="493.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="491.2" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="491.2" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.2" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="491.2" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.2" y="350.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="491.2" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="491.2" y="307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.2" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="491.2" y="291.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="494.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.09%)</title><rect x="491.5" y="387.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.06%)</title><rect x="491.9" y="371.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.9" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="492.6" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="492.6" y="387.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="495.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="492.6" y="371.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (211 samples, 6.45%)</title><rect x="493.0" y="403.0" width="76.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="496.0" y="414.0">one/nio/..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (144 samples, 4.41%)</title><rect x="493.7" y="387.0" width="52.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.7" y="398.0">java/..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (143 samples, 4.37%)</title><rect x="494.1" y="371.0" width="51.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="497.1" y="382.0">java/..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (142 samples, 4.34%)</title><rect x="494.4" y="355.0" width="51.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.4" y="366.0">java/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (141 samples, 4.31%)</title><rect x="494.8" y="339.0" width="50.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.8" y="350.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="494.8" y="323.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="497.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="494.8" y="307.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (130 samples, 3.98%)</title><rect x="496.2" y="323.0" width="46.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.2" y="334.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (129 samples, 3.95%)</title><rect x="496.6" y="307.0" width="46.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="499.6" y="318.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (128 samples, 3.92%)</title><rect x="496.6" y="291.0" width="46.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.6" y="302.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (128 samples, 3.92%)</title><rect x="496.6" y="275.0" width="46.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.6" y="286.0">sun/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="498.7" y="259.0" width="0.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="501.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (120 samples, 3.67%)</title><rect x="499.5" y="259.0" width="43.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.5" y="270.0">sun/..</text>
</g>
<g>
<title>write (117 samples, 3.58%)</title><rect x="500.6" y="243.0" width="42.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="503.6" y="254.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="542.8" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="545.8" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="542.8" y="275.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="545.8" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="542.8" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (2 samples, 0.06%)</title><rect x="543.1" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="546.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (5 samples, 0.15%)</title><rect x="543.9" y="323.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.9" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (4 samples, 0.12%)</title><rect x="544.2" y="307.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="547.2" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="545.3" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="548.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (65 samples, 1.99%)</title><rect x="545.7" y="387.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.7" y="398.0">s..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (62 samples, 1.90%)</title><rect x="546.8" y="371.0" width="22.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.8" y="382.0">j..</text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.06%)</title><rect x="546.8" y="355.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.8" y="366.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (47 samples, 1.44%)</title><rect x="547.5" y="355.0" width="16.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="550.5" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="548.6" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="551.6" y="350.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="548.9" y="339.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="551.9" y="350.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="549.3" y="339.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="552.3" y="350.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="550.0" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="553.0" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (4 samples, 0.12%)</title><rect x="550.4" y="339.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="553.4" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (4 samples, 0.12%)</title><rect x="550.4" y="323.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="553.4" y="334.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.06%)</title><rect x="550.7" y="307.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="553.7" y="318.0"></text>
</g>
<g>
<title>method_matches(Method const*, Symbol const*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="551.4" y="307.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="554.4" y="318.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="551.8" y="339.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="554.8" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (8 samples, 0.24%)</title><rect x="552.2" y="339.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="555.2" y="350.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="552.9" y="323.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.9" y="334.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (2 samples, 0.06%)</title><rect x="553.3" y="323.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="556.3" y="334.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="554.0" y="323.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="557.0" y="334.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="554.3" y="307.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="557.3" y="318.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.03%)</title><rect x="554.7" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="557.7" y="334.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (4 samples, 0.12%)</title><rect x="555.1" y="339.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="558.1" y="350.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.09%)</title><rect x="555.4" y="323.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="558.4" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.09%)</title><rect x="555.4" y="307.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="558.4" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="556.5" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="559.5" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="556.9" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="559.9" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="556.9" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="559.9" y="334.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.03%)</title><rect x="557.2" y="339.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="560.2" y="350.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="557.6" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="560.6" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.09%)</title><rect x="557.9" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="560.9" y="350.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.06%)</title><rect x="558.3" y="323.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.3" y="334.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (15 samples, 0.46%)</title><rect x="559.0" y="339.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="562.0" y="350.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="559.4" y="323.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.4" y="334.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (5 samples, 0.15%)</title><rect x="559.8" y="323.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.8" y="334.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (2 samples, 0.06%)</title><rect x="560.8" y="307.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="563.8" y="318.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (8 samples, 0.24%)</title><rect x="561.6" y="323.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="564.6" y="334.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (2 samples, 0.06%)</title><rect x="561.6" y="307.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="564.6" y="318.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="562.3" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="565.3" y="318.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.06%)</title><rect x="562.6" y="307.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="565.6" y="318.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.06%)</title><rect x="562.6" y="291.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="565.6" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="563.0" y="275.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="566.0" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="563.0" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="566.0" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="563.0" y="243.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.0" y="254.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.09%)</title><rect x="563.4" y="307.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="566.4" y="318.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.03%)</title><rect x="563.7" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.7" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.03%)</title><rect x="564.1" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="567.1" y="302.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="564.4" y="355.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="567.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="564.8" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="567.8" y="366.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="565.2" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="568.2" y="366.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="565.5" y="355.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="568.5" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="565.9" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="568.9" y="366.0"></text>
</g>
<g>
<title>call_stub (3 samples, 0.09%)</title><rect x="566.2" y="355.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="569.2" y="366.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="567.3" y="355.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="570.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.06%)</title><rect x="567.7" y="355.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.7" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.06%)</title><rect x="568.4" y="355.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="571.4" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (12 samples, 0.37%)</title><rect x="569.1" y="403.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="572.1" y="414.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (4 samples, 0.12%)</title><rect x="572.0" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.0" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3 samples, 0.09%)</title><rect x="572.4" y="371.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="575.4" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$84/357390880.run (448 samples, 13.70%)</title><rect x="573.5" y="499.0" width="161.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.5" y="510.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (1 samples, 0.03%)</title><rect x="573.5" y="483.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (447 samples, 13.67%)</title><rect x="573.8" y="483.0" width="161.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.8" y="494.0">ru/mail/polis/service..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (447 samples, 13.67%)</title><rect x="573.8" y="467.0" width="161.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.8" y="478.0">ru/mail/polis/service..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (234 samples, 7.16%)</title><rect x="573.8" y="451.0" width="84.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="576.8" y="462.0">one/nio/ht..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.12%)</title><rect x="575.6" y="435.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="578.6" y="446.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.12%)</title><rect x="575.6" y="419.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="578.6" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (4 samples, 0.12%)</title><rect x="575.6" y="403.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="578.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.03%)</title><rect x="576.7" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="579.7" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (223 samples, 6.82%)</title><rect x="577.1" y="435.0" width="80.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.1" y="446.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.24%)</title><rect x="577.1" y="419.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="580.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.21%)</title><rect x="577.4" y="403.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="580.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.15%)</title><rect x="577.4" y="387.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="580.4" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="578.5" y="371.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="581.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="579.2" y="387.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="579.2" y="371.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.06%)</title><rect x="579.2" y="355.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (215 samples, 6.58%)</title><rect x="580.0" y="419.0" width="77.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.0" y="430.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (212 samples, 6.49%)</title><rect x="581.0" y="403.0" width="76.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="584.0" y="414.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (207 samples, 6.33%)</title><rect x="582.9" y="387.0" width="74.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="585.9" y="398.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (207 samples, 6.33%)</title><rect x="582.9" y="371.0" width="74.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="585.9" y="382.0">one/nio/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (207 samples, 6.33%)</title><rect x="582.9" y="355.0" width="74.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="585.9" y="366.0">sun/nio/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.24%)</title><rect x="582.9" y="339.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="585.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.24%)</title><rect x="582.9" y="323.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.24%)</title><rect x="582.9" y="307.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="585.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (191 samples, 5.84%)</title><rect x="585.7" y="339.0" width="69.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.7" y="350.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (191 samples, 5.84%)</title><rect x="585.7" y="323.0" width="69.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="588.7" y="334.0">sun/nio..</text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="585.7" y="307.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="588.7" y="318.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (2 samples, 0.06%)</title><rect x="586.1" y="307.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="589.1" y="318.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.12%)</title><rect x="586.8" y="307.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="589.8" y="318.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="587.2" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="590.2" y="302.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="587.5" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.5" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="587.9" y="291.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="590.9" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.12%)</title><rect x="588.3" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.3" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.12%)</title><rect x="588.3" y="291.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="591.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.12%)</title><rect x="588.3" y="275.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.12%)</title><rect x="588.3" y="259.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="591.3" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.12%)</title><rect x="588.3" y="243.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.3" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.09%)</title><rect x="588.6" y="227.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="591.6" y="238.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (3 samples, 0.09%)</title><rect x="588.6" y="211.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="591.6" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (179 samples, 5.48%)</title><rect x="589.7" y="307.0" width="64.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.7" y="318.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (179 samples, 5.48%)</title><rect x="589.7" y="291.0" width="64.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.7" y="302.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (179 samples, 5.48%)</title><rect x="589.7" y="275.0" width="64.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="592.7" y="286.0">sun/nio..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.09%)</title><rect x="591.9" y="259.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="594.9" y="270.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="592.6" y="243.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="595.6" y="254.0"></text>
</g>
<g>
<title>write (170 samples, 5.20%)</title><rect x="593.0" y="259.0" width="61.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="596.0" y="270.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="654.3" y="307.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="657.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="654.3" y="291.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="657.3" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="654.3" y="275.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="657.3" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.rewind (1 samples, 0.03%)</title><rect x="654.3" y="259.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.rewind (1 samples, 0.03%)</title><rect x="654.3" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (8 samples, 0.24%)</title><rect x="654.7" y="339.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.7" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.09%)</title><rect x="656.5" y="323.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.5" y="334.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="656.5" y="307.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="659.5" y="318.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="656.9" y="307.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="659.9" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="656.9" y="291.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="659.9" y="302.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="656.9" y="275.0" width="0.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="659.9" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="657.6" y="435.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="657.9" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="657.9" y="403.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="660.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="658.3" y="451.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.3" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="658.7" y="435.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="661.7" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="658.7" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="661.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="658.7" y="403.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="658.7" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="661.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="658.7" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="658.7" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.7" y="366.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="658.7" y="339.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="661.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="658.7" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="661.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.03%)</title><rect x="658.7" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="661.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (211 samples, 6.45%)</title><rect x="659.0" y="451.0" width="76.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="662.0" y="462.0">ru/mail/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="659.0" y="435.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="659.0" y="419.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.0" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="659.0" y="403.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="662.0" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (207 samples, 6.33%)</title><rect x="659.4" y="435.0" width="74.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="662.4" y="446.0">org/rock..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (207 samples, 6.33%)</title><rect x="659.4" y="419.0" width="74.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.4" y="430.0">org/rock..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (205 samples, 6.27%)</title><rect x="659.7" y="403.0" width="74.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="662.7" y="414.0">Java_org..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="660.8" y="387.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="663.8" y="398.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.06%)</title><rect x="661.5" y="387.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="664.5" y="398.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="662.3" y="387.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="665.3" y="398.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="662.6" y="387.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="665.6" y="398.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="663.0" y="387.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="666.0" y="398.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.06%)</title><rect x="663.3" y="387.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="666.3" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (3 samples, 0.09%)</title><rect x="664.1" y="387.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="667.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="665.2" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.2" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (187 samples, 5.72%)</title><rect x="665.5" y="387.0" width="67.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="668.5" y="398.0">rocksdb..</text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="667.7" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="670.7" y="382.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (38 samples, 1.16%)</title><rect x="668.0" y="371.0" width="13.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="671.0" y="382.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.06%)</title><rect x="668.0" y="355.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="671.0" y="366.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="668.8" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="671.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="669.1" y="355.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.1" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="669.5" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="672.5" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="669.8" y="355.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="672.8" y="366.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="670.2" y="355.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="673.2" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.15%)</title><rect x="670.6" y="355.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="673.6" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="670.9" y="339.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="673.9" y="350.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="670.9" y="323.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="673.9" y="334.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="671.3" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="674.3" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.06%)</title><rect x="671.7" y="339.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="674.7" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="671.7" y="323.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.7" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.06%)</title><rect x="671.7" y="307.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="674.7" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="671.7" y="291.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="674.7" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.06%)</title><rect x="671.7" y="275.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="674.7" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (2 samples, 0.06%)</title><rect x="671.7" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="674.7" y="270.0"></text>
</g>
<g>
<title>jni_NewByteArray (22 samples, 0.67%)</title><rect x="672.4" y="355.0" width="7.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="675.4" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="672.7" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="675.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="673.1" y="339.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="676.1" y="350.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.06%)</title><rect x="673.8" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="676.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="674.5" y="339.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="677.5" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="674.5" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="677.5" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="674.5" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.5" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="674.5" y="291.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="677.5" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="674.5" y="275.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="677.5" y="286.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="674.5" y="259.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="677.5" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (15 samples, 0.46%)</title><rect x="674.9" y="339.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="677.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (11 samples, 0.34%)</title><rect x="676.0" y="323.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.0" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="676.0" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="679.0" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.31%)</title><rect x="676.3" y="307.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.3" y="318.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.06%)</title><rect x="676.7" y="291.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="679.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.03%)</title><rect x="677.1" y="275.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.1" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="677.4" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="680.4" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="677.8" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.8" y="302.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.09%)</title><rect x="678.1" y="291.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="681.1" y="302.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="678.9" y="275.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="681.9" y="286.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="679.2" y="291.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="682.2" y="302.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="679.6" y="291.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="682.6" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="680.0" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="683.0" y="334.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.12%)</title><rect x="680.3" y="355.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="683.3" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="681.0" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="684.0" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="681.4" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="684.4" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="681.4" y="323.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.4" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="681.8" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.8" y="382.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="682.1" y="371.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="685.1" y="382.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="682.5" y="371.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="685.5" y="382.0"></text>
</g>
<g>
<title>free (4 samples, 0.12%)</title><rect x="682.8" y="371.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="685.8" y="382.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.09%)</title><rect x="683.2" y="355.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="686.2" y="366.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.09%)</title><rect x="683.2" y="339.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="686.2" y="350.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.06%)</title><rect x="684.3" y="371.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="687.3" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.18%)</title><rect x="685.0" y="371.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="688.0" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.06%)</title><rect x="686.1" y="355.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="689.1" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="686.8" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.8" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="686.8" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="689.8" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="686.8" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="689.8" y="334.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.06%)</title><rect x="687.2" y="371.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="690.2" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.06%)</title><rect x="687.2" y="355.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="690.2" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="687.2" y="339.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="690.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="687.2" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="690.2" y="334.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="687.5" y="323.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="690.5" y="334.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="687.9" y="371.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="690.9" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.18%)</title><rect x="688.3" y="371.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="691.3" y="382.0"></text>
</g>
<g>
<title>malloc (6 samples, 0.18%)</title><rect x="688.3" y="355.0" width="2.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="691.3" y="366.0"></text>
</g>
<g>
<title>malloc_zone_malloc (6 samples, 0.18%)</title><rect x="688.3" y="339.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="691.3" y="350.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="688.3" y="323.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="691.3" y="334.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (4 samples, 0.12%)</title><rect x="688.6" y="323.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="691.6" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (4 samples, 0.12%)</title><rect x="688.6" y="307.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="691.6" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="690.1" y="323.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="693.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (115 samples, 3.52%)</title><rect x="690.4" y="371.0" width="41.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="693.4" y="382.0">roc..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (115 samples, 3.52%)</title><rect x="690.4" y="355.0" width="41.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="693.4" y="366.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (115 samples, 3.52%)</title><rect x="690.4" y="339.0" width="41.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="693.4" y="350.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (115 samples, 3.52%)</title><rect x="690.4" y="323.0" width="41.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="693.4" y="334.0">roc..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="690.4" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (2 samples, 0.06%)</title><rect x="690.8" y="307.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (111 samples, 3.40%)</title><rect x="691.5" y="307.0" width="40.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="694.5" y="318.0">roc..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (2 samples, 0.06%)</title><rect x="692.6" y="291.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="695.6" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.12%)</title><rect x="693.3" y="291.0" width="1.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="696.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (6 samples, 0.18%)</title><rect x="694.8" y="291.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="697.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="694.8" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="697.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (3 samples, 0.09%)</title><rect x="695.1" y="275.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="698.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="695.8" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="698.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.06%)</title><rect x="696.2" y="275.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="699.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="696.6" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="699.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="696.9" y="291.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="699.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="696.9" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="699.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (1 samples, 0.03%)</title><rect x="697.3" y="291.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="700.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="697.6" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="700.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (86 samples, 2.63%)</title><rect x="698.0" y="291.0" width="31.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="701.0" y="302.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="699.4" y="275.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="702.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="699.8" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="702.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="700.2" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (79 samples, 2.42%)</title><rect x="700.5" y="275.0" width="28.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="703.5" y="286.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.09%)</title><rect x="713.2" y="259.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="716.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (11 samples, 0.34%)</title><rect x="714.2" y="259.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.2" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="717.5" y="243.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="720.5" y="254.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="717.9" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="720.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (26 samples, 0.80%)</title><rect x="718.2" y="259.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="721.2" y="270.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="721.1" y="243.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="724.1" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="721.5" y="243.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="724.5" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (3 samples, 0.09%)</title><rect x="721.8" y="243.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="724.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (12 samples, 0.37%)</title><rect x="722.9" y="243.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="725.9" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.21%)</title><rect x="724.7" y="227.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="727.7" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="727.2" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="730.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (3 samples, 0.09%)</title><rect x="727.6" y="259.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="730.6" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="728.7" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="731.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="729.0" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="732.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="729.4" y="291.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="732.4" y="302.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (4 samples, 0.12%)</title><rect x="730.1" y="291.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="733.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="731.6" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="734.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="731.9" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="734.9" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.03%)</title><rect x="732.3" y="371.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="735.3" y="382.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="732.7" y="371.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="735.7" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.06%)</title><rect x="733.0" y="387.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="736.0" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.03%)</title><rect x="733.7" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="736.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (3 samples, 0.09%)</title><rect x="734.1" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="737.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="734.1" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="737.1" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="734.1" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="737.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="734.1" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="737.1" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="734.1" y="371.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="734.1" y="355.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.1" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="734.1" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="737.1" y="350.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.03%)</title><rect x="734.1" y="323.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="737.1" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.06%)</title><rect x="734.5" y="419.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.5" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="734.5" y="403.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="737.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.06%)</title><rect x="734.5" y="387.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.5" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.03%)</title><rect x="734.8" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.8" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,257 samples, 38.45%)</title><rect x="735.2" y="547.0" width="453.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.2" y="558.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="738.1" y="531.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="741.1" y="542.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="738.4" y="531.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="741.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.hasNext (1 samples, 0.03%)</title><rect x="739.2" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (6 samples, 0.18%)</title><rect x="739.5" y="531.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (6 samples, 0.18%)</title><rect x="739.5" y="515.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.5" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (869 samples, 26.58%)</title><rect x="741.7" y="531.0" width="313.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.7" y="542.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="743.1" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.09%)</title><rect x="743.8" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.09%)</title><rect x="743.8" y="499.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="746.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (860 samples, 26.31%)</title><rect x="744.9" y="515.0" width="310.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.9" y="526.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (860 samples, 26.31%)</title><rect x="744.9" y="499.0" width="310.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.9" y="510.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (860 samples, 26.31%)</title><rect x="744.9" y="483.0" width="310.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.9" y="494.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (812 samples, 24.84%)</title><rect x="746.0" y="467.0" width="293.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.0" y="478.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (8 samples, 0.24%)</title><rect x="757.2" y="451.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="760.2" y="462.0"></text>
</g>
<g>
<title>kevent (773 samples, 23.65%)</title><rect x="760.1" y="451.0" width="279.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="763.1" y="462.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (21 samples, 0.64%)</title><rect x="1039.1" y="467.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1042.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.24%)</title><rect x="1039.1" y="451.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.24%)</title><rect x="1039.1" y="435.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1042.1" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1041.6" y="419.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1044.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (13 samples, 0.40%)</title><rect x="1042.0" y="451.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.28%)</title><rect x="1043.4" y="435.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1046.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 0.28%)</title><rect x="1043.4" y="419.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (9 samples, 0.28%)</title><rect x="1043.4" y="403.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.03%)</title><rect x="1043.8" y="387.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1046.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.15%)</title><rect x="1044.2" y="387.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1047.2" y="398.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.06%)</title><rect x="1046.0" y="387.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1049.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (4 samples, 0.12%)</title><rect x="1046.7" y="467.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1049.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (13 samples, 0.40%)</title><rect x="1048.1" y="467.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.1" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (10 samples, 0.31%)</title><rect x="1049.2" y="451.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1052.2" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (10 samples, 0.31%)</title><rect x="1049.2" y="435.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1052.2" y="446.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (8 samples, 0.24%)</title><rect x="1049.9" y="419.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1052.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (8 samples, 0.24%)</title><rect x="1049.9" y="403.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1052.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.03%)</title><rect x="1051.7" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1054.7" y="398.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.06%)</title><rect x="1052.1" y="387.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.1" y="398.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="1052.1" y="371.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1055.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="1052.8" y="467.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (6 samples, 0.18%)</title><rect x="1053.2" y="467.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1056.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.isEmpty (1 samples, 0.03%)</title><rect x="1054.6" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1057.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="1055.0" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1058.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (363 samples, 11.10%)</title><rect x="1055.4" y="531.0" width="131.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1058.4" y="542.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (363 samples, 11.10%)</title><rect x="1055.4" y="515.0" width="131.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.4" y="526.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (205 samples, 6.27%)</title><rect x="1055.7" y="499.0" width="74.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.7" y="510.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (167 samples, 5.11%)</title><rect x="1059.0" y="483.0" width="60.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.0" y="494.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (167 samples, 5.11%)</title><rect x="1059.0" y="467.0" width="60.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1062.0" y="478.0">one/ni..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (151 samples, 4.62%)</title><rect x="1059.0" y="451.0" width="54.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1062.0" y="462.0">Reque..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.24%)</title><rect x="1059.0" y="435.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1062.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1060.1" y="419.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1063.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1060.1" y="403.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1063.1" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1060.1" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1063.1" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1060.1" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.1" y="382.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1060.1" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1063.1" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1060.1" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1063.1" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1060.1" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.1" y="334.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1060.1" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.1" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1060.1" y="291.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1063.1" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="1060.1" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.1" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="1060.1" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1063.1" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1060.4" y="419.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1063.4" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1060.8" y="419.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1063.8" y="430.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="1061.1" y="419.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.1" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (143 samples, 4.37%)</title><rect x="1061.9" y="435.0" width="51.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1064.9" y="446.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="1062.6" y="419.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1065.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.06%)</title><rect x="1062.6" y="403.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.6" y="414.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.06%)</title><rect x="1062.6" y="387.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1065.6" y="398.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="1062.6" y="371.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1065.6" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1062.9" y="355.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.9" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1062.9" y="339.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1062.9" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.9" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1062.9" y="307.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.9" y="318.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1062.9" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1065.9" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1062.9" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.9" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1062.9" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.9" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="1062.9" y="243.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.9" y="254.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="1062.9" y="227.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.9" y="238.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.03%)</title><rect x="1062.9" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.9" y="222.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.03%)</title><rect x="1062.9" y="195.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.9" y="206.0"></text>
</g>
<g>
<title>G1MonitoringSupport::recalculate_eden_size() (1 samples, 0.03%)</title><rect x="1062.9" y="179.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="1063.3" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1066.3" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="1063.3" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1066.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.24%)</title><rect x="1063.7" y="419.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1066.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (8 samples, 0.24%)</title><rect x="1063.7" y="403.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1066.7" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.21%)</title><rect x="1064.0" y="387.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1067.0" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.21%)</title><rect x="1064.0" y="371.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.0" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.15%)</title><rect x="1064.7" y="355.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.7" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1064.7" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1067.7" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1064.7" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1067.7" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="1064.7" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.12%)</title><rect x="1065.1" y="339.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1068.1" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.12%)</title><rect x="1065.1" y="323.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1068.1" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.12%)</title><rect x="1065.1" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1068.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (17 samples, 0.52%)</title><rect x="1066.5" y="419.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1069.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (17 samples, 0.52%)</title><rect x="1066.5" y="403.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1069.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="1066.5" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1069.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="1066.5" y="371.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1069.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="1067.3" y="355.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1070.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="1067.3" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1070.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="1067.3" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1070.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="1067.3" y="307.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1070.3" y="318.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="1067.3" y="291.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1070.3" y="302.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="1067.3" y="275.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.3" y="286.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="1067.3" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1067.6" y="259.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1070.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.40%)</title><rect x="1068.0" y="387.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1071.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.40%)</title><rect x="1068.0" y="371.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1071.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.40%)</title><rect x="1068.0" y="355.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.37%)</title><rect x="1068.4" y="339.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1071.4" y="350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.37%)</title><rect x="1068.4" y="323.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1071.4" y="334.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (11 samples, 0.34%)</title><rect x="1068.7" y="307.0" width="4.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1071.7" y="318.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1068.7" y="291.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1071.7" y="302.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1068.7" y="275.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.7" y="286.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1069.1" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.1" y="302.0"></text>
</g>
<g>
<title>__psynch_cvsignal (9 samples, 0.28%)</title><rect x="1069.4" y="291.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1072.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (108 samples, 3.30%)</title><rect x="1072.7" y="419.0" width="39.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1075.7" y="430.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (108 samples, 3.30%)</title><rect x="1072.7" y="403.0" width="39.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1075.7" y="414.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (108 samples, 3.30%)</title><rect x="1072.7" y="387.0" width="39.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.7" y="398.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.06%)</title><rect x="1072.7" y="371.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1075.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.06%)</title><rect x="1072.7" y="355.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1075.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.06%)</title><rect x="1072.7" y="339.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.06%)</title><rect x="1072.7" y="323.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1075.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.31%)</title><rect x="1073.4" y="371.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.31%)</title><rect x="1073.4" y="355.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.28%)</title><rect x="1073.4" y="339.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (9 samples, 0.28%)</title><rect x="1073.4" y="323.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1076.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.28%)</title><rect x="1073.4" y="307.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1076.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.28%)</title><rect x="1073.4" y="291.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.4" y="302.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (9 samples, 0.28%)</title><rect x="1073.4" y="275.0" width="3.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1076.4" y="286.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.28%)</title><rect x="1073.4" y="259.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1076.4" y="270.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.24%)</title><rect x="1073.4" y="243.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1076.4" y="254.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1076.3" y="243.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="1076.7" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1079.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (96 samples, 2.94%)</title><rect x="1077.0" y="371.0" width="34.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.0" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (96 samples, 2.94%)</title><rect x="1077.0" y="355.0" width="34.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1080.0" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (96 samples, 2.94%)</title><rect x="1077.0" y="339.0" width="34.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1080.0" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (96 samples, 2.94%)</title><rect x="1077.0" y="323.0" width="34.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1080.0" y="334.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (96 samples, 2.94%)</title><rect x="1077.0" y="307.0" width="34.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1080.0" y="318.0">jd..</text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="1078.1" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1081.1" y="302.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (89 samples, 2.72%)</title><rect x="1078.5" y="291.0" width="32.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1081.5" y="302.0">Un..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.09%)</title><rect x="1078.5" y="275.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1081.5" y="286.0"></text>
</g>
<g>
<title>Chunk::next() const (2 samples, 0.06%)</title><rect x="1078.8" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.8" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1079.5" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="1079.9" y="275.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.9" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (2 samples, 0.06%)</title><rect x="1079.9" y="259.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1082.9" y="270.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1080.3" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.3" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1080.3" y="227.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1083.3" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1080.3" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.3" y="222.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1080.3" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1083.3" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1080.3" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.3" y="190.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="1080.3" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.3" y="174.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.03%)</title><rect x="1080.6" y="275.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.6" y="286.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="1081.0" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1084.0" y="286.0"></text>
</g>
<g>
<title>Thread::current() (3 samples, 0.09%)</title><rect x="1081.3" y="275.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1084.3" y="286.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="1081.3" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.3" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.06%)</title><rect x="1081.7" y="259.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1084.7" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.09%)</title><rect x="1082.4" y="275.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1085.4" y="286.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1082.4" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.4" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.06%)</title><rect x="1082.8" y="259.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.8" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.06%)</title><rect x="1082.8" y="243.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1085.8" y="254.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="1082.8" y="227.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.8" y="238.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.06%)</title><rect x="1082.8" y="211.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.8" y="222.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="1082.8" y="195.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.8" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1083.2" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.2" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1083.2" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.2" y="190.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.15%)</title><rect x="1083.5" y="275.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="1083.5" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1086.5" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.03%)</title><rect x="1083.9" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1086.9" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.09%)</title><rect x="1084.2" y="259.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.2" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.09%)</title><rect x="1084.2" y="243.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.2" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.09%)</title><rect x="1084.2" y="227.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1087.2" y="238.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1084.2" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1087.2" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.06%)</title><rect x="1084.6" y="211.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.6" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1085.0" y="195.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1088.0" y="206.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.06%)</title><rect x="1085.3" y="275.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1088.3" y="286.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (2 samples, 0.06%)</title><rect x="1085.3" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.3" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="1086.0" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.0" y="286.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="1086.8" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.8" y="270.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="1087.1" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.1" y="286.0"></text>
</g>
<g>
<title>__psynch_cvsignal (55 samples, 1.68%)</title><rect x="1087.5" y="275.0" width="19.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1090.5" y="286.0"></text>
</g>
<g>
<title>in_bytes(int) (1 samples, 0.03%)</title><rect x="1107.3" y="275.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1110.3" y="286.0"></text>
</g>
<g>
<title>pthread_cond_signal (6 samples, 0.18%)</title><rect x="1107.7" y="275.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1110.7" y="286.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (4 samples, 0.12%)</title><rect x="1108.4" y="259.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1111.4" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.06%)</title><rect x="1109.9" y="275.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1112.9" y="286.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="1110.6" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1113.6" y="302.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="1110.9" y="291.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1113.9" y="302.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="1111.3" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (5 samples, 0.15%)</title><rect x="1111.7" y="419.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1114.7" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (4 samples, 0.12%)</title><rect x="1111.7" y="403.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1114.7" y="414.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1111.7" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1114.7" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.09%)</title><rect x="1112.0" y="387.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.0" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1112.8" y="371.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1115.8" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.03%)</title><rect x="1113.1" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1116.1" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.03%)</title><rect x="1113.1" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (9 samples, 0.28%)</title><rect x="1113.5" y="451.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1116.5" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.28%)</title><rect x="1113.5" y="435.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1116.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="1113.5" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1116.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.24%)</title><rect x="1113.8" y="419.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1116.8" y="430.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.24%)</title><rect x="1113.8" y="403.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (8 samples, 0.24%)</title><rect x="1113.8" y="387.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1116.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.21%)</title><rect x="1116.7" y="451.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1119.7" y="462.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.21%)</title><rect x="1116.7" y="435.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1119.7" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.21%)</title><rect x="1116.7" y="419.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1119.7" y="430.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (4 samples, 0.12%)</title><rect x="1116.7" y="403.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1119.7" y="414.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.06%)</title><rect x="1118.2" y="403.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1121.2" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1118.9" y="403.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1121.9" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1118.9" y="387.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.9" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1118.9" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.9" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1118.9" y="355.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.9" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1118.9" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.9" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1118.9" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1118.9" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.9" y="318.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="1118.9" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (16 samples, 0.49%)</title><rect x="1119.3" y="483.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.24%)</title><rect x="1120.7" y="467.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1123.7" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.24%)</title><rect x="1120.7" y="451.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1122.9" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.9" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1122.9" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.9" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1122.9" y="403.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.9" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1122.9" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1122.9" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.9" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="1122.9" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.9" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="1123.2" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.2" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1123.2" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.2" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1123.2" y="403.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.2" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1123.2" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.2" y="398.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1123.2" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.2" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="1123.2" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.2" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.12%)</title><rect x="1123.6" y="467.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1126.6" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1124.7" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="1125.0" y="483.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1128.0" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1125.0" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.12%)</title><rect x="1125.4" y="483.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1128.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1126.5" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1129.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1126.5" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.5" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.24%)</title><rect x="1126.8" y="483.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1129.8" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.24%)</title><rect x="1126.8" y="467.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.8" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (157 samples, 4.80%)</title><rect x="1129.7" y="499.0" width="56.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1132.7" y="510.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (153 samples, 4.68%)</title><rect x="1131.2" y="483.0" width="55.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1134.2" y="494.0">one/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1131.2" y="467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.2" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1131.2" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.2" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1131.2" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1134.2" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1131.2" y="419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1134.2" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1131.2" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1134.2" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1131.2" y="387.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1134.2" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="1131.2" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1134.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (152 samples, 4.65%)</title><rect x="1131.5" y="467.0" width="54.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1134.5" y="478.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="1131.9" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1134.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="1131.9" y="435.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1134.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (149 samples, 4.56%)</title><rect x="1132.6" y="451.0" width="53.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1135.6" y="462.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (149 samples, 4.56%)</title><rect x="1132.6" y="435.0" width="53.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1135.6" y="446.0">sun/n..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (5 samples, 0.15%)</title><rect x="1132.6" y="419.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1135.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (127 samples, 3.88%)</title><rect x="1134.4" y="419.0" width="45.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1137.4" y="430.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (122 samples, 3.73%)</title><rect x="1136.2" y="403.0" width="44.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1139.2" y="414.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (122 samples, 3.73%)</title><rect x="1136.2" y="387.0" width="44.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1139.2" y="398.0">sun/..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.06%)</title><rect x="1140.5" y="371.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1143.5" y="382.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1140.9" y="355.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1143.9" y="366.0"></text>
</g>
<g>
<title>convertReturnVal (3 samples, 0.09%)</title><rect x="1141.3" y="371.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1144.3" y="382.0"></text>
</g>
<g>
<title>rpc_errlist (105 samples, 3.21%)</title><rect x="1142.4" y="371.0" width="37.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1145.4" y="382.0">rpc..</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (17 samples, 0.52%)</title><rect x="1180.3" y="419.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1183.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (11 samples, 0.34%)</title><rect x="1182.4" y="403.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1185.4" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.12%)</title><rect x="1184.9" y="387.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.9" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.21%)</title><rect x="1186.4" y="531.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="542.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (2 samples, 0.06%)</title><rect x="1186.4" y="515.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1189.4" y="526.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.06%)</title><rect x="1187.1" y="515.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1190.1" y="526.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.09%)</title><rect x="1187.8" y="515.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.8" y="526.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="1188.2" y="499.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1191.2" y="510.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (2 samples, 0.06%)</title><rect x="1188.2" y="483.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1191.2" y="494.0"></text>
</g>
<g>
<title>thread_start (3 samples, 0.09%)</title><rect x="1188.9" y="547.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1191.9" y="558.0"></text>
</g>
<g>
<title>_pthread_start (3 samples, 0.09%)</title><rect x="1188.9" y="531.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.9" y="542.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.09%)</title><rect x="1188.9" y="515.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1191.9" y="526.0"></text>
</g>
<g>
<title>Thread::call_run() (3 samples, 0.09%)</title><rect x="1188.9" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="510.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="1188.9" y="483.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="494.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="1188.9" y="467.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="478.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="1188.9" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="462.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1188.9" y="435.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1188.9" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1188.9" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1188.9" y="387.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="1189.3" y="483.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.3" y="494.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="1189.3" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.3" y="478.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1189.3" y="451.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.3" y="462.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="1189.3" y="435.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.3" y="446.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1189.6" y="483.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.6" y="494.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1189.6" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.6" y="478.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.03%)</title><rect x="1189.6" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.6" y="462.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="1189.6" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="446.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.03%)</title><rect x="1189.6" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.03%)</title><rect x="1189.6" y="403.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.6" y="414.0"></text>
</g>
<g>
<title>OldRegionSetMtSafeChecker::check() (1 samples, 0.03%)</title><rect x="1189.6" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.6" y="398.0"></text>
</g>
</g>
</svg>
