<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (3,252 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[Attach Listener tid=59907] (1 samples, 0.03%)</title><rect x="10.0" y="691.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.0" y="675.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.0" y="659.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="643.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.0" y="627.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="10.0" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="10.0" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="579.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="10.0" y="563.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (4 samples, 0.12%)</title><rect x="10.4" y="691.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.4" y="702.0"></text>
</g>
<g>
<title>thread_start (4 samples, 0.12%)</title><rect x="10.4" y="675.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="13.4" y="686.0"></text>
</g>
<g>
<title>_pthread_start (4 samples, 0.12%)</title><rect x="10.4" y="659.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.4" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.12%)</title><rect x="10.4" y="643.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.4" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (4 samples, 0.12%)</title><rect x="10.4" y="627.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (4 samples, 0.12%)</title><rect x="10.4" y="611.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.12%)</title><rect x="10.4" y="595.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.4" y="606.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.12%)</title><rect x="10.4" y="579.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.4" y="590.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.12%)</title><rect x="10.4" y="563.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.4" y="574.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.12%)</title><rect x="10.4" y="547.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.4" y="558.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (4 samples, 0.12%)</title><rect x="10.4" y="531.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.4" y="542.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.09%)</title><rect x="10.4" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.4" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.09%)</title><rect x="10.4" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.4" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.03%)</title><rect x="10.4" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.4" y="494.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.03%)</title><rect x="10.7" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="494.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.03%)</title><rect x="10.7" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="478.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="10.7" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.03%)</title><rect x="11.1" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.1" y="494.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.03%)</title><rect x="11.1" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.1" y="478.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.03%)</title><rect x="11.1" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="11.5" y="515.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="11.5" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="11.5" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="11.5" y="467.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.5" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="11.5" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.5" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="11.5" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="11.5" y="419.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="11.5" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="11.5" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="11.5" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="11.5" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="11.5" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="11.5" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="11.5" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="11.5" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="11.5" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.5" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="11.5" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="11.5" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="11.5" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="11.5" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="11.5" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="11.5" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.5" y="190.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="11.5" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.5" y="174.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="11.5" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="158.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="11.5" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="11.5" y="115.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.5" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="11.5" y="99.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.5" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="11.5" y="83.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="11.5" y="67.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="11.5" y="51.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.5" y="62.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::append(ciTypeFlow::Block* const&amp;) (1 samples, 0.03%)</title><rect x="11.5" y="35.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.5" y="46.0"></text>
</g>
<g>
<title>[Java: VM Thread tid=19203] (1 samples, 0.03%)</title><rect x="11.8" y="691.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.8" y="702.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="11.8" y="675.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.8" y="686.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="11.8" y="659.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="14.8" y="670.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="11.8" y="643.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.8" y="654.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="11.8" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.8" y="638.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="11.8" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.8" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="11.8" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.8" y="606.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.03%)</title><rect x="11.8" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.8" y="590.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="11.8" y="563.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.8" y="574.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.03%)</title><rect x="11.8" y="547.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.8" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.03%)</title><rect x="11.8" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.8" y="542.0"></text>
</g>
<g>
<title>GCHeapLog::log_heap(CollectedHeap*, bool) (1 samples, 0.03%)</title><rect x="11.8" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.8" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="11.8" y="499.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.8" y="510.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="11.8" y="483.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.8" y="494.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="11.8" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.8" y="478.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.03%)</title><rect x="11.8" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.8" y="462.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.03%)</title><rect x="11.8" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.8" y="446.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="11.8" y="419.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="14.8" y="430.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.03%)</title><rect x="11.8" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.8" y="414.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.03%)</title><rect x="11.8" y="387.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="14.8" y="398.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.03%)</title><rect x="11.8" y="371.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="14.8" y="382.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=29191] (29 samples, 0.89%)</title><rect x="12.2" y="691.0" width="10.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="15.2" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (29 samples, 0.89%)</title><rect x="12.2" y="675.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="15.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (18 samples, 0.55%)</title><rect x="12.2" y="659.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (18 samples, 0.55%)</title><rect x="12.2" y="643.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (18 samples, 0.55%)</title><rect x="12.2" y="627.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (18 samples, 0.55%)</title><rect x="12.2" y="611.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (17 samples, 0.52%)</title><rect x="12.2" y="595.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="15.2" y="606.0"></text>
</g>
<g>
<title>kevent (16 samples, 0.49%)</title><rect x="12.5" y="579.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="15.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="18.3" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="18.3" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="21.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="18.3" y="563.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.3" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (11 samples, 0.34%)</title><rect x="18.7" y="659.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (11 samples, 0.34%)</title><rect x="18.7" y="643.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.18%)</title><rect x="18.7" y="627.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="18.7" y="611.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.18%)</title><rect x="18.7" y="595.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="21.7" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6 samples, 0.18%)</title><rect x="18.7" y="579.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="18.7" y="563.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (6 samples, 0.18%)</title><rect x="18.7" y="547.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.18%)</title><rect x="18.7" y="531.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.18%)</title><rect x="18.7" y="515.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="18.7" y="499.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="18.7" y="483.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="18.7" y="467.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="18.7" y="451.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.18%)</title><rect x="18.7" y="435.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="18.7" y="419.0" width="2.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="21.7" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="18.7" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.7" y="414.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="18.7" y="387.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.7" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="19.1" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.1" y="414.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="19.1" y="387.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="22.1" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="19.4" y="403.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="22.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 0.15%)</title><rect x="20.9" y="627.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.9" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (5 samples, 0.15%)</title><rect x="20.9" y="611.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.15%)</title><rect x="20.9" y="595.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="20.9" y="579.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="20.9" y="563.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="20.9" y="547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.9" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="20.9" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.12%)</title><rect x="21.2" y="547.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (4 samples, 0.12%)</title><rect x="21.2" y="531.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="24.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (4 samples, 0.12%)</title><rect x="21.2" y="515.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.2" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (4 samples, 0.12%)</title><rect x="21.2" y="499.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.2" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40455] (133 samples, 4.09%)</title><rect x="22.7" y="691.0" width="48.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="25.7" y="702.0">[NIO..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (133 samples, 4.09%)</title><rect x="22.7" y="675.0" width="48.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.7" y="686.0">one/..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (87 samples, 2.68%)</title><rect x="23.4" y="659.0" width="31.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.4" y="670.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="23.4" y="643.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.4" y="654.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (4 samples, 0.12%)</title><rect x="24.2" y="643.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="27.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (4 samples, 0.12%)</title><rect x="24.2" y="627.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (3 samples, 0.09%)</title><rect x="24.5" y="611.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.5" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="24.5" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="24.5" y="579.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.5" y="590.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="24.5" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.5" y="574.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="24.5" y="547.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="27.5" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.06%)</title><rect x="24.9" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (2 samples, 0.06%)</title><rect x="24.9" y="579.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="27.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (81 samples, 2.49%)</title><rect x="25.6" y="643.0" width="29.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.6" y="654.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (81 samples, 2.49%)</title><rect x="25.6" y="627.0" width="29.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.6" y="638.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (81 samples, 2.49%)</title><rect x="25.6" y="611.0" width="29.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.6" y="622.0">su..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (75 samples, 2.31%)</title><rect x="26.0" y="595.0" width="27.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.0" y="606.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (2 samples, 0.06%)</title><rect x="27.8" y="579.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="30.8" y="590.0"></text>
</g>
<g>
<title>kevent (68 samples, 2.09%)</title><rect x="28.5" y="579.0" width="24.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="31.5" y="590.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.09%)</title><rect x="53.2" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="56.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (3 samples, 0.09%)</title><rect x="53.2" y="579.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="53.2" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="53.2" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="53.2" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.06%)</title><rect x="53.5" y="563.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.06%)</title><rect x="53.5" y="547.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="53.5" y="531.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="56.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.06%)</title><rect x="54.3" y="595.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="54.6" y="579.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="54.6" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.03%)</title><rect x="55.0" y="659.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.0" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="55.0" y="643.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="58.0" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="55.0" y="627.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="55.0" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="55.0" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="55.0" y="579.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="55.0" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (43 samples, 1.32%)</title><rect x="55.4" y="659.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.4" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (39 samples, 1.20%)</title><rect x="56.8" y="643.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (24 samples, 0.74%)</title><rect x="56.8" y="627.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.8" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (15 samples, 0.46%)</title><rect x="56.8" y="611.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (15 samples, 0.46%)</title><rect x="56.8" y="595.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.8" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (13 samples, 0.40%)</title><rect x="56.8" y="579.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="56.8" y="563.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="56.8" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="56.8" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.8" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="56.8" y="515.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.8" y="526.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="57.2" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="57.2" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="57.2" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="57.2" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (11 samples, 0.34%)</title><rect x="57.5" y="563.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.28%)</title><rect x="57.5" y="547.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.28%)</title><rect x="57.5" y="531.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="57.5" y="515.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="57.5" y="499.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.09%)</title><rect x="57.5" y="483.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.09%)</title><rect x="57.5" y="467.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.09%)</title><rect x="57.5" y="451.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="57.5" y="435.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.5" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="57.5" y="419.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="60.5" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.09%)</title><rect x="57.5" y="403.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="60.5" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.09%)</title><rect x="57.5" y="387.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="60.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="58.6" y="515.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="58.6" y="499.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="58.6" y="483.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="58.6" y="467.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="59.0" y="451.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.0" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="59.0" y="435.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="62.0" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="59.0" y="419.0" width="1.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="62.0" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (2 samples, 0.06%)</title><rect x="60.8" y="547.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="63.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="60.8" y="531.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="63.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="60.8" y="515.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="60.8" y="499.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="63.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="60.8" y="483.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="60.8" y="467.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="60.8" y="451.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.8" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="61.2" y="435.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.2" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="61.2" y="419.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="64.2" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="61.2" y="403.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="64.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.06%)</title><rect x="61.5" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="61.5" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="61.5" y="547.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5 samples, 0.15%)</title><rect x="62.3" y="611.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.3" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="62.3" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="62.3" y="579.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="63.0" y="563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="66.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="63.0" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="63.0" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="63.0" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="66.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.0" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="66.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="63.0" y="483.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="66.0" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="63.0" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="66.0" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="63.0" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="66.0" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="63.0" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="66.0" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="63.0" y="419.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="66.0" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="63.0" y="403.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="66.0" y="414.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="63.0" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="66.0" y="398.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.03%)</title><rect x="63.0" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="66.0" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.03%)</title><rect x="63.0" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="66.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.06%)</title><rect x="63.3" y="595.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.3" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="64.1" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.1" y="622.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="64.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.06%)</title><rect x="64.4" y="611.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="64.8" y="595.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="64.8" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="67.8" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="65.2" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="68.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="65.2" y="595.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.2" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (15 samples, 0.46%)</title><rect x="65.5" y="627.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (15 samples, 0.46%)</title><rect x="65.5" y="611.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (15 samples, 0.46%)</title><rect x="65.5" y="595.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.46%)</title><rect x="65.5" y="579.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (15 samples, 0.46%)</title><rect x="65.5" y="563.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.06%)</title><rect x="65.5" y="547.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="65.9" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.40%)</title><rect x="66.2" y="547.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (13 samples, 0.40%)</title><rect x="66.2" y="531.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (13 samples, 0.40%)</title><rect x="66.2" y="515.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.2" y="526.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="66.6" y="499.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="69.6" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.34%)</title><rect x="67.0" y="499.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="70.0" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=43783] (19 samples, 0.58%)</title><rect x="71.0" y="691.0" width="6.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="74.0" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (19 samples, 0.58%)</title><rect x="71.0" y="675.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="74.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (11 samples, 0.34%)</title><rect x="71.0" y="659.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.0" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="71.0" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="71.3" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="74.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (9 samples, 0.28%)</title><rect x="71.7" y="643.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (9 samples, 0.28%)</title><rect x="71.7" y="627.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (9 samples, 0.28%)</title><rect x="71.7" y="611.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (9 samples, 0.28%)</title><rect x="71.7" y="595.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="74.7" y="606.0"></text>
</g>
<g>
<title>kevent (9 samples, 0.28%)</title><rect x="71.7" y="579.0" width="3.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="74.7" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8 samples, 0.25%)</title><rect x="75.0" y="659.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7 samples, 0.22%)</title><rect x="75.3" y="643.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.15%)</title><rect x="75.3" y="627.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4 samples, 0.12%)</title><rect x="75.3" y="611.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.12%)</title><rect x="75.3" y="595.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (4 samples, 0.12%)</title><rect x="75.3" y="579.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.12%)</title><rect x="75.3" y="563.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (3 samples, 0.09%)</title><rect x="75.3" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="75.3" y="531.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="75.3" y="515.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="78.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="75.3" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="78.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="75.3" y="483.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="75.3" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="78.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="75.3" y="451.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="75.3" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="75.3" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="78.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="75.7" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="75.7" y="483.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="75.7" y="467.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="75.7" y="451.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="75.7" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="78.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="75.7" y="419.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="78.7" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="75.7" y="403.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="78.7" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="76.4" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.4" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="76.4" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.4" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="76.4" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.4" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="76.4" y="499.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="76.8" y="611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="76.8" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.8" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="76.8" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.8" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="77.1" y="627.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="77.1" y="611.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="80.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="77.1" y="595.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="77.1" y="579.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="77.1" y="563.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="77.1" y="547.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="77.1" y="531.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="77.1" y="515.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.1" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="77.1" y="499.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="80.1" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (92 samples, 2.83%)</title><rect x="77.9" y="691.0" width="33.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="80.9" y="702.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (92 samples, 2.83%)</title><rect x="77.9" y="675.0" width="33.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.9" y="686.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (65 samples, 2.00%)</title><rect x="78.2" y="659.0" width="23.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.2" y="670.0">o..</text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.06%)</title><rect x="78.6" y="643.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="81.6" y="654.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="78.9" y="627.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="81.9" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (62 samples, 1.91%)</title><rect x="79.3" y="643.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.3" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (62 samples, 1.91%)</title><rect x="79.3" y="627.0" width="22.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="82.3" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (60 samples, 1.85%)</title><rect x="80.0" y="611.0" width="21.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.0" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (58 samples, 1.78%)</title><rect x="80.0" y="595.0" width="21.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="83.0" y="606.0">s..</text>
</g>
<g>
<title>kevent (54 samples, 1.66%)</title><rect x="81.5" y="579.0" width="19.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="84.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="101.1" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="104.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="101.1" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="104.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="101.1" y="563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="104.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="101.4" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="101.4" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="104.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="101.4" y="563.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="104.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (26 samples, 0.80%)</title><rect x="101.8" y="659.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="104.8" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="101.8" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="104.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (25 samples, 0.77%)</title><rect x="102.2" y="643.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.2" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (11 samples, 0.34%)</title><rect x="102.2" y="627.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.15%)</title><rect x="102.9" y="611.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.15%)</title><rect x="102.9" y="595.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.9" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="102.9" y="579.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="105.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.15%)</title><rect x="102.9" y="563.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="102.9" y="547.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="102.9" y="531.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="102.9" y="515.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="102.9" y="499.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="102.9" y="483.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="102.9" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="102.9" y="451.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="102.9" y="435.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="103.3" y="515.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="106.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="103.3" y="499.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="103.3" y="483.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="106.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="103.3" y="467.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.3" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="103.3" y="451.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.3" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="103.3" y="435.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="106.3" y="446.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="103.3" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="106.3" y="430.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="103.3" y="403.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="106.3" y="414.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="103.3" y="387.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="106.3" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="103.6" y="419.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="106.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (1 samples, 0.03%)</title><rect x="104.3" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="104.3" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="104.3" y="515.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="104.3" y="499.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="104.3" y="483.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="104.3" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="107.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="104.3" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="104.3" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="104.3" y="419.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="107.3" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="104.3" y="403.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="107.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="104.7" y="611.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="104.7" y="595.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.7" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="105.1" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.1" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="105.1" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="105.4" y="611.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="105.8" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="105.8" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (14 samples, 0.43%)</title><rect x="106.2" y="627.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.2" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (14 samples, 0.43%)</title><rect x="106.2" y="611.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (14 samples, 0.43%)</title><rect x="106.2" y="595.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.43%)</title><rect x="106.2" y="579.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (14 samples, 0.43%)</title><rect x="106.2" y="563.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.2" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="106.2" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="109.2" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="106.2" y="531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.34%)</title><rect x="106.5" y="547.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="109.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (11 samples, 0.34%)</title><rect x="106.5" y="531.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (11 samples, 0.34%)</title><rect x="106.5" y="515.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.5" y="526.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="106.9" y="499.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="109.9" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (9 samples, 0.28%)</title><rect x="107.2" y="499.0" width="3.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="110.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="110.5" y="547.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="110.5" y="531.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (2 samples, 0.06%)</title><rect x="110.5" y="515.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.5" y="526.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=44035] (35 samples, 1.08%)</title><rect x="111.2" y="691.0" width="12.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="114.2" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (35 samples, 1.08%)</title><rect x="111.2" y="675.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="114.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (25 samples, 0.77%)</title><rect x="111.2" y="659.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="114.2" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (25 samples, 0.77%)</title><rect x="111.2" y="643.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="114.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (25 samples, 0.77%)</title><rect x="111.2" y="627.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (25 samples, 0.77%)</title><rect x="111.2" y="611.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (23 samples, 0.71%)</title><rect x="111.2" y="595.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="114.2" y="606.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="111.6" y="579.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="114.6" y="590.0"></text>
</g>
<g>
<title>kevent (21 samples, 0.65%)</title><rect x="112.0" y="579.0" width="7.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="115.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="119.6" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="119.6" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="122.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="119.6" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="119.6" y="547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="122.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="119.6" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="119.9" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.9" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="119.9" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.9" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="119.9" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="122.9" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="119.9" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="119.9" y="531.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (10 samples, 0.31%)</title><rect x="120.3" y="659.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="123.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (10 samples, 0.31%)</title><rect x="120.3" y="643.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.25%)</title><rect x="120.3" y="627.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7 samples, 0.22%)</title><rect x="120.3" y="611.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.22%)</title><rect x="120.3" y="595.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="123.3" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.22%)</title><rect x="120.3" y="579.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="123.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="120.3" y="563.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.3" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="120.3" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="123.3" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="120.3" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="123.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="120.3" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.3" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="120.7" y="547.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="123.7" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.15%)</title><rect x="121.0" y="563.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="124.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (5 samples, 0.15%)</title><rect x="121.0" y="547.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="124.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="121.0" y="531.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.15%)</title><rect x="121.0" y="515.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="124.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="121.0" y="499.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="124.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="121.0" y="483.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="121.0" y="467.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="121.0" y="451.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="124.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="121.0" y="435.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="124.0" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="121.0" y="419.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="124.0" y="430.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="121.4" y="419.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="124.4" y="430.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="121.4" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="124.4" y="414.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="121.8" y="403.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="124.8" y="414.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="122.1" y="403.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="125.1" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="122.5" y="403.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="125.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="122.8" y="611.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="122.8" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="125.8" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="123.2" y="627.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.2" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="123.2" y="611.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="126.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="123.2" y="595.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="123.2" y="579.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="126.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="123.2" y="563.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="123.2" y="547.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="126.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="123.2" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="123.2" y="515.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="126.2" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="123.2" y="499.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="126.2" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (81 samples, 2.49%)</title><rect x="123.9" y="691.0" width="29.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="126.9" y="702.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (81 samples, 2.49%)</title><rect x="123.9" y="675.0" width="29.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="126.9" y="686.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (57 samples, 1.75%)</title><rect x="124.3" y="659.0" width="20.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="127.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (56 samples, 1.72%)</title><rect x="124.7" y="643.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="127.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (56 samples, 1.72%)</title><rect x="124.7" y="627.0" width="20.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="127.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (56 samples, 1.72%)</title><rect x="124.7" y="611.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (54 samples, 1.66%)</title><rect x="124.7" y="595.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.7" y="606.0"></text>
</g>
<g>
<title>kevent (51 samples, 1.57%)</title><rect x="125.8" y="579.0" width="18.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="128.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="144.3" y="595.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="144.3" y="579.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="147.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="144.3" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="147.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="144.3" y="547.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="144.6" y="531.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="147.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (23 samples, 0.71%)</title><rect x="145.0" y="659.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="148.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (20 samples, 0.62%)</title><rect x="145.3" y="643.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.37%)</title><rect x="145.3" y="627.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="145.3" y="611.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.15%)</title><rect x="145.7" y="595.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.7" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="145.7" y="579.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.15%)</title><rect x="145.7" y="563.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="146.1" y="547.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="146.1" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="146.1" y="515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="146.1" y="499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="146.1" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="146.1" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="146.1" y="451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="146.1" y="435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.1" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="146.1" y="419.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="149.1" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="146.1" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="149.1" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="146.1" y="387.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="149.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="146.4" y="515.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="146.4" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="146.4" y="483.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="146.4" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.4" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="146.4" y="451.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.4" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="146.4" y="435.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="149.4" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="146.4" y="419.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="149.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (2 samples, 0.06%)</title><rect x="146.8" y="547.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="149.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="146.8" y="531.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="146.8" y="515.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="146.8" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="146.8" y="483.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="146.8" y="467.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="149.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="146.8" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="146.8" y="435.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="146.8" y="419.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="149.8" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="146.8" y="403.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="149.8" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="146.8" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="149.8" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="146.8" y="371.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="149.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="147.2" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="147.2" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="150.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.09%)</title><rect x="147.5" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="150.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="147.5" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="147.9" y="595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="147.9" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.9" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="148.2" y="595.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="151.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.09%)</title><rect x="148.6" y="611.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="151.6" y="622.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="149.3" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.3" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (8 samples, 0.25%)</title><rect x="149.7" y="627.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (8 samples, 0.25%)</title><rect x="149.7" y="611.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (8 samples, 0.25%)</title><rect x="149.7" y="595.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.25%)</title><rect x="149.7" y="579.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.25%)</title><rect x="149.7" y="563.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (7 samples, 0.22%)</title><rect x="149.7" y="547.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (7 samples, 0.22%)</title><rect x="149.7" y="531.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (7 samples, 0.22%)</title><rect x="149.7" y="515.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.7" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (7 samples, 0.22%)</title><rect x="149.7" y="499.0" width="2.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="152.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="152.2" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.isBufferTooLarge (1 samples, 0.03%)</title><rect x="152.2" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.2" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="152.6" y="643.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="155.6" y="654.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="152.6" y="627.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="155.6" y="638.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="153.0" y="627.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="156.0" y="638.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="153.0" y="611.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="156.0" y="622.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="153.0" y="595.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="156.0" y="606.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=36355] (35 samples, 1.08%)</title><rect x="153.3" y="691.0" width="12.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="156.3" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (35 samples, 1.08%)</title><rect x="153.3" y="675.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="156.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (20 samples, 0.62%)</title><rect x="153.3" y="659.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="156.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (20 samples, 0.62%)</title><rect x="153.3" y="643.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (20 samples, 0.62%)</title><rect x="153.3" y="627.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (19 samples, 0.58%)</title><rect x="153.7" y="611.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="156.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (17 samples, 0.52%)</title><rect x="153.7" y="595.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="156.7" y="606.0"></text>
</g>
<g>
<title>kevent (16 samples, 0.49%)</title><rect x="154.1" y="579.0" width="5.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="157.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="159.9" y="595.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="162.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="159.9" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="159.9" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="159.9" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="159.9" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="160.2" y="595.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.2" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="160.2" y="579.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.2" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="160.2" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="163.2" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="160.2" y="547.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="160.2" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (15 samples, 0.46%)</title><rect x="160.6" y="659.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (15 samples, 0.46%)</title><rect x="160.6" y="643.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (10 samples, 0.31%)</title><rect x="160.6" y="627.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="163.6" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.28%)</title><rect x="160.6" y="611.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.28%)</title><rect x="160.6" y="595.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="163.6" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.28%)</title><rect x="160.6" y="579.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.28%)</title><rect x="160.6" y="563.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (9 samples, 0.28%)</title><rect x="160.6" y="547.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.28%)</title><rect x="160.6" y="531.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.28%)</title><rect x="160.6" y="515.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.28%)</title><rect x="160.6" y="499.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="163.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.28%)</title><rect x="160.6" y="483.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.28%)</title><rect x="160.6" y="467.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="163.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.28%)</title><rect x="160.6" y="451.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="163.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.28%)</title><rect x="160.6" y="435.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="163.6" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.25%)</title><rect x="160.9" y="419.0" width="2.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="163.9" y="430.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="160.9" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="163.9" y="414.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="160.9" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="163.9" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.22%)</title><rect x="161.3" y="403.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="164.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.03%)</title><rect x="163.8" y="611.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="163.8" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="166.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="163.8" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="166.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="163.8" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="166.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="163.8" y="547.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="166.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 0.15%)</title><rect x="164.2" y="627.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.2" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (5 samples, 0.15%)</title><rect x="164.2" y="611.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="167.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.15%)</title><rect x="164.2" y="595.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.2" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="164.2" y="579.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="164.2" y="563.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.15%)</title><rect x="164.2" y="547.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.15%)</title><rect x="164.2" y="531.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.2" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.15%)</title><rect x="164.2" y="515.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="167.2" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.15%)</title><rect x="164.2" y="499.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="167.2" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=44547] (35 samples, 1.08%)</title><rect x="166.0" y="691.0" width="12.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="169.0" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (35 samples, 1.08%)</title><rect x="166.0" y="675.0" width="12.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (20 samples, 0.62%)</title><rect x="166.4" y="659.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.4" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="166.8" y="643.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="169.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (18 samples, 0.55%)</title><rect x="167.1" y="643.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (18 samples, 0.55%)</title><rect x="167.1" y="627.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (18 samples, 0.55%)</title><rect x="167.1" y="611.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (16 samples, 0.49%)</title><rect x="167.1" y="595.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="170.1" y="606.0"></text>
</g>
<g>
<title>kevent (14 samples, 0.43%)</title><rect x="167.8" y="579.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="170.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="172.9" y="595.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="172.9" y="579.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.06%)</title><rect x="172.9" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="175.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.06%)</title><rect x="172.9" y="547.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="172.9" y="531.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (14 samples, 0.43%)</title><rect x="173.6" y="659.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (14 samples, 0.43%)</title><rect x="173.6" y="643.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.6" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.37%)</title><rect x="173.6" y="627.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.6" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10 samples, 0.31%)</title><rect x="173.6" y="611.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.31%)</title><rect x="173.6" y="595.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.6" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.28%)</title><rect x="173.6" y="579.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.6" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="173.6" y="563.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (8 samples, 0.25%)</title><rect x="174.0" y="563.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (7 samples, 0.22%)</title><rect x="174.0" y="547.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.22%)</title><rect x="174.0" y="531.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="177.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.22%)</title><rect x="174.0" y="515.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="174.0" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="174.0" y="483.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="174.0" y="467.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="177.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="174.0" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="174.0" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="174.0" y="419.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.0" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="174.0" y="403.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="177.0" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="174.0" y="387.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="177.0" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="174.0" y="371.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="177.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="174.7" y="499.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="174.7" y="483.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="174.7" y="467.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="174.7" y="451.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="177.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="174.7" y="435.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="174.7" y="419.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="177.7" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="174.7" y="403.0" width="1.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="177.7" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="176.2" y="419.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="179.2" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="176.5" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="176.5" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.5" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="176.5" y="515.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="179.5" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="176.9" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="176.9" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="179.9" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="176.9" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.9" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="176.9" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="179.9" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="176.9" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="179.9" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="176.9" y="499.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="179.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="176.9" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.9" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="176.9" y="467.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="179.9" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="176.9" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="179.9" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="176.9" y="435.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="179.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="177.3" y="611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="177.3" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="177.6" y="611.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.6" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="177.6" y="595.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.6" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="178.0" y="627.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.0" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="178.0" y="611.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="178.0" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="178.0" y="579.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="178.0" y="563.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="178.0" y="547.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="181.0" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="178.0" y="531.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="178.0" y="515.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.0" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="178.0" y="499.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="181.0" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=35587] (27 samples, 0.83%)</title><rect x="178.7" y="691.0" width="9.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="181.7" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (27 samples, 0.83%)</title><rect x="178.7" y="675.0" width="9.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="181.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (17 samples, 0.52%)</title><rect x="178.7" y="659.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="178.7" y="643.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="181.7" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="178.7" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="181.7" y="638.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="178.7" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="181.7" y="622.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="178.7" y="595.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="181.7" y="606.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="178.7" y="579.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="181.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (16 samples, 0.49%)</title><rect x="179.1" y="643.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (16 samples, 0.49%)</title><rect x="179.1" y="627.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (16 samples, 0.49%)</title><rect x="179.1" y="611.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (16 samples, 0.49%)</title><rect x="179.1" y="595.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.1" y="606.0"></text>
</g>
<g>
<title>kevent (12 samples, 0.37%)</title><rect x="180.5" y="579.0" width="4.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="183.5" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (10 samples, 0.31%)</title><rect x="184.9" y="659.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (9 samples, 0.28%)</title><rect x="185.3" y="643.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.15%)</title><rect x="185.3" y="627.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4 samples, 0.12%)</title><rect x="185.3" y="611.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.12%)</title><rect x="185.3" y="595.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.3" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (4 samples, 0.12%)</title><rect x="185.3" y="579.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.12%)</title><rect x="185.3" y="563.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="188.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (4 samples, 0.12%)</title><rect x="185.3" y="547.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="185.3" y="531.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="185.3" y="515.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="185.3" y="499.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="185.3" y="483.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="185.3" y="467.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="185.3" y="451.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="188.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="185.3" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="188.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="185.6" y="419.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="188.6" y="430.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="185.6" y="403.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="188.6" y="414.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="185.6" y="387.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="188.6" y="398.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="185.6" y="371.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="188.6" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="186.0" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="189.0" y="414.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="186.3" y="403.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="189.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="186.7" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="187.1" y="627.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="187.1" y="611.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.12%)</title><rect x="187.1" y="595.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="187.1" y="579.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="187.1" y="563.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.1" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="187.1" y="547.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.1" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="187.1" y="531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.09%)</title><rect x="187.4" y="547.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.09%)</title><rect x="187.4" y="531.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.09%)</title><rect x="187.4" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.4" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.09%)</title><rect x="187.4" y="499.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="190.4" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39427] (99 samples, 3.04%)</title><rect x="188.5" y="691.0" width="35.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="191.5" y="702.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (99 samples, 3.04%)</title><rect x="188.5" y="675.0" width="35.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.5" y="686.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (72 samples, 2.21%)</title><rect x="188.9" y="659.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.9" y="670.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="188.9" y="643.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.9" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (70 samples, 2.15%)</title><rect x="189.6" y="643.0" width="25.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.6" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (70 samples, 2.15%)</title><rect x="189.6" y="627.0" width="25.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.6" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (70 samples, 2.15%)</title><rect x="189.6" y="611.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.6" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (66 samples, 2.03%)</title><rect x="189.6" y="595.0" width="24.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.6" y="606.0">s..</text>
</g>
<g>
<title>kevent (63 samples, 1.94%)</title><rect x="190.7" y="579.0" width="22.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="193.7" y="590.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="213.6" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.6" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="213.6" y="579.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="216.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="213.6" y="563.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="213.6" y="547.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.06%)</title><rect x="213.6" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="214.3" y="595.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.3" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="214.3" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (1 samples, 0.03%)</title><rect x="214.6" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.6" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (1 samples, 0.03%)</title><rect x="214.6" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.6" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="214.6" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.6" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="214.6" y="547.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="217.6" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="214.6" y="531.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="217.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (26 samples, 0.80%)</title><rect x="215.0" y="659.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (26 samples, 0.80%)</title><rect x="215.0" y="643.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 0.43%)</title><rect x="215.0" y="627.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="218.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.28%)</title><rect x="215.0" y="611.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.28%)</title><rect x="215.0" y="595.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.0" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.28%)</title><rect x="215.0" y="579.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.28%)</title><rect x="215.0" y="563.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="215.0" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.0" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="215.0" y="531.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="218.0" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.0" y="515.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.0" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.0" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="215.0" y="483.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="215.0" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="215.0" y="451.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.0" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="215.0" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="215.4" y="547.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="215.7" y="531.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="215.7" y="515.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="215.7" y="499.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="215.7" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="215.7" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="215.7" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="215.7" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="215.7" y="419.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="218.7" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="215.7" y="403.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="218.7" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="215.7" y="387.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="218.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="216.1" y="515.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="216.1" y="499.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="216.1" y="483.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="216.1" y="467.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.1" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="216.1" y="451.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="219.1" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="216.1" y="435.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="219.1" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="216.1" y="419.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="219.1" y="430.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="216.1" y="403.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="219.1" y="414.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="216.1" y="387.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="219.1" y="398.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="216.1" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="219.1" y="382.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.03%)</title><rect x="216.5" y="419.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="219.5" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (3 samples, 0.09%)</title><rect x="216.8" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="216.8" y="531.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="216.8" y="515.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="216.8" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="216.8" y="483.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="216.8" y="467.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="216.8" y="451.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="216.8" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.8" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="216.8" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="219.8" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="216.8" y="403.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="219.8" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="216.8" y="387.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="219.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="217.2" y="499.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="217.2" y="483.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="217.2" y="467.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="217.2" y="451.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.2" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="217.2" y="435.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.2" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="217.2" y="419.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="220.2" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="217.2" y="403.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="220.2" y="414.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="217.6" y="403.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="220.6" y="414.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="217.6" y="387.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="220.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="217.9" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="220.9" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="217.9" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 0.09%)</title><rect x="218.3" y="611.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="218.3" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="218.3" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="221.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="218.6" y="595.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="219.0" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.03%)</title><rect x="219.4" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.4" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="219.4" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.4" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.03%)</title><rect x="219.4" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="219.7" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.37%)</title><rect x="220.1" y="627.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.37%)</title><rect x="220.1" y="611.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.37%)</title><rect x="220.1" y="595.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.37%)</title><rect x="220.1" y="579.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="223.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.37%)</title><rect x="220.1" y="563.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (12 samples, 0.37%)</title><rect x="220.1" y="547.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (12 samples, 0.37%)</title><rect x="220.1" y="531.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (12 samples, 0.37%)</title><rect x="220.1" y="515.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.1" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (12 samples, 0.37%)</title><rect x="220.1" y="499.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="223.1" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=26627] (103 samples, 3.17%)</title><rect x="224.4" y="691.0" width="37.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="227.4" y="702.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (103 samples, 3.17%)</title><rect x="224.4" y="675.0" width="37.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="227.4" y="686.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (77 samples, 2.37%)</title><rect x="224.8" y="659.0" width="27.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="227.8" y="670.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="224.8" y="643.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (76 samples, 2.34%)</title><rect x="225.2" y="643.0" width="27.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.2" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (76 samples, 2.34%)</title><rect x="225.2" y="627.0" width="27.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.2" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (76 samples, 2.34%)</title><rect x="225.2" y="611.0" width="27.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.2" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (72 samples, 2.21%)</title><rect x="225.2" y="595.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.2" y="606.0">s..</text>
</g>
<g>
<title>kevent (67 samples, 2.06%)</title><rect x="227.0" y="579.0" width="24.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="230.0" y="590.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="251.3" y="595.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="251.3" y="579.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="251.3" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="251.3" y="547.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="251.3" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="254.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="251.7" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="251.7" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="251.7" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="252.0" y="595.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.0" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="252.0" y="579.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="252.4" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.4" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.03%)</title><rect x="252.4" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (25 samples, 0.77%)</title><rect x="252.7" y="659.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.68%)</title><rect x="253.1" y="643.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (10 samples, 0.31%)</title><rect x="253.1" y="627.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 0.25%)</title><rect x="253.1" y="611.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.1" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 0.25%)</title><rect x="253.1" y="595.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="256.1" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (8 samples, 0.25%)</title><rect x="253.1" y="579.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (8 samples, 0.25%)</title><rect x="253.1" y="563.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="253.1" y="547.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="256.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.15%)</title><rect x="253.1" y="531.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="253.1" y="515.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="253.1" y="499.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="253.1" y="483.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="253.1" y="467.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="253.1" y="451.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="253.1" y="435.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.1" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="253.1" y="419.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="256.1" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="253.1" y="403.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="256.1" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="253.1" y="387.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="256.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="253.8" y="515.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="253.8" y="499.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="253.8" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="253.8" y="467.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="254.2" y="451.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.2" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="254.2" y="435.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="257.2" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="254.2" y="419.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="257.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="254.6" y="419.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="257.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (3 samples, 0.09%)</title><rect x="254.9" y="547.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="254.9" y="531.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="254.9" y="515.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="254.9" y="499.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="254.9" y="483.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="257.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="254.9" y="467.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="257.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="254.9" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="254.9" y="435.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.9" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="254.9" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.9" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="254.9" y="403.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="257.9" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="254.9" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="257.9" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="254.9" y="371.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="257.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="255.3" y="499.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="255.3" y="483.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="255.3" y="467.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="255.3" y="451.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="255.3" y="435.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="255.3" y="419.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="258.3" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="255.3" y="403.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="258.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="256.0" y="611.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="256.0" y="595.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.0" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="256.4" y="595.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.4" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.37%)</title><rect x="256.7" y="627.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.37%)</title><rect x="256.7" y="611.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.37%)</title><rect x="256.7" y="595.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.7" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.isBlocking (1 samples, 0.03%)</title><rect x="256.7" y="579.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="257.1" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="257.1" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="257.1" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="257.1" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="257.1" y="515.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.1" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="257.1" y="499.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.1" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="257.1" y="483.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.31%)</title><rect x="257.5" y="579.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.31%)</title><rect x="257.5" y="563.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="257.5" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="257.5" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.25%)</title><rect x="257.8" y="547.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.8" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.25%)</title><rect x="257.8" y="531.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="260.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (8 samples, 0.25%)</title><rect x="257.8" y="515.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.8" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (8 samples, 0.25%)</title><rect x="257.8" y="499.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="260.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="260.7" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="263.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="260.7" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.7" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="261.1" y="643.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="264.1" y="654.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.06%)</title><rect x="261.1" y="627.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="264.1" y="638.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=34819] (42 samples, 1.29%)</title><rect x="261.8" y="691.0" width="15.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="264.8" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (42 samples, 1.29%)</title><rect x="261.8" y="675.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (29 samples, 0.89%)</title><rect x="261.8" y="659.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="261.8" y="643.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (28 samples, 0.86%)</title><rect x="262.2" y="643.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.2" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (28 samples, 0.86%)</title><rect x="262.2" y="627.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.2" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (28 samples, 0.86%)</title><rect x="262.2" y="611.0" width="10.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.2" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (27 samples, 0.83%)</title><rect x="262.2" y="595.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.2" y="606.0"></text>
</g>
<g>
<title>kevent (24 samples, 0.74%)</title><rect x="263.3" y="579.0" width="8.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="266.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="272.0" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="272.0" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="272.0" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="272.0" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="272.0" y="531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (13 samples, 0.40%)</title><rect x="272.3" y="659.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13 samples, 0.40%)</title><rect x="272.3" y="643.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 0.28%)</title><rect x="272.3" y="627.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 0.25%)</title><rect x="272.3" y="611.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 0.25%)</title><rect x="272.3" y="595.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.3" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (8 samples, 0.25%)</title><rect x="272.3" y="579.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (8 samples, 0.25%)</title><rect x="272.3" y="563.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.3" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (7 samples, 0.22%)</title><rect x="272.7" y="547.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.22%)</title><rect x="272.7" y="531.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.22%)</title><rect x="272.7" y="515.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.22%)</title><rect x="272.7" y="499.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.22%)</title><rect x="272.7" y="483.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.22%)</title><rect x="272.7" y="467.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.22%)</title><rect x="272.7" y="451.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="275.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.22%)</title><rect x="272.7" y="435.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.22%)</title><rect x="272.7" y="419.0" width="2.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="275.7" y="430.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="273.1" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="276.1" y="414.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="273.1" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="276.1" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="273.4" y="403.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="276.4" y="414.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="274.9" y="403.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="277.9" y="414.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="274.9" y="387.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="277.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="275.2" y="611.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="275.6" y="627.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.6" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="275.6" y="611.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.09%)</title><rect x="276.0" y="595.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.0" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.09%)</title><rect x="276.0" y="579.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.09%)</title><rect x="276.0" y="563.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="276.0" y="547.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.0" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="276.0" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.0" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="276.0" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="276.3" y="547.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="276.3" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="276.3" y="515.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.3" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="276.3" y="499.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="279.3" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=85763] (64 samples, 1.97%)</title><rect x="277.1" y="691.0" width="23.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="280.1" y="702.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (64 samples, 1.97%)</title><rect x="277.1" y="675.0" width="23.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.1" y="686.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (41 samples, 1.26%)</title><rect x="277.1" y="659.0" width="14.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.1" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="277.1" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="280.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (40 samples, 1.23%)</title><rect x="277.4" y="643.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (40 samples, 1.23%)</title><rect x="277.4" y="627.0" width="14.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (40 samples, 1.23%)</title><rect x="277.4" y="611.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (38 samples, 1.17%)</title><rect x="278.1" y="595.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.1" y="606.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="278.9" y="579.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="281.9" y="590.0"></text>
</g>
<g>
<title>kevent (35 samples, 1.08%)</title><rect x="279.2" y="579.0" width="12.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="282.2" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (23 samples, 0.71%)</title><rect x="291.9" y="659.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (21 samples, 0.65%)</title><rect x="292.3" y="643.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.37%)</title><rect x="292.3" y="627.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="292.7" y="611.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.18%)</title><rect x="292.7" y="595.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.7" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6 samples, 0.18%)</title><rect x="292.7" y="579.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="292.7" y="563.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (6 samples, 0.18%)</title><rect x="292.7" y="547.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.18%)</title><rect x="292.7" y="531.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.18%)</title><rect x="292.7" y="515.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="292.7" y="499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="292.7" y="483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="292.7" y="467.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="292.7" y="451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="292.7" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.7" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="292.7" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="293.0" y="499.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="296.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="293.0" y="483.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="293.0" y="467.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="293.0" y="451.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="293.0" y="435.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.0" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="293.0" y="419.0" width="1.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="296.0" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="293.0" y="403.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="296.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="294.8" y="611.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="294.8" y="595.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="294.8" y="579.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="297.8" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="563.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="297.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="294.8" y="547.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="297.8" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="294.8" y="531.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="297.8" y="542.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="294.8" y="515.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="297.8" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.03%)</title><rect x="294.8" y="499.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="297.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="295.2" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="298.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="295.6" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.6" y="622.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="295.6" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.6" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="295.9" y="611.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.9" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="295.9" y="595.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.9" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 0.28%)</title><rect x="296.7" y="627.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.7" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (9 samples, 0.28%)</title><rect x="296.7" y="611.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (9 samples, 0.28%)</title><rect x="296.7" y="595.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.7" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.28%)</title><rect x="296.7" y="579.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.7" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (9 samples, 0.28%)</title><rect x="296.7" y="563.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="299.7" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.28%)</title><rect x="296.7" y="547.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (9 samples, 0.28%)</title><rect x="296.7" y="531.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (9 samples, 0.28%)</title><rect x="296.7" y="515.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.7" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (9 samples, 0.28%)</title><rect x="296.7" y="499.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="299.7" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="299.9" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="302.9" y="654.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.03%)</title><rect x="299.9" y="627.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="302.9" y="638.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38659] (104 samples, 3.20%)</title><rect x="300.3" y="691.0" width="37.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="303.3" y="702.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (104 samples, 3.20%)</title><rect x="300.3" y="675.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="303.3" y="686.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (70 samples, 2.15%)</title><rect x="300.3" y="659.0" width="25.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="303.3" y="670.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="300.3" y="643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.3" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="300.6" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="303.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (68 samples, 2.09%)</title><rect x="301.0" y="643.0" width="24.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.0" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (68 samples, 2.09%)</title><rect x="301.0" y="627.0" width="24.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.0" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (67 samples, 2.06%)</title><rect x="301.4" y="611.0" width="24.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.4" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (63 samples, 1.94%)</title><rect x="301.4" y="595.0" width="22.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.4" y="606.0">s..</text>
</g>
<g>
<title>kevent (61 samples, 1.88%)</title><rect x="302.1" y="579.0" width="22.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="305.1" y="590.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="324.2" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="324.2" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="324.2" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.2" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.06%)</title><rect x="324.6" y="595.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="325.0" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.0" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="325.0" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.0" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="325.3" y="595.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="325.3" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.3" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="325.3" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.3" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (34 samples, 1.05%)</title><rect x="325.7" y="659.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.7" y="670.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="325.7" y="643.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="328.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (32 samples, 0.98%)</title><rect x="326.0" y="643.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="329.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 0.43%)</title><rect x="326.0" y="627.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (11 samples, 0.34%)</title><rect x="326.4" y="611.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="329.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (11 samples, 0.34%)</title><rect x="326.4" y="595.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.4" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (10 samples, 0.31%)</title><rect x="326.4" y="579.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="329.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="326.4" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.4" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.28%)</title><rect x="326.8" y="563.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="326.8" y="547.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.8" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="326.8" y="531.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.8" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="326.8" y="515.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="329.8" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="326.8" y="499.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="329.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="326.8" y="483.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="329.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="326.8" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="329.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="326.8" y="451.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="329.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="326.8" y="435.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="329.8" y="446.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="326.8" y="419.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="329.8" y="430.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="326.8" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="329.8" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="327.1" y="515.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.1" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="327.1" y="499.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.1" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="327.1" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="330.1" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="327.1" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.1" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="327.1" y="451.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="327.5" y="547.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.15%)</title><rect x="327.5" y="531.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="327.5" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="327.5" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="327.5" y="483.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="327.5" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="327.5" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="327.9" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="327.9" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="327.9" y="483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="327.9" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="327.9" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="330.9" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="327.9" y="435.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="330.9" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="327.9" y="419.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="330.9" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="327.9" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="330.9" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="327.9" y="387.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="330.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="328.2" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="328.2" y="499.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="328.2" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="328.2" y="467.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.2" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="328.2" y="451.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.2" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="328.2" y="435.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="331.2" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="328.2" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="331.2" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="328.6" y="419.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="331.6" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (1 samples, 0.03%)</title><rect x="329.3" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="329.3" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="329.3" y="515.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="329.3" y="499.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="329.3" y="483.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="329.3" y="467.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="329.3" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="329.3" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="329.3" y="419.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="332.3" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="329.3" y="403.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="332.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="329.7" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="332.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="329.7" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.7" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="329.7" y="515.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="332.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="330.0" y="579.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="330.0" y="563.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="330.0" y="547.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="330.0" y="531.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="330.0" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="330.4" y="611.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="333.4" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="330.4" y="595.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.4" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="330.8" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="333.8" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 0.55%)</title><rect x="331.1" y="627.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.1" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (18 samples, 0.55%)</title><rect x="331.1" y="611.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (18 samples, 0.55%)</title><rect x="331.1" y="595.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.55%)</title><rect x="331.1" y="579.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.55%)</title><rect x="331.1" y="563.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (14 samples, 0.43%)</title><rect x="331.1" y="547.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (14 samples, 0.43%)</title><rect x="331.1" y="531.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.1" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (14 samples, 0.43%)</title><rect x="331.1" y="515.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.1" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (14 samples, 0.43%)</title><rect x="331.1" y="499.0" width="5.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="334.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (4 samples, 0.12%)</title><rect x="336.2" y="547.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.2" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (4 samples, 0.12%)</title><rect x="336.2" y="531.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.2" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="336.9" y="515.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="339.9" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="337.7" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="340.7" y="654.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="337.7" y="627.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="340.7" y="638.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="337.7" y="611.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="340.7" y="622.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="337.7" y="595.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="340.7" y="606.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=85507] (36 samples, 1.11%)</title><rect x="338.0" y="691.0" width="13.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="341.0" y="702.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (36 samples, 1.11%)</title><rect x="338.0" y="675.0" width="13.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (22 samples, 0.68%)</title><rect x="338.0" y="659.0" width="8.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.0" y="670.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="338.0" y="643.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="341.0" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="338.4" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="341.4" y="654.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="338.4" y="627.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="341.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (20 samples, 0.62%)</title><rect x="338.7" y="643.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.7" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (20 samples, 0.62%)</title><rect x="338.7" y="627.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (20 samples, 0.62%)</title><rect x="338.7" y="611.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (18 samples, 0.55%)</title><rect x="338.7" y="595.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="341.7" y="606.0"></text>
</g>
<g>
<title>kevent (16 samples, 0.49%)</title><rect x="339.5" y="579.0" width="5.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="342.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.06%)</title><rect x="345.3" y="595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.3" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.06%)</title><rect x="345.3" y="579.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.3" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (14 samples, 0.43%)</title><rect x="346.0" y="659.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (14 samples, 0.43%)</title><rect x="346.0" y="643.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="349.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 0.28%)</title><rect x="346.0" y="627.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.28%)</title><rect x="346.0" y="611.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.28%)</title><rect x="346.0" y="595.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.0" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.28%)</title><rect x="346.0" y="579.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="349.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.28%)</title><rect x="346.0" y="563.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (9 samples, 0.28%)</title><rect x="346.0" y="547.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (9 samples, 0.28%)</title><rect x="346.0" y="531.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (9 samples, 0.28%)</title><rect x="346.0" y="515.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.28%)</title><rect x="346.0" y="499.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.28%)</title><rect x="346.0" y="483.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.28%)</title><rect x="346.0" y="467.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.28%)</title><rect x="346.0" y="451.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="349.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.28%)</title><rect x="346.0" y="435.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.0" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.28%)</title><rect x="346.0" y="419.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="349.0" y="430.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="346.0" y="403.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="349.0" y="414.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="346.0" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="349.0" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="346.4" y="403.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="349.4" y="414.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="346.7" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="349.7" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="347.1" y="403.0" width="1.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="350.1" y="414.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="348.9" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="351.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 0.15%)</title><rect x="349.3" y="627.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.3" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (5 samples, 0.15%)</title><rect x="349.3" y="611.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.15%)</title><rect x="349.3" y="595.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="352.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="349.3" y="579.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="349.3" y="563.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="352.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.15%)</title><rect x="349.3" y="547.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.15%)</title><rect x="349.3" y="531.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.15%)</title><rect x="349.3" y="515.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="352.3" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.15%)</title><rect x="349.3" y="499.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="352.3" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=27651] (114 samples, 3.51%)</title><rect x="351.1" y="691.0" width="41.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="354.1" y="702.0">[NI..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (114 samples, 3.51%)</title><rect x="351.1" y="675.0" width="41.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.1" y="686.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (76 samples, 2.34%)</title><rect x="351.1" y="659.0" width="27.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.1" y="670.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.09%)</title><rect x="351.1" y="643.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.09%)</title><rect x="351.1" y="627.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (2 samples, 0.06%)</title><rect x="351.4" y="611.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.4" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="351.4" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.4" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="351.4" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="354.4" y="590.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.03%)</title><rect x="351.4" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.4" y="574.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="351.4" y="547.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="354.4" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.03%)</title><rect x="351.8" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.8" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (1 samples, 0.03%)</title><rect x="351.8" y="579.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.8" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (73 samples, 2.24%)</title><rect x="352.2" y="643.0" width="26.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.2" y="654.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (73 samples, 2.24%)</title><rect x="352.2" y="627.0" width="26.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.2" y="638.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (73 samples, 2.24%)</title><rect x="352.2" y="611.0" width="26.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.2" y="622.0">s..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (65 samples, 2.00%)</title><rect x="352.5" y="595.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.5" y="606.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="354.0" y="579.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="357.0" y="590.0"></text>
</g>
<g>
<title>kevent (60 samples, 1.85%)</title><rect x="354.3" y="579.0" width="21.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="357.3" y="590.0">k..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (4 samples, 0.12%)</title><rect x="376.1" y="595.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.1" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.12%)</title><rect x="376.1" y="579.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="376.1" y="563.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="379.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="376.1" y="547.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="376.5" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.06%)</title><rect x="376.8" y="563.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="379.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.06%)</title><rect x="376.8" y="547.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="379.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="376.8" y="531.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.8" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.06%)</title><rect x="377.6" y="595.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.6" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (2 samples, 0.06%)</title><rect x="377.6" y="579.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="380.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="378.3" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.3" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="378.3" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="381.3" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="378.3" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="381.3" y="574.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="378.3" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="378.3" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (38 samples, 1.17%)</title><rect x="378.7" y="659.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34 samples, 1.05%)</title><rect x="379.4" y="643.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (22 samples, 0.68%)</title><rect x="379.4" y="627.0" width="8.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="382.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (18 samples, 0.55%)</title><rect x="379.4" y="611.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (18 samples, 0.55%)</title><rect x="379.4" y="595.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.4" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (18 samples, 0.55%)</title><rect x="379.4" y="579.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="379.4" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="382.4" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="379.4" y="547.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="382.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (17 samples, 0.52%)</title><rect x="379.7" y="563.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="379.7" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="379.7" y="531.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="382.7" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="379.7" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="382.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="379.7" y="499.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="382.7" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="379.7" y="483.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="382.7" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="379.7" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="382.7" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="379.7" y="451.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="382.7" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="379.7" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="382.7" y="446.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="379.7" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.7" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="379.7" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="382.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 0.25%)</title><rect x="380.1" y="547.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="383.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (8 samples, 0.25%)</title><rect x="380.1" y="531.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="380.1" y="515.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="380.1" y="499.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.12%)</title><rect x="380.1" y="483.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.12%)</title><rect x="380.1" y="467.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.12%)</title><rect x="380.1" y="451.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="383.1" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.12%)</title><rect x="380.1" y="435.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.1" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="380.5" y="419.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="383.5" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.09%)</title><rect x="380.5" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="383.5" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.09%)</title><rect x="380.5" y="387.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="383.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="381.6" y="515.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="381.6" y="499.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="381.6" y="483.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="384.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="381.6" y="467.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="381.9" y="451.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.9" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="381.9" y="435.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="384.9" y="446.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="381.9" y="419.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="384.9" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (8 samples, 0.25%)</title><rect x="383.0" y="547.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 0.25%)</title><rect x="383.0" y="531.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="386.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (8 samples, 0.25%)</title><rect x="383.0" y="515.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="383.0" y="499.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="386.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="383.0" y="483.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="383.0" y="467.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="383.0" y="451.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="383.0" y="435.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.0" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="383.0" y="419.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="386.0" y="430.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="383.4" y="403.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="386.4" y="414.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="383.4" y="387.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="386.4" y="398.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="383.4" y="371.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="386.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="383.7" y="499.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="383.7" y="483.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="383.7" y="467.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="386.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="383.7" y="451.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="386.7" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.18%)</title><rect x="383.7" y="435.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="386.7" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="383.7" y="419.0" width="2.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="386.7" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="383.7" y="403.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.7" y="414.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="384.1" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="387.1" y="398.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="384.1" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="387.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="384.5" y="403.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="387.5" y="414.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="385.6" y="403.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="388.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="385.9" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="385.9" y="595.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.9" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="386.3" y="595.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.3" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="386.3" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="389.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.06%)</title><rect x="386.6" y="611.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="389.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.06%)</title><rect x="386.6" y="595.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="389.6" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.06%)</title><rect x="386.6" y="579.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.6" y="590.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="386.6" y="563.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="389.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.37%)</title><rect x="387.4" y="627.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.4" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.37%)</title><rect x="387.4" y="611.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.37%)</title><rect x="387.4" y="595.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.4" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.37%)</title><rect x="387.4" y="579.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (12 samples, 0.37%)</title><rect x="387.4" y="563.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (9 samples, 0.28%)</title><rect x="387.4" y="547.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.25%)</title><rect x="387.7" y="531.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (8 samples, 0.25%)</title><rect x="387.7" y="515.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="390.7" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (7 samples, 0.22%)</title><rect x="388.1" y="499.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="391.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.09%)</title><rect x="390.6" y="547.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="390.6" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="391.0" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="394.0" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="391.0" y="515.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="394.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="391.4" y="515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="394.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="391.4" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.4" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="391.7" y="643.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="394.7" y="654.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.03%)</title><rect x="392.1" y="627.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="395.1" y="638.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=34307] (69 samples, 2.12%)</title><rect x="392.4" y="691.0" width="25.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="395.4" y="702.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (69 samples, 2.12%)</title><rect x="392.4" y="675.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.4" y="686.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (46 samples, 1.41%)</title><rect x="392.4" y="659.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.4" y="670.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="392.4" y="643.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="395.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (45 samples, 1.38%)</title><rect x="392.8" y="643.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (45 samples, 1.38%)</title><rect x="392.8" y="627.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (45 samples, 1.38%)</title><rect x="392.8" y="611.0" width="16.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (44 samples, 1.35%)</title><rect x="392.8" y="595.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.8" y="606.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="395.0" y="579.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="398.0" y="590.0"></text>
</g>
<g>
<title>kevent (37 samples, 1.14%)</title><rect x="395.4" y="579.0" width="13.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="398.4" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="408.8" y="595.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.8" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="408.8" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="408.8" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="408.8" y="547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="411.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="408.8" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (23 samples, 0.71%)</title><rect x="409.1" y="659.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.1" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="409.1" y="643.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="412.1" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.68%)</title><rect x="409.5" y="643.0" width="8.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.5" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (16 samples, 0.49%)</title><rect x="409.5" y="627.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (13 samples, 0.40%)</title><rect x="409.5" y="611.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.5" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (13 samples, 0.40%)</title><rect x="409.5" y="595.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.5" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (13 samples, 0.40%)</title><rect x="409.5" y="579.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="412.5" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (13 samples, 0.40%)</title><rect x="409.5" y="563.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="412.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.03%)</title><rect x="410.2" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.03%)</title><rect x="410.2" y="531.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.03%)</title><rect x="410.2" y="515.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (10 samples, 0.31%)</title><rect x="410.6" y="547.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.31%)</title><rect x="410.6" y="531.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 0.31%)</title><rect x="410.6" y="515.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="413.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="410.6" y="499.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="413.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="410.6" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="413.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="410.6" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="410.6" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="410.6" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.28%)</title><rect x="411.0" y="499.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="414.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.28%)</title><rect x="411.0" y="483.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.28%)</title><rect x="411.0" y="467.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.28%)</title><rect x="411.0" y="451.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.0" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.28%)</title><rect x="411.0" y="435.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="414.0" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (9 samples, 0.28%)</title><rect x="411.0" y="419.0" width="3.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="414.0" y="430.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="411.0" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="414.0" y="414.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="411.3" y="403.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="414.3" y="414.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list() (1 samples, 0.03%)</title><rect x="411.3" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="414.3" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (7 samples, 0.22%)</title><rect x="411.7" y="403.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="414.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="414.2" y="611.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="414.2" y="595.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.2" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="414.2" y="579.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.03%)</title><rect x="414.6" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="417.6" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="414.9" y="611.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.9" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (6 samples, 0.18%)</title><rect x="415.3" y="627.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.3" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (6 samples, 0.18%)</title><rect x="415.3" y="611.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (6 samples, 0.18%)</title><rect x="415.3" y="595.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.18%)</title><rect x="415.3" y="579.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="418.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.18%)</title><rect x="415.3" y="563.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="418.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="415.3" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="418.3" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="415.3" y="531.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="418.3" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="415.3" y="515.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.12%)</title><rect x="415.7" y="547.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="418.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (4 samples, 0.12%)</title><rect x="415.7" y="531.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.7" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (4 samples, 0.12%)</title><rect x="415.7" y="515.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.7" y="526.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="415.7" y="499.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="418.7" y="510.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.09%)</title><rect x="416.0" y="499.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="419.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="417.1" y="547.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="417.1" y="531.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.1" y="542.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=32003] (64 samples, 1.97%)</title><rect x="417.5" y="691.0" width="23.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="420.5" y="702.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (64 samples, 1.97%)</title><rect x="417.5" y="675.0" width="23.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.5" y="686.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (46 samples, 1.41%)</title><rect x="417.5" y="659.0" width="16.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="420.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (46 samples, 1.41%)</title><rect x="417.5" y="643.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="420.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (46 samples, 1.41%)</title><rect x="417.5" y="627.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (46 samples, 1.41%)</title><rect x="417.5" y="611.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (43 samples, 1.32%)</title><rect x="417.8" y="595.0" width="15.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.8" y="606.0"></text>
</g>
<g>
<title>kevent (40 samples, 1.23%)</title><rect x="418.9" y="579.0" width="14.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="421.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="433.5" y="595.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="433.5" y="579.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="433.5" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="436.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="433.5" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="436.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="433.5" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="436.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="433.8" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="433.8" y="547.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="433.8" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="436.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18 samples, 0.55%)</title><rect x="434.2" y="659.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="437.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (16 samples, 0.49%)</title><rect x="434.9" y="643.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.37%)</title><rect x="434.9" y="627.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.28%)</title><rect x="434.9" y="611.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="437.9" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.28%)</title><rect x="434.9" y="595.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.9" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.28%)</title><rect x="434.9" y="579.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="434.9" y="563.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="437.9" y="574.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="435.3" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (7 samples, 0.22%)</title><rect x="435.6" y="563.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.6" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (7 samples, 0.22%)</title><rect x="435.6" y="547.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="438.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.22%)</title><rect x="435.6" y="531.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.22%)</title><rect x="435.6" y="515.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (7 samples, 0.22%)</title><rect x="435.6" y="499.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.22%)</title><rect x="435.6" y="483.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.22%)</title><rect x="435.6" y="467.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.22%)</title><rect x="435.6" y="451.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="438.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (7 samples, 0.22%)</title><rect x="435.6" y="435.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.6" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="436.0" y="419.0" width="2.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="439.0" y="430.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="436.4" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="439.4" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="436.4" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="439.4" y="398.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="436.7" y="403.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="439.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="438.2" y="611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.2" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="438.5" y="611.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="438.5" y="595.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.5" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="439.3" y="627.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.3" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="439.3" y="611.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="442.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.12%)</title><rect x="439.3" y="595.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="439.3" y="579.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="439.3" y="563.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="442.3" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="439.3" y="547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.3" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="439.3" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.09%)</title><rect x="439.6" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.09%)</title><rect x="439.6" y="531.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.09%)</title><rect x="439.6" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.6" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.09%)</title><rect x="439.6" y="499.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="442.6" y="510.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=37891] (82 samples, 2.52%)</title><rect x="440.7" y="691.0" width="29.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="443.7" y="702.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (82 samples, 2.52%)</title><rect x="440.7" y="675.0" width="29.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.7" y="686.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (55 samples, 1.69%)</title><rect x="440.7" y="659.0" width="20.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.7" y="670.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="440.7" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="443.7" y="654.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="440.7" y="627.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="443.7" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (54 samples, 1.66%)</title><rect x="441.1" y="643.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (54 samples, 1.66%)</title><rect x="441.1" y="627.0" width="19.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (54 samples, 1.66%)</title><rect x="441.1" y="611.0" width="19.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (51 samples, 1.57%)</title><rect x="441.4" y="595.0" width="18.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.4" y="606.0"></text>
</g>
<g>
<title>kevent (49 samples, 1.51%)</title><rect x="442.2" y="579.0" width="17.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="445.2" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="459.9" y="595.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="462.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="459.9" y="579.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="462.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.06%)</title><rect x="459.9" y="563.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.06%)</title><rect x="459.9" y="547.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="460.3" y="531.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="463.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (27 samples, 0.83%)</title><rect x="460.7" y="659.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="463.7" y="670.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="460.7" y="643.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="463.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (25 samples, 0.77%)</title><rect x="461.0" y="643.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.25%)</title><rect x="461.4" y="627.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.4" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7 samples, 0.22%)</title><rect x="461.4" y="611.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.4" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.22%)</title><rect x="461.4" y="595.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.4" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.22%)</title><rect x="461.4" y="579.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="461.4" y="563.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="464.4" y="574.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="461.4" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="461.8" y="563.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="462.1" y="547.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="465.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="462.5" y="531.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="462.5" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="462.5" y="499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="465.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="462.5" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="465.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="462.5" y="467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="462.5" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.5" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="462.5" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.5" y="446.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="462.5" y="419.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="465.5" y="430.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="462.5" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="465.5" y="414.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="462.5" y="387.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="465.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="462.8" y="515.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="465.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="462.8" y="499.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="462.8" y="483.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="465.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="462.8" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="465.8" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="462.8" y="451.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="465.8" y="462.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="462.8" y="435.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="465.8" y="446.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="462.8" y="419.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="465.8" y="430.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="463.2" y="419.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="466.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="463.9" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.9" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="463.9" y="595.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.9" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="463.9" y="579.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="466.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 0.49%)</title><rect x="464.3" y="627.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="467.3" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (16 samples, 0.49%)</title><rect x="464.3" y="611.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (16 samples, 0.49%)</title><rect x="464.3" y="595.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="467.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.49%)</title><rect x="464.3" y="579.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (16 samples, 0.49%)</title><rect x="464.3" y="563.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="467.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (15 samples, 0.46%)</title><rect x="464.3" y="547.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="467.3" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (15 samples, 0.46%)</title><rect x="464.3" y="531.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.3" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (15 samples, 0.46%)</title><rect x="464.3" y="515.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.3" y="526.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="464.7" y="499.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="467.7" y="510.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="464.7" y="483.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="467.7" y="494.0"></text>
</g>
<g>
<title>rpc_errlist (13 samples, 0.40%)</title><rect x="465.0" y="499.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="468.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="469.7" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.7" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="469.7" y="531.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.7" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="469.7" y="515.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="472.7" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="470.1" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="473.1" y="654.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="470.1" y="627.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="473.1" y="638.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="470.1" y="611.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="473.1" y="622.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="470.1" y="595.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="473.1" y="606.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=47619] (63 samples, 1.94%)</title><rect x="470.5" y="691.0" width="22.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="473.5" y="702.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (63 samples, 1.94%)</title><rect x="470.5" y="675.0" width="22.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.5" y="686.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (39 samples, 1.20%)</title><rect x="470.5" y="659.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.5" y="670.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="470.5" y="643.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="473.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (38 samples, 1.17%)</title><rect x="470.8" y="643.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (38 samples, 1.17%)</title><rect x="470.8" y="627.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (38 samples, 1.17%)</title><rect x="470.8" y="611.0" width="13.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (38 samples, 1.17%)</title><rect x="470.8" y="595.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.8" y="606.0"></text>
</g>
<g>
<title>kevent (32 samples, 0.98%)</title><rect x="473.0" y="579.0" width="11.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="476.0" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (24 samples, 0.74%)</title><rect x="484.6" y="659.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="487.6" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (23 samples, 0.71%)</title><rect x="485.0" y="643.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.0" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (18 samples, 0.55%)</title><rect x="485.0" y="627.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (16 samples, 0.49%)</title><rect x="485.0" y="611.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.0" y="622.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (16 samples, 0.49%)</title><rect x="485.0" y="595.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.0" y="606.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (16 samples, 0.49%)</title><rect x="485.0" y="579.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (16 samples, 0.49%)</title><rect x="485.0" y="563.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.get (16 samples, 0.49%)</title><rect x="485.0" y="547.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (16 samples, 0.49%)</title><rect x="485.0" y="531.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="488.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (16 samples, 0.49%)</title><rect x="485.0" y="515.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="488.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="485.0" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="485.0" y="483.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="485.0" y="467.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="488.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="485.0" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.03%)</title><rect x="485.0" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 0.46%)</title><rect x="485.3" y="499.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 0.46%)</title><rect x="485.3" y="483.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="488.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 0.46%)</title><rect x="485.3" y="467.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 0.46%)</title><rect x="485.3" y="451.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.3" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (15 samples, 0.46%)</title><rect x="485.3" y="435.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.3" y="446.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="485.3" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="488.3" y="430.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (13 samples, 0.40%)</title><rect x="485.7" y="419.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="488.7" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="485.7" y="403.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="488.7" y="414.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="485.7" y="387.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="488.7" y="398.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="485.7" y="371.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="488.7" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="485.7" y="355.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="488.7" y="366.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="485.7" y="339.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="488.7" y="350.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="485.7" y="323.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="488.7" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.31%)</title><rect x="486.1" y="403.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="489.1" y="414.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="489.7" y="403.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="492.7" y="414.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="490.1" y="403.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="493.1" y="414.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="490.4" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="493.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="490.8" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="493.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="491.1" y="611.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="494.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="491.1" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="494.1" y="606.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 0.15%)</title><rect x="491.5" y="627.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (5 samples, 0.15%)</title><rect x="491.5" y="611.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.5" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.15%)</title><rect x="491.5" y="595.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.5" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="491.5" y="579.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.5" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="491.5" y="563.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.5" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="491.5" y="547.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.5" y="558.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="491.5" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.12%)</title><rect x="491.9" y="547.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="494.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (4 samples, 0.12%)</title><rect x="491.9" y="531.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="494.9" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (4 samples, 0.12%)</title><rect x="491.9" y="515.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="494.9" y="526.0"></text>
</g>
<g>
<title>rpc_errlist (4 samples, 0.12%)</title><rect x="491.9" y="499.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="494.9" y="510.0"></text>
</g>
<g>
<title>[async_worker_0 tid=24071] (150 samples, 4.61%)</title><rect x="493.3" y="691.0" width="54.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="496.3" y="702.0">[asyn..</text>
</g>
<g>
<title>java/lang/Thread.run (150 samples, 4.61%)</title><rect x="493.3" y="675.0" width="54.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.3" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (150 samples, 4.61%)</title><rect x="493.3" y="659.0" width="54.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.3" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (150 samples, 4.61%)</title><rect x="493.3" y="643.0" width="54.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.3" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (30 samples, 0.92%)</title><rect x="493.3" y="627.0" width="10.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.3" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="493.3" y="611.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="496.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (29 samples, 0.89%)</title><rect x="493.7" y="611.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (25 samples, 0.77%)</title><rect x="493.7" y="595.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (25 samples, 0.77%)</title><rect x="493.7" y="579.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (25 samples, 0.77%)</title><rect x="493.7" y="563.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.7" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (22 samples, 0.68%)</title><rect x="494.8" y="547.0" width="8.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="497.8" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 0.68%)</title><rect x="494.8" y="531.0" width="8.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="497.8" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="494.8" y="515.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="497.8" y="526.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="494.8" y="499.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="497.8" y="510.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="495.1" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="498.1" y="526.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="495.1" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="498.1" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.58%)</title><rect x="495.5" y="515.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="498.5" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="502.4" y="515.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="505.4" y="526.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="502.4" y="499.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="505.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="502.8" y="595.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="502.8" y="579.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="502.8" y="563.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="505.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="502.8" y="547.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="505.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="502.8" y="531.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="502.8" y="515.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="505.8" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="502.8" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="505.8" y="510.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="502.8" y="483.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="505.8" y="494.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="503.1" y="499.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="506.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (99 samples, 3.04%)</title><rect x="504.2" y="627.0" width="35.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.2" y="638.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (99 samples, 3.04%)</title><rect x="504.2" y="611.0" width="35.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.2" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (99 samples, 3.04%)</title><rect x="504.2" y="595.0" width="35.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.2" y="606.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 0.49%)</title><rect x="504.2" y="579.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="507.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="504.2" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.2" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="504.2" y="547.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="507.2" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="504.2" y="531.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="504.2" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.46%)</title><rect x="504.6" y="563.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="507.6" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="504.6" y="547.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="504.6" y="531.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (15 samples, 0.46%)</title><rect x="504.6" y="515.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (15 samples, 0.46%)</title><rect x="504.6" y="499.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (15 samples, 0.46%)</title><rect x="504.6" y="483.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="504.6" y="467.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="507.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="504.6" y="451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="504.6" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.6" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="504.6" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="507.6" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="504.6" y="403.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="507.6" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="504.6" y="387.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="507.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="504.9" y="467.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="507.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="504.9" y="451.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="507.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="504.9" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="507.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="504.9" y="419.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="505.3" y="467.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="505.3" y="451.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="508.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (13 samples, 0.40%)</title><rect x="505.3" y="435.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="508.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (13 samples, 0.40%)</title><rect x="505.3" y="419.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.40%)</title><rect x="505.3" y="403.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="508.3" y="414.0"></text>
</g>
<g>
<title>write (13 samples, 0.40%)</title><rect x="505.3" y="387.0" width="4.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="508.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (83 samples, 2.55%)</title><rect x="510.0" y="579.0" width="30.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="513.0" y="590.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (83 samples, 2.55%)</title><rect x="510.0" y="563.0" width="30.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="513.0" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (83 samples, 2.55%)</title><rect x="510.0" y="547.0" width="30.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="513.0" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (41 samples, 1.26%)</title><rect x="510.4" y="531.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="513.4" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="510.7" y="515.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="513.7" y="526.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="510.7" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="513.7" y="510.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="510.7" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="513.7" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="511.1" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="514.1" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="511.1" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="514.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="511.1" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="514.1" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="511.1" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="514.1" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="511.1" y="435.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="514.1" y="446.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="511.1" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="514.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (38 samples, 1.17%)</title><rect x="511.5" y="515.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="514.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (38 samples, 1.17%)</title><rect x="511.5" y="499.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="511.5" y="483.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="511.5" y="467.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.06%)</title><rect x="511.5" y="451.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.06%)</title><rect x="511.5" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="511.5" y="419.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="511.5" y="403.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="514.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="511.5" y="387.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="514.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.11%)</title><rect x="512.2" y="483.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="515.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.11%)</title><rect x="512.2" y="467.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.2" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="512.2" y="451.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.2" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="512.2" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.98%)</title><rect x="512.6" y="451.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="515.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (32 samples, 0.98%)</title><rect x="512.6" y="435.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="515.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (32 samples, 0.98%)</title><rect x="512.6" y="419.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.6" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="512.9" y="403.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="515.9" y="414.0"></text>
</g>
<g>
<title>rpc_errlist (30 samples, 0.92%)</title><rect x="513.3" y="403.0" width="10.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="516.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.09%)</title><rect x="524.2" y="451.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="527.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (3 samples, 0.09%)</title><rect x="524.2" y="435.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (5 samples, 0.15%)</title><rect x="525.3" y="531.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="528.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (4 samples, 0.12%)</title><rect x="525.3" y="515.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="526.0" y="499.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.0" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="526.0" y="483.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="529.0" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="526.3" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="526.7" y="515.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="527.1" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="530.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="527.1" y="515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="530.1" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="527.1" y="499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.1" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="527.1" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.1" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="527.1" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.1" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="527.1" y="451.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (35 samples, 1.08%)</title><rect x="527.4" y="531.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.4" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (27 samples, 0.83%)</title><rect x="527.4" y="515.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="530.4" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (27 samples, 0.83%)</title><rect x="527.4" y="499.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="530.4" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (27 samples, 0.83%)</title><rect x="527.4" y="483.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="530.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (27 samples, 0.83%)</title><rect x="527.4" y="467.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="530.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 0.80%)</title><rect x="527.4" y="451.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="530.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (26 samples, 0.80%)</title><rect x="527.4" y="435.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="530.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (26 samples, 0.80%)</title><rect x="527.4" y="419.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="530.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (26 samples, 0.80%)</title><rect x="527.4" y="403.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (25 samples, 0.77%)</title><rect x="527.8" y="387.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.8" y="398.0"></text>
</g>
<g>
<title>write (25 samples, 0.77%)</title><rect x="527.8" y="371.0" width="9.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="530.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="536.9" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="539.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="536.9" y="435.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="539.9" y="446.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="536.9" y="419.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="539.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (8 samples, 0.25%)</title><rect x="537.2" y="515.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.2" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (8 samples, 0.25%)</title><rect x="537.2" y="499.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="540.2" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="537.2" y="483.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="540.2" y="494.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (6 samples, 0.18%)</title><rect x="537.6" y="483.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="540.6" y="494.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="537.6" y="467.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.6" y="478.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="537.6" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="540.6" y="462.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="538.0" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="541.0" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="538.0" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="541.0" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="538.0" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="541.0" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (4 samples, 0.12%)</title><rect x="538.3" y="467.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="541.3" y="478.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.06%)</title><rect x="538.3" y="451.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="541.3" y="462.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="538.7" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="541.7" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (2 samples, 0.06%)</title><rect x="539.0" y="451.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.0" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.06%)</title><rect x="539.0" y="435.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="542.0" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (2 samples, 0.06%)</title><rect x="539.0" y="419.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="542.0" y="430.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (1 samples, 0.03%)</title><rect x="539.4" y="403.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.4" y="414.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="539.8" y="483.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="542.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (21 samples, 0.65%)</title><rect x="540.1" y="627.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (21 samples, 0.65%)</title><rect x="540.1" y="611.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (21 samples, 0.65%)</title><rect x="540.1" y="595.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.1" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 0.31%)</title><rect x="540.1" y="579.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 0.31%)</title><rect x="540.1" y="563.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.31%)</title><rect x="540.1" y="547.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="543.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.31%)</title><rect x="540.1" y="531.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.1" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.31%)</title><rect x="540.1" y="515.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.31%)</title><rect x="540.1" y="499.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.31%)</title><rect x="540.1" y="483.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.1" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="540.1" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="543.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="540.5" y="467.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="540.5" y="451.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.28%)</title><rect x="540.5" y="435.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.28%)</title><rect x="540.5" y="419.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.28%)</title><rect x="540.5" y="403.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="543.5" y="414.0"></text>
</g>
<g>
<title>write (7 samples, 0.22%)</title><rect x="541.2" y="387.0" width="2.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="544.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (11 samples, 0.34%)</title><rect x="543.8" y="579.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.8" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (11 samples, 0.34%)</title><rect x="543.8" y="563.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.8" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (11 samples, 0.34%)</title><rect x="543.8" y="547.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="546.8" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (11 samples, 0.34%)</title><rect x="543.8" y="531.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="546.8" y="542.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="543.8" y="515.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="546.8" y="526.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="544.1" y="515.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="547.1" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (9 samples, 0.28%)</title><rect x="544.5" y="515.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="547.5" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (5 samples, 0.15%)</title><rect x="544.5" y="499.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="547.5" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.12%)</title><rect x="544.5" y="483.0" width="1.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="547.5" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="544.5" y="467.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="547.5" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.09%)</title><rect x="544.8" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="547.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="544.8" y="451.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="547.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="544.8" y="435.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="547.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="544.8" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="547.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.03%)</title><rect x="545.2" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="548.2" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="545.6" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="548.6" y="462.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="545.9" y="483.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="548.9" y="494.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="545.9" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="548.9" y="478.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="545.9" y="451.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="548.9" y="462.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (1 samples, 0.03%)</title><rect x="545.9" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="548.9" y="446.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="546.3" y="499.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="549.3" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="546.3" y="483.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="549.3" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="546.3" y="467.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="549.3" y="478.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="546.3" y="451.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="549.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.09%)</title><rect x="546.7" y="499.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="549.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (3 samples, 0.09%)</title><rect x="546.7" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (3 samples, 0.09%)</title><rect x="546.7" y="467.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (3 samples, 0.09%)</title><rect x="546.7" y="451.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="549.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (3 samples, 0.09%)</title><rect x="546.7" y="435.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="549.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.09%)</title><rect x="546.7" y="419.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="549.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="546.7" y="403.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="549.7" y="414.0"></text>
</g>
<g>
<title>[async_worker_0 tid=56067] (57 samples, 1.75%)</title><rect x="547.7" y="691.0" width="20.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="550.7" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="547.7" y="675.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="550.7" y="686.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="547.7" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="550.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (56 samples, 1.72%)</title><rect x="548.1" y="675.0" width="20.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="551.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (56 samples, 1.72%)</title><rect x="548.1" y="659.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (56 samples, 1.72%)</title><rect x="548.1" y="643.0" width="20.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="551.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (30 samples, 0.92%)</title><rect x="548.1" y="627.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="551.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (30 samples, 0.92%)</title><rect x="548.1" y="611.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="551.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (30 samples, 0.92%)</title><rect x="548.1" y="595.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="551.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (30 samples, 0.92%)</title><rect x="548.1" y="579.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="551.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (30 samples, 0.92%)</title><rect x="548.1" y="563.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.1" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (29 samples, 0.89%)</title><rect x="548.5" y="547.0" width="10.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="551.5" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (29 samples, 0.89%)</title><rect x="548.5" y="531.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="551.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (28 samples, 0.86%)</title><rect x="548.5" y="515.0" width="10.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="551.5" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="558.6" y="515.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="561.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (26 samples, 0.80%)</title><rect x="559.0" y="627.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (26 samples, 0.80%)</title><rect x="559.0" y="611.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (26 samples, 0.80%)</title><rect x="559.0" y="595.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="562.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.43%)</title><rect x="559.0" y="579.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="562.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.43%)</title><rect x="559.0" y="563.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.0" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="559.0" y="547.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.0" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="559.0" y="531.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="562.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.37%)</title><rect x="559.7" y="547.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="562.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.37%)</title><rect x="559.7" y="531.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (12 samples, 0.37%)</title><rect x="559.7" y="515.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="562.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (12 samples, 0.37%)</title><rect x="559.7" y="499.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="562.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (12 samples, 0.37%)</title><rect x="559.7" y="483.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="562.7" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="559.7" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="562.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="560.1" y="467.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="563.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="560.1" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="563.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="560.1" y="435.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="560.4" y="467.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="563.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="560.4" y="451.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.31%)</title><rect x="560.4" y="435.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.31%)</title><rect x="560.4" y="419.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (8 samples, 0.25%)</title><rect x="561.2" y="403.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="564.2" y="414.0"></text>
</g>
<g>
<title>write (8 samples, 0.25%)</title><rect x="561.2" y="387.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="564.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (12 samples, 0.37%)</title><rect x="564.1" y="579.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.1" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="564.1" y="563.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.1" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="564.1" y="547.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.1" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (12 samples, 0.37%)</title><rect x="564.1" y="531.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="567.1" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.37%)</title><rect x="564.1" y="515.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="567.1" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.09%)</title><rect x="564.1" y="499.0" width="1.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="567.1" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.06%)</title><rect x="564.1" y="483.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="567.1" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="564.4" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="567.4" y="478.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="564.8" y="483.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="567.8" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="565.2" y="499.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="568.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.25%)</title><rect x="565.5" y="499.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="568.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.25%)</title><rect x="565.5" y="483.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="568.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (7 samples, 0.22%)</title><rect x="565.9" y="467.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="568.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.22%)</title><rect x="565.9" y="451.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="568.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="565.9" y="435.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="568.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.09%)</title><rect x="565.9" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="568.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.06%)</title><rect x="566.3" y="403.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="569.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="567.0" y="419.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="570.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="567.3" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="570.3" y="430.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="567.7" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="570.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="568.1" y="435.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="571.1" y="446.0"></text>
</g>
<g>
<title>[async_worker_0 tid=77315] (59 samples, 1.81%)</title><rect x="568.4" y="691.0" width="21.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="571.4" y="702.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 1.81%)</title><rect x="568.4" y="675.0" width="21.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="571.4" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 1.81%)</title><rect x="568.4" y="659.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="571.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 1.81%)</title><rect x="568.4" y="643.0" width="21.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="571.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (29 samples, 0.89%)</title><rect x="569.2" y="627.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (29 samples, 0.89%)</title><rect x="569.2" y="611.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (28 samples, 0.86%)</title><rect x="569.2" y="595.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (28 samples, 0.86%)</title><rect x="569.2" y="579.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="572.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (28 samples, 0.86%)</title><rect x="569.2" y="563.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="572.2" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (25 samples, 0.77%)</title><rect x="570.2" y="547.0" width="9.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="573.2" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 0.77%)</title><rect x="570.2" y="531.0" width="9.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="573.2" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="570.2" y="515.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="573.2" y="526.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="570.2" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="573.2" y="510.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="570.2" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="573.2" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (22 samples, 0.68%)</title><rect x="570.6" y="515.0" width="8.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="573.6" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="578.6" y="515.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="581.6" y="526.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="579.0" y="499.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="582.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="579.3" y="595.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="579.3" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="579.3" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="582.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="579.3" y="547.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="579.3" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="579.3" y="515.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="582.3" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="579.3" y="499.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="582.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (28 samples, 0.86%)</title><rect x="579.7" y="627.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.7" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (28 samples, 0.86%)</title><rect x="579.7" y="611.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (28 samples, 0.86%)</title><rect x="579.7" y="595.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="582.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (19 samples, 0.58%)</title><rect x="579.7" y="579.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.7" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="579.7" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="579.7" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.7" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="579.7" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (18 samples, 0.55%)</title><rect x="580.0" y="563.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="583.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.55%)</title><rect x="580.0" y="547.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="583.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.55%)</title><rect x="580.0" y="531.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="583.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (18 samples, 0.55%)</title><rect x="580.0" y="515.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (18 samples, 0.55%)</title><rect x="580.0" y="499.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 0.55%)</title><rect x="580.0" y="483.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="583.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.55%)</title><rect x="580.0" y="467.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="583.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.55%)</title><rect x="580.0" y="451.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (18 samples, 0.55%)</title><rect x="580.0" y="435.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (18 samples, 0.55%)</title><rect x="580.0" y="419.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (16 samples, 0.49%)</title><rect x="580.8" y="403.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="583.8" y="414.0"></text>
</g>
<g>
<title>write (15 samples, 0.46%)</title><rect x="581.1" y="387.0" width="5.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="584.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (9 samples, 0.28%)</title><rect x="586.6" y="579.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="589.6" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="586.6" y="563.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.6" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="586.6" y="547.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="589.6" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (8 samples, 0.25%)</title><rect x="586.6" y="531.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="589.6" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (7 samples, 0.22%)</title><rect x="586.9" y="515.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="586.9" y="499.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="589.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="586.9" y="483.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="589.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (7 samples, 0.22%)</title><rect x="586.9" y="467.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.22%)</title><rect x="586.9" y="451.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="589.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="586.9" y="435.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.03%)</title><rect x="586.9" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="589.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.03%)</title><rect x="586.9" y="403.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.12%)</title><rect x="587.3" y="419.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="590.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="587.3" y="403.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.09%)</title><rect x="587.7" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.7" y="398.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="588.0" y="371.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="591.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="588.4" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="591.4" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="588.4" y="355.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="591.4" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="588.8" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="591.8" y="430.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="589.1" y="435.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="592.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="589.5" y="563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="592.5" y="574.0"></text>
</g>
<g>
<title>[async_worker_1 tid=52227] (143 samples, 4.40%)</title><rect x="589.8" y="691.0" width="51.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="592.8" y="702.0">[asyn..</text>
</g>
<g>
<title>java/lang/Thread.run (143 samples, 4.40%)</title><rect x="589.8" y="675.0" width="51.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.8" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (143 samples, 4.40%)</title><rect x="589.8" y="659.0" width="51.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="592.8" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (143 samples, 4.40%)</title><rect x="589.8" y="643.0" width="51.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="592.8" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (32 samples, 0.98%)</title><rect x="589.8" y="627.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (32 samples, 0.98%)</title><rect x="589.8" y="611.0" width="11.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="592.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (26 samples, 0.80%)</title><rect x="589.8" y="595.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="592.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="589.8" y="579.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="592.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="589.8" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="592.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="589.8" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="592.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="589.8" y="531.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="592.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="589.8" y="515.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="592.8" y="526.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="589.8" y="499.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="592.8" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="589.8" y="483.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="592.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (25 samples, 0.77%)</title><rect x="590.2" y="579.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="593.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (25 samples, 0.77%)</title><rect x="590.2" y="563.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.2" y="574.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="590.9" y="547.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="593.9" y="558.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (22 samples, 0.68%)</title><rect x="591.3" y="547.0" width="8.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="594.3" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="591.3" y="531.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="594.3" y="542.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="591.3" y="515.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="594.3" y="526.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="591.3" y="499.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="594.3" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 0.62%)</title><rect x="591.7" y="531.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="594.7" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.58%)</title><rect x="592.0" y="515.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="595.0" y="526.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="598.9" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="601.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="599.3" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="599.3" y="579.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="602.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="599.3" y="563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="602.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.03%)</title><rect x="599.3" y="547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="602.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="599.6" y="595.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="602.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="599.6" y="579.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="599.6" y="563.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="602.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="599.6" y="547.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="602.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="599.6" y="531.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="602.6" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="599.6" y="515.0" width="1.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="602.6" y="526.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="599.6" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="602.6" y="510.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="600.0" y="499.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="603.0" y="510.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="600.0" y="483.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="603.0" y="494.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="600.4" y="499.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="603.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (88 samples, 2.71%)</title><rect x="601.5" y="627.0" width="31.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.5" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (88 samples, 2.71%)</title><rect x="601.5" y="611.0" width="31.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.5" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (88 samples, 2.71%)</title><rect x="601.5" y="595.0" width="31.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.5" y="606.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 0.55%)</title><rect x="601.5" y="579.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="604.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="601.5" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="604.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="601.5" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="604.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="601.5" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 0.52%)</title><rect x="601.8" y="563.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="604.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="601.8" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.49%)</title><rect x="602.2" y="547.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.49%)</title><rect x="602.2" y="531.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (16 samples, 0.49%)</title><rect x="602.2" y="515.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (16 samples, 0.49%)</title><rect x="602.2" y="499.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 0.49%)</title><rect x="602.2" y="483.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="605.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.49%)</title><rect x="602.2" y="467.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.49%)</title><rect x="602.2" y="451.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (16 samples, 0.49%)</title><rect x="602.2" y="435.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.49%)</title><rect x="602.2" y="419.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 0.46%)</title><rect x="602.5" y="403.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.5" y="414.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="602.5" y="387.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="605.5" y="398.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="602.5" y="371.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="605.5" y="382.0"></text>
</g>
<g>
<title>write (14 samples, 0.43%)</title><rect x="602.9" y="387.0" width="5.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="605.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (70 samples, 2.15%)</title><rect x="608.0" y="579.0" width="25.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.0" y="590.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (70 samples, 2.15%)</title><rect x="608.0" y="563.0" width="25.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="611.0" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (70 samples, 2.15%)</title><rect x="608.0" y="547.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.0" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (42 samples, 1.29%)</title><rect x="608.0" y="531.0" width="15.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="611.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (41 samples, 1.26%)</title><rect x="608.3" y="515.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="611.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (41 samples, 1.26%)</title><rect x="608.3" y="499.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="611.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.26%)</title><rect x="608.3" y="483.0" width="14.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (41 samples, 1.26%)</title><rect x="608.3" y="467.0" width="14.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (41 samples, 1.26%)</title><rect x="608.3" y="451.0" width="14.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="611.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (41 samples, 1.26%)</title><rect x="608.3" y="435.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="611.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (41 samples, 1.26%)</title><rect x="608.3" y="419.0" width="14.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="611.3" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (40 samples, 1.23%)</title><rect x="608.7" y="403.0" width="14.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="611.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2 samples, 0.06%)</title><rect x="623.2" y="531.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.03%)</title><rect x="623.2" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.2" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="623.2" y="499.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.2" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="623.2" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="626.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="623.6" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="623.9" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.9" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.03%)</title><rect x="623.9" y="515.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="623.9" y="499.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="626.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="623.9" y="483.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="623.9" y="467.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.9" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (24 samples, 0.74%)</title><rect x="624.3" y="531.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.3" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (16 samples, 0.49%)</title><rect x="624.3" y="515.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.3" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (16 samples, 0.49%)</title><rect x="624.3" y="499.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.3" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (16 samples, 0.49%)</title><rect x="624.3" y="483.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="627.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 0.49%)</title><rect x="624.3" y="467.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="627.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.49%)</title><rect x="624.3" y="451.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="627.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.49%)</title><rect x="624.3" y="435.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (16 samples, 0.49%)</title><rect x="624.3" y="419.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="627.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.49%)</title><rect x="624.3" y="403.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="627.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (16 samples, 0.49%)</title><rect x="624.3" y="387.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.3" y="398.0"></text>
</g>
<g>
<title>write (16 samples, 0.49%)</title><rect x="624.3" y="371.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="627.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (8 samples, 0.25%)</title><rect x="630.1" y="515.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.1" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (8 samples, 0.25%)</title><rect x="630.1" y="499.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.1" y="510.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.03%)</title><rect x="630.1" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="633.1" y="494.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (6 samples, 0.18%)</title><rect x="630.5" y="483.0" width="2.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="633.5" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="630.8" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="633.8" y="478.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="630.8" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.8" y="462.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="631.2" y="451.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.2" y="462.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="631.6" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="634.6" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="631.9" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="634.9" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="631.9" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="634.9" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="631.9" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.9" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="631.9" y="419.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="634.9" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="631.9" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.9" y="414.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="631.9" y="387.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.9" y="398.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="631.9" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.9" y="382.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="631.9" y="355.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="634.9" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="632.3" y="467.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="635.3" y="478.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="632.7" y="483.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="635.7" y="494.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="633.0" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.0" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="633.0" y="515.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="636.0" y="526.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="633.0" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.0" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="633.0" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="636.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (23 samples, 0.71%)</title><rect x="633.4" y="627.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (23 samples, 0.71%)</title><rect x="633.4" y="611.0" width="8.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (23 samples, 0.71%)</title><rect x="633.4" y="595.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.12%)</title><rect x="633.4" y="579.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4 samples, 0.12%)</title><rect x="633.4" y="563.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.12%)</title><rect x="633.4" y="547.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.12%)</title><rect x="633.4" y="531.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4 samples, 0.12%)</title><rect x="633.4" y="515.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (4 samples, 0.12%)</title><rect x="633.4" y="499.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (4 samples, 0.12%)</title><rect x="633.4" y="483.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4 samples, 0.12%)</title><rect x="633.4" y="467.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="636.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4 samples, 0.12%)</title><rect x="633.4" y="451.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (4 samples, 0.12%)</title><rect x="633.4" y="435.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="636.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (4 samples, 0.12%)</title><rect x="633.4" y="419.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.12%)</title><rect x="633.4" y="403.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.4" y="414.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="633.4" y="387.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (19 samples, 0.58%)</title><rect x="634.8" y="579.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.8" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (18 samples, 0.55%)</title><rect x="634.8" y="563.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.8" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (18 samples, 0.55%)</title><rect x="634.8" y="547.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.8" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (18 samples, 0.55%)</title><rect x="634.8" y="531.0" width="6.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="637.8" y="542.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="634.8" y="515.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="637.8" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (17 samples, 0.52%)</title><rect x="635.2" y="515.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="638.2" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.09%)</title><rect x="635.2" y="499.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="638.2" y="510.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="635.2" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.2" y="494.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="635.6" y="483.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="638.6" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="635.9" y="483.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="638.9" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="635.9" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="638.9" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="635.9" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="638.9" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="635.9" y="435.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="638.9" y="446.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="635.9" y="419.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="638.9" y="430.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="635.9" y="403.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="638.9" y="414.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="636.3" y="499.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="639.3" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="636.3" y="483.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="639.3" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="636.3" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="639.3" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="636.3" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="639.3" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="636.3" y="435.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="639.3" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="636.3" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="639.3" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="636.3" y="403.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="639.3" y="414.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="636.3" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="639.3" y="398.0"></text>
</g>
<g>
<title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="636.3" y="371.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.3" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.06%)</title><rect x="636.6" y="499.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="639.6" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="636.6" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="639.6" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="636.6" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="639.6" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="636.6" y="451.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="639.6" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="636.6" y="435.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.6" y="446.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="637.0" y="483.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="640.0" y="494.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="637.4" y="499.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="640.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.31%)</title><rect x="637.7" y="499.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="640.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (10 samples, 0.31%)</title><rect x="637.7" y="483.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="640.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (10 samples, 0.31%)</title><rect x="637.7" y="467.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (10 samples, 0.31%)</title><rect x="637.7" y="451.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (10 samples, 0.31%)</title><rect x="637.7" y="435.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="640.7" y="446.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (2 samples, 0.06%)</title><rect x="637.7" y="419.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="640.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (1 samples, 0.03%)</title><rect x="638.5" y="419.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="641.5" y="430.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="638.5" y="403.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="641.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.22%)</title><rect x="638.8" y="419.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="641.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.22%)</title><rect x="638.8" y="403.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="641.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="641.0" y="387.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="641.0" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.0" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="641.0" y="355.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="644.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="641.4" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.03%)</title><rect x="641.4" y="547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="641.4" y="531.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.4" y="542.0"></text>
</g>
<g>
<title>[async_worker_1 tid=53763] (51 samples, 1.57%)</title><rect x="641.7" y="691.0" width="18.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="644.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 1.57%)</title><rect x="641.7" y="675.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 1.57%)</title><rect x="641.7" y="659.0" width="18.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="644.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 1.57%)</title><rect x="641.7" y="643.0" width="18.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.03%)</title><rect x="641.7" y="627.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (30 samples, 0.92%)</title><rect x="642.1" y="627.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (30 samples, 0.92%)</title><rect x="642.1" y="611.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (26 samples, 0.80%)</title><rect x="642.5" y="595.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.06%)</title><rect x="642.5" y="579.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="642.5" y="563.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="642.5" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="642.5" y="531.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.5" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="642.5" y="515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.5" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="642.5" y="499.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="645.5" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="642.5" y="483.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="645.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="642.8" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.03%)</title><rect x="642.8" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (24 samples, 0.74%)</title><rect x="643.2" y="579.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (24 samples, 0.74%)</title><rect x="643.2" y="563.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.2" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.65%)</title><rect x="644.3" y="547.0" width="7.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="647.3" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 0.62%)</title><rect x="644.3" y="531.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="647.3" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.52%)</title><rect x="644.3" y="515.0" width="6.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="647.3" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="650.4" y="515.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="653.4" y="526.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="650.8" y="499.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="653.8" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="651.2" y="515.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="654.2" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="651.5" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="654.5" y="542.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="651.5" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="654.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="651.9" y="595.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="651.9" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="654.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="651.9" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="652.3" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="652.3" y="579.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="655.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="652.3" y="563.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="652.3" y="547.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="655.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="652.3" y="531.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.3" y="542.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="652.3" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.3" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="652.6" y="515.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="655.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="652.6" y="499.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="655.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (20 samples, 0.62%)</title><rect x="653.0" y="627.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (20 samples, 0.62%)</title><rect x="653.0" y="611.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (20 samples, 0.62%)</title><rect x="653.0" y="595.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="656.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.28%)</title><rect x="653.0" y="579.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.25%)</title><rect x="653.0" y="563.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="653.0" y="547.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="653.0" y="531.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.22%)</title><rect x="653.3" y="515.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.22%)</title><rect x="653.3" y="499.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="656.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.22%)</title><rect x="653.3" y="483.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="656.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="653.3" y="467.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="653.3" y="451.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="653.3" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="653.7" y="467.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="653.7" y="451.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="653.7" y="435.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="656.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="653.7" y="419.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.7" y="430.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="654.1" y="403.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="657.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.12%)</title><rect x="654.4" y="403.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.4" y="414.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="654.4" y="387.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="657.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="655.9" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="658.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="655.9" y="547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="658.9" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="655.9" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="658.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="656.2" y="579.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="659.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="656.2" y="563.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="656.2" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="659.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="656.2" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="656.2" y="515.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="659.2" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="656.2" y="499.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.2" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="656.2" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="659.2" y="494.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="656.2" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.2" y="478.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.03%)</title><rect x="656.2" y="451.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (10 samples, 0.31%)</title><rect x="656.6" y="579.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.6" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="656.6" y="563.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="656.6" y="547.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.6" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (10 samples, 0.31%)</title><rect x="656.6" y="531.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="659.6" y="542.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="656.6" y="515.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="659.6" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (9 samples, 0.28%)</title><rect x="657.0" y="515.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="660.0" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="657.0" y="499.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="660.0" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="657.0" y="483.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="660.0" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="657.0" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="660.0" y="478.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="657.3" y="499.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="660.3" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="657.3" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="660.3" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.03%)</title><rect x="657.3" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="660.3" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="657.3" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.3" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="657.7" y="499.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="660.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="658.1" y="499.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="661.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="658.1" y="483.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="661.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="658.1" y="467.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="661.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="658.1" y="451.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="661.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="658.1" y="435.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="661.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="658.1" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="661.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="658.1" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="661.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="658.4" y="419.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="661.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="658.4" y="403.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="661.4" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="659.1" y="387.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="662.1" y="398.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="659.1" y="371.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="662.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="659.5" y="387.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="662.5" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="659.9" y="371.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="662.9" y="382.0"></text>
</g>
<g>
<title>[async_worker_1 tid=54275] (52 samples, 1.60%)</title><rect x="660.2" y="691.0" width="18.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="663.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (52 samples, 1.60%)</title><rect x="660.2" y="675.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (52 samples, 1.60%)</title><rect x="660.2" y="659.0" width="18.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (52 samples, 1.60%)</title><rect x="660.2" y="643.0" width="18.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.71%)</title><rect x="660.2" y="627.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (23 samples, 0.71%)</title><rect x="660.2" y="611.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.65%)</title><rect x="660.2" y="595.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="660.2" y="579.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="660.2" y="563.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.2" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (19 samples, 0.58%)</title><rect x="661.0" y="547.0" width="6.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="664.0" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 0.55%)</title><rect x="661.0" y="531.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="664.0" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.55%)</title><rect x="661.0" y="515.0" width="6.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="664.0" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="667.5" y="531.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.5" y="542.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="667.5" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="670.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="667.9" y="595.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="670.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="667.9" y="579.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="670.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="667.9" y="563.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="670.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="667.9" y="547.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.9" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="667.9" y="531.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="670.9" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="667.9" y="515.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="670.9" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="667.9" y="499.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="670.9" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="668.2" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="671.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (29 samples, 0.89%)</title><rect x="668.6" y="627.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (29 samples, 0.89%)</title><rect x="668.6" y="611.0" width="10.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.6" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (29 samples, 0.89%)</title><rect x="668.6" y="595.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 0.49%)</title><rect x="668.6" y="579.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.6" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="668.6" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="671.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="668.6" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="671.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="668.6" y="531.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="671.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.46%)</title><rect x="668.9" y="563.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.9" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="668.9" y="547.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="669.3" y="531.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.43%)</title><rect x="669.3" y="515.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="672.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.43%)</title><rect x="669.3" y="499.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.43%)</title><rect x="669.3" y="483.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="672.3" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.03%)</title><rect x="669.3" y="467.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="672.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="669.7" y="467.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="669.7" y="451.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="672.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="669.7" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="672.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="670.0" y="467.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="673.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="670.0" y="451.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (12 samples, 0.37%)</title><rect x="670.0" y="435.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="673.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (12 samples, 0.37%)</title><rect x="670.0" y="419.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="673.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (12 samples, 0.37%)</title><rect x="670.0" y="403.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="673.0" y="414.0"></text>
</g>
<g>
<title>write (12 samples, 0.37%)</title><rect x="670.0" y="387.0" width="4.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="673.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (13 samples, 0.40%)</title><rect x="674.4" y="579.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.4" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="674.4" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.4" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="674.4" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.4" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="674.4" y="531.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="677.4" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="674.4" y="515.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="677.4" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="674.7" y="563.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.7" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="674.7" y="547.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.7" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (12 samples, 0.37%)</title><rect x="674.7" y="531.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="677.7" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.37%)</title><rect x="674.7" y="515.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="677.7" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="675.1" y="499.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="678.1" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="675.1" y="483.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="678.1" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="675.1" y="467.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.1" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="675.1" y="451.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="678.1" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="675.1" y="435.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="678.1" y="446.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="675.1" y="419.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="678.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="675.5" y="499.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.5" y="510.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="675.5" y="483.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="678.5" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="675.8" y="499.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="678.8" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="676.2" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="679.2" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="676.2" y="483.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="679.2" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="676.2" y="467.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="679.2" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="676.2" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="679.2" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="676.2" y="435.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="679.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="676.6" y="499.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="679.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="676.6" y="483.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="679.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="676.9" y="467.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="679.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="676.9" y="451.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="679.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="676.9" y="435.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="679.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="676.9" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="679.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="676.9" y="403.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="679.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="677.3" y="419.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="680.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="677.3" y="403.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="680.3" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.09%)</title><rect x="678.0" y="387.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="678.4" y="371.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="681.4" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.06%)</title><rect x="678.4" y="355.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="681.4" y="366.0"></text>
</g>
<g>
<title>[async_worker_2 tid=54787] (36 samples, 1.11%)</title><rect x="679.1" y="691.0" width="13.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="682.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (36 samples, 1.11%)</title><rect x="679.1" y="675.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (36 samples, 1.11%)</title><rect x="679.1" y="659.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (36 samples, 1.11%)</title><rect x="679.1" y="643.0" width="13.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 0.58%)</title><rect x="679.1" y="627.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="682.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (19 samples, 0.58%)</title><rect x="679.1" y="611.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (19 samples, 0.58%)</title><rect x="679.1" y="595.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (19 samples, 0.58%)</title><rect x="679.1" y="579.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="682.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (19 samples, 0.58%)</title><rect x="679.1" y="563.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.1" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (18 samples, 0.55%)</title><rect x="679.5" y="547.0" width="6.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="682.5" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="679.5" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.5" y="542.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="679.5" y="515.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.5" y="526.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="679.5" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="682.5" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.52%)</title><rect x="679.8" y="531.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="682.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.52%)</title><rect x="679.8" y="515.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="682.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (17 samples, 0.52%)</title><rect x="686.0" y="627.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="689.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (17 samples, 0.52%)</title><rect x="686.0" y="611.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="689.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (17 samples, 0.52%)</title><rect x="686.0" y="595.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.34%)</title><rect x="686.0" y="579.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="689.0" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="686.4" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="689.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="686.4" y="547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="689.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="686.4" y="531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="689.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.28%)</title><rect x="686.7" y="563.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="689.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="686.7" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.7" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="686.7" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="687.1" y="547.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="690.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="687.1" y="531.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="690.1" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.25%)</title><rect x="687.1" y="515.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="690.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.25%)</title><rect x="687.1" y="499.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.25%)</title><rect x="687.1" y="483.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="690.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="687.1" y="467.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="687.1" y="451.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="687.1" y="435.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.1" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="687.4" y="419.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="690.4" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="687.4" y="403.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="690.4" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="687.4" y="387.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="690.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="687.8" y="467.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="690.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="687.8" y="451.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="690.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="687.8" y="435.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="690.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="687.8" y="419.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="690.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="687.8" y="403.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="690.8" y="414.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="687.8" y="387.0" width="2.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="690.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (6 samples, 0.18%)</title><rect x="690.0" y="579.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="690.0" y="563.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="693.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="690.0" y="547.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="693.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.0" y="531.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.0" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="693.0" y="526.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="690.0" y="499.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.0" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="690.0" y="483.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.0" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="690.0" y="467.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.0" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="690.0" y="451.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.0" y="462.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (5 samples, 0.15%)</title><rect x="690.4" y="563.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.4" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (5 samples, 0.15%)</title><rect x="690.4" y="547.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="693.4" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (5 samples, 0.15%)</title><rect x="690.4" y="531.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="693.4" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (5 samples, 0.15%)</title><rect x="690.4" y="515.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="693.4" y="526.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="690.4" y="499.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="693.4" y="510.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="690.7" y="499.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="693.7" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="690.7" y="483.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="693.7" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="691.1" y="483.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="694.1" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="691.1" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="694.1" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="691.1" y="451.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="694.1" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="691.1" y="435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="694.1" y="446.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="691.1" y="419.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="694.1" y="430.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="691.4" y="499.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="694.4" y="510.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="691.4" y="483.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="694.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="691.8" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="694.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="691.8" y="483.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.03%)</title><rect x="691.8" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="694.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (1 samples, 0.03%)</title><rect x="691.8" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="694.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1 samples, 0.03%)</title><rect x="691.8" y="435.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="694.8" y="446.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="691.8" y="419.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="694.8" y="430.0"></text>
</g>
<g>
<title>[async_worker_2 tid=55555] (46 samples, 1.41%)</title><rect x="692.2" y="691.0" width="16.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="695.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (46 samples, 1.41%)</title><rect x="692.2" y="675.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="695.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (46 samples, 1.41%)</title><rect x="692.2" y="659.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="695.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (46 samples, 1.41%)</title><rect x="692.2" y="643.0" width="16.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="695.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (25 samples, 0.77%)</title><rect x="692.2" y="627.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="695.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (25 samples, 0.77%)</title><rect x="692.2" y="611.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (24 samples, 0.74%)</title><rect x="692.2" y="595.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="695.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (24 samples, 0.74%)</title><rect x="692.2" y="579.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.2" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (24 samples, 0.74%)</title><rect x="692.2" y="563.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.2" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (23 samples, 0.71%)</title><rect x="692.5" y="547.0" width="8.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="695.5" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 0.71%)</title><rect x="692.5" y="531.0" width="8.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="695.5" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (22 samples, 0.68%)</title><rect x="692.5" y="515.0" width="8.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="695.5" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="700.5" y="515.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="703.5" y="526.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="700.5" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="703.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="700.9" y="595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="700.9" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="703.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="700.9" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="703.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="700.9" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="700.9" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.9" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="700.9" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.9" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="700.9" y="499.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="703.9" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="700.9" y="483.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="703.9" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="700.9" y="467.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="703.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (21 samples, 0.65%)</title><rect x="701.2" y="627.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (21 samples, 0.65%)</title><rect x="701.2" y="611.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (21 samples, 0.65%)</title><rect x="701.2" y="595.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="704.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 0.46%)</title><rect x="701.2" y="579.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="704.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.46%)</title><rect x="701.2" y="563.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="704.2" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="701.2" y="547.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="701.2" y="531.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (15 samples, 0.46%)</title><rect x="701.2" y="515.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (15 samples, 0.46%)</title><rect x="701.2" y="499.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (15 samples, 0.46%)</title><rect x="701.2" y="483.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="704.2" y="494.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.03%)</title><rect x="701.2" y="467.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="704.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="701.6" y="467.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="704.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="701.6" y="451.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="704.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.43%)</title><rect x="701.6" y="435.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="704.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.43%)</title><rect x="701.6" y="419.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="704.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.40%)</title><rect x="702.0" y="403.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="705.0" y="414.0"></text>
</g>
<g>
<title>write (13 samples, 0.40%)</title><rect x="702.0" y="387.0" width="4.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="705.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (6 samples, 0.18%)</title><rect x="706.7" y="579.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.7" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (6 samples, 0.18%)</title><rect x="706.7" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.7" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (6 samples, 0.18%)</title><rect x="706.7" y="547.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.7" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (6 samples, 0.18%)</title><rect x="706.7" y="531.0" width="2.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="709.7" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (6 samples, 0.18%)</title><rect x="706.7" y="515.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="709.7" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="706.7" y="499.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="709.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.15%)</title><rect x="707.0" y="499.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="710.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.15%)</title><rect x="707.0" y="483.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="710.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (5 samples, 0.15%)</title><rect x="707.0" y="467.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="710.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (5 samples, 0.15%)</title><rect x="707.0" y="451.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="710.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (5 samples, 0.15%)</title><rect x="707.0" y="435.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="710.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.12%)</title><rect x="707.0" y="419.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="707.0" y="403.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="710.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="707.8" y="387.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="710.8" y="398.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="707.8" y="371.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="710.8" y="382.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="708.1" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="711.1" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="708.1" y="355.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="711.1" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="708.5" y="419.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="711.5" y="430.0"></text>
</g>
<g>
<title>[async_worker_2 tid=80131] (152 samples, 4.67%)</title><rect x="708.9" y="691.0" width="55.1" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="711.9" y="702.0">[asyn..</text>
</g>
<g>
<title>java/lang/Thread.run (152 samples, 4.67%)</title><rect x="708.9" y="675.0" width="55.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.9" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 4.67%)</title><rect x="708.9" y="659.0" width="55.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.9" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (152 samples, 4.67%)</title><rect x="708.9" y="643.0" width="55.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.9" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (33 samples, 1.01%)</title><rect x="708.9" y="627.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (32 samples, 0.98%)</title><rect x="708.9" y="611.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (26 samples, 0.80%)</title><rect x="708.9" y="595.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (26 samples, 0.80%)</title><rect x="708.9" y="579.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="711.9" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (26 samples, 0.80%)</title><rect x="708.9" y="563.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.9" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (25 samples, 0.77%)</title><rect x="709.2" y="547.0" width="9.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="712.2" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 0.77%)</title><rect x="709.2" y="531.0" width="9.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.2" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="709.2" y="515.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.2" y="526.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="709.2" y="499.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="712.2" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.74%)</title><rect x="709.6" y="515.0" width="8.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="712.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="718.3" y="595.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="721.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="718.3" y="579.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="718.3" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.03%)</title><rect x="718.3" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="718.3" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="718.7" y="595.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="718.7" y="579.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="718.7" y="563.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="721.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="718.7" y="547.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="719.0" y="531.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="722.0" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="719.0" y="515.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="722.0" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="719.0" y="499.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="722.0" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="719.4" y="499.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="722.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (1 samples, 0.03%)</title><rect x="720.5" y="611.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (94 samples, 2.89%)</title><rect x="720.8" y="627.0" width="34.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.8" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (94 samples, 2.89%)</title><rect x="720.8" y="611.0" width="34.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="723.8" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (94 samples, 2.89%)</title><rect x="720.8" y="595.0" width="34.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="723.8" y="606.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.52%)</title><rect x="720.8" y="579.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="723.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 0.52%)</title><rect x="720.8" y="563.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="723.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="720.8" y="547.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.8" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="720.8" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.49%)</title><rect x="721.2" y="547.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="724.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.49%)</title><rect x="721.2" y="531.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (16 samples, 0.49%)</title><rect x="721.2" y="515.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="724.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (16 samples, 0.49%)</title><rect x="721.2" y="499.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 0.49%)</title><rect x="721.2" y="483.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="721.2" y="467.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="721.2" y="451.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="724.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="721.2" y="435.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.2" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="721.6" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="724.6" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="721.6" y="403.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="724.6" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="721.6" y="387.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="724.6" y="398.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="721.6" y="371.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="724.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="721.9" y="467.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="721.9" y="451.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="724.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.43%)</title><rect x="721.9" y="435.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.43%)</title><rect x="721.9" y="419.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="724.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.43%)</title><rect x="721.9" y="403.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.9" y="414.0"></text>
</g>
<g>
<title>write (13 samples, 0.40%)</title><rect x="722.3" y="387.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="725.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (77 samples, 2.37%)</title><rect x="727.0" y="579.0" width="27.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.0" y="590.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="727.0" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="730.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="727.0" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="727.0" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="730.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="727.0" y="515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.0" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (76 samples, 2.34%)</title><rect x="727.4" y="563.0" width="27.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.4" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (76 samples, 2.34%)</title><rect x="727.4" y="547.0" width="27.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.4" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (42 samples, 1.29%)</title><rect x="727.7" y="531.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (41 samples, 1.26%)</title><rect x="728.1" y="515.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (41 samples, 1.26%)</title><rect x="728.1" y="499.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (40 samples, 1.23%)</title><rect x="728.1" y="483.0" width="14.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="731.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (40 samples, 1.23%)</title><rect x="728.1" y="467.0" width="14.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.1" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="728.1" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="728.1" y="435.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 1.17%)</title><rect x="728.5" y="451.0" width="13.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (38 samples, 1.17%)</title><rect x="728.5" y="435.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (38 samples, 1.17%)</title><rect x="728.5" y="419.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.5" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (37 samples, 1.14%)</title><rect x="728.8" y="403.0" width="13.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="731.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="742.2" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="742.2" y="435.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="742.6" y="483.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.6" y="494.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="742.6" y="467.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="745.6" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.03%)</title><rect x="742.6" y="451.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="745.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="743.0" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="746.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.03%)</title><rect x="743.0" y="515.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="743.0" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="743.0" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.06%)</title><rect x="743.3" y="531.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.3" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="743.3" y="515.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="746.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="743.3" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.3" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="743.3" y="483.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="746.3" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="743.7" y="499.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.7" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="743.7" y="483.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.7" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="743.7" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="746.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="743.7" y="451.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="746.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="744.1" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="744.1" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="744.1" y="499.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (28 samples, 0.86%)</title><rect x="744.4" y="531.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.4" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (22 samples, 0.68%)</title><rect x="744.4" y="515.0" width="8.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.4" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (22 samples, 0.68%)</title><rect x="744.4" y="499.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.4" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (22 samples, 0.68%)</title><rect x="744.4" y="483.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (22 samples, 0.68%)</title><rect x="744.4" y="467.0" width="8.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.58%)</title><rect x="744.4" y="451.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.55%)</title><rect x="744.4" y="435.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (18 samples, 0.55%)</title><rect x="744.4" y="419.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="744.4" y="403.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.52%)</title><rect x="744.8" y="403.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (17 samples, 0.52%)</title><rect x="744.8" y="387.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.8" y="398.0"></text>
</g>
<g>
<title>write (16 samples, 0.49%)</title><rect x="745.1" y="371.0" width="5.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="748.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="750.9" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="753.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.09%)</title><rect x="751.3" y="451.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="754.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="752.0" y="435.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="755.0" y="446.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="752.0" y="419.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="755.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (6 samples, 0.18%)</title><rect x="752.4" y="515.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.4" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (5 samples, 0.15%)</title><rect x="752.8" y="499.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="755.8" y="510.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="752.8" y="483.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="755.8" y="494.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (3 samples, 0.09%)</title><rect x="753.1" y="483.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="756.1" y="494.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="753.8" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="756.8" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="753.8" y="451.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="756.8" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="753.8" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="756.8" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="753.8" y="419.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="756.8" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="753.8" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="756.8" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="753.8" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="756.8" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="753.8" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="756.8" y="382.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="754.2" y="483.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="757.2" y="494.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="754.6" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="757.6" y="542.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.03%)</title><rect x="754.6" y="515.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="757.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="754.6" y="499.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="757.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (25 samples, 0.77%)</title><rect x="754.9" y="627.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="757.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (25 samples, 0.77%)</title><rect x="754.9" y="611.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="757.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (25 samples, 0.77%)</title><rect x="754.9" y="595.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.52%)</title><rect x="754.9" y="579.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="757.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (15 samples, 0.46%)</title><rect x="755.7" y="563.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="758.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="755.7" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="756.0" y="547.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="756.0" y="531.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.43%)</title><rect x="756.0" y="515.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="759.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.43%)</title><rect x="756.0" y="499.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.43%)</title><rect x="756.0" y="483.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="759.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="756.0" y="467.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="756.0" y="451.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="759.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.43%)</title><rect x="756.0" y="435.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.43%)</title><rect x="756.0" y="419.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.0" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="756.0" y="403.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="759.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.40%)</title><rect x="756.4" y="403.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.4" y="414.0"></text>
</g>
<g>
<title>write (12 samples, 0.37%)</title><rect x="756.8" y="387.0" width="4.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="759.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (8 samples, 0.25%)</title><rect x="761.1" y="579.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="764.1" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="761.1" y="563.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="764.1" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="761.1" y="547.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.1" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (8 samples, 0.25%)</title><rect x="761.1" y="531.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="764.1" y="542.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="761.1" y="515.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="764.1" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (7 samples, 0.22%)</title><rect x="761.5" y="515.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="764.5" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="761.5" y="499.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="764.5" y="510.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="761.5" y="483.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="764.5" y="494.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="761.5" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="764.5" y="478.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="761.5" y="451.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="764.5" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="761.8" y="499.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="764.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="762.2" y="499.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="762.2" y="483.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="765.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.12%)</title><rect x="762.2" y="467.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="765.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (4 samples, 0.12%)</title><rect x="762.2" y="451.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (4 samples, 0.12%)</title><rect x="762.2" y="435.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="765.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="762.2" y="419.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="765.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="762.2" y="403.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="765.2" y="414.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="762.2" y="387.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="765.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.09%)</title><rect x="762.6" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="762.6" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="765.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="762.9" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="762.9" y="371.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="765.9" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="763.3" y="355.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="766.3" y="366.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="763.6" y="499.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="766.6" y="510.0"></text>
</g>
<g>
<title>[async_worker_3 tid=55043] (61 samples, 1.88%)</title><rect x="764.0" y="691.0" width="22.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="767.0" y="702.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 1.88%)</title><rect x="764.0" y="675.0" width="22.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.0" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 1.88%)</title><rect x="764.0" y="659.0" width="22.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="767.0" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 1.88%)</title><rect x="764.0" y="643.0" width="22.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.0" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (30 samples, 0.92%)</title><rect x="764.0" y="627.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="767.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (30 samples, 0.92%)</title><rect x="764.0" y="611.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (30 samples, 0.92%)</title><rect x="764.0" y="595.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="764.0" y="579.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="764.0" y="563.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="767.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="764.0" y="547.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="764.0" y="531.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (29 samples, 0.89%)</title><rect x="764.4" y="579.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (29 samples, 0.89%)</title><rect x="764.4" y="563.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="767.4" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (28 samples, 0.86%)</title><rect x="764.7" y="547.0" width="10.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="767.7" y="558.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="764.7" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.7" y="542.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="764.7" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.7" y="526.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="765.1" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="768.1" y="542.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="765.1" y="515.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.1" y="526.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (26 samples, 0.80%)</title><rect x="765.5" y="531.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.5" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="765.5" y="515.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="768.5" y="526.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="765.5" y="499.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="768.5" y="510.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="765.5" y="483.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="768.5" y="494.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="765.5" y="467.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="768.5" y="478.0"></text>
</g>
<g>
<title>__psynch_cvwait (24 samples, 0.74%)</title><rect x="765.8" y="515.0" width="8.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="768.8" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="774.5" y="515.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="777.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (31 samples, 0.95%)</title><rect x="774.9" y="627.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="777.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (31 samples, 0.95%)</title><rect x="774.9" y="611.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (31 samples, 0.95%)</title><rect x="774.9" y="595.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.43%)</title><rect x="774.9" y="579.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="777.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.40%)</title><rect x="775.3" y="563.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="778.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.09%)</title><rect x="775.3" y="547.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.3" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="776.0" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="779.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.31%)</title><rect x="776.3" y="547.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.31%)</title><rect x="776.3" y="531.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.31%)</title><rect x="776.3" y="515.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="779.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.31%)</title><rect x="776.3" y="499.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.31%)</title><rect x="776.3" y="483.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="779.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="776.3" y="467.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="776.3" y="451.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="779.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.31%)</title><rect x="776.3" y="435.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="779.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.31%)</title><rect x="776.3" y="419.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (8 samples, 0.25%)</title><rect x="777.1" y="403.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.1" y="414.0"></text>
</g>
<g>
<title>write (8 samples, 0.25%)</title><rect x="777.1" y="387.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="780.1" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="780.0" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.0" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="780.0" y="563.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="783.0" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (16 samples, 0.49%)</title><rect x="780.3" y="579.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.3" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="780.3" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="780.3" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.3" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="780.3" y="531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.3" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="780.3" y="515.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.3" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (15 samples, 0.46%)</title><rect x="780.7" y="563.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="783.7" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (15 samples, 0.46%)</title><rect x="780.7" y="547.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.7" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (15 samples, 0.46%)</title><rect x="780.7" y="531.0" width="5.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="783.7" y="542.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="780.7" y="515.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="783.7" y="526.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="781.1" y="515.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.1" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="781.4" y="515.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="784.4" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.37%)</title><rect x="781.8" y="515.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="784.8" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="782.2" y="499.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="785.2" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="782.2" y="483.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="785.2" y="494.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="782.5" y="499.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="785.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="782.9" y="499.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="782.9" y="483.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="785.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (9 samples, 0.28%)</title><rect x="782.9" y="467.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="785.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (9 samples, 0.28%)</title><rect x="782.9" y="451.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="785.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (9 samples, 0.28%)</title><rect x="782.9" y="435.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="785.9" y="446.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="782.9" y="419.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="785.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="783.2" y="419.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="786.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="783.2" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="786.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.22%)</title><rect x="783.6" y="419.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="786.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.22%)</title><rect x="783.6" y="403.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="786.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.09%)</title><rect x="784.7" y="387.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="787.7" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.06%)</title><rect x="785.1" y="371.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="788.1" y="382.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long long, unsigned long long*, rocksdb::ValueType*) (1 samples, 0.03%)</title><rect x="785.8" y="387.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="788.8" y="398.0"></text>
</g>
<g>
<title>[async_worker_3 tid=76291] (43 samples, 1.32%)</title><rect x="786.1" y="691.0" width="15.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="789.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (43 samples, 1.32%)</title><rect x="786.1" y="675.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (43 samples, 1.32%)</title><rect x="786.1" y="659.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (43 samples, 1.32%)</title><rect x="786.1" y="643.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (24 samples, 0.74%)</title><rect x="786.1" y="627.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (24 samples, 0.74%)</title><rect x="786.1" y="611.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="789.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.65%)</title><rect x="786.1" y="595.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="789.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="786.1" y="579.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="786.1" y="563.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="789.1" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (20 samples, 0.62%)</title><rect x="786.5" y="547.0" width="7.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="789.5" y="558.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="786.5" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="789.5" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 0.55%)</title><rect x="786.9" y="531.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="789.9" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.52%)</title><rect x="786.9" y="515.0" width="6.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="789.9" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="793.0" y="515.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="796.0" y="526.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="793.0" y="499.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="796.0" y="510.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="793.4" y="531.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="796.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="793.8" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="796.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="793.8" y="579.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="796.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="793.8" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="796.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="793.8" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="796.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="793.8" y="531.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="796.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="793.8" y="515.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="796.8" y="526.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="793.8" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="796.8" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="794.1" y="499.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="797.1" y="510.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="794.5" y="499.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="797.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (19 samples, 0.58%)</title><rect x="794.9" y="627.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (19 samples, 0.58%)</title><rect x="794.9" y="611.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (19 samples, 0.58%)</title><rect x="794.9" y="595.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.9" y="606.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="794.9" y="579.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="797.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.22%)</title><rect x="795.2" y="579.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.22%)</title><rect x="795.2" y="563.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.2" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="795.2" y="547.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="798.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="795.2" y="531.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="798.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.22%)</title><rect x="795.2" y="515.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="798.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.22%)</title><rect x="795.2" y="499.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="798.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.22%)</title><rect x="795.2" y="483.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="798.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="795.2" y="467.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="798.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="795.2" y="451.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="798.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="795.2" y="435.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="798.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="795.2" y="419.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="798.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="795.2" y="403.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.2" y="414.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="795.2" y="387.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="798.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.03%)</title><rect x="797.4" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.4" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="797.4" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (11 samples, 0.34%)</title><rect x="797.8" y="579.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="800.8" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="797.8" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.8" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="797.8" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="800.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="797.8" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="800.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="797.8" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="800.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="797.8" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="800.8" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="797.8" y="483.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="797.8" y="467.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="800.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="797.8" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="800.8" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="797.8" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="800.8" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.03%)</title><rect x="797.8" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="800.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.03%)</title><rect x="797.8" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="800.8" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="798.1" y="563.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.1" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="798.1" y="547.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="801.1" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (10 samples, 0.31%)</title><rect x="798.1" y="531.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="801.1" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (10 samples, 0.31%)</title><rect x="798.1" y="515.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.1" y="526.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="798.5" y="499.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="801.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.25%)</title><rect x="798.8" y="499.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (8 samples, 0.25%)</title><rect x="798.8" y="483.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="801.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (8 samples, 0.25%)</title><rect x="798.8" y="467.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (8 samples, 0.25%)</title><rect x="798.8" y="451.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="801.8" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="798.8" y="435.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="801.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (7 samples, 0.22%)</title><rect x="799.2" y="435.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="802.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="799.2" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="802.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="799.2" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="802.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="799.6" y="419.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="799.6" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="799.9" y="403.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="802.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="801.0" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="804.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="801.0" y="371.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="804.0" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="801.0" y="355.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="804.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="801.4" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="804.4" y="430.0"></text>
</g>
<g>
<title>[async_worker_3 tid=81411] (148 samples, 4.55%)</title><rect x="801.7" y="691.0" width="53.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="804.7" y="702.0">[asyn..</text>
</g>
<g>
<title>java/lang/Thread.run (148 samples, 4.55%)</title><rect x="801.7" y="675.0" width="53.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="804.7" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (148 samples, 4.55%)</title><rect x="801.7" y="659.0" width="53.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.7" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (148 samples, 4.55%)</title><rect x="801.7" y="643.0" width="53.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="804.7" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (25 samples, 0.77%)</title><rect x="801.7" y="627.0" width="9.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (25 samples, 0.77%)</title><rect x="801.7" y="611.0" width="9.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 0.62%)</title><rect x="801.7" y="595.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="804.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="801.7" y="579.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="804.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="801.7" y="563.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.03%)</title><rect x="801.7" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="804.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.03%)</title><rect x="801.7" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="804.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (19 samples, 0.58%)</title><rect x="802.1" y="579.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="805.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (19 samples, 0.58%)</title><rect x="802.1" y="563.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="805.1" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (19 samples, 0.58%)</title><rect x="802.1" y="547.0" width="6.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="805.1" y="558.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="802.1" y="531.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="805.1" y="542.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="802.5" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="805.5" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 0.49%)</title><rect x="802.8" y="531.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.46%)</title><rect x="802.8" y="515.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="805.8" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="808.3" y="515.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="811.3" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="808.6" y="531.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="811.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="809.0" y="595.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.06%)</title><rect x="809.0" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="812.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="809.0" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="809.0" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="809.0" y="531.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="809.0" y="515.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.0" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="809.0" y="499.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="812.0" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="809.0" y="483.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.0" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="809.0" y="467.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="812.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="809.4" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="812.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="809.4" y="547.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="809.7" y="595.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="809.7" y="579.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="809.7" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="809.7" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="812.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="809.7" y="531.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.7" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="809.7" y="515.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="812.7" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="809.7" y="499.0" width="0.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="812.7" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="810.5" y="499.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="813.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (102 samples, 3.14%)</title><rect x="810.8" y="627.0" width="37.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="813.8" y="638.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (102 samples, 3.14%)</title><rect x="810.8" y="611.0" width="37.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.8" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (102 samples, 3.14%)</title><rect x="810.8" y="595.0" width="37.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="813.8" y="606.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (19 samples, 0.58%)</title><rect x="811.2" y="579.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 0.58%)</title><rect x="811.2" y="563.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.2" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="811.2" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="814.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="811.2" y="531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="814.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.55%)</title><rect x="811.5" y="547.0" width="6.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.55%)</title><rect x="811.5" y="531.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (18 samples, 0.55%)</title><rect x="811.5" y="515.0" width="6.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.5" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (18 samples, 0.55%)</title><rect x="811.5" y="499.0" width="6.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 0.55%)</title><rect x="811.5" y="483.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="811.5" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="814.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="811.5" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="811.5" y="435.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="814.5" y="446.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="811.5" y="419.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="814.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.52%)</title><rect x="811.9" y="467.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="814.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.52%)</title><rect x="811.9" y="451.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.52%)</title><rect x="811.9" y="435.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="811.9" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.49%)</title><rect x="812.3" y="419.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (16 samples, 0.49%)</title><rect x="812.3" y="403.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.3" y="414.0"></text>
</g>
<g>
<title>write (16 samples, 0.49%)</title><rect x="812.3" y="387.0" width="5.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="815.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (82 samples, 2.52%)</title><rect x="818.1" y="579.0" width="29.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="821.1" y="590.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (82 samples, 2.52%)</title><rect x="818.1" y="563.0" width="29.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.1" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (82 samples, 2.52%)</title><rect x="818.1" y="547.0" width="29.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="821.1" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (43 samples, 1.32%)</title><rect x="818.4" y="531.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="821.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (43 samples, 1.32%)</title><rect x="818.4" y="515.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (42 samples, 1.29%)</title><rect x="818.8" y="499.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.29%)</title><rect x="818.8" y="483.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="821.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (42 samples, 1.29%)</title><rect x="818.8" y="467.0" width="15.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="821.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (42 samples, 1.29%)</title><rect x="818.8" y="451.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (42 samples, 1.29%)</title><rect x="818.8" y="435.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (42 samples, 1.29%)</title><rect x="818.8" y="419.0" width="15.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="821.8" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (38 samples, 1.17%)</title><rect x="820.3" y="403.0" width="13.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="823.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (5 samples, 0.15%)</title><rect x="834.0" y="531.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="834.0" y="515.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="834.4" y="499.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.4" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="834.4" y="483.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="834.4" y="467.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.4" y="478.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="834.4" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="837.4" y="462.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="834.4" y="435.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="837.4" y="446.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="834.4" y="419.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="837.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.09%)</title><rect x="834.8" y="515.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.8" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (32 samples, 0.98%)</title><rect x="835.9" y="531.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.9" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (22 samples, 0.68%)</title><rect x="835.9" y="515.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.9" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (22 samples, 0.68%)</title><rect x="835.9" y="499.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="838.9" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (22 samples, 0.68%)</title><rect x="835.9" y="483.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (22 samples, 0.68%)</title><rect x="835.9" y="467.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="838.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="835.9" y="451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="838.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="835.9" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="835.9" y="419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="838.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="835.9" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.58%)</title><rect x="836.2" y="451.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.58%)</title><rect x="836.2" y="435.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="839.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (19 samples, 0.58%)</title><rect x="836.2" y="419.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (19 samples, 0.58%)</title><rect x="836.2" y="403.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="839.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (19 samples, 0.58%)</title><rect x="836.2" y="387.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.2" y="398.0"></text>
</g>
<g>
<title>write (18 samples, 0.55%)</title><rect x="836.6" y="371.0" width="6.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="839.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="843.1" y="451.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.03%)</title><rect x="843.5" y="451.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.5" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="843.5" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.5" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="843.5" y="419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (10 samples, 0.31%)</title><rect x="843.8" y="515.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.8" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (10 samples, 0.31%)</title><rect x="843.8" y="499.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="846.8" y="510.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (8 samples, 0.25%)</title><rect x="843.8" y="483.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="846.8" y="494.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="844.6" y="467.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="847.6" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="844.9" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="847.9" y="478.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="845.7" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.7" y="462.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="845.7" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="848.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="846.0" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="849.0" y="478.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="846.0" y="451.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="849.0" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="846.4" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="849.4" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="846.4" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="849.4" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="846.4" y="435.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.4" y="446.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="846.7" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="849.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="847.1" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="850.1" y="494.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="847.5" y="531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (21 samples, 0.65%)</title><rect x="847.8" y="627.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="850.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (21 samples, 0.65%)</title><rect x="847.8" y="611.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (21 samples, 0.65%)</title><rect x="847.8" y="595.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.25%)</title><rect x="847.8" y="579.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.22%)</title><rect x="847.8" y="563.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="847.8" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="848.2" y="547.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="848.2" y="531.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.18%)</title><rect x="848.2" y="515.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (6 samples, 0.18%)</title><rect x="848.2" y="499.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (6 samples, 0.18%)</title><rect x="848.2" y="483.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="848.2" y="467.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="848.2" y="451.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="848.2" y="435.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="851.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="848.2" y="419.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="848.2" y="403.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="851.2" y="414.0"></text>
</g>
<g>
<title>write (5 samples, 0.15%)</title><rect x="848.6" y="387.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="851.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="850.4" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="853.4" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="850.7" y="579.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="853.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (12 samples, 0.37%)</title><rect x="851.1" y="579.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="854.1" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="851.1" y="563.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="854.1" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (12 samples, 0.37%)</title><rect x="851.1" y="547.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.1" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (11 samples, 0.34%)</title><rect x="851.5" y="531.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="854.5" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (11 samples, 0.34%)</title><rect x="851.5" y="515.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="854.5" y="526.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="851.5" y="499.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="854.5" y="510.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="851.8" y="499.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="854.8" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="851.8" y="483.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="854.8" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="851.8" y="467.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="854.8" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="851.8" y="451.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="854.8" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="851.8" y="435.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="854.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="852.2" y="499.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="855.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="852.2" y="483.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="855.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (9 samples, 0.28%)</title><rect x="852.2" y="467.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="855.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (9 samples, 0.28%)</title><rect x="852.2" y="451.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (9 samples, 0.28%)</title><rect x="852.2" y="435.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="852.2" y="419.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="852.2" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="855.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.25%)</title><rect x="852.5" y="419.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="855.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="852.5" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="855.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.22%)</title><rect x="852.9" y="403.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="855.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="855.1" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="858.1" y="398.0"></text>
</g>
<g>
<title>[async_worker_4 tid=56835] (53 samples, 1.63%)</title><rect x="855.4" y="691.0" width="19.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="858.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (53 samples, 1.63%)</title><rect x="855.4" y="675.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (53 samples, 1.63%)</title><rect x="855.4" y="659.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (53 samples, 1.63%)</title><rect x="855.4" y="643.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (26 samples, 0.80%)</title><rect x="855.4" y="627.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="858.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (26 samples, 0.80%)</title><rect x="855.4" y="611.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 0.68%)</title><rect x="855.4" y="595.0" width="8.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="858.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (22 samples, 0.68%)</title><rect x="855.4" y="579.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (22 samples, 0.68%)</title><rect x="855.4" y="563.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="858.4" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.65%)</title><rect x="855.8" y="547.0" width="7.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="858.8" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="855.8" y="531.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="858.8" y="542.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="855.8" y="515.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.8" y="526.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive(JavaThread*) (1 samples, 0.03%)</title><rect x="855.8" y="499.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="858.8" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.58%)</title><rect x="856.2" y="531.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="859.2" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.55%)</title><rect x="856.2" y="515.0" width="6.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="859.2" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="862.7" y="515.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="865.7" y="526.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="863.1" y="531.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="866.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="863.4" y="595.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="863.4" y="579.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="866.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="863.4" y="563.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="863.4" y="547.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.4" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="863.4" y="531.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="866.4" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="863.4" y="515.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="866.4" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="863.4" y="499.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="866.4" y="510.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="864.5" y="499.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="867.5" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="864.5" y="483.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="867.5" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (27 samples, 0.83%)</title><rect x="864.9" y="627.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (27 samples, 0.83%)</title><rect x="864.9" y="611.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.9" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (27 samples, 0.83%)</title><rect x="864.9" y="595.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.43%)</title><rect x="864.9" y="579.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="867.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.43%)</title><rect x="864.9" y="563.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="867.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="864.9" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="865.2" y="547.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="865.2" y="531.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.40%)</title><rect x="865.2" y="515.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.40%)</title><rect x="865.2" y="499.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="868.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.40%)</title><rect x="865.2" y="483.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.2" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="865.2" y="467.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.2" y="478.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="865.2" y="451.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="868.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="865.6" y="467.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="865.6" y="451.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (12 samples, 0.37%)</title><rect x="865.6" y="435.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (12 samples, 0.37%)</title><rect x="865.6" y="419.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.31%)</title><rect x="866.3" y="403.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="869.3" y="414.0"></text>
</g>
<g>
<title>write (10 samples, 0.31%)</title><rect x="866.3" y="387.0" width="3.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="869.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (13 samples, 0.40%)</title><rect x="870.0" y="579.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="873.0" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.40%)</title><rect x="870.0" y="563.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.0" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (13 samples, 0.40%)</title><rect x="870.0" y="547.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="873.0" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (12 samples, 0.37%)</title><rect x="870.0" y="531.0" width="4.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="873.0" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.37%)</title><rect x="870.0" y="515.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.0" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="870.0" y="499.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="873.0" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="870.0" y="483.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="873.0" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="870.0" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="870.0" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="873.0" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="870.0" y="435.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="873.0" y="446.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="870.0" y="419.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="873.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (11 samples, 0.34%)</title><rect x="870.3" y="499.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (11 samples, 0.34%)</title><rect x="870.3" y="483.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="873.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (11 samples, 0.34%)</title><rect x="870.3" y="467.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="873.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (11 samples, 0.34%)</title><rect x="870.3" y="451.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="873.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (11 samples, 0.34%)</title><rect x="870.3" y="435.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.22%)</title><rect x="870.7" y="419.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="873.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (7 samples, 0.22%)</title><rect x="870.7" y="403.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="872.9" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.9" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="872.9" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="875.9" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.03%)</title><rect x="873.2" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.03%)</title><rect x="873.6" y="419.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="876.6" y="430.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="874.0" y="419.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="877.0" y="430.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.03%)</title><rect x="874.3" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.3" y="542.0"></text>
</g>
<g>
<title>[async_worker_4 tid=57603] (35 samples, 1.08%)</title><rect x="874.7" y="691.0" width="12.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="877.7" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="874.7" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="877.7" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="874.7" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.7" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="874.7" y="643.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.7" y="654.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="874.7" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (34 samples, 1.05%)</title><rect x="875.0" y="675.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="878.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (34 samples, 1.05%)</title><rect x="875.0" y="659.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (34 samples, 1.05%)</title><rect x="875.0" y="643.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="878.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 0.43%)</title><rect x="875.0" y="627.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (14 samples, 0.43%)</title><rect x="875.0" y="611.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="878.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 0.40%)</title><rect x="875.0" y="595.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.40%)</title><rect x="875.0" y="579.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.40%)</title><rect x="875.0" y="563.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.0" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.40%)</title><rect x="875.0" y="547.0" width="4.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="878.0" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.37%)</title><rect x="875.0" y="531.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="878.0" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.34%)</title><rect x="875.4" y="515.0" width="4.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="878.4" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="879.4" y="531.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="882.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="879.8" y="595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="882.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="879.8" y="579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="879.8" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="882.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="879.8" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.8" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="879.8" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="882.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="879.8" y="515.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="882.8" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="879.8" y="499.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="882.8" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (20 samples, 0.62%)</title><rect x="880.1" y="627.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="883.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="880.1" y="611.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (19 samples, 0.58%)</title><rect x="880.5" y="611.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="883.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (19 samples, 0.58%)</title><rect x="880.5" y="595.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="883.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.34%)</title><rect x="880.5" y="579.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="883.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="880.5" y="563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="880.5" y="547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="880.5" y="531.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="883.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 0.31%)</title><rect x="880.8" y="563.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="883.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="880.8" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="883.8" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="880.8" y="531.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="883.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.28%)</title><rect x="881.2" y="547.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.2" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.28%)</title><rect x="881.2" y="531.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="884.2" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.28%)</title><rect x="881.2" y="515.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="884.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.28%)</title><rect x="881.2" y="499.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="884.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.28%)</title><rect x="881.2" y="483.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.2" y="494.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (1 samples, 0.03%)</title><rect x="881.2" y="467.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="884.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.25%)</title><rect x="881.6" y="467.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="884.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.25%)</title><rect x="881.6" y="451.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.25%)</title><rect x="881.6" y="435.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="884.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.25%)</title><rect x="881.6" y="419.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (8 samples, 0.25%)</title><rect x="881.6" y="403.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.6" y="414.0"></text>
</g>
<g>
<title>write (8 samples, 0.25%)</title><rect x="881.6" y="387.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="884.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (8 samples, 0.25%)</title><rect x="884.5" y="579.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="887.5" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="884.5" y="563.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="887.5" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="884.5" y="547.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="887.5" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (8 samples, 0.25%)</title><rect x="884.5" y="531.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="887.5" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (8 samples, 0.25%)</title><rect x="884.5" y="515.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.5" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="884.5" y="499.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="887.5" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="884.5" y="483.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="887.5" y="494.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="884.8" y="499.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="887.8" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="884.8" y="483.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="887.8" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="884.8" y="467.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="887.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="885.2" y="499.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.2" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="885.2" y="483.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="885.2" y="467.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.2" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="885.2" y="451.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="885.2" y="435.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="888.2" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="885.2" y="419.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="885.2" y="403.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="888.2" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.03%)</title><rect x="885.2" y="387.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="888.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="885.6" y="419.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="885.6" y="403.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.6" y="414.0"></text>
</g>
<g>
<title>[async_worker_4 tid=80899] (132 samples, 4.06%)</title><rect x="887.4" y="691.0" width="47.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="890.4" y="702.0">[asy..</text>
</g>
<g>
<title>java/lang/Thread.run (132 samples, 4.06%)</title><rect x="887.4" y="675.0" width="47.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="890.4" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (132 samples, 4.06%)</title><rect x="887.4" y="659.0" width="47.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="890.4" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (132 samples, 4.06%)</title><rect x="887.4" y="643.0" width="47.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="890.4" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (28 samples, 0.86%)</title><rect x="887.4" y="627.0" width="10.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="890.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (28 samples, 0.86%)</title><rect x="887.4" y="611.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="890.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (22 samples, 0.68%)</title><rect x="887.7" y="595.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="890.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="887.7" y="579.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="890.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="887.7" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="890.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="887.7" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="890.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="887.7" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="890.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="888.1" y="579.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="891.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="888.1" y="563.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="891.1" y="574.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="888.5" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="891.5" y="558.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (19 samples, 0.58%)</title><rect x="888.8" y="547.0" width="6.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="891.8" y="558.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="889.2" y="531.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="892.2" y="542.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="889.2" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="892.2" y="526.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.52%)</title><rect x="889.6" y="531.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.6" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.06%)</title><rect x="889.6" y="515.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="892.6" y="526.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="889.6" y="499.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.6" y="510.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="889.9" y="499.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="892.9" y="510.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.46%)</title><rect x="890.3" y="515.0" width="5.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="893.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.12%)</title><rect x="895.7" y="595.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.12%)</title><rect x="895.7" y="579.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="898.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.09%)</title><rect x="895.7" y="563.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="898.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="896.1" y="547.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="899.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="896.1" y="531.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="899.1" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="896.1" y="515.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="899.1" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="896.1" y="499.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="899.1" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="896.1" y="483.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.1" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="896.1" y="467.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="899.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="896.8" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="899.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="896.8" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="899.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="897.2" y="595.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="900.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="897.2" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="900.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="897.2" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="900.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="897.2" y="547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="900.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="897.2" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="900.2" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="897.2" y="515.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="900.2" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="897.2" y="499.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="900.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (85 samples, 2.61%)</title><rect x="897.5" y="627.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="900.5" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (85 samples, 2.61%)</title><rect x="897.5" y="611.0" width="30.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="900.5" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (85 samples, 2.61%)</title><rect x="897.5" y="595.0" width="30.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="900.5" y="606.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 0.40%)</title><rect x="897.5" y="579.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="900.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="897.5" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="897.5" y="547.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="897.5" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="900.5" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 0.37%)</title><rect x="897.9" y="563.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="900.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="897.9" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="900.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="898.3" y="547.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="901.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="898.3" y="531.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="901.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.34%)</title><rect x="898.3" y="515.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="901.3" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (11 samples, 0.34%)</title><rect x="898.3" y="499.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="901.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (11 samples, 0.34%)</title><rect x="898.3" y="483.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.3" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="898.3" y="467.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.3" y="478.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="898.3" y="451.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="901.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="898.6" y="467.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="898.6" y="451.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="901.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="898.6" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="901.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="898.6" y="419.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="901.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="899.0" y="467.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="902.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="899.0" y="451.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.28%)</title><rect x="899.0" y="435.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.28%)</title><rect x="899.0" y="419.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.28%)</title><rect x="899.0" y="403.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.0" y="414.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="899.4" y="387.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="902.4" y="398.0"></text>
</g>
<g>
<title>write (7 samples, 0.22%)</title><rect x="899.7" y="387.0" width="2.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="902.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (72 samples, 2.21%)</title><rect x="902.3" y="579.0" width="26.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="905.3" y="590.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (72 samples, 2.21%)</title><rect x="902.3" y="563.0" width="26.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="905.3" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (72 samples, 2.21%)</title><rect x="902.3" y="547.0" width="26.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="905.3" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (47 samples, 1.45%)</title><rect x="902.3" y="531.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.3" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="903.0" y="515.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="906.0" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="903.0" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="906.0" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="903.0" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="906.0" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="903.0" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="906.0" y="478.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="903.0" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="906.0" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="903.0" y="435.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="906.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (44 samples, 1.35%)</title><rect x="903.3" y="515.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.3" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (44 samples, 1.35%)</title><rect x="903.3" y="499.0" width="16.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="906.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 1.35%)</title><rect x="903.3" y="483.0" width="16.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="906.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (44 samples, 1.35%)</title><rect x="903.3" y="467.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (44 samples, 1.35%)</title><rect x="903.3" y="451.0" width="16.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="906.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (44 samples, 1.35%)</title><rect x="903.3" y="435.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (44 samples, 1.35%)</title><rect x="903.3" y="419.0" width="16.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="906.3" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="904.4" y="403.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="907.4" y="414.0"></text>
</g>
<g>
<title>rpc_errlist (40 samples, 1.23%)</title><rect x="904.8" y="403.0" width="14.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="907.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.06%)</title><rect x="919.3" y="531.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="922.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="919.7" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.7" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="919.7" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (22 samples, 0.68%)</title><rect x="920.0" y="531.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.0" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (12 samples, 0.37%)</title><rect x="920.0" y="515.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.0" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (12 samples, 0.37%)</title><rect x="920.0" y="499.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.0" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (12 samples, 0.37%)</title><rect x="920.0" y="483.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (12 samples, 0.37%)</title><rect x="920.0" y="467.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="920.0" y="451.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="920.0" y="435.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (12 samples, 0.37%)</title><rect x="920.0" y="419.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (12 samples, 0.37%)</title><rect x="920.0" y="403.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="923.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (12 samples, 0.37%)</title><rect x="920.0" y="387.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="923.0" y="398.0"></text>
</g>
<g>
<title>write (10 samples, 0.31%)</title><rect x="920.8" y="371.0" width="3.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="923.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (10 samples, 0.31%)</title><rect x="924.4" y="515.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.4" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (10 samples, 0.31%)</title><rect x="924.4" y="499.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.4" y="510.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (7 samples, 0.22%)</title><rect x="924.4" y="483.0" width="2.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="927.4" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="925.1" y="467.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.1" y="478.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="925.1" y="451.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="928.1" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="925.5" y="467.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.5" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="925.5" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.5" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (3 samples, 0.09%)</title><rect x="925.8" y="467.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="928.8" y="478.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.06%)</title><rect x="925.8" y="451.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.8" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="926.6" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.6" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="926.6" y="435.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="929.6" y="446.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="926.9" y="483.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.06%)</title><rect x="927.3" y="483.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="927.7" y="467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="930.7" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (1 samples, 0.03%)</title><rect x="927.7" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="930.7" y="462.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="928.0" y="531.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="931.0" y="542.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.03%)</title><rect x="928.0" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="931.0" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (19 samples, 0.58%)</title><rect x="928.4" y="627.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="931.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (19 samples, 0.58%)</title><rect x="928.4" y="611.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (19 samples, 0.58%)</title><rect x="928.4" y="595.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="931.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.28%)</title><rect x="928.4" y="579.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="931.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="928.4" y="563.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="928.4" y="547.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="928.4" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="931.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.25%)</title><rect x="928.7" y="563.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="931.7" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="928.7" y="547.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="931.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="929.1" y="547.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="932.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="929.1" y="531.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="932.1" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.22%)</title><rect x="929.1" y="515.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="932.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.22%)</title><rect x="929.1" y="499.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="932.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.22%)</title><rect x="929.1" y="483.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.22%)</title><rect x="929.1" y="467.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.22%)</title><rect x="929.1" y="451.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.22%)</title><rect x="929.1" y="435.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.22%)</title><rect x="929.1" y="419.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="932.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.22%)</title><rect x="929.1" y="403.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="932.1" y="414.0"></text>
</g>
<g>
<title>write (7 samples, 0.22%)</title><rect x="929.1" y="387.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="932.1" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (10 samples, 0.31%)</title><rect x="931.6" y="579.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.6" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="931.6" y="563.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="934.6" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="931.6" y="547.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="934.6" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (10 samples, 0.31%)</title><rect x="931.6" y="531.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="934.6" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (10 samples, 0.31%)</title><rect x="931.6" y="515.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.6" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="932.0" y="499.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="935.0" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.06%)</title><rect x="932.0" y="483.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="935.0" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="932.0" y="467.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.0" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="932.0" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.0" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="932.4" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="932.4" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.4" y="462.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="932.4" y="435.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="935.4" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="932.7" y="499.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="935.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="933.1" y="499.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="936.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="933.1" y="483.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="936.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="933.1" y="467.0" width="2.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="936.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="933.1" y="451.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="933.1" y="435.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="936.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="933.1" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="933.1" y="403.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="933.1" y="387.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="933.5" y="419.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="933.5" y="403.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="934.9" y="387.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.9" y="398.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="934.9" y="371.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="937.9" y="382.0"></text>
</g>
<g>
<title>[async_worker_5 tid=73987] (30 samples, 0.92%)</title><rect x="935.3" y="691.0" width="10.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="938.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (30 samples, 0.92%)</title><rect x="935.3" y="675.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (30 samples, 0.92%)</title><rect x="935.3" y="659.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="938.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (30 samples, 0.92%)</title><rect x="935.3" y="643.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="938.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 0.40%)</title><rect x="935.3" y="627.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="938.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (13 samples, 0.40%)</title><rect x="935.3" y="611.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="938.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (10 samples, 0.31%)</title><rect x="935.3" y="595.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="938.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.31%)</title><rect x="935.3" y="579.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.3" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (10 samples, 0.31%)</title><rect x="935.3" y="563.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.3" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (10 samples, 0.31%)</title><rect x="935.3" y="547.0" width="3.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="938.3" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.31%)</title><rect x="935.3" y="531.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.3" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.31%)</title><rect x="935.3" y="515.0" width="3.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="938.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="938.9" y="595.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.06%)</title><rect x="938.9" y="579.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="941.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.06%)</title><rect x="938.9" y="563.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="941.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.03%)</title><rect x="938.9" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="939.3" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="942.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="939.3" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="942.3" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="939.3" y="515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="939.3" y="499.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="942.3" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="939.3" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="942.3" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="939.3" y="467.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="942.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="939.6" y="595.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="942.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="939.6" y="579.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="942.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="939.6" y="563.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="942.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="939.6" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="942.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="939.6" y="531.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="942.6" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="939.6" y="515.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="942.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="939.6" y="499.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="942.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (17 samples, 0.52%)</title><rect x="940.0" y="627.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="943.0" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (17 samples, 0.52%)</title><rect x="940.0" y="611.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="943.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (17 samples, 0.52%)</title><rect x="940.0" y="595.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.0" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.25%)</title><rect x="940.0" y="579.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.25%)</title><rect x="940.0" y="563.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="940.0" y="547.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="940.0" y="531.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="943.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.25%)</title><rect x="940.0" y="515.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.25%)</title><rect x="940.0" y="499.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.25%)</title><rect x="940.0" y="483.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.0" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="940.0" y="467.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.0" y="478.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.03%)</title><rect x="940.0" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.22%)</title><rect x="940.4" y="467.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="940.7" y="451.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="940.7" y="435.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="943.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="940.7" y="419.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="943.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="940.7" y="403.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="943.7" y="414.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="940.7" y="387.0" width="2.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="943.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (9 samples, 0.28%)</title><rect x="942.9" y="579.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.9" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="942.9" y="563.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="945.9" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="942.9" y="547.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="945.9" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (9 samples, 0.28%)</title><rect x="942.9" y="531.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="945.9" y="542.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="942.9" y="515.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="945.9" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (8 samples, 0.25%)</title><rect x="943.3" y="515.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.3" y="526.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="943.3" y="499.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="946.3" y="510.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="943.6" y="499.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="946.6" y="510.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="943.6" y="483.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="946.6" y="494.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="944.0" y="499.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="947.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.15%)</title><rect x="944.3" y="499.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (5 samples, 0.15%)</title><rect x="944.3" y="483.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="947.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (5 samples, 0.15%)</title><rect x="944.3" y="467.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (5 samples, 0.15%)</title><rect x="944.3" y="451.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="947.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (5 samples, 0.15%)</title><rect x="944.3" y="435.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="947.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (2 samples, 0.06%)</title><rect x="944.7" y="419.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="947.7" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="944.7" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="947.7" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.03%)</title><rect x="945.1" y="403.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.03%)</title><rect x="945.1" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.06%)</title><rect x="945.4" y="419.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.4" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="945.4" y="403.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="948.4" y="414.0"></text>
</g>
<g>
<title>[async_worker_5 tid=75011] (50 samples, 1.54%)</title><rect x="946.2" y="691.0" width="18.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="949.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (50 samples, 1.54%)</title><rect x="946.2" y="675.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (50 samples, 1.54%)</title><rect x="946.2" y="659.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="949.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (50 samples, 1.54%)</title><rect x="946.2" y="643.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="949.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (20 samples, 0.62%)</title><rect x="946.2" y="627.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.2" y="638.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="946.2" y="611.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="949.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (19 samples, 0.58%)</title><rect x="946.5" y="611.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="949.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 0.52%)</title><rect x="946.5" y="595.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="949.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (17 samples, 0.52%)</title><rect x="946.5" y="579.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="949.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (17 samples, 0.52%)</title><rect x="946.5" y="563.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="949.5" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (15 samples, 0.46%)</title><rect x="947.3" y="547.0" width="5.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="950.3" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.43%)</title><rect x="947.3" y="531.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.3" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.40%)</title><rect x="947.3" y="515.0" width="4.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="950.3" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="952.0" y="515.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="955.0" y="526.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="952.3" y="531.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="955.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="952.7" y="595.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="955.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.06%)</title><rect x="952.7" y="579.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="952.7" y="563.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="953.1" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (1 samples, 0.03%)</title><rect x="953.1" y="547.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (30 samples, 0.92%)</title><rect x="953.4" y="627.0" width="10.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (30 samples, 0.92%)</title><rect x="953.4" y="611.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (30 samples, 0.92%)</title><rect x="953.4" y="595.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="956.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.43%)</title><rect x="953.4" y="579.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="956.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.43%)</title><rect x="953.4" y="563.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="956.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="953.4" y="547.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="953.4" y="531.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="956.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.43%)</title><rect x="953.4" y="515.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.43%)</title><rect x="953.4" y="499.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.43%)</title><rect x="953.4" y="483.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="953.4" y="467.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.43%)</title><rect x="953.4" y="451.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="956.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.43%)</title><rect x="953.4" y="435.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="956.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.43%)</title><rect x="953.4" y="419.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.43%)</title><rect x="953.4" y="403.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.4" y="414.0"></text>
</g>
<g>
<title>write (14 samples, 0.43%)</title><rect x="953.4" y="387.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="956.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="958.5" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="961.5" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="958.5" y="563.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="961.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (15 samples, 0.46%)</title><rect x="958.9" y="579.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="961.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="958.9" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="961.9" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="958.9" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="958.9" y="531.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="961.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="958.9" y="515.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="961.9" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (14 samples, 0.43%)</title><rect x="959.2" y="563.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.2" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (14 samples, 0.43%)</title><rect x="959.2" y="547.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.2" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (14 samples, 0.43%)</title><rect x="959.2" y="531.0" width="5.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="962.2" y="542.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="959.2" y="515.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="962.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="959.6" y="515.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.6" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (12 samples, 0.37%)</title><rect x="960.0" y="515.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="963.0" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (5 samples, 0.15%)</title><rect x="960.0" y="499.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="963.0" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="960.0" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.0" y="494.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="960.3" y="483.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="963.3" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="960.3" y="467.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.3" y="478.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="960.3" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="963.3" y="462.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.09%)</title><rect x="960.7" y="483.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="963.7" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="961.0" y="467.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.0" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="961.0" y="451.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="964.0" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="961.0" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="964.0" y="446.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="961.0" y="419.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.0" y="430.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="961.0" y="403.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="964.0" y="414.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="961.4" y="435.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="964.4" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="961.8" y="499.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="964.8" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="961.8" y="483.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="964.8" y="494.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="961.8" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="964.8" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="961.8" y="451.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.8" y="462.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="961.8" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.8" y="446.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="961.8" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.8" y="430.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="961.8" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.8" y="414.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="961.8" y="387.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="964.8" y="398.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="962.1" y="499.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="965.1" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="962.1" y="483.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="965.1" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="962.1" y="467.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="962.1" y="451.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="965.1" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="962.1" y="435.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="962.1" y="419.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.1" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="962.1" y="403.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="965.1" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="962.5" y="419.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="962.5" y="403.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.5" y="414.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="963.9" y="387.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.9" y="398.0"></text>
</g>
<g>
<title>[async_worker_5 tid=81667] (178 samples, 5.47%)</title><rect x="964.3" y="691.0" width="64.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="967.3" y="702.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (178 samples, 5.47%)</title><rect x="964.3" y="675.0" width="64.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="967.3" y="686.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (178 samples, 5.47%)</title><rect x="964.3" y="659.0" width="64.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.3" y="670.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (178 samples, 5.47%)</title><rect x="964.3" y="643.0" width="64.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="967.3" y="654.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (31 samples, 0.95%)</title><rect x="964.3" y="627.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (29 samples, 0.89%)</title><rect x="964.7" y="611.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="967.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.65%)</title><rect x="964.7" y="595.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="967.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="964.7" y="579.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="967.7" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="964.7" y="563.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.7" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (18 samples, 0.55%)</title><rect x="965.8" y="547.0" width="6.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="968.8" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.52%)</title><rect x="966.1" y="531.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.1" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (17 samples, 0.52%)</title><rect x="966.1" y="515.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="969.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.25%)</title><rect x="972.3" y="595.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="975.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.25%)</title><rect x="972.3" y="579.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.25%)</title><rect x="972.3" y="563.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="975.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.25%)</title><rect x="972.3" y="547.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="975.3" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.25%)</title><rect x="972.3" y="531.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="975.3" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.25%)</title><rect x="972.3" y="515.0" width="2.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="975.3" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="972.3" y="499.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.3" y="510.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="972.3" y="483.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.3" y="494.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="972.3" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.3" y="478.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.18%)</title><rect x="972.7" y="499.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="975.7" y="510.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="974.8" y="499.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="977.8" y="510.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="974.8" y="483.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="977.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (1 samples, 0.03%)</title><rect x="975.2" y="611.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="978.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (110 samples, 3.38%)</title><rect x="975.6" y="627.0" width="39.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="978.6" y="638.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (110 samples, 3.38%)</title><rect x="975.6" y="611.0" width="39.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="978.6" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (110 samples, 3.38%)</title><rect x="975.6" y="595.0" width="39.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="978.6" y="606.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 0.40%)</title><rect x="975.9" y="579.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.9" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.40%)</title><rect x="975.9" y="563.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="978.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="975.9" y="547.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="978.9" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="975.9" y="531.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="978.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="976.6" y="547.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="979.6" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="976.6" y="531.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="979.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.34%)</title><rect x="976.6" y="515.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="979.6" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (11 samples, 0.34%)</title><rect x="976.6" y="499.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="979.6" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (11 samples, 0.34%)</title><rect x="976.6" y="483.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="979.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="976.6" y="467.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="979.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="976.6" y="451.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="979.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="976.6" y="435.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="979.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="977.4" y="467.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="980.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="977.4" y="451.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.28%)</title><rect x="977.4" y="435.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="980.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.28%)</title><rect x="977.4" y="419.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="980.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.28%)</title><rect x="977.4" y="403.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="980.4" y="414.0"></text>
</g>
<g>
<title>write (8 samples, 0.25%)</title><rect x="977.7" y="387.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="980.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (96 samples, 2.95%)</title><rect x="980.6" y="579.0" width="34.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="983.6" y="590.0">ru..</text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="980.6" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.06%)</title><rect x="980.6" y="547.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="983.6" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="980.6" y="531.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="983.6" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.06%)</title><rect x="980.6" y="515.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="983.6" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="981.0" y="499.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="984.0" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (94 samples, 2.89%)</title><rect x="981.4" y="563.0" width="34.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="984.4" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (94 samples, 2.89%)</title><rect x="981.4" y="547.0" width="34.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="984.4" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (51 samples, 1.57%)</title><rect x="981.4" y="531.0" width="18.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="984.4" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.09%)</title><rect x="982.1" y="515.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.1" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="982.1" y="499.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="985.1" y="510.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="982.4" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="982.4" y="483.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="982.4" y="467.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.4" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="982.4" y="451.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.4" y="462.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="982.8" y="451.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.8" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="982.8" y="435.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="985.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (46 samples, 1.41%)</title><rect x="983.2" y="515.0" width="16.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="986.2" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (46 samples, 1.41%)</title><rect x="983.2" y="499.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 1.41%)</title><rect x="983.2" y="483.0" width="16.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="986.2" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (46 samples, 1.41%)</title><rect x="983.2" y="467.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="986.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (45 samples, 1.38%)</title><rect x="983.2" y="451.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="986.2" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (45 samples, 1.38%)</title><rect x="983.2" y="435.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="986.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (45 samples, 1.38%)</title><rect x="983.2" y="419.0" width="16.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.2" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="983.5" y="403.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="986.5" y="414.0"></text>
</g>
<g>
<title>rpc_errlist (43 samples, 1.32%)</title><rect x="983.9" y="403.0" width="15.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="986.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="999.5" y="451.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1002.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="999.5" y="435.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1002.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="999.5" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1002.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2 samples, 0.06%)</title><rect x="999.9" y="531.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1002.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="999.9" y="515.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1002.9" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="999.9" y="499.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1002.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="999.9" y="483.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1002.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 0.12%)</title><rect x="1000.6" y="531.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.6" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.09%)</title><rect x="1001.0" y="515.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1004.0" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.09%)</title><rect x="1001.0" y="499.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1004.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.09%)</title><rect x="1001.0" y="483.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1004.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.06%)</title><rect x="1001.0" y="467.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1004.0" y="478.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1001.7" y="467.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1004.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (36 samples, 1.11%)</title><rect x="1002.0" y="531.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1005.0" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (25 samples, 0.77%)</title><rect x="1002.0" y="515.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1005.0" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (25 samples, 0.77%)</title><rect x="1002.0" y="499.0" width="9.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.0" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (25 samples, 0.77%)</title><rect x="1002.0" y="483.0" width="9.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1005.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (25 samples, 0.77%)</title><rect x="1002.0" y="467.0" width="9.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1005.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (23 samples, 0.71%)</title><rect x="1002.0" y="451.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1005.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (22 samples, 0.68%)</title><rect x="1002.0" y="435.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1005.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (22 samples, 0.68%)</title><rect x="1002.0" y="419.0" width="8.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1005.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (22 samples, 0.68%)</title><rect x="1002.0" y="403.0" width="8.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1005.0" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1002.4" y="387.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1005.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (20 samples, 0.62%)</title><rect x="1002.8" y="387.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1005.8" y="398.0"></text>
</g>
<g>
<title>write (18 samples, 0.55%)</title><rect x="1003.5" y="371.0" width="6.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1006.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="1010.0" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1013.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (2 samples, 0.06%)</title><rect x="1010.4" y="451.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1013.4" y="462.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="1010.8" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1013.8" y="446.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="1010.8" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1013.8" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (11 samples, 0.34%)</title><rect x="1011.1" y="515.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1014.1" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (11 samples, 0.34%)</title><rect x="1011.1" y="499.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1014.1" y="510.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="1011.1" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1014.1" y="494.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (10 samples, 0.31%)</title><rect x="1011.5" y="483.0" width="3.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1014.5" y="494.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1011.8" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.8" y="478.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.03%)</title><rect x="1012.2" y="467.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1015.2" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1012.6" y="467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1015.6" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1012.6" y="451.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1015.6" y="462.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="1012.6" y="435.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1015.6" y="446.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="1012.9" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1015.9" y="478.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="1013.3" y="467.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1016.3" y="478.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="1013.3" y="451.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.3" y="462.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="1013.7" y="451.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.7" y="462.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="1013.7" y="435.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1016.7" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="1014.0" y="467.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.0" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.06%)</title><rect x="1014.4" y="467.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.4" y="478.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="1014.4" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.4" y="462.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="1014.7" y="451.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.7" y="462.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="1015.1" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1018.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (37 samples, 1.14%)</title><rect x="1015.5" y="627.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1018.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (37 samples, 1.14%)</title><rect x="1015.5" y="611.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1018.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (37 samples, 1.14%)</title><rect x="1015.5" y="595.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1018.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 0.55%)</title><rect x="1015.5" y="579.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1018.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 0.52%)</title><rect x="1015.8" y="563.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1018.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="1015.8" y="547.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1018.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.46%)</title><rect x="1016.6" y="547.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1019.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1016.6" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.6" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.43%)</title><rect x="1016.9" y="531.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.43%)</title><rect x="1016.9" y="515.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1019.9" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.43%)</title><rect x="1016.9" y="499.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.43%)</title><rect x="1016.9" y="483.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="1016.9" y="467.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="1016.9" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="1016.9" y="435.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="1017.6" y="467.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1020.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.37%)</title><rect x="1017.6" y="451.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1020.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (12 samples, 0.37%)</title><rect x="1017.6" y="435.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1020.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (12 samples, 0.37%)</title><rect x="1017.6" y="419.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1020.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (12 samples, 0.37%)</title><rect x="1017.6" y="403.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.6" y="414.0"></text>
</g>
<g>
<title>write (10 samples, 0.31%)</title><rect x="1018.4" y="387.0" width="3.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1021.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (19 samples, 0.58%)</title><rect x="1022.0" y="579.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1022.0" y="563.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1022.0" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1025.0" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1022.0" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1025.0" y="542.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (18 samples, 0.55%)</title><rect x="1022.4" y="563.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1025.4" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (18 samples, 0.55%)</title><rect x="1022.4" y="547.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1025.4" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (18 samples, 0.55%)</title><rect x="1022.4" y="531.0" width="6.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1025.4" y="542.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="1022.4" y="515.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1025.4" y="526.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1022.7" y="515.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1025.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="1023.1" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1026.1" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (15 samples, 0.46%)</title><rect x="1023.5" y="515.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.5" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.09%)</title><rect x="1023.5" y="499.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1026.5" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.09%)</title><rect x="1023.5" y="483.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1026.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1023.5" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.5" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1023.8" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1026.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1023.8" y="451.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1026.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1023.8" y="435.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1026.8" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1023.8" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.8" y="430.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1024.2" y="419.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.2" y="430.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1024.5" y="499.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1027.5" y="510.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1024.5" y="483.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1027.5" y="494.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1024.5" y="467.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1027.5" y="478.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1024.9" y="499.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1027.9" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1024.9" y="483.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1027.9" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1024.9" y="467.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1027.9" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1024.9" y="451.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1027.9" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1024.9" y="435.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1027.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="1025.3" y="499.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (9 samples, 0.28%)</title><rect x="1025.3" y="483.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1028.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (9 samples, 0.28%)</title><rect x="1025.3" y="467.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1028.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (9 samples, 0.28%)</title><rect x="1025.3" y="451.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (9 samples, 0.28%)</title><rect x="1025.3" y="435.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.3" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.25%)</title><rect x="1025.6" y="419.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.25%)</title><rect x="1025.6" y="403.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1028.2" y="387.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.2" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1028.2" y="371.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.2" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1028.2" y="355.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1031.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.03%)</title><rect x="1028.5" y="499.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.5" y="510.0"></text>
</g>
<g>
<title>[async_worker_6 tid=52995] (152 samples, 4.67%)</title><rect x="1028.9" y="691.0" width="55.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1031.9" y="702.0">[asyn..</text>
</g>
<g>
<title>java/lang/Thread.run (152 samples, 4.67%)</title><rect x="1028.9" y="675.0" width="55.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1031.9" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 4.67%)</title><rect x="1028.9" y="659.0" width="55.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1031.9" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (152 samples, 4.67%)</title><rect x="1028.9" y="643.0" width="55.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.9" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.71%)</title><rect x="1028.9" y="627.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (22 samples, 0.68%)</title><rect x="1029.3" y="611.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1032.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 0.46%)</title><rect x="1030.0" y="595.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1033.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 0.46%)</title><rect x="1030.0" y="579.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1033.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (15 samples, 0.46%)</title><rect x="1030.0" y="563.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1033.0" y="574.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (1 samples, 0.03%)</title><rect x="1030.0" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.0" y="558.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (14 samples, 0.43%)</title><rect x="1030.3" y="547.0" width="5.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1033.3" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.43%)</title><rect x="1030.3" y="531.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1033.3" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.37%)</title><rect x="1030.7" y="515.0" width="4.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1033.7" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1035.1" y="515.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1038.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="1035.4" y="595.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1038.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="1035.4" y="579.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="1035.4" y="563.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1038.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="1035.4" y="547.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1038.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="1035.4" y="531.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1038.4" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="1035.8" y="531.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1038.8" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="1036.2" y="515.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1039.2" y="526.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="1036.2" y="499.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.2" y="510.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="1036.5" y="499.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1039.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (99 samples, 3.04%)</title><rect x="1037.2" y="627.0" width="36.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.2" y="638.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (99 samples, 3.04%)</title><rect x="1037.2" y="611.0" width="36.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.2" y="622.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (99 samples, 3.04%)</title><rect x="1037.2" y="595.0" width="36.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.2" y="606.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 0.46%)</title><rect x="1037.2" y="579.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1040.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="1037.6" y="563.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1040.6" y="574.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1037.6" y="547.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1040.6" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1037.6" y="531.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1040.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.40%)</title><rect x="1038.0" y="563.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1041.0" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1038.0" y="547.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1041.0" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1038.0" y="531.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1041.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.40%)</title><rect x="1038.0" y="515.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1041.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.40%)</title><rect x="1038.0" y="499.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1041.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.40%)</title><rect x="1038.0" y="483.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1041.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1038.0" y="467.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1041.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1038.0" y="451.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1041.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (13 samples, 0.40%)</title><rect x="1038.0" y="435.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1041.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (13 samples, 0.40%)</title><rect x="1038.0" y="419.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1041.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.40%)</title><rect x="1038.0" y="403.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1041.0" y="414.0"></text>
</g>
<g>
<title>write (13 samples, 0.40%)</title><rect x="1038.0" y="387.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1041.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (84 samples, 2.58%)</title><rect x="1042.7" y="579.0" width="30.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.7" y="590.0">ru..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="1042.7" y="563.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1045.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1042.7" y="547.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="1042.7" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1045.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="1042.7" y="515.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.7" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1042.7" y="499.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1045.7" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (83 samples, 2.55%)</title><rect x="1043.0" y="563.0" width="30.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1046.0" y="574.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (83 samples, 2.55%)</title><rect x="1043.0" y="547.0" width="30.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1046.0" y="558.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (43 samples, 1.32%)</title><rect x="1043.0" y="531.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1046.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="1043.4" y="515.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.4" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1043.4" y="499.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1043.4" y="483.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1043.4" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.4" y="478.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1043.4" y="451.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.4" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1043.4" y="435.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.4" y="446.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="1043.4" y="419.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.4" y="430.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="1043.4" y="403.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.4" y="414.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1043.8" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.8" y="462.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1043.8" y="435.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1046.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (39 samples, 1.20%)</title><rect x="1044.1" y="515.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.1" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1044.1" y="499.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.1" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1044.1" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="1044.1" y="467.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1047.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (38 samples, 1.17%)</title><rect x="1044.5" y="499.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1047.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="1044.5" y="483.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1044.5" y="467.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1044.5" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1044.5" y="435.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1044.5" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.5" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1044.5" y="403.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1044.5" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1047.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 1.14%)</title><rect x="1044.9" y="483.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 1.14%)</title><rect x="1044.9" y="467.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1047.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (35 samples, 1.08%)</title><rect x="1044.9" y="451.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (35 samples, 1.08%)</title><rect x="1044.9" y="435.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1047.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (35 samples, 1.08%)</title><rect x="1044.9" y="419.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.9" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 1.05%)</title><rect x="1045.2" y="403.0" width="12.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1048.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="1057.6" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1060.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="1057.6" y="435.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1060.6" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="1057.6" y="419.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1060.6" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.06%)</title><rect x="1057.6" y="403.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1060.6" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.06%)</title><rect x="1057.6" y="387.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1060.6" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.06%)</title><rect x="1057.6" y="371.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1060.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (1 samples, 0.03%)</title><rect x="1058.3" y="515.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.3" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (4 samples, 0.12%)</title><rect x="1058.6" y="531.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1061.6" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (4 samples, 0.12%)</title><rect x="1058.6" y="515.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1061.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="1059.0" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1062.0" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="1059.0" y="483.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1062.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (3 samples, 0.09%)</title><rect x="1060.1" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1063.1" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.06%)</title><rect x="1060.5" y="515.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1063.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1060.8" y="499.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1063.8" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1060.8" y="483.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1063.8" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (1 samples, 0.03%)</title><rect x="1060.8" y="467.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1063.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="1060.8" y="451.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1063.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1061.2" y="531.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1064.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1061.2" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1061.2" y="499.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.2" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (32 samples, 0.98%)</title><rect x="1061.5" y="531.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1064.5" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (22 samples, 0.68%)</title><rect x="1061.5" y="515.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1064.5" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (22 samples, 0.68%)</title><rect x="1061.5" y="499.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.5" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (21 samples, 0.65%)</title><rect x="1061.9" y="483.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1064.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (21 samples, 0.65%)</title><rect x="1061.9" y="467.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.55%)</title><rect x="1061.9" y="451.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1064.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.55%)</title><rect x="1061.9" y="435.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1064.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (18 samples, 0.55%)</title><rect x="1061.9" y="419.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="1061.9" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1064.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.52%)</title><rect x="1062.3" y="403.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1065.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (17 samples, 0.52%)</title><rect x="1062.3" y="387.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1065.3" y="398.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="1062.6" y="371.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1065.6" y="382.0"></text>
</g>
<g>
<title>write (15 samples, 0.46%)</title><rect x="1063.0" y="371.0" width="5.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1066.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.09%)</title><rect x="1068.4" y="451.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1071.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.06%)</title><rect x="1068.8" y="435.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1071.8" y="446.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="1068.8" y="419.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1071.8" y="430.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="1069.2" y="419.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1072.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (9 samples, 0.28%)</title><rect x="1069.5" y="515.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1072.5" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (9 samples, 0.28%)</title><rect x="1069.5" y="499.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1072.5" y="510.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (7 samples, 0.22%)</title><rect x="1069.5" y="483.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1072.5" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (3 samples, 0.09%)</title><rect x="1069.9" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.9" y="478.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="1069.9" y="451.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.9" y="462.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.06%)</title><rect x="1070.3" y="451.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.3" y="462.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="1070.3" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.3" y="446.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="1070.6" y="435.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.6" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.06%)</title><rect x="1071.0" y="467.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.0" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="1071.0" y="451.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.0" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.06%)</title><rect x="1071.0" y="435.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.0" y="446.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="1071.7" y="467.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.7" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="1071.7" y="451.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.7" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1071.7" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.7" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1071.7" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.7" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1071.7" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.7" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1071.7" y="387.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.7" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="1071.7" y="371.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.7" y="382.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (1 samples, 0.03%)</title><rect x="1072.1" y="483.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1075.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="1072.4" y="483.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1075.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="1072.4" y="467.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1075.4" y="478.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (1 samples, 0.03%)</title><rect x="1072.4" y="451.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1075.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (1 samples, 0.03%)</title><rect x="1072.8" y="515.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1075.8" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (30 samples, 0.92%)</title><rect x="1073.2" y="627.0" width="10.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1076.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (30 samples, 0.92%)</title><rect x="1073.2" y="611.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.2" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (30 samples, 0.92%)</title><rect x="1073.2" y="595.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1076.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 0.46%)</title><rect x="1073.2" y="579.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.43%)</title><rect x="1073.5" y="563.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1076.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1073.5" y="547.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1073.9" y="547.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1076.9" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1073.9" y="531.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1076.9" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.40%)</title><rect x="1073.9" y="515.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.9" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.40%)</title><rect x="1073.9" y="499.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.9" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.40%)</title><rect x="1073.9" y="483.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1076.9" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1073.9" y="467.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1076.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1073.9" y="451.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (13 samples, 0.40%)</title><rect x="1073.9" y="435.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1076.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (13 samples, 0.40%)</title><rect x="1073.9" y="419.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1076.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.31%)</title><rect x="1075.0" y="403.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1078.0" y="414.0"></text>
</g>
<g>
<title>write (9 samples, 0.28%)</title><rect x="1075.3" y="387.0" width="3.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1078.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (15 samples, 0.46%)</title><rect x="1078.6" y="579.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1081.6" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1078.6" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1081.6" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1078.6" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1081.6" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1078.6" y="531.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1081.6" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1078.6" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.6" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (14 samples, 0.43%)</title><rect x="1079.0" y="563.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1082.0" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (14 samples, 0.43%)</title><rect x="1079.0" y="547.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1082.0" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (14 samples, 0.43%)</title><rect x="1079.0" y="531.0" width="5.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1082.0" y="542.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="1079.0" y="515.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1082.0" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (13 samples, 0.40%)</title><rect x="1079.3" y="515.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1082.3" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (4 samples, 0.12%)</title><rect x="1079.3" y="499.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1082.3" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.12%)</title><rect x="1079.3" y="483.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1082.3" y="494.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="1079.3" y="467.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.3" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.09%)</title><rect x="1079.7" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1080.1" y="451.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.1" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1080.1" y="435.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.1" y="446.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="1080.4" y="419.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1083.4" y="430.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1080.8" y="499.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1083.8" y="510.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1080.8" y="483.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1083.8" y="494.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1081.1" y="499.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1084.1" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1081.1" y="483.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1084.1" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1081.1" y="467.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1084.1" y="478.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1081.1" y="451.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1084.1" y="462.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1081.1" y="435.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1084.1" y="446.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="1081.5" y="499.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="1081.5" y="483.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (7 samples, 0.22%)</title><rect x="1081.5" y="467.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.22%)</title><rect x="1081.5" y="451.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.5" y="462.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (1 samples, 0.03%)</title><rect x="1081.5" y="435.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="1081.9" y="435.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (6 samples, 0.18%)</title><rect x="1081.9" y="419.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1084.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.18%)</title><rect x="1081.9" y="403.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1084.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.09%)</title><rect x="1083.0" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.0" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1083.7" y="371.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.7" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1083.7" y="355.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1086.7" y="366.0"></text>
</g>
<g>
<title>[async_worker_6 tid=57347] (48 samples, 1.48%)</title><rect x="1084.0" y="691.0" width="17.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1087.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (48 samples, 1.48%)</title><rect x="1084.0" y="675.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (48 samples, 1.48%)</title><rect x="1084.0" y="659.0" width="17.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (48 samples, 1.48%)</title><rect x="1084.0" y="643.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1087.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 0.68%)</title><rect x="1084.8" y="627.0" width="8.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (22 samples, 0.68%)</title><rect x="1084.8" y="611.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1087.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (20 samples, 0.62%)</title><rect x="1084.8" y="595.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (20 samples, 0.62%)</title><rect x="1084.8" y="579.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.8" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (20 samples, 0.62%)</title><rect x="1084.8" y="563.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1087.8" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (20 samples, 0.62%)</title><rect x="1084.8" y="547.0" width="7.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1087.8" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.58%)</title><rect x="1084.8" y="531.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1087.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.58%)</title><rect x="1084.8" y="515.0" width="6.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1087.8" y="526.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="1091.7" y="531.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1094.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="1092.0" y="595.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1095.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="1092.0" y="579.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1095.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="1092.0" y="563.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1095.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="1092.0" y="547.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1095.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="1092.0" y="531.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1095.0" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="1092.0" y="515.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1095.0" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1092.0" y="499.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1095.0" y="510.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="1092.4" y="515.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1095.4" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (24 samples, 0.74%)</title><rect x="1092.8" y="627.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1095.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (24 samples, 0.74%)</title><rect x="1092.8" y="611.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1095.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (24 samples, 0.74%)</title><rect x="1092.8" y="595.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1095.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (15 samples, 0.46%)</title><rect x="1092.8" y="579.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1095.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.40%)</title><rect x="1093.5" y="563.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1096.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1093.5" y="547.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1096.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.37%)</title><rect x="1093.8" y="547.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1096.8" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.37%)</title><rect x="1093.8" y="531.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1096.8" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.34%)</title><rect x="1094.2" y="515.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1097.2" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (11 samples, 0.34%)</title><rect x="1094.2" y="499.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1097.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (11 samples, 0.34%)</title><rect x="1094.2" y="483.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1097.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="1094.2" y="467.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1094.2" y="451.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1097.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="1094.2" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.2" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="1094.2" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.2" y="430.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1094.2" y="403.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1097.2" y="414.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="1094.2" y="387.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1097.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="1094.6" y="467.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1097.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="1094.6" y="451.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.31%)</title><rect x="1094.6" y="435.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.31%)</title><rect x="1094.6" y="419.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.31%)</title><rect x="1094.6" y="403.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1097.6" y="414.0"></text>
</g>
<g>
<title>write (10 samples, 0.31%)</title><rect x="1094.6" y="387.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1097.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1098.2" y="579.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1101.2" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1098.2" y="563.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1101.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (8 samples, 0.25%)</title><rect x="1098.6" y="579.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1101.6" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="1098.6" y="563.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1101.6" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (8 samples, 0.25%)</title><rect x="1098.6" y="547.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1101.6" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (8 samples, 0.25%)</title><rect x="1098.6" y="531.0" width="2.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1101.6" y="542.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="1098.6" y="515.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1101.6" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (7 samples, 0.22%)</title><rect x="1098.9" y="515.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1101.9" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.09%)</title><rect x="1098.9" y="499.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1101.9" y="510.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.09%)</title><rect x="1098.9" y="483.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1101.9" y="494.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="1098.9" y="467.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.9" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1099.3" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.3" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1099.6" y="451.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.6" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1099.6" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.6" y="446.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1099.6" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.6" y="430.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1099.6" y="403.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1102.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="1100.0" y="499.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.0" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="1100.0" y="483.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.12%)</title><rect x="1100.0" y="467.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.0" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (4 samples, 0.12%)</title><rect x="1100.0" y="451.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.0" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (4 samples, 0.12%)</title><rect x="1100.0" y="435.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.0" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.12%)</title><rect x="1100.0" y="419.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="1100.0" y="403.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1101.1" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="398.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1101.1" y="371.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.1" y="382.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1101.1" y="355.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1104.1" y="366.0"></text>
</g>
<g>
<title>[async_worker_6 tid=59651] (41 samples, 1.26%)</title><rect x="1101.5" y="691.0" width="14.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1104.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (41 samples, 1.26%)</title><rect x="1101.5" y="675.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1104.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (41 samples, 1.26%)</title><rect x="1101.5" y="659.0" width="14.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (41 samples, 1.26%)</title><rect x="1101.5" y="643.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1104.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (22 samples, 0.68%)</title><rect x="1101.5" y="627.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1104.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (22 samples, 0.68%)</title><rect x="1101.5" y="611.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1104.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.65%)</title><rect x="1101.5" y="595.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="1101.5" y="579.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1104.5" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="1101.5" y="563.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1104.5" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (20 samples, 0.62%)</title><rect x="1101.8" y="547.0" width="7.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1104.8" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 0.62%)</title><rect x="1101.8" y="531.0" width="7.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.8" y="542.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="1101.8" y="515.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.8" y="526.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="1101.8" y="499.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.8" y="510.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="1101.8" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.8" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.58%)</title><rect x="1102.2" y="515.0" width="6.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1105.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1109.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1112.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1109.1" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1112.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1109.1" y="563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1109.1" y="547.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.1" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1109.1" y="531.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1112.1" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="1109.1" y="515.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1112.1" y="526.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1109.1" y="499.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (19 samples, 0.58%)</title><rect x="1109.4" y="627.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (19 samples, 0.58%)</title><rect x="1109.4" y="611.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1112.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (19 samples, 0.58%)</title><rect x="1109.4" y="595.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.22%)</title><rect x="1109.4" y="579.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.22%)</title><rect x="1109.4" y="563.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1112.4" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="1109.4" y="547.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1112.4" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.22%)</title><rect x="1109.4" y="531.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1112.4" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.22%)</title><rect x="1109.4" y="515.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1112.4" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.22%)</title><rect x="1109.4" y="499.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1112.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.22%)</title><rect x="1109.4" y="483.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.22%)</title><rect x="1109.4" y="467.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1112.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.22%)</title><rect x="1109.4" y="451.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1112.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.22%)</title><rect x="1109.4" y="435.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.22%)</title><rect x="1109.4" y="419.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1112.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.22%)</title><rect x="1109.4" y="403.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.4" y="414.0"></text>
</g>
<g>
<title>write (7 samples, 0.22%)</title><rect x="1109.4" y="387.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1112.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (11 samples, 0.34%)</title><rect x="1112.0" y="579.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1115.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1112.0" y="563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.0" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="1112.0" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1115.0" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1112.0" y="531.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1115.0" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1112.0" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.0" y="526.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="1112.3" y="563.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1115.3" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="1112.3" y="547.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1115.3" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (10 samples, 0.31%)</title><rect x="1112.3" y="531.0" width="3.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1115.3" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (10 samples, 0.31%)</title><rect x="1112.3" y="515.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1115.3" y="526.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1112.3" y="499.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.3" y="510.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="1112.7" y="499.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1115.7" y="510.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1112.7" y="483.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.7" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="1113.1" y="483.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1116.1" y="494.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1113.4" y="499.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1116.4" y="510.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1113.4" y="483.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1116.4" y="494.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1113.4" y="467.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1116.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="1113.8" y="499.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="1113.8" y="483.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="1113.8" y="467.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="1113.8" y="451.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1116.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (6 samples, 0.18%)</title><rect x="1113.8" y="435.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (6 samples, 0.18%)</title><rect x="1113.8" y="419.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.8" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.18%)</title><rect x="1113.8" y="403.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.8" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="1115.6" y="387.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1118.6" y="398.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1115.6" y="371.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.6" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (1 samples, 0.03%)</title><rect x="1116.0" y="579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1119.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1116.0" y="563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.0" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1116.0" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.0" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1116.0" y="531.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1119.0" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1116.0" y="515.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.0" y="526.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1116.0" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.0" y="510.0"></text>
</g>
<g>
<title>[async_worker_7 tid=53507] (126 samples, 3.87%)</title><rect x="1116.3" y="691.0" width="45.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1119.3" y="702.0">[asy..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="1116.3" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.3" y="686.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="1116.3" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.3" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="1116.3" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.3" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1116.3" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.3" y="638.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="1116.3" y="611.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1119.3" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (125 samples, 3.84%)</title><rect x="1116.7" y="675.0" width="45.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1119.7" y="686.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (125 samples, 3.84%)</title><rect x="1116.7" y="659.0" width="45.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.7" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (125 samples, 3.84%)</title><rect x="1116.7" y="643.0" width="45.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1119.7" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (21 samples, 0.65%)</title><rect x="1116.7" y="627.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (19 samples, 0.58%)</title><rect x="1117.1" y="611.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (18 samples, 0.55%)</title><rect x="1117.1" y="595.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1120.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (18 samples, 0.55%)</title><rect x="1117.1" y="579.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.1" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (18 samples, 0.55%)</title><rect x="1117.1" y="563.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1120.1" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (15 samples, 0.46%)</title><rect x="1118.2" y="547.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1121.2" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 0.46%)</title><rect x="1118.2" y="531.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.2" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.46%)</title><rect x="1118.2" y="515.0" width="5.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1121.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1123.6" y="595.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1126.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1123.6" y="579.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1123.6" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1126.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1123.6" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.6" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1123.6" y="531.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1126.6" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="1123.6" y="515.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1126.6" y="526.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1123.6" y="499.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1126.6" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (1 samples, 0.03%)</title><rect x="1124.0" y="611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1127.0" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (80 samples, 2.46%)</title><rect x="1124.3" y="627.0" width="29.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1127.3" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (80 samples, 2.46%)</title><rect x="1124.3" y="611.0" width="29.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1127.3" y="622.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (80 samples, 2.46%)</title><rect x="1124.3" y="595.0" width="29.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1127.3" y="606.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (12 samples, 0.37%)</title><rect x="1124.3" y="579.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1127.3" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 0.37%)</title><rect x="1124.3" y="563.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1127.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1124.3" y="547.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1127.3" y="558.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1124.3" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1127.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="1124.7" y="547.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1127.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.34%)</title><rect x="1124.7" y="531.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1127.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.31%)</title><rect x="1125.0" y="515.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.0" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.31%)</title><rect x="1125.0" y="499.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1128.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.31%)</title><rect x="1125.0" y="483.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1128.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="1125.0" y="467.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.31%)</title><rect x="1125.0" y="451.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1128.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.31%)</title><rect x="1125.0" y="435.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1128.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.31%)</title><rect x="1125.0" y="419.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1128.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.31%)</title><rect x="1125.0" y="403.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1128.0" y="414.0"></text>
</g>
<g>
<title>write (10 samples, 0.31%)</title><rect x="1125.0" y="387.0" width="3.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1128.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (68 samples, 2.09%)</title><rect x="1128.7" y="579.0" width="24.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1131.7" y="590.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (68 samples, 2.09%)</title><rect x="1128.7" y="563.0" width="24.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1131.7" y="574.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (68 samples, 2.09%)</title><rect x="1128.7" y="547.0" width="24.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1131.7" y="558.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (34 samples, 1.05%)</title><rect x="1129.0" y="531.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1132.0" y="542.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (34 samples, 1.05%)</title><rect x="1129.0" y="515.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1132.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (34 samples, 1.05%)</title><rect x="1129.0" y="499.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1132.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.05%)</title><rect x="1129.0" y="483.0" width="12.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1132.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (34 samples, 1.05%)</title><rect x="1129.0" y="467.0" width="12.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1132.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (32 samples, 0.98%)</title><rect x="1129.0" y="451.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1132.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (32 samples, 0.98%)</title><rect x="1129.0" y="435.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1132.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (32 samples, 0.98%)</title><rect x="1129.0" y="419.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1132.0" y="430.0"></text>
</g>
<g>
<title>rpc_errlist (30 samples, 0.92%)</title><rect x="1129.8" y="403.0" width="10.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1132.8" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="1140.7" y="451.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1143.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="1140.7" y="435.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1143.7" y="446.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="1141.0" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1144.0" y="430.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.03%)</title><rect x="1141.0" y="403.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1144.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1141.0" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1144.0" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="1141.0" y="371.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1144.0" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="1141.4" y="531.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1144.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.03%)</title><rect x="1141.4" y="515.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1144.4" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1141.4" y="499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1144.4" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1141.4" y="483.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1144.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="1141.7" y="531.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1144.7" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="1141.7" y="515.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1144.7" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1142.1" y="531.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1145.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1142.1" y="515.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1142.1" y="499.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1145.1" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (30 samples, 0.92%)</title><rect x="1142.5" y="531.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1145.5" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (19 samples, 0.58%)</title><rect x="1142.5" y="515.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.5" y="526.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (19 samples, 0.58%)</title><rect x="1142.5" y="499.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1145.5" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (19 samples, 0.58%)</title><rect x="1142.5" y="483.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1145.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (19 samples, 0.58%)</title><rect x="1142.5" y="467.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1145.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.58%)</title><rect x="1142.5" y="451.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1145.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (19 samples, 0.58%)</title><rect x="1142.5" y="435.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1145.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (19 samples, 0.58%)</title><rect x="1142.5" y="419.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (19 samples, 0.58%)</title><rect x="1142.5" y="403.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (19 samples, 0.58%)</title><rect x="1142.5" y="387.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1145.5" y="398.0"></text>
</g>
<g>
<title>write (18 samples, 0.55%)</title><rect x="1142.8" y="371.0" width="6.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1145.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (11 samples, 0.34%)</title><rect x="1149.4" y="515.0" width="4.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1152.4" y="526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (11 samples, 0.34%)</title><rect x="1149.4" y="499.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1152.4" y="510.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (6 samples, 0.18%)</title><rect x="1149.7" y="483.0" width="2.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1152.7" y="494.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="1149.7" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.7" y="478.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1149.7" y="451.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="462.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="1149.7" y="435.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.7" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (2 samples, 0.06%)</title><rect x="1150.1" y="467.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.1" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="1150.1" y="451.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.1" y="462.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.06%)</title><rect x="1150.1" y="435.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="1150.4" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1150.8" y="467.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.8" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1150.8" y="451.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.8" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1150.8" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.8" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1150.8" y="419.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1150.8" y="403.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.8" y="414.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1150.8" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="398.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="1151.2" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="1151.5" y="467.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.5" y="478.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="1151.5" y="451.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.5" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1151.5" y="435.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.5" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1151.5" y="419.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.5" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1151.5" y="403.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="1151.5" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="398.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="1151.5" y="371.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="1151.9" y="483.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.03%)</title><rect x="1152.3" y="483.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="494.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1152.6" y="483.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="1153.0" y="483.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1156.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (24 samples, 0.74%)</title><rect x="1153.4" y="627.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1156.4" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (23 samples, 0.71%)</title><rect x="1153.7" y="611.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1156.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (23 samples, 0.71%)</title><rect x="1153.7" y="595.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1156.7" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 0.40%)</title><rect x="1153.7" y="579.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1156.7" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.40%)</title><rect x="1153.7" y="563.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1156.7" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1153.7" y="547.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1156.7" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.40%)</title><rect x="1153.7" y="531.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1156.7" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.40%)</title><rect x="1153.7" y="515.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1156.7" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.40%)</title><rect x="1153.7" y="499.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1156.7" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.40%)</title><rect x="1153.7" y="483.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1156.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1153.7" y="467.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1156.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.40%)</title><rect x="1153.7" y="451.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1156.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (13 samples, 0.40%)</title><rect x="1153.7" y="435.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1156.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (13 samples, 0.40%)</title><rect x="1153.7" y="419.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1156.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.40%)</title><rect x="1153.7" y="403.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1156.7" y="414.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="1154.1" y="387.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1157.1" y="398.0"></text>
</g>
<g>
<title>write (11 samples, 0.34%)</title><rect x="1154.4" y="387.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1157.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (10 samples, 0.31%)</title><rect x="1158.4" y="579.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1161.4" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="1158.4" y="563.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1161.4" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (10 samples, 0.31%)</title><rect x="1158.4" y="547.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1161.4" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (10 samples, 0.31%)</title><rect x="1158.4" y="531.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1161.4" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (10 samples, 0.31%)</title><rect x="1158.4" y="515.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.4" y="526.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="1158.4" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="510.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.06%)</title><rect x="1158.8" y="499.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1161.8" y="510.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="1158.8" y="483.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.8" y="494.0"></text>
</g>
<g>
<title>jni_NewByteArray (1 samples, 0.03%)</title><rect x="1159.2" y="483.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1162.2" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1159.2" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1159.2" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.2" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1159.2" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.2" y="446.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1159.2" y="419.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1162.2" y="430.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1159.5" y="499.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1162.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="1159.9" y="499.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (6 samples, 0.18%)</title><rect x="1159.9" y="483.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (6 samples, 0.18%)</title><rect x="1159.9" y="467.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (6 samples, 0.18%)</title><rect x="1159.9" y="451.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (5 samples, 0.15%)</title><rect x="1159.9" y="435.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.09%)</title><rect x="1160.6" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="430.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1160.6" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="414.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1161.0" y="403.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="414.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1161.3" y="387.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="398.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.03%)</title><rect x="1161.7" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.7" y="446.0"></text>
</g>
<g>
<title>[async_worker_7 tid=58627] (43 samples, 1.32%)</title><rect x="1162.1" y="691.0" width="15.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1165.1" y="702.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.03%)</title><rect x="1162.1" y="675.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1165.1" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="1162.1" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (42 samples, 1.29%)</title><rect x="1162.4" y="675.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1165.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (42 samples, 1.29%)</title><rect x="1162.4" y="659.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1165.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (42 samples, 1.29%)</title><rect x="1162.4" y="643.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1165.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (23 samples, 0.71%)</title><rect x="1162.4" y="627.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1165.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (23 samples, 0.71%)</title><rect x="1162.4" y="611.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1165.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.65%)</title><rect x="1162.4" y="595.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1165.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (21 samples, 0.65%)</title><rect x="1162.4" y="579.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1165.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (21 samples, 0.65%)</title><rect x="1162.4" y="563.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1165.4" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.65%)</title><rect x="1162.4" y="547.0" width="7.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1165.4" y="558.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="1162.4" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.4" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 0.62%)</title><rect x="1162.8" y="531.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.58%)</title><rect x="1162.8" y="515.0" width="6.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1169.7" y="515.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.06%)</title><rect x="1170.0" y="595.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1173.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.06%)</title><rect x="1170.0" y="579.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1173.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="1170.0" y="563.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1173.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="1170.0" y="547.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1173.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="1170.0" y="531.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="1170.0" y="515.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1173.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1170.4" y="563.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1173.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1170.4" y="547.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1173.4" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (19 samples, 0.58%)</title><rect x="1170.8" y="627.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1173.8" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (19 samples, 0.58%)</title><rect x="1170.8" y="611.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1173.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (19 samples, 0.58%)</title><rect x="1170.8" y="595.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1173.8" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.28%)</title><rect x="1170.8" y="579.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1173.8" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.25%)</title><rect x="1171.1" y="563.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1174.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="1171.1" y="547.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1174.1" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.25%)</title><rect x="1171.1" y="531.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1174.1" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.25%)</title><rect x="1171.1" y="515.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1174.1" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.25%)</title><rect x="1171.1" y="499.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1174.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.25%)</title><rect x="1171.1" y="483.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1174.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.25%)</title><rect x="1171.1" y="467.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1174.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.25%)</title><rect x="1171.1" y="451.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1174.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.25%)</title><rect x="1171.1" y="435.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1174.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="1171.1" y="419.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1174.1" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.22%)</title><rect x="1171.5" y="419.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1174.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="1171.9" y="403.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1174.9" y="414.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="1171.9" y="387.0" width="2.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1174.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (10 samples, 0.31%)</title><rect x="1174.0" y="579.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1177.0" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="1174.0" y="563.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1177.0" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="1174.0" y="547.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1177.0" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (9 samples, 0.28%)</title><rect x="1174.0" y="531.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1177.0" y="542.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1174.0" y="515.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1177.0" y="526.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (8 samples, 0.25%)</title><rect x="1174.4" y="515.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.4" y="526.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (1 samples, 0.03%)</title><rect x="1174.4" y="499.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1177.4" y="510.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="1174.4" y="483.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1177.4" y="494.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="1174.8" y="499.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.8" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (7 samples, 0.22%)</title><rect x="1174.8" y="483.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (7 samples, 0.22%)</title><rect x="1174.8" y="467.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (7 samples, 0.22%)</title><rect x="1174.8" y="451.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.8" y="462.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (7 samples, 0.22%)</title><rect x="1174.8" y="435.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.8" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (5 samples, 0.15%)</title><rect x="1175.5" y="419.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.5" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="1175.5" y="403.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.03%)</title><rect x="1176.6" y="387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.6" y="398.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="1176.6" y="371.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1179.6" y="382.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1176.9" y="387.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.9" y="398.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1176.9" y="371.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1179.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="1177.3" y="563.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>[async_worker_7 tid=59139] (34 samples, 1.05%)</title><rect x="1177.7" y="691.0" width="12.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (34 samples, 1.05%)</title><rect x="1177.7" y="675.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (34 samples, 1.05%)</title><rect x="1177.7" y="659.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (34 samples, 1.05%)</title><rect x="1177.7" y="643.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.49%)</title><rect x="1177.7" y="627.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.49%)</title><rect x="1177.7" y="611.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (14 samples, 0.43%)</title><rect x="1177.7" y="595.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.40%)</title><rect x="1178.0" y="579.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1181.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.40%)</title><rect x="1178.0" y="563.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1181.0" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.40%)</title><rect x="1178.0" y="547.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1181.0" y="558.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1178.0" y="531.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="542.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.37%)</title><rect x="1178.4" y="531.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.34%)</title><rect x="1178.4" y="515.0" width="4.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1182.4" y="515.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1185.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="1182.7" y="595.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1185.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="1182.7" y="579.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1185.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="1182.7" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1185.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="1182.7" y="547.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="1182.7" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1185.7" y="542.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="1182.7" y="515.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1185.7" y="526.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="1182.7" y="499.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1185.7" y="510.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1182.7" y="483.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="494.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1182.7" y="467.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="1183.1" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="1183.1" y="579.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="1183.1" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="1183.1" y="547.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="1183.1" y="531.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="1183.1" y="515.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1183.1" y="499.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="1183.1" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$81/1335711272.run (18 samples, 0.55%)</title><rect x="1183.5" y="627.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1186.5" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$get$2 (18 samples, 0.55%)</title><rect x="1183.5" y="611.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1186.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.getValue (18 samples, 0.55%)</title><rect x="1183.5" y="595.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1186.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.28%)</title><rect x="1183.5" y="579.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1186.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.28%)</title><rect x="1183.5" y="563.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1186.5" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.28%)</title><rect x="1183.5" y="547.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.28%)</title><rect x="1183.5" y="531.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1186.5" y="542.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.28%)</title><rect x="1183.5" y="515.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1186.5" y="526.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.28%)</title><rect x="1183.5" y="499.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1186.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.28%)</title><rect x="1183.5" y="483.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1186.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="1183.5" y="467.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1186.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.28%)</title><rect x="1183.5" y="451.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.28%)</title><rect x="1183.5" y="435.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1186.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.28%)</title><rect x="1183.5" y="419.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1186.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.28%)</title><rect x="1183.5" y="403.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>write (8 samples, 0.25%)</title><rect x="1183.8" y="387.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1186.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.get (9 samples, 0.28%)</title><rect x="1186.7" y="579.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1189.7" y="590.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="1186.7" y="563.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1189.7" y="574.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (9 samples, 0.28%)</title><rect x="1186.7" y="547.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1189.7" y="558.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (9 samples, 0.28%)</title><rect x="1186.7" y="531.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.7" y="542.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (8 samples, 0.25%)</title><rect x="1187.1" y="515.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="526.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="1187.1" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="510.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (3 samples, 0.09%)</title><rect x="1187.5" y="499.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.5" y="510.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="1187.5" y="483.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.5" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1187.5" y="467.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="478.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1187.5" y="451.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="462.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1187.5" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="446.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1187.5" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="430.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1187.5" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="414.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="1187.5" y="387.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="398.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.06%)</title><rect x="1187.8" y="483.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1190.8" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1187.8" y="467.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1187.8" y="451.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1187.8" y="435.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.8" y="446.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="1188.2" y="419.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1191.2" y="430.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="1188.5" y="499.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="510.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (4 samples, 0.12%)</title><rect x="1188.5" y="483.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (4 samples, 0.12%)</title><rect x="1188.5" y="467.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.5" y="478.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (4 samples, 0.12%)</title><rect x="1188.5" y="451.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="462.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1188.5" y="435.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1191.5" y="446.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (3 samples, 0.09%)</title><rect x="1188.9" y="435.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (1 samples, 0.03%)</title><rect x="1188.9" y="419.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.03%)</title><rect x="1188.9" y="403.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.06%)</title><rect x="1189.3" y="419.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.3" y="430.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1189.3" y="403.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.3" y="414.0"></text>
</g>
</g>
</svg>
