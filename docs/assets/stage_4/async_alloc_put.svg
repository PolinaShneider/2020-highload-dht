<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="437"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="437"> </text>
<g id="frames">
<g>
<title>all (47,693 samples, 100.00%)</title><rect x="10.0" y="403.0" width="1180.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="13.0" y="414.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (26,983 samples, 56.58%)</title><rect x="10.0" y="387.0" width="667.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (26,983 samples, 56.58%)</title><rect x="10.0" y="371.0" width="667.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (26,983 samples, 56.58%)</title><rect x="10.0" y="355.0" width="667.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,264 samples, 2.65%)</title><rect x="10.0" y="339.0" width="31.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,264 samples, 2.65%)</title><rect x="10.0" y="323.0" width="31.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="334.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,249 samples, 2.62%)</title><rect x="10.0" y="307.0" width="30.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,249 samples, 2.62%)</title><rect x="10.0" y="291.0" width="30.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="302.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,249 samples, 2.62%)</title><rect x="10.0" y="275.0" width="30.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (15 samples, 0.03%)</title><rect x="40.9" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (15 samples, 0.03%)</title><rect x="40.9" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (15 samples, 0.03%)</title><rect x="40.9" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (15 samples, 0.03%)</title><rect x="40.9" y="259.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="43.9" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (15 samples, 0.03%)</title><rect x="40.9" y="243.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="43.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.run (11,087 samples, 23.25%)</title><rect x="41.3" y="339.0" width="274.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.3" y="350.0">ru/mail/polis/service/ServiceAsyncImp..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (11,087 samples, 23.25%)</title><rect x="41.3" y="323.0" width="274.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.3" y="334.0">ru/mail/polis/service/ServiceAsyncImp..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (11,087 samples, 23.25%)</title><rect x="41.3" y="307.0" width="274.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="44.3" y="318.0">ru/mail/polis/service/ServiceAsyncImp..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (101 samples, 0.21%)</title><rect x="41.3" y="291.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (101 samples, 0.21%)</title><rect x="41.3" y="275.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.3" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (77 samples, 0.16%)</title><rect x="41.3" y="259.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (77 samples, 0.16%)</title><rect x="41.3" y="243.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.3" y="254.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.16%)</title><rect x="41.3" y="227.0" width="1.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="44.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 0.05%)</title><rect x="43.2" y="259.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.2" y="270.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (24 samples, 0.05%)</title><rect x="43.2" y="243.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="46.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (10,986 samples, 23.03%)</title><rect x="43.8" y="291.0" width="271.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.8" y="302.0">ru/mail/polis/service/ServiceAsyncIm..</text>
</g>
<g>
<title>java.lang.Object[] (34 samples, 0.07%)</title><rect x="43.8" y="275.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="46.8" y="286.0"></text>
</g>
<g>
<title>java/lang/String.format (533 samples, 1.12%)</title><rect x="44.6" y="275.0" width="13.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="47.6" y="286.0"></text>
</g>
<g>
<title>java.util.Formatter (24 samples, 0.05%)</title><rect x="44.6" y="259.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="47.6" y="270.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (73 samples, 0.15%)</title><rect x="45.2" y="259.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.2" y="270.0"></text>
</g>
<g>
<title>java.lang.StringBuilder (13 samples, 0.03%)</title><rect x="45.2" y="243.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="48.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="45.5" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="48.5" y="254.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (14 samples, 0.03%)</title><rect x="45.5" y="227.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.5" y="238.0"></text>
</g>
<g>
<title>byte[] (14 samples, 0.03%)</title><rect x="45.5" y="211.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="48.5" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (46 samples, 0.10%)</title><rect x="45.9" y="243.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.9" y="254.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (46 samples, 0.10%)</title><rect x="45.9" y="227.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.9" y="238.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (46 samples, 0.10%)</title><rect x="45.9" y="211.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="48.9" y="222.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (46 samples, 0.10%)</title><rect x="45.9" y="195.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="48.9" y="206.0"></text>
</g>
<g>
<title>java.text.DecimalFormatSymbols (46 samples, 0.10%)</title><rect x="45.9" y="179.0" width="1.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="48.9" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.format (398 samples, 0.83%)</title><rect x="47.0" y="259.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.0" y="270.0"></text>
</g>
<g>
<title>java/util/Formatter.format (398 samples, 0.83%)</title><rect x="47.0" y="243.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.0" y="254.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (39 samples, 0.08%)</title><rect x="47.0" y="227.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.0" y="238.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (39 samples, 0.08%)</title><rect x="47.0" y="211.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.0" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (39 samples, 0.08%)</title><rect x="47.0" y="195.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.0" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (39 samples, 0.08%)</title><rect x="47.0" y="179.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.0" y="190.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="163.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="147.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.0" y="158.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="131.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="115.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.0" y="126.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="99.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.0" y="110.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (39 samples, 0.08%)</title><rect x="47.0" y="83.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.0" y="94.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (39 samples, 0.08%)</title><rect x="47.0" y="67.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.0" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (39 samples, 0.08%)</title><rect x="47.0" y="51.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.0" y="62.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.08%)</title><rect x="47.0" y="35.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="50.0" y="46.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (359 samples, 0.75%)</title><rect x="48.0" y="227.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.0" y="238.0"></text>
</g>
<g>
<title>java.util.Formatter$FixedString (20 samples, 0.04%)</title><rect x="48.0" y="211.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="51.0" y="222.0"></text>
</g>
<g>
<title>java.util.Formatter$FormatSpecifier (52 samples, 0.11%)</title><rect x="48.5" y="211.0" width="1.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="51.5" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (40 samples, 0.08%)</title><rect x="49.8" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.8" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (40 samples, 0.08%)</title><rect x="49.8" y="195.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="52.8" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (40 samples, 0.08%)</title><rect x="49.8" y="179.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (40 samples, 0.08%)</title><rect x="49.8" y="163.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.8" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (40 samples, 0.08%)</title><rect x="49.8" y="147.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.8" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (40 samples, 0.08%)</title><rect x="49.8" y="131.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="52.8" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (84 samples, 0.18%)</title><rect x="50.7" y="211.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.7" y="222.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.checkGeneral (59 samples, 0.12%)</title><rect x="50.7" y="195.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.7" y="206.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags[] (59 samples, 0.12%)</title><rect x="50.7" y="179.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="53.7" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.flags (25 samples, 0.05%)</title><rect x="52.2" y="195.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.2" y="206.0"></text>
</g>
<g>
<title>java/util/Formatter$Flags.parse (25 samples, 0.05%)</title><rect x="52.2" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.2" y="190.0"></text>
</g>
<g>
<title>java.util.Formatter$Flags (25 samples, 0.05%)</title><rect x="52.2" y="163.0" width="0.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="55.2" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (163 samples, 0.34%)</title><rect x="52.8" y="211.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.8" y="222.0"></text>
</g>
<g>
<title>java.util.regex.Matcher (55 samples, 0.12%)</title><rect x="52.8" y="195.0" width="1.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="55.8" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (108 samples, 0.23%)</title><rect x="54.2" y="195.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.2" y="206.0"></text>
</g>
<g>
<title>int[] (100 samples, 0.21%)</title><rect x="54.2" y="179.0" width="2.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="57.2" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (38 samples, 0.08%)</title><rect x="56.9" y="259.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.9" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (38 samples, 0.08%)</title><rect x="56.9" y="243.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.9" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (38 samples, 0.08%)</title><rect x="56.9" y="227.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.9" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (28 samples, 0.06%)</title><rect x="57.1" y="211.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.1" y="222.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.06%)</title><rect x="57.1" y="195.0" width="0.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="60.1" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,419 samples, 21.85%)</title><rect x="57.8" y="275.0" width="257.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.8" y="286.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (10,419 samples, 21.85%)</title><rect x="57.8" y="259.0" width="257.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.8" y="270.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (19 samples, 0.04%)</title><rect x="57.8" y="243.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="60.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (9,758 samples, 20.46%)</title><rect x="58.3" y="243.0" width="241.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.3" y="254.0">one/nio/http/HttpClient$Response..</text>
</g>
<g>
<title>byte[] (5,738 samples, 12.03%)</title><rect x="58.3" y="227.0" width="141.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="61.3" y="238.0">byte[]</text>
</g>
<g>
<title>byte[] (3,704 samples, 7.77%)</title><rect x="200.2" y="227.0" width="91.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="203.2" y="238.0">byte[]</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (316 samples, 0.66%)</title><rect x="291.9" y="227.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (316 samples, 0.66%)</title><rect x="291.9" y="211.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.9" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (316 samples, 0.66%)</title><rect x="291.9" y="195.0" width="7.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="294.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (439 samples, 0.92%)</title><rect x="299.7" y="243.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.7" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (36 samples, 0.08%)</title><rect x="299.9" y="227.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="302.9" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (36 samples, 0.08%)</title><rect x="299.9" y="211.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.9" y="222.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.04%)</title><rect x="299.9" y="195.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="302.9" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17 samples, 0.04%)</title><rect x="300.4" y="195.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.4" y="206.0"></text>
</g>
<g>
<title>byte[] (17 samples, 0.04%)</title><rect x="300.4" y="179.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="303.4" y="190.0"></text>
</g>
<g>
<title>one.nio.http.Response (14 samples, 0.03%)</title><rect x="300.8" y="227.0" width="0.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="303.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (336 samples, 0.70%)</title><rect x="301.2" y="227.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.2" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (336 samples, 0.70%)</title><rect x="301.2" y="211.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (336 samples, 0.70%)</title><rect x="301.2" y="195.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="304.2" y="206.0"></text>
</g>
<g>
<title>char[] (195 samples, 0.41%)</title><rect x="301.2" y="179.0" width="4.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="304.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (46 samples, 0.10%)</title><rect x="306.0" y="179.0" width="1.1" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="309.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (95 samples, 0.20%)</title><rect x="307.1" y="179.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.1" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (95 samples, 0.20%)</title><rect x="307.1" y="163.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.1" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (95 samples, 0.20%)</title><rect x="307.1" y="147.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.1" y="158.0"></text>
</g>
<g>
<title>byte[] (95 samples, 0.20%)</title><rect x="307.1" y="131.0" width="2.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="310.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (17 samples, 0.04%)</title><rect x="309.5" y="227.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.5" y="238.0"></text>
</g>
<g>
<title>java.lang.String[] (17 samples, 0.04%)</title><rect x="309.5" y="211.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="312.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (26 samples, 0.05%)</title><rect x="309.9" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.9" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 0.05%)</title><rect x="309.9" y="211.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="312.9" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (26 samples, 0.05%)</title><rect x="309.9" y="195.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.9" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (16 samples, 0.03%)</title><rect x="310.2" y="179.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.2" y="190.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.03%)</title><rect x="310.2" y="163.0" width="0.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="313.2" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (91 samples, 0.19%)</title><rect x="310.6" y="243.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="313.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (91 samples, 0.19%)</title><rect x="310.6" y="227.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.6" y="238.0"></text>
</g>
<g>
<title>byte[] (91 samples, 0.19%)</title><rect x="310.6" y="211.0" width="2.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="313.6" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (38 samples, 0.08%)</title><rect x="312.8" y="243.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (38 samples, 0.08%)</title><rect x="312.8" y="227.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (38 samples, 0.08%)</title><rect x="312.8" y="211.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (20 samples, 0.04%)</title><rect x="312.8" y="195.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="315.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (18 samples, 0.04%)</title><rect x="313.3" y="195.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.3" y="206.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.04%)</title><rect x="313.3" y="179.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="316.3" y="190.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (61 samples, 0.13%)</title><rect x="313.8" y="243.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.8" y="254.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (28 samples, 0.06%)</title><rect x="313.8" y="227.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 0.06%)</title><rect x="313.8" y="211.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.8" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (28 samples, 0.06%)</title><rect x="313.8" y="195.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="316.8" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (28 samples, 0.06%)</title><rect x="313.8" y="179.0" width="0.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="316.8" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (33 samples, 0.07%)</title><rect x="314.4" y="227.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.4" y="238.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (21 samples, 0.04%)</title><rect x="314.4" y="211.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.4" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (21 samples, 0.04%)</title><rect x="314.4" y="195.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="317.4" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (21 samples, 0.04%)</title><rect x="314.4" y="179.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.4" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (21 samples, 0.04%)</title><rect x="314.4" y="163.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.4" y="174.0"></text>
</g>
<g>
<title>java.nio.channels.Channels$1 (21 samples, 0.04%)</title><rect x="314.4" y="147.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="317.4" y="158.0"></text>
</g>
<g>
<title>sun.nio.ch.SocketAdaptor$2 (12 samples, 0.03%)</title><rect x="315.0" y="211.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="318.0" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (13 samples, 0.03%)</title><rect x="315.3" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.3" y="254.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (13 samples, 0.03%)</title><rect x="315.3" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="318.3" y="238.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (13 samples, 0.03%)</title><rect x="315.3" y="211.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="318.3" y="222.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (13 samples, 0.03%)</title><rect x="315.3" y="195.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="318.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/1660398125.run (14,632 samples, 30.68%)</title><rect x="315.6" y="339.0" width="362.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.6" y="350.0">ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (14,632 samples, 30.68%)</title><rect x="315.6" y="323.0" width="362.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="318.6" y="334.0">ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,067 samples, 4.33%)</title><rect x="315.6" y="307.0" width="51.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="318.6" y="318.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2,067 samples, 4.33%)</title><rect x="315.6" y="291.0" width="51.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.6" y="302.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2,067 samples, 4.33%)</title><rect x="315.6" y="275.0" width="51.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="318.6" y="286.0">java...</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.putValue (12,565 samples, 26.35%)</title><rect x="366.7" y="307.0" width="310.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.7" y="318.0">ru/mail/polis/service/ServiceAsyncImpl.put..</text>
</g>
<g>
<title>one.nio.http.Response (968 samples, 2.03%)</title><rect x="366.7" y="291.0" width="24.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="369.7" y="302.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (5,170 samples, 10.84%)</title><rect x="390.7" y="291.0" width="127.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.7" y="302.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5,170 samples, 10.84%)</title><rect x="390.7" y="275.0" width="127.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="393.7" y="286.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3,606 samples, 7.56%)</title><rect x="390.7" y="259.0" width="89.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.7" y="270.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3,606 samples, 7.56%)</title><rect x="390.7" y="243.0" width="89.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.7" y="254.0">one/nio/ut..</text>
</g>
<g>
<title>byte[] (3,606 samples, 7.56%)</title><rect x="390.7" y="227.0" width="89.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="393.7" y="238.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (1,564 samples, 3.28%)</title><rect x="479.9" y="259.0" width="38.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="482.9" y="270.0">one..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (1,564 samples, 3.28%)</title><rect x="479.9" y="243.0" width="38.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="482.9" y="254.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4,194 samples, 8.79%)</title><rect x="518.6" y="291.0" width="103.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.6" y="302.0">one/nio/http..</text>
</g>
<g>
<title>byte[] (1,846 samples, 3.87%)</title><rect x="518.6" y="275.0" width="45.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="521.6" y="286.0">byte[]</text>
</g>
<g>
<title>java.lang.String[] (1,376 samples, 2.89%)</title><rect x="564.3" y="275.0" width="34.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="567.3" y="286.0">ja..</text>
</g>
<g>
<title>java.lang.String (972 samples, 2.04%)</title><rect x="598.3" y="275.0" width="24.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="601.3" y="286.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (2,233 samples, 4.68%)</title><rect x="622.4" y="291.0" width="55.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="625.4" y="302.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (1,291 samples, 2.71%)</title><rect x="622.4" y="275.0" width="31.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="625.4" y="286.0">ru..</text>
</g>
<g>
<title>byte[] (1,291 samples, 2.71%)</title><rect x="622.4" y="259.0" width="31.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="625.4" y="270.0">by..</text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (942 samples, 1.98%)</title><rect x="654.3" y="275.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.3" y="286.0">r..</text>
</g>
<g>
<title>byte[] (942 samples, 1.98%)</title><rect x="654.3" y="259.0" width="23.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="657.3" y="270.0">b..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (20,710 samples, 43.42%)</title><rect x="677.6" y="387.0" width="512.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.6" y="398.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (2,298 samples, 4.82%)</title><rect x="677.6" y="371.0" width="56.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="680.6" y="382.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (876 samples, 1.84%)</title><rect x="677.6" y="355.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.6" y="366.0">o..</text>
</g>
<g>
<title>one.nio.net.JavaSelector$1 (481 samples, 1.01%)</title><rect x="677.6" y="339.0" width="11.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="680.6" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session[] (395 samples, 0.83%)</title><rect x="689.5" y="339.0" width="9.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="692.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1,422 samples, 2.98%)</title><rect x="699.3" y="355.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.3" y="366.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,422 samples, 2.98%)</title><rect x="699.3" y="339.0" width="35.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="702.3" y="350.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,422 samples, 2.98%)</title><rect x="699.3" y="323.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="702.3" y="334.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1,422 samples, 2.98%)</title><rect x="699.3" y="307.0" width="35.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="702.3" y="318.0">sun..</text>
</g>
<g>
<title>java/lang/Integer.valueOf (705 samples, 1.48%)</title><rect x="699.3" y="291.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.3" y="302.0"></text>
</g>
<g>
<title>java.lang.Integer (705 samples, 1.48%)</title><rect x="699.3" y="275.0" width="17.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="702.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (717 samples, 1.50%)</title><rect x="716.7" y="291.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="719.7" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.add (717 samples, 1.50%)</title><rect x="716.7" y="275.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.7" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (717 samples, 1.50%)</title><rect x="716.7" y="259.0" width="17.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="719.7" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (717 samples, 1.50%)</title><rect x="716.7" y="243.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.7" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (717 samples, 1.50%)</title><rect x="716.7" y="227.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="719.7" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (717 samples, 1.50%)</title><rect x="716.7" y="211.0" width="17.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="719.7" y="222.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18,412 samples, 38.61%)</title><rect x="734.5" y="371.0" width="455.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="737.5" y="382.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (18,412 samples, 38.61%)</title><rect x="734.5" y="355.0" width="455.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="737.5" y="366.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (17,447 samples, 36.58%)</title><rect x="734.5" y="339.0" width="431.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.5" y="350.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4,049 samples, 8.49%)</title><rect x="734.5" y="323.0" width="100.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="737.5" y="334.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4,049 samples, 8.49%)</title><rect x="734.5" y="307.0" width="100.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.5" y="318.0">one/nio/http..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2,963 samples, 6.21%)</title><rect x="734.5" y="291.0" width="73.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="737.5" y="302.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (919 samples, 1.93%)</title><rect x="734.5" y="275.0" width="22.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.5" y="286.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (919 samples, 1.93%)</title><rect x="734.5" y="259.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.5" y="270.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (919 samples, 1.93%)</title><rect x="734.5" y="243.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="737.5" y="254.0">j..</text>
</g>
<g>
<title>java.lang.String (471 samples, 0.99%)</title><rect x="734.5" y="227.0" width="11.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="737.5" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (448 samples, 0.94%)</title><rect x="746.1" y="227.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.1" y="238.0"></text>
</g>
<g>
<title>byte[] (448 samples, 0.94%)</title><rect x="746.1" y="211.0" width="11.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="749.1" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (2,044 samples, 4.29%)</title><rect x="757.2" y="275.0" width="50.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.2" y="286.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (401 samples, 0.84%)</title><rect x="757.2" y="259.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="760.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (401 samples, 0.84%)</title><rect x="757.2" y="243.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.2" y="254.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (401 samples, 0.84%)</title><rect x="757.2" y="227.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="760.2" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (401 samples, 0.84%)</title><rect x="757.2" y="211.0" width="9.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.2" y="222.0"></text>
</g>
<g>
<title>byte[] (401 samples, 0.84%)</title><rect x="757.2" y="195.0" width="9.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="760.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (154 samples, 0.32%)</title><rect x="767.1" y="259.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (154 samples, 0.32%)</title><rect x="767.1" y="243.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.get$Lambda (154 samples, 0.32%)</title><rect x="767.1" y="227.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.1" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ServiceAsyncImpl$$Lambda$76 (154 samples, 0.32%)</title><rect x="767.1" y="211.0" width="3.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="770.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,048 samples, 2.20%)</title><rect x="770.9" y="259.0" width="26.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="773.9" y="270.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,048 samples, 2.20%)</title><rect x="770.9" y="243.0" width="26.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="773.9" y="254.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,048 samples, 2.20%)</title><rect x="770.9" y="227.0" width="26.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="773.9" y="238.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (438 samples, 0.92%)</title><rect x="796.9" y="259.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.9" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (433 samples, 0.91%)</title><rect x="796.9" y="243.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.9" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (433 samples, 0.91%)</title><rect x="796.9" y="227.0" width="10.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="799.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/1660398125.get$Lambda (433 samples, 0.91%)</title><rect x="796.9" y="211.0" width="10.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="799.9" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ServiceAsyncImpl$$Lambda$78 (433 samples, 0.91%)</title><rect x="796.9" y="195.0" width="10.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="799.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1,086 samples, 2.28%)</title><rect x="807.8" y="291.0" width="26.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.8" y="302.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (1,086 samples, 2.28%)</title><rect x="807.8" y="275.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.8" y="286.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,086 samples, 2.28%)</title><rect x="807.8" y="259.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.8" y="270.0">j..</text>
</g>
<g>
<title>java.lang.String (482 samples, 1.01%)</title><rect x="807.8" y="243.0" width="11.9" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="810.8" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (604 samples, 1.27%)</title><rect x="819.7" y="243.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="822.7" y="254.0"></text>
</g>
<g>
<title>byte[] (604 samples, 1.27%)</title><rect x="819.7" y="227.0" width="14.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="822.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (5,076 samples, 10.64%)</title><rect x="834.6" y="323.0" width="125.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.6" y="334.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (900 samples, 1.89%)</title><rect x="834.6" y="307.0" width="22.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="837.6" y="318.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,693 samples, 3.55%)</title><rect x="856.9" y="307.0" width="41.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="859.9" y="318.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,693 samples, 3.55%)</title><rect x="856.9" y="291.0" width="41.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="859.9" y="302.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,483 samples, 5.21%)</title><rect x="898.8" y="307.0" width="61.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="901.8" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,483 samples, 5.21%)</title><rect x="898.8" y="291.0" width="61.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="901.8" y="302.0">one/ni..</text>
</g>
<g>
<title>char[] (1,239 samples, 2.60%)</title><rect x="898.8" y="275.0" width="30.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="901.8" y="286.0">ch..</text>
</g>
<g>
<title>java.lang.String (448 samples, 0.94%)</title><rect x="929.4" y="275.0" width="11.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="932.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (796 samples, 1.67%)</title><rect x="940.5" y="275.0" width="19.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.5" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (796 samples, 1.67%)</title><rect x="940.5" y="259.0" width="19.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="943.5" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (796 samples, 1.67%)</title><rect x="940.5" y="243.0" width="19.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.5" y="254.0"></text>
</g>
<g>
<title>byte[] (796 samples, 1.67%)</title><rect x="940.5" y="227.0" width="19.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="943.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (686 samples, 1.44%)</title><rect x="960.2" y="323.0" width="17.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="963.2" y="334.0"></text>
</g>
<g>
<title>byte[] (686 samples, 1.44%)</title><rect x="960.2" y="307.0" width="17.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="963.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (846 samples, 1.77%)</title><rect x="977.2" y="323.0" width="20.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="980.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (846 samples, 1.77%)</title><rect x="977.2" y="307.0" width="20.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="980.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (846 samples, 1.77%)</title><rect x="977.2" y="291.0" width="20.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="980.2" y="302.0"></text>
</g>
<g>
<title>java.lang.String (448 samples, 0.94%)</title><rect x="977.2" y="275.0" width="11.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="980.2" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (398 samples, 0.83%)</title><rect x="988.3" y="275.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="991.3" y="286.0"></text>
</g>
<g>
<title>byte[] (398 samples, 0.83%)</title><rect x="988.3" y="259.0" width="9.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="991.3" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,790 samples, 14.24%)</title><rect x="998.1" y="323.0" width="168.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.1" y="334.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6,790 samples, 14.24%)</title><rect x="998.1" y="307.0" width="168.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1001.1" y="318.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (3,385 samples, 7.10%)</title><rect x="998.1" y="291.0" width="83.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1001.1" y="302.0">char[]</text>
</g>
<g>
<title>java.lang.String (1,179 samples, 2.47%)</title><rect x="1081.9" y="291.0" width="29.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1084.9" y="302.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,226 samples, 4.67%)</title><rect x="1111.0" y="291.0" width="55.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1114.0" y="302.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,226 samples, 4.67%)</title><rect x="1111.0" y="275.0" width="55.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.0" y="286.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,226 samples, 4.67%)</title><rect x="1111.0" y="259.0" width="55.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.0" y="270.0">java/..</text>
</g>
<g>
<title>byte[] (2,226 samples, 4.67%)</title><rect x="1111.0" y="243.0" width="55.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1114.0" y="254.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.read (965 samples, 2.02%)</title><rect x="1166.1" y="339.0" width="23.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1169.1" y="350.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (965 samples, 2.02%)</title><rect x="1166.1" y="323.0" width="23.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1169.1" y="334.0">o..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (965 samples, 2.02%)</title><rect x="1166.1" y="307.0" width="23.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1169.1" y="318.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (965 samples, 2.02%)</title><rect x="1166.1" y="291.0" width="23.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="1169.1" y="302.0">j..</text>
</g>
</g>
</svg>
