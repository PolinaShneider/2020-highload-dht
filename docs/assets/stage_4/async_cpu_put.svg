<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="549"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="549"> </text>
<g id="frames">
<g>
<title>all (3,779 samples, 100.00%)</title><rect x="10.0" y="515.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="526.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause(unsigned long, unsigned int, bool*, GCCause::Cause) (1 samples, 0.03%)</title><rect x="10.0" y="371.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.03%)</title><rect x="10.0" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="10.0" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.03%)</title><rect x="10.0" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="510.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.3" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="467.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.3" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="10.3" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="10.3" y="435.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.05%)</title><rect x="10.6" y="499.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.6" y="510.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.03%)</title><rect x="10.6" y="483.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.9" y="483.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.9" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="10.9" y="467.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_compiled() const (1 samples, 0.03%)</title><rect x="10.9" y="451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.9" y="462.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.05%)</title><rect x="11.2" y="499.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="14.2" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="11.2" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="11.6" y="483.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.6" y="494.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,936 samples, 77.69%)</title><rect x="11.9" y="499.0" width="916.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.9" y="510.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,936 samples, 77.69%)</title><rect x="11.9" y="483.0" width="916.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.9" y="494.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,936 samples, 77.69%)</title><rect x="11.9" y="467.0" width="916.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.9" y="478.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.05%)</title><rect x="13.4" y="451.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="13.4" y="435.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="13.4" y="419.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.05%)</title><rect x="13.4" y="403.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.03%)</title><rect x="13.7" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (415 samples, 10.98%)</title><rect x="14.1" y="451.0" width="129.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.1" y="462.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (415 samples, 10.98%)</title><rect x="14.1" y="435.0" width="129.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.1" y="446.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (377 samples, 9.98%)</title><rect x="14.1" y="419.0" width="117.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.1" y="430.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="14.4" y="403.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.19%)</title><rect x="15.0" y="403.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.19%)</title><rect x="15.0" y="387.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (365 samples, 9.66%)</title><rect x="17.2" y="403.0" width="114.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="414.0">java/util/conc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (360 samples, 9.53%)</title><rect x="18.7" y="387.0" width="112.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.7" y="398.0">jdk/internal/m..</text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.05%)</title><rect x="23.4" y="371.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.4" y="382.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (4 samples, 0.11%)</title><rect x="24.1" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="27.1" y="382.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (1 samples, 0.03%)</title><rect x="25.3" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="28.3" y="382.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.03%)</title><rect x="25.6" y="371.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.6" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (334 samples, 8.84%)</title><rect x="25.9" y="371.0" width="104.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="28.9" y="382.0">Unsafe_Park(..</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.08%)</title><rect x="26.5" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.5" y="366.0"></text>
</g>
<g>
<title>Chunk::next() const (3 samples, 0.08%)</title><rect x="26.5" y="339.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.5" y="350.0"></text>
</g>
<g>
<title>JavaThread::jni_environment_offset() (1 samples, 0.03%)</title><rect x="27.5" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="30.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::parker() (2 samples, 0.05%)</title><rect x="27.8" y="355.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="30.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="28.4" y="355.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.4" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="28.4" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="31.4" y="350.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="28.4" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="31.4" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="28.4" y="307.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.4" y="318.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="28.4" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="31.4" y="302.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="28.4" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.4" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="28.4" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="31.4" y="270.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="28.4" y="243.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.4" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.11%)</title><rect x="28.7" y="355.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.7" y="366.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="28.7" y="339.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.7" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.05%)</title><rect x="28.7" y="323.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="31.7" y="334.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="29.4" y="339.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="32.4" y="350.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="29.7" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="32.7" y="350.0"></text>
</g>
<g>
<title>JavaThreadParkedState::~JavaThreadParkedState() (1 samples, 0.03%)</title><rect x="30.0" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="33.0" y="366.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (2 samples, 0.05%)</title><rect x="30.3" y="355.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.3" y="366.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.05%)</title><rect x="30.3" y="339.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="33.3" y="350.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="30.6" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="33.6" y="334.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::is_enabled() (1 samples, 0.03%)</title><rect x="30.9" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="33.9" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (306 samples, 8.10%)</title><rect x="31.2" y="355.0" width="95.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="34.2" y="366.0">Parker::par..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.13%)</title><rect x="32.5" y="339.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="35.5" y="350.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="32.5" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="35.5" y="334.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.08%)</title><rect x="32.8" y="323.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="35.8" y="334.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="33.1" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="36.1" y="318.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="33.1" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="36.1" y="302.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="33.4" y="307.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="36.4" y="318.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="33.7" y="323.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="36.7" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="34.0" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="37.0" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (287 samples, 7.59%)</title><rect x="34.4" y="339.0" width="89.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="37.4" y="350.0">__psynch_c..</text>
</g>
<g>
<title>_pthread_cond_wait (8 samples, 0.21%)</title><rect x="124.0" y="339.0" width="2.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="127.0" y="350.0"></text>
</g>
<g>
<title>_pthread_testcancel (4 samples, 0.11%)</title><rect x="125.2" y="323.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="128.2" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="126.5" y="339.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="129.5" y="350.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="126.8" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="129.8" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (2 samples, 0.05%)</title><rect x="127.1" y="355.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="130.1" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="127.4" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="130.4" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="127.4" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="130.4" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="127.4" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="130.4" y="318.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="127.4" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="130.4" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (5 samples, 0.13%)</title><rect x="127.7" y="355.0" width="1.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="130.7" y="366.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.08%)</title><rect x="129.3" y="355.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="132.3" y="366.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title><rect x="130.2" y="371.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="133.2" y="382.0"></text>
</g>
<g>
<title>os::verify_stack_alignment() (1 samples, 0.03%)</title><rect x="130.8" y="371.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="133.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="131.2" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="131.8" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (2 samples, 0.05%)</title><rect x="132.1" y="419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (2 samples, 0.05%)</title><rect x="132.1" y="403.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.05%)</title><rect x="132.1" y="387.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="132.1" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="132.1" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="132.1" y="339.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.1" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="132.1" y="323.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="135.1" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="132.1" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="135.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="132.1" y="291.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="135.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire (1 samples, 0.03%)</title><rect x="132.4" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (35 samples, 0.93%)</title><rect x="132.7" y="419.0" width="10.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (35 samples, 0.93%)</title><rect x="132.7" y="403.0" width="10.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="135.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (35 samples, 0.93%)</title><rect x="132.7" y="387.0" width="10.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (35 samples, 0.93%)</title><rect x="132.7" y="371.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="135.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (34 samples, 0.90%)</title><rect x="133.0" y="355.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="136.0" y="366.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="133.3" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="136.3" y="350.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="133.7" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="136.7" y="350.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="134.0" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="137.0" y="350.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (29 samples, 0.77%)</title><rect x="134.3" y="339.0" width="9.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="137.3" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="134.3" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="137.3" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (27 samples, 0.71%)</title><rect x="134.6" y="323.0" width="8.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="137.6" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="143.0" y="323.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="146.0" y="334.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="143.3" y="339.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="146.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="143.6" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$76/2055748001.run (921 samples, 24.37%)</title><rect x="144.0" y="451.0" width="287.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.0" y="462.0">ru/mail/polis/service/ServiceAsyncImpl$..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (921 samples, 24.37%)</title><rect x="144.0" y="435.0" width="287.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.0" y="446.0">ru/mail/polis/service/ServiceAsyncImpl...</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (921 samples, 24.37%)</title><rect x="144.0" y="419.0" width="287.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.0" y="430.0">ru/mail/polis/service/ServiceAsyncImpl...</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (133 samples, 3.52%)</title><rect x="144.3" y="403.0" width="41.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.3" y="414.0">one..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title><rect x="144.9" y="387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="147.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="144.9" y="371.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="147.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="144.9" y="355.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="145.2" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="148.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (126 samples, 3.33%)</title><rect x="145.5" y="387.0" width="39.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="148.5" y="398.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.16%)</title><rect x="145.5" y="371.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="148.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.13%)</title><rect x="145.8" y="355.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.08%)</title><rect x="145.8" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="146.8" y="339.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="149.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="146.8" y="323.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="146.8" y="307.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (120 samples, 3.18%)</title><rect x="147.4" y="371.0" width="37.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.4" y="382.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="147.7" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (118 samples, 3.12%)</title><rect x="148.0" y="355.0" width="36.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.0" y="366.0">one..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (117 samples, 3.10%)</title><rect x="148.3" y="339.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.3" y="350.0">one..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (117 samples, 3.10%)</title><rect x="148.3" y="323.0" width="36.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.3" y="334.0">one..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (117 samples, 3.10%)</title><rect x="148.3" y="307.0" width="36.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.3" y="318.0">sun..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="148.3" y="291.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="148.3" y="275.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="151.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="148.3" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (108 samples, 2.86%)</title><rect x="149.0" y="291.0" width="33.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.0" y="302.0">su..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (108 samples, 2.86%)</title><rect x="149.0" y="275.0" width="33.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.0" y="286.0">su..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.05%)</title><rect x="149.0" y="259.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.0" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.05%)</title><rect x="149.0" y="243.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="152.0" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.05%)</title><rect x="149.0" y="227.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.0" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.05%)</title><rect x="149.0" y="211.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.0" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.05%)</title><rect x="149.0" y="195.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.0" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.03%)</title><rect x="149.0" y="179.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="152.0" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.03%)</title><rect x="149.3" y="179.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.3" y="190.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.03%)</title><rect x="149.3" y="163.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.3" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (106 samples, 2.80%)</title><rect x="149.6" y="259.0" width="33.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.6" y="270.0">su..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (106 samples, 2.80%)</title><rect x="149.6" y="243.0" width="33.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="152.6" y="254.0">su..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (106 samples, 2.80%)</title><rect x="149.6" y="227.0" width="33.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.6" y="238.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="150.2" y="211.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="153.2" y="222.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="150.5" y="195.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="153.5" y="206.0"></text>
</g>
<g>
<title>write (102 samples, 2.70%)</title><rect x="150.8" y="211.0" width="31.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="153.8" y="222.0">wr..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.19%)</title><rect x="182.7" y="291.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.7" y="302.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="183.6" y="275.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="186.6" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.08%)</title><rect x="183.9" y="275.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="186.9" y="286.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="183.9" y="259.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="186.9" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.08%)</title><rect x="183.9" y="243.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="186.9" y="254.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.05%)</title><rect x="184.2" y="227.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="187.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.08%)</title><rect x="184.9" y="387.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="187.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="184.9" y="371.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.9" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="184.9" y="355.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (787 samples, 20.83%)</title><rect x="185.8" y="403.0" width="245.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.8" y="414.0">ru/mail/polis/service/ServiceAsyn..</text>
</g>
<g>
<title>java/lang/String.format (66 samples, 1.75%)</title><rect x="185.8" y="387.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.8" y="398.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (15 samples, 0.40%)</title><rect x="185.8" y="371.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.8" y="382.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (15 samples, 0.40%)</title><rect x="185.8" y="355.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.8" y="366.0"></text>
</g>
<g>
<title>java/util/Formatter.getZero (15 samples, 0.40%)</title><rect x="185.8" y="339.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.8" y="350.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.getInstance (15 samples, 0.40%)</title><rect x="185.8" y="323.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.8" y="334.0"></text>
</g>
<g>
<title>sun/util/locale/provider/DecimalFormatSymbolsProviderImpl.getInstance (11 samples, 0.29%)</title><rect x="187.0" y="307.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.0" y="318.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.&lt;init&gt; (10 samples, 0.26%)</title><rect x="187.0" y="291.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="190.0" y="302.0"></text>
</g>
<g>
<title>java/text/DecimalFormatSymbols.initialize (9 samples, 0.24%)</title><rect x="187.0" y="275.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.0" y="286.0"></text>
</g>
<g>
<title>sun/util/locale/provider/JRELocaleProviderAdapter.getLocaleResources (9 samples, 0.24%)</title><rect x="187.0" y="259.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="190.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.24%)</title><rect x="187.0" y="243.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.0" y="254.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.03%)</title><rect x="189.9" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="189.9" y="259.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.9" y="270.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.03%)</title><rect x="190.2" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.2" y="302.0"></text>
</g>
<g>
<title>java/util/Formatter.format (51 samples, 1.35%)</title><rect x="190.5" y="371.0" width="15.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.5" y="382.0"></text>
</g>
<g>
<title>java/util/Formatter.format (51 samples, 1.35%)</title><rect x="190.5" y="355.0" width="15.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.5" y="366.0"></text>
</g>
<g>
<title>java/util/Formatter$FixedString.print (5 samples, 0.13%)</title><rect x="191.1" y="339.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="194.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="191.1" y="323.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.1" y="334.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="191.1" y="307.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="194.1" y="318.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.13%)</title><rect x="191.1" y="291.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.1" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.appendChars (5 samples, 0.13%)</title><rect x="191.1" y="275.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="194.1" y="286.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (5 samples, 0.13%)</title><rect x="192.7" y="339.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.7" y="350.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (5 samples, 0.13%)</title><rect x="192.7" y="323.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.7" y="334.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (5 samples, 0.13%)</title><rect x="192.7" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.7" y="318.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.appendJustified (5 samples, 0.13%)</title><rect x="192.7" y="291.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.7" y="302.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="275.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.7" y="286.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="259.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.7" y="270.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="243.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.7" y="254.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="227.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.7" y="238.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="211.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.7" y="222.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.13%)</title><rect x="192.7" y="195.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.7" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.03%)</title><rect x="193.3" y="179.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.3" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="193.3" y="163.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.3" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="193.3" y="147.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="196.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="193.6" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.6" y="190.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (39 samples, 1.03%)</title><rect x="194.2" y="339.0" width="12.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="197.2" y="350.0"></text>
</g>
<g>
<title>java/util/Formatter.checkText (2 samples, 0.05%)</title><rect x="196.4" y="323.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="199.4" y="334.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (2 samples, 0.05%)</title><rect x="196.4" y="307.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="199.4" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (29 samples, 0.77%)</title><rect x="197.0" y="323.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.0" y="334.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (4 samples, 0.11%)</title><rect x="197.4" y="307.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.4" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (24 samples, 0.64%)</title><rect x="198.6" y="307.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="201.6" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (23 samples, 0.61%)</title><rect x="198.9" y="291.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="201.9" y="302.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (22 samples, 0.58%)</title><rect x="199.2" y="275.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.2" y="286.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (20 samples, 0.53%)</title><rect x="199.8" y="259.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.8" y="270.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (16 samples, 0.42%)</title><rect x="199.8" y="243.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.8" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (16 samples, 0.42%)</title><rect x="199.8" y="227.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.8" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (16 samples, 0.42%)</title><rect x="199.8" y="211.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.8" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (16 samples, 0.42%)</title><rect x="199.8" y="195.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.8" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (2 samples, 0.05%)</title><rect x="199.8" y="179.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.8" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (14 samples, 0.37%)</title><rect x="200.5" y="179.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.5" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (14 samples, 0.37%)</title><rect x="200.5" y="163.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="203.5" y="174.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (11 samples, 0.29%)</title><rect x="200.5" y="147.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="203.5" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (7 samples, 0.19%)</title><rect x="200.8" y="131.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="203.8" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (6 samples, 0.16%)</title><rect x="201.1" y="115.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.1" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (6 samples, 0.16%)</title><rect x="201.1" y="99.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.1" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (1 samples, 0.03%)</title><rect x="201.4" y="83.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="204.4" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.03%)</title><rect x="201.4" y="67.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.4" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$21/2015781843.is (2 samples, 0.05%)</title><rect x="201.7" y="83.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.7" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (2 samples, 0.05%)</title><rect x="201.7" y="67.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.7" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate$$Lambda$21/2015781843.is (2 samples, 0.05%)</title><rect x="201.7" y="51.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.7" y="62.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPredicate.lambda$union$2 (2 samples, 0.05%)</title><rect x="201.7" y="35.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.7" y="46.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (2 samples, 0.05%)</title><rect x="202.3" y="83.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="205.3" y="94.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (2 samples, 0.05%)</title><rect x="202.3" y="67.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.3" y="78.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (2 samples, 0.05%)</title><rect x="202.3" y="51.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.3" y="62.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (3 samples, 0.08%)</title><rect x="203.0" y="131.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.0" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (3 samples, 0.08%)</title><rect x="203.0" y="115.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.0" y="126.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="203.0" y="99.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.0" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$16/209833425.is (1 samples, 0.03%)</title><rect x="203.6" y="99.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.6" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (3 samples, 0.08%)</title><rect x="203.9" y="147.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.9" y="158.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (2 samples, 0.05%)</title><rect x="204.2" y="131.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.2" y="142.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (1 samples, 0.03%)</title><rect x="204.2" y="115.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.2" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (1 samples, 0.03%)</title><rect x="204.2" y="99.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.2" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.03%)</title><rect x="204.5" y="115.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.5" y="126.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (1 samples, 0.03%)</title><rect x="204.5" y="99.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="207.5" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (4 samples, 0.11%)</title><rect x="204.8" y="243.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.8" y="254.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (4 samples, 0.11%)</title><rect x="204.8" y="227.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="207.8" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$19/1337344609.is (4 samples, 0.11%)</title><rect x="204.8" y="211.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.8" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.lambda$clazz$1 (4 samples, 0.11%)</title><rect x="204.8" y="195.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.8" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$$Lambda$16/209833425.is (1 samples, 0.03%)</title><rect x="205.8" y="179.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.8" y="190.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (1 samples, 0.03%)</title><rect x="206.1" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.1" y="334.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="206.1" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="209.1" y="318.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.reset (1 samples, 0.03%)</title><rect x="206.1" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.13%)</title><rect x="206.4" y="387.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.13%)</title><rect x="206.4" y="371.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.13%)</title><rect x="206.4" y="355.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="209.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.13%)</title><rect x="206.4" y="339.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.4" y="350.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="207.7" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="210.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (716 samples, 18.95%)</title><rect x="208.0" y="387.0" width="223.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.0" y="398.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (716 samples, 18.95%)</title><rect x="208.0" y="371.0" width="223.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.0" y="382.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="208.0" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.0" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="208.0" y="339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.0" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="208.0" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (443 samples, 11.72%)</title><rect x="208.3" y="355.0" width="138.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.3" y="366.0">one/nio/http/Http..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.08%)</title><rect x="210.2" y="339.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.2" y="350.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.03%)</title><rect x="210.2" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.2" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="210.2" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.2" y="318.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="210.5" y="323.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="213.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title><rect x="210.5" y="307.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="213.5" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="210.5" y="291.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="213.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="210.5" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="210.5" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="213.5" y="270.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="210.8" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="213.8" y="286.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="210.8" y="259.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="213.8" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (1 samples, 0.03%)</title><rect x="211.1" y="339.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (433 samples, 11.46%)</title><rect x="211.4" y="339.0" width="135.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.4" y="350.0">one/nio/net/JavaS..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (433 samples, 11.46%)</title><rect x="211.4" y="323.0" width="135.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.4" y="334.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="213.9" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="213.9" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="214.2" y="307.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="214.2" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="214.2" y="275.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.2" y="286.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="214.8" y="307.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="217.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.05%)</title><rect x="215.1" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (414 samples, 10.96%)</title><rect x="215.8" y="307.0" width="129.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.8" y="318.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (414 samples, 10.96%)</title><rect x="215.8" y="291.0" width="129.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="218.8" y="302.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (414 samples, 10.96%)</title><rect x="215.8" y="275.0" width="129.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.8" y="286.0">sun/nio/ch/IOUti..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (414 samples, 10.96%)</title><rect x="215.8" y="259.0" width="129.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.8" y="270.0">sun/nio/ch/Socke..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (413 samples, 10.93%)</title><rect x="216.1" y="243.0" width="128.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.1" y="254.0">sun/nio/ch/FileD..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.11%)</title><rect x="220.1" y="227.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="223.1" y="238.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="221.4" y="227.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="224.4" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (395 samples, 10.45%)</title><rect x="221.7" y="227.0" width="123.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="224.7" y="238.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (3 samples, 0.08%)</title><rect x="345.0" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="348.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="345.7" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="348.7" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="345.7" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.7" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="345.7" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.7" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="345.7" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="348.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (1 samples, 0.03%)</title><rect x="346.0" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.0" y="318.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="346.0" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.0" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="346.0" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.0" y="286.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="346.0" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.0" y="270.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="346.0" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.0" y="254.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.03%)</title><rect x="346.3" y="307.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="349.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (20 samples, 0.53%)</title><rect x="346.6" y="355.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (15 samples, 0.40%)</title><rect x="346.6" y="339.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 0.24%)</title><rect x="348.5" y="323.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.5" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.16%)</title><rect x="349.4" y="307.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="352.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.11%)</title><rect x="351.3" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="351.9" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="354.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="351.9" y="307.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.9" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="352.2" y="291.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="355.2" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="352.5" y="339.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (16 samples, 0.42%)</title><rect x="352.9" y="355.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.32%)</title><rect x="354.1" y="339.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.13%)</title><rect x="354.1" y="323.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="357.1" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="355.4" y="307.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="358.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.19%)</title><rect x="355.7" y="323.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.19%)</title><rect x="355.7" y="307.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.7" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.19%)</title><rect x="355.7" y="291.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="358.7" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="357.2" y="275.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="360.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.08%)</title><rect x="357.8" y="355.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="360.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="357.8" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="357.8" y="323.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="358.2" y="307.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="361.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.03%)</title><rect x="358.8" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (1 samples, 0.03%)</title><rect x="359.1" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (1 samples, 0.03%)</title><rect x="359.1" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="362.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (225 samples, 5.95%)</title><rect x="359.4" y="355.0" width="70.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="362.4" y="366.0">one/nio/..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (155 samples, 4.10%)</title><rect x="360.0" y="339.0" width="48.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.0" y="350.0">java..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (153 samples, 4.05%)</title><rect x="360.7" y="323.0" width="47.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.7" y="334.0">java..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (153 samples, 4.05%)</title><rect x="360.7" y="307.0" width="47.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="363.7" y="318.0">java..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (148 samples, 3.92%)</title><rect x="362.2" y="291.0" width="46.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.2" y="302.0">sun/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="362.8" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="365.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (138 samples, 3.65%)</title><rect x="363.2" y="275.0" width="43.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.2" y="286.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (136 samples, 3.60%)</title><rect x="363.8" y="259.0" width="42.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.8" y="270.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (135 samples, 3.57%)</title><rect x="363.8" y="243.0" width="42.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="366.8" y="254.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (135 samples, 3.57%)</title><rect x="363.8" y="227.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.8" y="238.0">sun/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="365.3" y="211.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="368.3" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (127 samples, 3.36%)</title><rect x="366.3" y="211.0" width="39.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="369.3" y="222.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="369.1" y="195.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="372.1" y="206.0"></text>
</g>
<g>
<title>write (117 samples, 3.10%)</title><rect x="369.4" y="195.0" width="36.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="372.4" y="206.0">write</text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="405.9" y="243.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.9" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="405.9" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.9" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="405.9" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.9" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (5 samples, 0.13%)</title><rect x="406.2" y="275.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="409.2" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="407.2" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.2" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="407.2" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.2" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="407.2" y="227.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="407.2" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="407.5" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.5" y="270.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="407.5" y="243.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="410.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (2 samples, 0.05%)</title><rect x="407.8" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.8" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.03%)</title><rect x="408.1" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="411.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (67 samples, 1.77%)</title><rect x="408.4" y="339.0" width="21.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.4" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (64 samples, 1.69%)</title><rect x="409.4" y="323.0" width="20.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="412.4" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="409.4" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="412.4" y="318.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.03%)</title><rect x="409.7" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="412.7" y="318.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.05%)</title><rect x="410.0" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="413.0" y="318.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (45 samples, 1.19%)</title><rect x="410.6" y="307.0" width="14.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="413.6" y="318.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="410.9" y="291.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="413.9" y="302.0"></text>
</g>
<g>
<title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.05%)</title><rect x="411.6" y="291.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="414.6" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (3 samples, 0.08%)</title><rect x="412.2" y="291.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="415.2" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (3 samples, 0.08%)</title><rect x="412.2" y="275.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="415.2" y="286.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.05%)</title><rect x="412.5" y="259.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="415.5" y="270.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.05%)</title><rect x="413.1" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="416.1" y="302.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (10 samples, 0.26%)</title><rect x="413.7" y="291.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.7" y="302.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="413.7" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="416.7" y="286.0"></text>
</g>
<g>
<title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.03%)</title><rect x="414.1" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="417.1" y="286.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="414.4" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="417.4" y="286.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples, 0.11%)</title><rect x="414.7" y="275.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="417.7" y="286.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="415.0" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="418.0" y="270.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.03%)</title><rect x="415.3" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="418.3" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="415.3" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="418.3" y="254.0"></text>
</g>
<g>
<title>ThreadShadow::clear_pending_exception() (1 samples, 0.03%)</title><rect x="415.6" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="418.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="415.9" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="418.9" y="286.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (2 samples, 0.05%)</title><rect x="416.2" y="275.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="419.2" y="286.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.03%)</title><rect x="416.6" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="419.6" y="270.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (7 samples, 0.19%)</title><rect x="416.9" y="291.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="419.9" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.16%)</title><rect x="417.2" y="275.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="420.2" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.05%)</title><rect x="417.2" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="420.2" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.08%)</title><rect x="417.8" y="259.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="420.8" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.05%)</title><rect x="418.1" y="243.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="421.1" y="254.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="418.7" y="259.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="421.7" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="419.1" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.1" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="419.4" y="291.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="422.4" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="419.4" y="275.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="422.4" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="419.4" y="259.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="422.4" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="419.4" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="422.4" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="419.4" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="422.4" y="238.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.03%)</title><rect x="419.4" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="422.4" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="419.7" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="422.7" y="270.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="420.0" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="423.0" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.05%)</title><rect x="420.3" y="291.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="423.3" y="302.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="420.6" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="423.6" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (12 samples, 0.32%)</title><rect x="420.9" y="291.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="423.9" y="302.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (3 samples, 0.08%)</title><rect x="420.9" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="423.9" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (9 samples, 0.24%)</title><rect x="421.9" y="275.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="424.9" y="286.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="422.5" y="259.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="425.5" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.08%)</title><rect x="422.8" y="259.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="425.8" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="423.1" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="426.1" y="254.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="423.4" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.4" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="423.4" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="426.4" y="238.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="423.4" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="426.4" y="222.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.08%)</title><rect x="423.7" y="259.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="426.7" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="424.0" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="427.0" y="254.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (1 samples, 0.03%)</title><rect x="424.4" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="427.4" y="254.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (1 samples, 0.03%)</title><rect x="424.7" y="307.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="427.7" y="318.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (2 samples, 0.05%)</title><rect x="425.0" y="307.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="428.0" y="318.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="425.6" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="428.6" y="318.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="425.9" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="428.9" y="318.0"></text>
</g>
<g>
<title>call_stub (4 samples, 0.11%)</title><rect x="426.2" y="307.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="429.2" y="318.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="427.5" y="307.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="430.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.05%)</title><rect x="428.1" y="307.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (2 samples, 0.05%)</title><rect x="428.1" y="291.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.1" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (2 samples, 0.05%)</title><rect x="428.1" y="275.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.1" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="428.7" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="431.7" y="318.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="429.0" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="432.0" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (1 samples, 0.03%)</title><rect x="429.4" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="432.4" y="350.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.05%)</title><rect x="429.7" y="355.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.7" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.03%)</title><rect x="430.0" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="433.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="430.0" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.0" y="334.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.11%)</title><rect x="430.3" y="355.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.3" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (4 samples, 0.11%)</title><rect x="430.3" y="339.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="433.3" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (4 samples, 0.11%)</title><rect x="430.3" y="323.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.3" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (4 samples, 0.11%)</title><rect x="430.3" y="307.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/1660398125.run (1,592 samples, 42.13%)</title><rect x="431.5" y="451.0" width="497.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.5" y="462.0">ru/mail/polis/service/ServiceAsyncImpl$$Lambda$78/1660398125.run</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (1,591 samples, 42.10%)</title><rect x="431.9" y="435.0" width="496.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.9" y="446.0">ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.putValue (1,591 samples, 42.10%)</title><rect x="431.9" y="419.0" width="496.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="434.9" y="430.0">ru/mail/polis/service/ServiceAsyncImpl.putValue</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="433.4" y="403.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="436.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (197 samples, 5.21%)</title><rect x="434.0" y="403.0" width="61.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.0" y="414.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (4 samples, 0.11%)</title><rect x="435.3" y="387.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.11%)</title><rect x="435.3" y="371.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="438.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.11%)</title><rect x="435.3" y="355.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="438.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="436.2" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (183 samples, 4.84%)</title><rect x="436.5" y="387.0" width="57.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.5" y="398.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (10 samples, 0.26%)</title><rect x="436.5" y="371.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.16%)</title><rect x="437.8" y="355.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="440.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.08%)</title><rect x="437.8" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="438.7" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="438.7" y="323.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="441.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.08%)</title><rect x="438.7" y="307.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (173 samples, 4.58%)</title><rect x="439.7" y="371.0" width="54.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.7" y="382.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (172 samples, 4.55%)</title><rect x="440.0" y="355.0" width="53.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.0" y="366.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (172 samples, 4.55%)</title><rect x="440.0" y="339.0" width="53.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.0" y="350.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (172 samples, 4.55%)</title><rect x="440.0" y="323.0" width="53.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="443.0" y="334.0">one/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (172 samples, 4.55%)</title><rect x="440.0" y="307.0" width="53.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="443.0" y="318.0">sun/n..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="440.0" y="291.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="443.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="440.0" y="275.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="440.0" y="259.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (164 samples, 4.34%)</title><rect x="440.6" y="291.0" width="51.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="443.6" y="302.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (164 samples, 4.34%)</title><rect x="440.6" y="275.0" width="51.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.6" y="286.0">sun/n..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.11%)</title><rect x="440.6" y="259.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.6" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (4 samples, 0.11%)</title><rect x="440.6" y="243.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="443.6" y="254.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.11%)</title><rect x="440.6" y="227.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.11%)</title><rect x="440.6" y="211.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="443.6" y="222.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.11%)</title><rect x="440.6" y="195.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="443.6" y="206.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPointer (1 samples, 0.03%)</title><rect x="440.6" y="179.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="443.6" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.08%)</title><rect x="440.9" y="179.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="443.9" y="190.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.05%)</title><rect x="441.2" y="163.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.2" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (160 samples, 4.23%)</title><rect x="441.8" y="259.0" width="50.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.8" y="270.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (160 samples, 4.23%)</title><rect x="441.8" y="243.0" width="50.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.8" y="254.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (160 samples, 4.23%)</title><rect x="441.8" y="227.0" width="50.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.8" y="238.0">sun/n..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.05%)</title><rect x="443.7" y="211.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="446.7" y="222.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="444.0" y="195.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="447.0" y="206.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="444.3" y="211.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="447.3" y="222.0"></text>
</g>
<g>
<title>write (151 samples, 4.00%)</title><rect x="444.7" y="211.0" width="47.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="447.7" y="222.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (6 samples, 0.16%)</title><rect x="491.8" y="291.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="494.8" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.08%)</title><rect x="492.1" y="275.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="495.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.05%)</title><rect x="493.1" y="275.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="496.1" y="286.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.05%)</title><rect x="493.1" y="259.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="496.1" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="493.4" y="243.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="496.4" y="254.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="493.4" y="227.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="496.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.16%)</title><rect x="493.7" y="387.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.08%)</title><rect x="494.6" y="371.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="497.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.08%)</title><rect x="494.6" y="355.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="497.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="495.6" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="498.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="495.6" y="387.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="498.6" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="495.6" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="498.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="495.6" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="498.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="495.6" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.6" y="350.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="495.6" y="323.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="498.6" y="334.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="495.6" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="498.6" y="318.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="495.6" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="498.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (1,386 samples, 36.68%)</title><rect x="495.9" y="403.0" width="432.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="498.9" y="414.0">ru/mail/polis/dao/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,380 samples, 36.52%)</title><rect x="496.5" y="387.0" width="430.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="499.5" y="398.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,379 samples, 36.49%)</title><rect x="496.8" y="371.0" width="430.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.8" y="382.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,369 samples, 36.23%)</title><rect x="499.9" y="355.0" width="427.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="502.9" y="366.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="500.9" y="339.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="503.9" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="501.2" y="339.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="504.2" y="350.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.11%)</title><rect x="501.5" y="339.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="504.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1 samples, 0.03%)</title><rect x="502.7" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="505.7" y="350.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,359 samples, 35.96%)</title><rect x="503.0" y="339.0" width="424.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="506.0" y="350.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteO..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="503.7" y="323.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="506.7" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="504.0" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="507.0" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (2 samples, 0.05%)</title><rect x="504.3" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="507.3" y="334.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.05%)</title><rect x="504.9" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="507.9" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="505.5" y="323.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="508.5" y="334.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="505.9" y="323.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="508.9" y="334.0"></text>
</g>
<g>
<title>free_tiny (8 samples, 0.21%)</title><rect x="506.2" y="323.0" width="2.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="509.2" y="334.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="506.8" y="307.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="509.8" y="318.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.13%)</title><rect x="507.1" y="307.0" width="1.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="510.1" y="318.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="508.0" y="291.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="511.0" y="302.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="508.4" y="291.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="511.4" y="302.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (6 samples, 0.16%)</title><rect x="508.7" y="323.0" width="1.8" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="511.7" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="508.7" y="307.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="511.7" y="318.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="508.7" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="511.7" y="302.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.08%)</title><rect x="509.0" y="307.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="512.0" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="509.9" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="512.9" y="318.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="509.9" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="512.9" y="302.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="510.2" y="307.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="513.2" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.11%)</title><rect x="510.5" y="323.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="513.5" y="334.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="510.9" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="513.9" y="318.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="510.9" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="513.9" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="511.2" y="307.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.2" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="511.2" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="514.2" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="511.5" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="514.5" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="511.5" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="514.5" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="511.5" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="514.5" y="254.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="511.5" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="514.5" y="238.0"></text>
</g>
<g>
<title>operator new(unsigned long) (20 samples, 0.53%)</title><rect x="511.8" y="323.0" width="6.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="514.8" y="334.0"></text>
</g>
<g>
<title>malloc (18 samples, 0.48%)</title><rect x="512.4" y="307.0" width="5.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="515.4" y="318.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="512.4" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="515.4" y="302.0"></text>
</g>
<g>
<title>malloc_zone_malloc (15 samples, 0.40%)</title><rect x="512.7" y="291.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="515.7" y="302.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="512.7" y="275.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="515.7" y="286.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (14 samples, 0.37%)</title><rect x="513.0" y="275.0" width="4.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="516.0" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (14 samples, 0.37%)</title><rect x="513.0" y="259.0" width="4.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="516.0" y="270.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="514.6" y="243.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="517.6" y="254.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (8 samples, 0.21%)</title><rect x="514.9" y="243.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="517.9" y="254.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.03%)</title><rect x="517.4" y="291.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="520.4" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="517.7" y="291.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="520.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (1,306 samples, 34.56%)</title><rect x="518.0" y="323.0" width="407.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="521.0" y="334.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, ..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,306 samples, 34.56%)</title><rect x="518.0" y="307.0" width="407.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="521.0" y="318.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,304 samples, 34.51%)</title><rect x="518.0" y="291.0" width="407.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="521.0" y="302.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::..</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="518.0" y="275.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="521.0" y="286.0"></text>
</g>
<g>
<title>free (2 samples, 0.05%)</title><rect x="518.3" y="275.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="521.3" y="286.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="519.0" y="275.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="522.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.08%)</title><rect x="519.3" y="275.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="522.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,268 samples, 33.55%)</title><rect x="520.2" y="275.0" width="396.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="523.2" y="286.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="520.2" y="259.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="523.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (1,264 samples, 33.45%)</title><rect x="520.5" y="259.0" width="394.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="523.5" y="270.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.05%)</title><rect x="524.6" y="243.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="527.6" y="254.0"></text>
</g>
<g>
<title>pthread_cond_destroy (1 samples, 0.03%)</title><rect x="525.2" y="243.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="528.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (3 samples, 0.08%)</title><rect x="525.5" y="243.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="528.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (248 samples, 6.56%)</title><rect x="526.5" y="243.0" width="77.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="529.5" y="254.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (246 samples, 6.51%)</title><rect x="527.1" y="227.0" width="76.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="530.1" y="238.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (1 samples, 0.03%)</title><rect x="527.7" y="211.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="530.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (242 samples, 6.40%)</title><rect x="528.0" y="211.0" width="75.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="531.0" y="222.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="528.3" y="195.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="531.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (227 samples, 6.01%)</title><rect x="528.7" y="195.0" width="70.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="531.7" y="206.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.05%)</title><rect x="529.3" y="179.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="532.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (223 samples, 5.90%)</title><rect x="529.9" y="179.0" width="69.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="532.9" y="190.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.05%)</title><rect x="530.8" y="163.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="533.8" y="174.0"></text>
</g>
<g>
<title>write (218 samples, 5.77%)</title><rect x="531.5" y="163.0" width="68.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="534.5" y="174.0">write</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (7 samples, 0.19%)</title><rect x="599.5" y="195.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="602.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (6 samples, 0.16%)</title><rect x="601.7" y="195.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="604.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="601.7" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="604.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.13%)</title><rect x="602.0" y="179.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="605.0" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="602.7" y="163.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="605.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="603.3" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="606.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="603.6" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="606.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="603.9" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="606.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.08%)</title><rect x="604.2" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="607.2" y="254.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.08%)</title><rect x="604.2" y="227.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="607.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.03%)</title><rect x="605.2" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="608.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (98 samples, 2.59%)</title><rect x="605.5" y="243.0" width="30.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="608.5" y="254.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.03%)</title><rect x="607.3" y="227.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="610.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="607.7" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="610.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (90 samples, 2.38%)</title><rect x="608.0" y="227.0" width="28.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="611.0" y="238.0">ro..</text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.08%)</title><rect x="609.2" y="211.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="612.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (83 samples, 2.20%)</title><rect x="610.1" y="211.0" width="26.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="613.1" y="222.0">r..</text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (82 samples, 2.17%)</title><rect x="610.5" y="195.0" width="25.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="613.5" y="206.0">r..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="611.4" y="179.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="614.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (4 samples, 0.11%)</title><rect x="611.7" y="179.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="614.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="613.0" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.05%)</title><rect x="613.3" y="179.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="616.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (68 samples, 1.80%)</title><rect x="613.9" y="179.0" width="21.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.9" y="190.0">r..</text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="614.8" y="163.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="617.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (3 samples, 0.08%)</title><rect x="615.1" y="163.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="618.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="616.1" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="619.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="616.4" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="619.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.05%)</title><rect x="616.7" y="163.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="619.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (57 samples, 1.51%)</title><rect x="617.3" y="163.0" width="17.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="620.3" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="628.3" y="147.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="631.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.05%)</title><rect x="628.6" y="147.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="631.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.05%)</title><rect x="628.6" y="131.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="631.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.05%)</title><rect x="629.2" y="147.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="632.2" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="629.2" y="131.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="632.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="629.5" y="131.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="632.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (16 samples, 0.42%)</title><rect x="629.8" y="147.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="632.8" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.05%)</title><rect x="630.4" y="131.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="633.4" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.11%)</title><rect x="631.1" y="131.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="634.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.21%)</title><rect x="632.3" y="131.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.3" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (6 samples, 0.16%)</title><rect x="632.9" y="115.0" width="1.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="635.9" y="126.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="634.8" y="147.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="637.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.08%)</title><rect x="635.1" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="638.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (11 samples, 0.29%)</title><rect x="636.1" y="243.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="639.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="636.4" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="639.4" y="238.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="636.4" y="211.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="639.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (9 samples, 0.24%)</title><rect x="636.7" y="227.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.03%)</title><rect x="636.7" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.21%)</title><rect x="637.0" y="211.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="640.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.03%)</title><rect x="637.0" y="195.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.19%)</title><rect x="637.3" y="195.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="640.3" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="637.3" y="179.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="640.3" y="190.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="637.3" y="163.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="640.3" y="174.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="637.3" y="147.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="640.3" y="158.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="637.3" y="131.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="640.3" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="637.3" y="115.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="640.3" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="637.3" y="99.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="640.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.16%)</title><rect x="637.6" y="179.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="640.6" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="637.6" y="163.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="640.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.13%)</title><rect x="637.9" y="163.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="640.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.13%)</title><rect x="637.9" y="147.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="640.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="638.3" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="641.3" y="142.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="638.3" y="115.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="641.3" y="126.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="638.3" y="99.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="641.3" y="110.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.08%)</title><rect x="638.6" y="131.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="641.6" y="142.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="638.9" y="115.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="641.9" y="126.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="639.2" y="115.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="642.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (605 samples, 16.01%)</title><rect x="639.5" y="243.0" width="188.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="642.5" y="254.0">rocksdb::WriteThread::Aw..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (488 samples, 12.91%)</title><rect x="660.1" y="227.0" width="152.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="663.1" y="238.0">si_module_static_md..</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.03%)</title><rect x="812.5" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="815.5" y="238.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (1 samples, 0.03%)</title><rect x="812.5" y="211.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="815.5" y="222.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (49 samples, 1.30%)</title><rect x="812.8" y="227.0" width="15.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="815.8" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (46 samples, 1.22%)</title><rect x="812.8" y="211.0" width="14.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="815.8" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (3 samples, 0.08%)</title><rect x="827.2" y="211.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="830.2" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="827.8" y="195.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="830.8" y="206.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="827.8" y="179.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="830.8" y="190.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="828.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="831.1" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (1 samples, 0.03%)</title><rect x="828.1" y="211.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="831.1" y="222.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (1 samples, 0.03%)</title><rect x="828.1" y="195.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="831.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (265 samples, 7.01%)</title><rect x="828.4" y="243.0" width="82.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.4" y="254.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (265 samples, 7.01%)</title><rect x="828.4" y="227.0" width="82.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="831.4" y="238.0">rocksdb::..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="831.8" y="211.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="834.8" y="222.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (253 samples, 6.69%)</title><rect x="832.2" y="211.0" width="79.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="835.2" y="222.0">si_module..</text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.11%)</title><rect x="911.2" y="243.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.2" y="254.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="912.1" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="915.1" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="912.1" y="211.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="915.1" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="912.1" y="195.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="915.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.05%)</title><rect x="912.4" y="243.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="915.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (2 samples, 0.05%)</title><rect x="912.4" y="227.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (2 samples, 0.05%)</title><rect x="913.0" y="243.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.0" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.05%)</title><rect x="913.0" y="227.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="916.0" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.05%)</title><rect x="913.0" y="211.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="916.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (2 samples, 0.05%)</title><rect x="913.7" y="243.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.7" y="254.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="914.3" y="243.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="917.3" y="254.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (2 samples, 0.05%)</title><rect x="914.6" y="243.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.05%)</title><rect x="915.2" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.2" y="270.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.03%)</title><rect x="915.8" y="259.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="918.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.11%)</title><rect x="916.2" y="275.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="919.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.11%)</title><rect x="917.4" y="275.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.03%)</title><rect x="917.4" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="920.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="917.7" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="920.7" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="917.7" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.7" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::push_back(char) (1 samples, 0.03%)</title><rect x="918.0" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="921.0" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="918.3" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (15 samples, 0.40%)</title><rect x="918.7" y="275.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.7" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="918.7" y="259.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="921.7" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (9 samples, 0.24%)</title><rect x="919.0" y="259.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="922.0" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (9 samples, 0.24%)</title><rect x="919.0" y="243.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="922.0" y="254.0"></text>
</g>
<g>
<title>malloc (8 samples, 0.21%)</title><rect x="919.3" y="227.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="922.3" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (8 samples, 0.21%)</title><rect x="919.3" y="211.0" width="2.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="922.3" y="222.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.21%)</title><rect x="919.3" y="195.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="922.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (8 samples, 0.21%)</title><rect x="919.3" y="179.0" width="2.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="922.3" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.11%)</title><rect x="920.5" y="163.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="923.5" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (5 samples, 0.13%)</title><rect x="921.8" y="259.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="924.8" y="270.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="922.1" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="925.1" y="254.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (2 samples, 0.05%)</title><rect x="922.4" y="243.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="925.4" y="254.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="923.0" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.0" y="254.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="923.0" y="227.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="926.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.13%)</title><rect x="923.3" y="275.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.3" y="286.0"></text>
</g>
<g>
<title>free (2 samples, 0.05%)</title><rect x="923.3" y="259.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="926.3" y="270.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.05%)</title><rect x="924.0" y="259.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="927.0" y="270.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="924.3" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="927.3" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="924.6" y="259.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="927.6" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="924.9" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="927.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="925.2" y="291.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.08%)</title><rect x="925.8" y="323.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.05%)</title><rect x="926.8" y="323.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (4 samples, 0.11%)</title><rect x="927.4" y="387.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="930.4" y="398.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.05%)</title><rect x="928.0" y="371.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="931.0" y="382.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (827 samples, 21.88%)</title><rect x="928.6" y="499.0" width="258.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.6" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="930.8" y="483.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="933.8" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.08%)</title><rect x="931.1" y="483.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="934.1" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (3 samples, 0.08%)</title><rect x="931.1" y="467.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="934.1" y="478.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (561 samples, 14.85%)</title><rect x="932.1" y="483.0" width="175.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="935.1" y="494.0">one/nio/net/JavaSelecto..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (11 samples, 0.29%)</title><rect x="933.0" y="467.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="936.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="935.5" y="451.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="938.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="935.5" y="435.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="938.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (2 samples, 0.05%)</title><rect x="935.8" y="451.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="938.8" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.05%)</title><rect x="935.8" y="435.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.8" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.05%)</title><rect x="935.8" y="419.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="938.8" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="935.8" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="938.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.05%)</title><rect x="935.8" y="387.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="938.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (3 samples, 0.08%)</title><rect x="936.5" y="467.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (3 samples, 0.08%)</title><rect x="936.5" y="451.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (543 samples, 14.37%)</title><rect x="937.4" y="467.0" width="169.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="940.4" y="478.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (543 samples, 14.37%)</title><rect x="937.4" y="451.0" width="169.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="940.4" y="462.0">sun/nio/ch/SelectorImp..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (543 samples, 14.37%)</title><rect x="937.4" y="435.0" width="169.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="940.4" y="446.0">sun/nio/ch/KQueueSelec..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (497 samples, 13.15%)</title><rect x="938.0" y="419.0" width="155.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="941.0" y="430.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>JNI_OnLoad (1 samples, 0.03%)</title><rect x="949.3" y="403.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="952.3" y="414.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (3 samples, 0.08%)</title><rect x="949.6" y="403.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="952.6" y="414.0"></text>
</g>
<g>
<title>kevent (457 samples, 12.09%)</title><rect x="950.5" y="403.0" width="142.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="953.5" y="414.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (23 samples, 0.61%)</title><rect x="1093.2" y="419.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1096.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.21%)</title><rect x="1093.5" y="403.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1096.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.21%)</title><rect x="1093.5" y="387.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1096.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (2 samples, 0.05%)</title><rect x="1095.1" y="371.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1098.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="1095.7" y="371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1098.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (14 samples, 0.37%)</title><rect x="1096.0" y="403.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1099.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (7 samples, 0.19%)</title><rect x="1097.9" y="387.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1100.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.19%)</title><rect x="1097.9" y="371.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1100.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 0.13%)</title><rect x="1098.5" y="355.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1101.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.05%)</title><rect x="1098.8" y="339.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1101.8" y="350.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.05%)</title><rect x="1099.4" y="339.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1102.4" y="350.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="1100.1" y="387.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="1100.1" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1100.1" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1103.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (2 samples, 0.05%)</title><rect x="1100.4" y="419.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.03%)</title><rect x="1100.7" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1103.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (13 samples, 0.34%)</title><rect x="1101.0" y="419.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1104.0" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (13 samples, 0.34%)</title><rect x="1101.0" y="403.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1104.0" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (11 samples, 0.29%)</title><rect x="1101.6" y="387.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1104.6" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (11 samples, 0.29%)</title><rect x="1101.6" y="371.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1104.6" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (11 samples, 0.29%)</title><rect x="1101.6" y="355.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1104.6" y="366.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="1103.5" y="339.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1106.5" y="350.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.08%)</title><rect x="1103.8" y="339.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.8" y="350.0"></text>
</g>
<g>
<title>__block_literal_global (2 samples, 0.05%)</title><rect x="1104.1" y="323.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1107.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="1104.8" y="339.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1107.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (5 samples, 0.13%)</title><rect x="1105.1" y="419.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1108.1" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.08%)</title><rect x="1105.7" y="403.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1108.7" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.08%)</title><rect x="1105.7" y="387.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1108.7" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.08%)</title><rect x="1105.7" y="371.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.7" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.08%)</title><rect x="1105.7" y="355.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="1106.6" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1109.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="1106.9" y="467.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1109.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="1106.9" y="451.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1109.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="1106.9" y="435.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1109.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (251 samples, 6.64%)</title><rect x="1107.3" y="483.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1110.3" y="494.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (251 samples, 6.64%)</title><rect x="1107.3" y="467.0" width="78.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.3" y="478.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (150 samples, 3.97%)</title><rect x="1107.3" y="451.0" width="46.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1110.3" y="462.0">one/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (3 samples, 0.08%)</title><rect x="1108.2" y="435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.2" y="446.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.08%)</title><rect x="1109.1" y="435.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1112.1" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1110.1" y="435.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1113.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (111 samples, 2.94%)</title><rect x="1110.4" y="435.0" width="34.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1113.4" y="446.0">on..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (111 samples, 2.94%)</title><rect x="1110.4" y="419.0" width="34.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1113.4" y="430.0">on..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (107 samples, 2.83%)</title><rect x="1110.4" y="403.0" width="33.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1113.4" y="414.0">Re..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 0.21%)</title><rect x="1110.4" y="387.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="1111.6" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1114.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="1111.6" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1114.6" y="366.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1111.9" y="371.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1114.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="1112.2" y="371.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1112.2" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1115.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1112.2" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1115.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1112.2" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1115.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (99 samples, 2.62%)</title><rect x="1112.9" y="387.0" width="30.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1115.9" y="398.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 0.64%)</title><rect x="1113.2" y="371.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1116.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (24 samples, 0.64%)</title><rect x="1113.2" y="355.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1116.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.11%)</title><rect x="1114.1" y="339.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1117.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.11%)</title><rect x="1114.1" y="323.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.11%)</title><rect x="1114.1" y="307.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.11%)</title><rect x="1114.1" y="291.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.11%)</title><rect x="1114.1" y="275.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1117.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.11%)</title><rect x="1114.1" y="259.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.1" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (4 samples, 0.11%)</title><rect x="1114.1" y="243.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1117.1" y="254.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1114.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.1" y="238.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="1114.1" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.1" y="222.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="1114.1" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.1" y="206.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.05%)</title><rect x="1114.4" y="227.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.4" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="1114.4" y="211.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1117.4" y="222.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="1115.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.1" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 0.45%)</title><rect x="1115.4" y="339.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1118.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 0.45%)</title><rect x="1115.4" y="323.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1118.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 0.45%)</title><rect x="1115.4" y="307.0" width="5.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1118.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.45%)</title><rect x="1115.4" y="291.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1118.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.45%)</title><rect x="1115.4" y="275.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.4" y="286.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="1115.4" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1118.4" y="270.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="1115.7" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.7" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (15 samples, 0.40%)</title><rect x="1116.0" y="259.0" width="4.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1119.0" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.05%)</title><rect x="1116.3" y="243.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1116.6" y="227.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1119.6" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1116.6" y="211.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1119.6" y="222.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.03%)</title><rect x="1116.9" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1117.2" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (10 samples, 0.26%)</title><rect x="1117.6" y="243.0" width="3.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1120.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (70 samples, 1.85%)</title><rect x="1120.7" y="371.0" width="21.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.7" y="382.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (70 samples, 1.85%)</title><rect x="1120.7" y="355.0" width="21.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1123.7" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (70 samples, 1.85%)</title><rect x="1120.7" y="339.0" width="21.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.7" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.05%)</title><rect x="1121.3" y="323.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1124.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.05%)</title><rect x="1121.3" y="307.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.05%)</title><rect x="1121.3" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1124.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.05%)</title><rect x="1121.3" y="275.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1124.3" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="1121.9" y="323.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="1121.9" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.05%)</title><rect x="1121.9" y="291.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1124.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)</title><rect x="1121.9" y="275.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title><rect x="1121.9" y="259.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1124.9" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.05%)</title><rect x="1121.9" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.9" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1121.9" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.9" y="238.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="1122.2" y="227.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1125.2" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1122.2" y="211.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1122.2" y="195.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1125.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (64 samples, 1.69%)</title><rect x="1122.6" y="323.0" width="19.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1125.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (64 samples, 1.69%)</title><rect x="1122.6" y="307.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (64 samples, 1.69%)</title><rect x="1122.6" y="291.0" width="19.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (62 samples, 1.64%)</title><rect x="1123.2" y="275.0" width="19.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1126.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (62 samples, 1.64%)</title><rect x="1123.2" y="259.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1126.2" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1124.7" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="1125.1" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (54 samples, 1.43%)</title><rect x="1125.4" y="243.0" width="16.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1128.4" y="254.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="1125.7" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.7" y="238.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="1126.0" y="227.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.0" y="238.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="1126.0" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.0" y="222.0"></text>
</g>
<g>
<title>JavaThread::check_is_terminated(JavaThread::TerminatedTypes) const (1 samples, 0.03%)</title><rect x="1126.3" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.3" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.05%)</title><rect x="1126.6" y="227.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1126.6" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.6" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1126.6" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.6" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1126.6" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="1126.6" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1126.9" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="1127.2" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.2" y="238.0"></text>
</g>
<g>
<title>Thread::current() (2 samples, 0.05%)</title><rect x="1127.5" y="227.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.5" y="238.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="1127.5" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1127.9" y="211.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1130.9" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.11%)</title><rect x="1128.2" y="227.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.2" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_suspend_after_native() const (1 samples, 0.03%)</title><rect x="1128.2" y="211.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.2" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1128.5" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.5" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1128.5" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.5" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1128.5" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.5" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="1128.5" y="163.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.5" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::poll(Thread*) (1 samples, 0.03%)</title><rect x="1128.8" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.03%)</title><rect x="1128.8" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="206.0"></text>
</g>
<g>
<title>mask_bits_are_true(long, long) (1 samples, 0.03%)</title><rect x="1129.1" y="211.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1132.1" y="222.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.08%)</title><rect x="1129.4" y="227.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.4" y="238.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.05%)</title><rect x="1129.7" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.7" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (35 samples, 0.93%)</title><rect x="1130.4" y="227.0" width="10.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1133.4" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="1141.3" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1144.3" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1141.6" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1144.6" y="238.0"></text>
</g>
<g>
<title>pthread_dependency_wait_np.cold.3 (1 samples, 0.03%)</title><rect x="1141.9" y="227.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1144.9" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="1142.2" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (4 samples, 0.11%)</title><rect x="1142.5" y="371.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1145.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (4 samples, 0.11%)</title><rect x="1142.5" y="355.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1145.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.11%)</title><rect x="1143.8" y="403.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1146.8" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.11%)</title><rect x="1143.8" y="387.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1146.8" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="1143.8" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1146.8" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.05%)</title><rect x="1144.4" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1147.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.05%)</title><rect x="1144.4" y="355.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1147.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.05%)</title><rect x="1144.4" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1147.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (10 samples, 0.26%)</title><rect x="1145.0" y="435.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1148.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.05%)</title><rect x="1145.0" y="419.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1148.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1145.0" y="403.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.05%)</title><rect x="1145.0" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1148.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title><rect x="1145.0" y="371.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1148.0" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1145.3" y="355.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1148.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.11%)</title><rect x="1145.7" y="419.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1148.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.08%)</title><rect x="1146.0" y="403.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1149.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.11%)</title><rect x="1146.9" y="419.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1149.9" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.13%)</title><rect x="1148.2" y="435.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.2" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.13%)</title><rect x="1148.2" y="419.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1151.2" y="430.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.13%)</title><rect x="1148.2" y="403.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1151.2" y="414.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1149.4" y="387.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1152.4" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.11%)</title><rect x="1149.7" y="435.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1152.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.05%)</title><rect x="1150.3" y="419.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1153.3" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title><rect x="1150.3" y="403.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1153.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.26%)</title><rect x="1151.0" y="435.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1154.0" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1153.8" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1156.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1153.8" y="403.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.8" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1153.8" y="387.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1153.8" y="371.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1153.8" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1153.8" y="339.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.8" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1153.8" y="323.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.8" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.03%)</title><rect x="1153.8" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.8" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (101 samples, 2.67%)</title><rect x="1154.1" y="451.0" width="31.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1157.1" y="462.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (96 samples, 2.54%)</title><rect x="1155.7" y="435.0" width="29.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.7" y="446.0">on..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (96 samples, 2.54%)</title><rect x="1155.7" y="419.0" width="29.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1158.7" y="430.0">su..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.05%)</title><rect x="1155.7" y="403.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1158.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.05%)</title><rect x="1155.7" y="387.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1158.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title><rect x="1156.3" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title><rect x="1156.3" y="387.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1159.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title><rect x="1156.3" y="371.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1159.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (87 samples, 2.30%)</title><rect x="1156.9" y="403.0" width="27.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1159.9" y="414.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (87 samples, 2.30%)</title><rect x="1156.9" y="387.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1159.9" y="398.0">s..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (87 samples, 2.30%)</title><rect x="1156.9" y="371.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1159.9" y="382.0">s..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (87 samples, 2.30%)</title><rect x="1156.9" y="355.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1159.9" y="366.0">s..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (79 samples, 2.09%)</title><rect x="1159.4" y="339.0" width="24.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1162.4" y="350.0">s..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1159.7" y="323.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1162.7" y="334.0"></text>
</g>
<g>
<title>rpc_errlist (77 samples, 2.04%)</title><rect x="1160.0" y="323.0" width="24.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1163.0" y="334.0">r..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (5 samples, 0.13%)</title><rect x="1184.1" y="403.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (5 samples, 0.13%)</title><rect x="1184.1" y="387.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1185.3" y="371.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1188.3" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.11%)</title><rect x="1185.6" y="483.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.6" y="494.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.03%)</title><rect x="1185.6" y="467.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1188.6" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.05%)</title><rect x="1185.9" y="467.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1186.6" y="467.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="1186.6" y="451.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="1186.6" y="435.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>thread_start (10 samples, 0.26%)</title><rect x="1186.9" y="499.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1189.9" y="510.0"></text>
</g>
<g>
<title>_pthread_start (10 samples, 0.26%)</title><rect x="1186.9" y="483.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1189.9" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 0.26%)</title><rect x="1186.9" y="467.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1189.9" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (10 samples, 0.26%)</title><rect x="1186.9" y="451.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.9" y="462.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (1 samples, 0.03%)</title><rect x="1186.9" y="435.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (1 samples, 0.03%)</title><rect x="1186.9" y="419.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (1 samples, 0.03%)</title><rect x="1186.9" y="403.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1186.9" y="387.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1186.9" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.9" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="1186.9" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.9" y="366.0"></text>
</g>
<g>
<title>__gettimeofday (1 samples, 0.03%)</title><rect x="1186.9" y="339.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.9" y="350.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.05%)</title><rect x="1187.2" y="435.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.2" y="446.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1187.2" y="419.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.2" y="430.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.03%)</title><rect x="1187.2" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.2" y="414.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1187.2" y="387.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.2" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1187.2" y="371.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="382.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="1187.2" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.2" y="366.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="1187.5" y="419.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="430.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="1187.5" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1190.5" y="414.0"></text>
</g>
<g>
<title>JavaThread::run() (6 samples, 0.16%)</title><rect x="1187.8" y="435.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (6 samples, 0.16%)</title><rect x="1187.8" y="419.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="430.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (5 samples, 0.13%)</title><rect x="1187.8" y="403.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (5 samples, 0.13%)</title><rect x="1187.8" y="387.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 0.13%)</title><rect x="1187.8" y="371.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (5 samples, 0.13%)</title><rect x="1187.8" y="355.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="366.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.08%)</title><rect x="1187.8" y="339.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="350.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.03%)</title><rect x="1187.8" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.8" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.03%)</title><rect x="1187.8" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.03%)</title><rect x="1187.8" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.8" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1187.8" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.8" y="286.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1187.8" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="270.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (2 samples, 0.05%)</title><rect x="1188.1" y="323.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.03%)</title><rect x="1188.1" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="318.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.03%)</title><rect x="1188.1" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.03%)</title><rect x="1188.1" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.1" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.03%)</title><rect x="1188.4" y="307.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.4" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1188.4" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.4" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.03%)</title><rect x="1188.4" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="286.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.03%)</title><rect x="1188.4" y="259.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="270.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.03%)</title><rect x="1188.4" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.4" y="254.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.03%)</title><rect x="1188.8" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="350.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.03%)</title><rect x="1188.8" y="323.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (1 samples, 0.03%)</title><rect x="1188.8" y="307.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.8" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.03%)</title><rect x="1188.8" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="302.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.03%)</title><rect x="1188.8" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="286.0"></text>
</g>
<g>
<title>AddNode::hash() const (1 samples, 0.03%)</title><rect x="1188.8" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1189.1" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1189.1" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1189.1" y="307.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1189.1" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1189.1" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1189.1" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1189.1" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1189.1" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1189.1" y="211.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1189.1" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1189.1" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1189.1" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1189.1" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1189.1" y="131.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1189.1" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.1" y="126.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1189.1" y="99.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.1" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1189.1" y="83.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.1" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1189.1" y="67.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.1" y="78.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="1189.4" y="403.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.4" y="414.0"></text>
</g>
<g>
<title>load_agent(AttachOperation*, outputStream*) (1 samples, 0.03%)</title><rect x="1189.4" y="387.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.4" y="398.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(char const*, char const*, char const*, outputStream*) (1 samples, 0.03%)</title><rect x="1189.4" y="371.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.4" y="382.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.03%)</title><rect x="1189.4" y="355.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.4" y="366.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.03%)</title><rect x="1189.4" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="350.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.03%)</title><rect x="1189.4" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.4" y="334.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::flush() (1 samples, 0.03%)</title><rect x="1189.4" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_filebuf&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sync() (1 samples, 0.03%)</title><rect x="1189.4" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="302.0"></text>
</g>
<g>
<title>fflush (1 samples, 0.03%)</title><rect x="1189.4" y="275.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.4" y="286.0"></text>
</g>
<g>
<title>__sflush (1 samples, 0.03%)</title><rect x="1189.4" y="259.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1192.4" y="270.0"></text>
</g>
<g>
<title>__write_nocancel (1 samples, 0.03%)</title><rect x="1189.4" y="243.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1192.4" y="254.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.03%)</title><rect x="1189.7" y="435.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.7" y="446.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.03%)</title><rect x="1189.7" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.7" y="430.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.03%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.03%)</title><rect x="1189.7" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.7" y="398.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.03%)</title><rect x="1189.7" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.7" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.03%)</title><rect x="1189.7" y="355.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.7" y="366.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.03%)</title><rect x="1189.7" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.7" y="350.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.03%)</title><rect x="1189.7" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.7" y="334.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.03%)</title><rect x="1189.7" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.7" y="318.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.03%)</title><rect x="1189.7" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.7" y="302.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="1189.7" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.7" y="286.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="1189.7" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.7" y="270.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf(char*, unsigned long, char const*, __va_list_tag*, bool, unsigned long&amp;) (1 samples, 0.03%)</title><rect x="1189.7" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.7" y="254.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.03%)</title><rect x="1189.7" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.7" y="238.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.03%)</title><rect x="1189.7" y="211.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1192.7" y="222.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.03%)</title><rect x="1189.7" y="195.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1192.7" y="206.0"></text>
</g>
</g>
</svg>
