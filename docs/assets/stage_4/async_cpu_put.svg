<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (3,420 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>[Java: C2 CompilerThread0 tid=21763] (1 samples, 0.03%)</title><rect x="10.0" y="515.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="10.0" y="499.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="10.0" y="483.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="467.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="10.0" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.03%)</title><rect x="10.0" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.03%)</title><rect x="10.0" y="419.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.03%)</title><rect x="10.0" y="403.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.03%)</title><rect x="10.0" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.03%)</title><rect x="10.0" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (1 samples, 0.03%)</title><rect x="10.0" y="355.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="10.0" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="10.0" y="307.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="10.0" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="10.0" y="259.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="10.0" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="10.0" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="10.0" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="10.0" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="10.0" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="10.0" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="10.0" y="147.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="10.0" y="131.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="10.0" y="115.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="10.0" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="10.0" y="83.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="10.0" y="67.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.03%)</title><rect x="10.0" y="51.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.03%)</title><rect x="10.0" y="35.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[Java: G1 Young RemSet Sampling tid=13059] (2 samples, 0.06%)</title><rect x="10.3" y="515.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.3" y="526.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.06%)</title><rect x="10.3" y="499.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.3" y="510.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.06%)</title><rect x="10.3" y="483.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="13.3" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.06%)</title><rect x="10.3" y="467.0" width="0.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.3" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.06%)</title><rect x="10.3" y="451.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.3" y="462.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.06%)</title><rect x="10.3" y="435.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.3" y="446.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.06%)</title><rect x="10.3" y="419.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.3" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.06%)</title><rect x="10.3" y="403.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.3" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.06%)</title><rect x="10.3" y="387.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.3" y="398.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.06%)</title><rect x="10.3" y="371.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.3" y="382.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="10.7" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="366.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.03%)</title><rect x="10.7" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.7" y="350.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (1 samples, 0.03%)</title><rect x="10.7" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="334.0"></text>
</g>
<g>
<title>[Java: GC Thread#4 tid=83971] (1 samples, 0.03%)</title><rect x="11.0" y="515.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="14.0" y="526.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="11.0" y="499.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="14.0" y="510.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="11.0" y="483.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="14.0" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="11.0" y="467.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="14.0" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="11.0" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.0" y="462.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.03%)</title><rect x="11.0" y="435.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.0" y="446.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="11.0" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="430.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="11.0" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.0" y="414.0"></text>
</g>
<g>
<title>[Java: GC Thread#5 tid=49411] (1 samples, 0.03%)</title><rect x="11.4" y="515.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="14.4" y="526.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="11.4" y="499.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="14.4" y="510.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="11.4" y="483.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="14.4" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="11.4" y="467.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="14.4" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="11.4" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.4" y="462.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.03%)</title><rect x="11.4" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.4" y="446.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="11.4" y="419.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>OSXSemaphore::wait() (1 samples, 0.03%)</title><rect x="11.4" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>[Java: GC Thread#6 tid=83203] (1 samples, 0.03%)</title><rect x="11.7" y="515.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="14.7" y="526.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="11.7" y="499.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="14.7" y="510.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="11.7" y="483.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="14.7" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="11.7" y="467.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="14.7" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="11.7" y="451.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.7" y="462.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.03%)</title><rect x="11.7" y="435.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.7" y="446.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.03%)</title><rect x="11.7" y="419.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.7" y="430.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.03%)</title><rect x="11.7" y="403.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="14.7" y="414.0"></text>
</g>
<g>
<title>[Java: VM Periodic Task Thread tid=41987] (1 samples, 0.03%)</title><rect x="12.1" y="515.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="15.1" y="526.0"></text>
</g>
<g>
<title>thread_start (1 samples, 0.03%)</title><rect x="12.1" y="499.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="15.1" y="510.0"></text>
</g>
<g>
<title>_pthread_start (1 samples, 0.03%)</title><rect x="12.1" y="483.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="15.1" y="494.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="12.1" y="467.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.1" y="478.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="12.1" y="451.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.1" y="462.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.03%)</title><rect x="12.1" y="435.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.1" y="446.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="12.1" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.1" y="430.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="12.1" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="15.1" y="414.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="12.1" y="387.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.1" y="398.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.03%)</title><rect x="12.1" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.1" y="382.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="12.1" y="355.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="15.1" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=29191] (16 samples, 0.47%)</title><rect x="12.4" y="515.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="15.4" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (16 samples, 0.47%)</title><rect x="12.4" y="499.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (10 samples, 0.29%)</title><rect x="12.4" y="483.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (10 samples, 0.29%)</title><rect x="12.4" y="467.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="15.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (10 samples, 0.29%)</title><rect x="12.4" y="451.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (10 samples, 0.29%)</title><rect x="12.4" y="435.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (10 samples, 0.29%)</title><rect x="12.4" y="419.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.4" y="430.0"></text>
</g>
<g>
<title>kevent (9 samples, 0.26%)</title><rect x="12.8" y="403.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="15.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (6 samples, 0.18%)</title><rect x="15.9" y="483.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (6 samples, 0.18%)</title><rect x="15.9" y="467.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.18%)</title><rect x="15.9" y="451.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="15.9" y="435.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.18%)</title><rect x="15.9" y="419.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.9" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6 samples, 0.18%)</title><rect x="15.9" y="403.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="15.9" y="387.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (6 samples, 0.18%)</title><rect x="15.9" y="371.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.18%)</title><rect x="15.9" y="355.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.18%)</title><rect x="15.9" y="339.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="15.9" y="323.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="15.9" y="307.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="15.9" y="291.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="15.9" y="275.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="16.2" y="259.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.2" y="270.0"></text>
</g>
<g>
<title>HandleMark::push() (1 samples, 0.03%)</title><rect x="16.2" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.2" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="16.6" y="243.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="19.6" y="254.0"></text>
</g>
<g>
<title>Thread::current_or_null() (1 samples, 0.03%)</title><rect x="16.6" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="16.9" y="227.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="19.9" y="238.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=40455] (62 samples, 1.81%)</title><rect x="17.9" y="515.0" width="21.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="20.9" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (62 samples, 1.81%)</title><rect x="17.9" y="499.0" width="21.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.9" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (40 samples, 1.17%)</title><rect x="18.3" y="483.0" width="13.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (38 samples, 1.11%)</title><rect x="18.6" y="467.0" width="13.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (38 samples, 1.11%)</title><rect x="18.6" y="451.0" width="13.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (38 samples, 1.11%)</title><rect x="18.6" y="435.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (35 samples, 1.02%)</title><rect x="18.6" y="419.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="430.0"></text>
</g>
<g>
<title>kevent (33 samples, 0.96%)</title><rect x="19.3" y="403.0" width="11.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="22.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="30.7" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="30.7" y="403.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="30.7" y="387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="30.7" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="30.7" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="31.0" y="419.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.0" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="31.0" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (1 samples, 0.03%)</title><rect x="31.4" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.4" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (1 samples, 0.03%)</title><rect x="31.4" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.4" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="31.4" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.4" y="398.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="31.4" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="31.4" y="355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="31.7" y="467.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="34.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="31.7" y="451.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="31.7" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.7" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="31.7" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (21 samples, 0.61%)</title><rect x="32.1" y="483.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.1" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (20 samples, 0.58%)</title><rect x="32.1" y="467.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.1" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.35%)</title><rect x="32.1" y="451.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.1" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="32.4" y="435.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="35.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="32.8" y="435.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.18%)</title><rect x="32.8" y="419.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.8" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="32.8" y="403.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="32.8" y="387.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.12%)</title><rect x="33.1" y="387.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="33.1" y="371.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="33.1" y="355.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="33.1" y="339.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="33.1" y="323.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.06%)</title><rect x="33.5" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.06%)</title><rect x="33.5" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="36.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.06%)</title><rect x="33.5" y="275.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="36.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.06%)</title><rect x="33.5" y="259.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.06%)</title><rect x="33.5" y="243.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="36.5" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="33.5" y="227.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="36.5" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="33.8" y="211.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="36.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="34.2" y="339.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="34.2" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="34.2" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="34.2" y="291.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.2" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="34.2" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.2" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="34.2" y="259.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="37.2" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="34.2" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="37.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="34.5" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="34.5" y="387.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="37.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="34.5" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="34.5" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="37.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="34.5" y="339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="34.8" y="435.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.8" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="34.8" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.8" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="34.8" y="403.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="37.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="35.2" y="435.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="35.5" y="419.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (8 samples, 0.23%)</title><rect x="36.2" y="451.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (8 samples, 0.23%)</title><rect x="36.2" y="435.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (8 samples, 0.23%)</title><rect x="36.2" y="419.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.23%)</title><rect x="36.2" y="403.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.23%)</title><rect x="36.2" y="387.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="39.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.18%)</title><rect x="36.2" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="39.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (6 samples, 0.18%)</title><rect x="36.2" y="355.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="39.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (6 samples, 0.18%)</title><rect x="36.2" y="339.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.2" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (6 samples, 0.18%)</title><rect x="36.2" y="323.0" width="2.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="39.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="38.3" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="38.3" y="355.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.3" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="38.3" y="339.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="41.3" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="38.6" y="339.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="41.6" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="39.0" y="467.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="42.0" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="39.0" y="451.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="42.0" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #0 tid=43783] (26 samples, 0.76%)</title><rect x="39.3" y="515.0" width="9.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="42.3" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (26 samples, 0.76%)</title><rect x="39.3" y="499.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.3" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (14 samples, 0.41%)</title><rect x="39.3" y="483.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="42.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (14 samples, 0.41%)</title><rect x="39.3" y="467.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="42.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (14 samples, 0.41%)</title><rect x="39.3" y="451.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="42.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (14 samples, 0.41%)</title><rect x="39.3" y="435.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (13 samples, 0.38%)</title><rect x="39.7" y="419.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.7" y="430.0"></text>
</g>
<g>
<title>kevent (12 samples, 0.35%)</title><rect x="40.0" y="403.0" width="4.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="43.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (12 samples, 0.35%)</title><rect x="44.2" y="483.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (12 samples, 0.35%)</title><rect x="44.2" y="467.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="47.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.35%)</title><rect x="44.2" y="451.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.2" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="44.2" y="435.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="47.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.26%)</title><rect x="44.5" y="435.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.26%)</title><rect x="44.5" y="419.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.5" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.26%)</title><rect x="44.5" y="403.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.5" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.26%)</title><rect x="44.5" y="387.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.5" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (8 samples, 0.23%)</title><rect x="44.5" y="371.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (8 samples, 0.23%)</title><rect x="44.5" y="355.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (8 samples, 0.23%)</title><rect x="44.5" y="339.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.23%)</title><rect x="44.5" y="323.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.23%)</title><rect x="44.5" y="307.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.23%)</title><rect x="44.5" y="291.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.23%)</title><rect x="44.5" y="275.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.18%)</title><rect x="45.2" y="259.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="45.2" y="243.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="48.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (6 samples, 0.18%)</title><rect x="45.2" y="227.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="48.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="47.3" y="371.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.3" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="47.3" y="355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.3" y="366.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="47.3" y="339.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="50.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="47.6" y="435.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.6" y="446.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.03%)</title><rect x="47.6" y="419.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="50.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="48.0" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="48.0" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.0" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="48.0" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.0" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="48.0" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.0" y="382.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=25347] (70 samples, 2.05%)</title><rect x="48.3" y="515.0" width="24.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="51.3" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (70 samples, 2.05%)</title><rect x="48.3" y="499.0" width="24.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.3" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (45 samples, 1.32%)</title><rect x="48.3" y="483.0" width="15.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.3" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="48.6" y="467.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.6" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="49.0" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="52.0" y="478.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="49.0" y="451.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="52.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (42 samples, 1.23%)</title><rect x="49.3" y="467.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="52.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (42 samples, 1.23%)</title><rect x="49.3" y="451.0" width="14.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (42 samples, 1.23%)</title><rect x="49.3" y="435.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (41 samples, 1.20%)</title><rect x="49.3" y="419.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="52.3" y="430.0"></text>
</g>
<g>
<title>kevent (40 samples, 1.17%)</title><rect x="49.7" y="403.0" width="13.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="52.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="63.5" y="419.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.5" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (25 samples, 0.73%)</title><rect x="63.8" y="483.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="66.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (25 samples, 0.73%)</title><rect x="63.8" y="467.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (11 samples, 0.32%)</title><rect x="64.2" y="451.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.2" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="64.5" y="435.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="67.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7 samples, 0.20%)</title><rect x="64.9" y="435.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.20%)</title><rect x="64.9" y="419.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.9" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.20%)</title><rect x="64.9" y="403.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="64.9" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="65.2" y="387.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="65.5" y="371.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="65.5" y="355.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="65.5" y="339.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="65.5" y="323.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="65.5" y="307.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="68.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="65.5" y="291.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.5" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="65.5" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.5" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="65.5" y="259.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="68.5" y="270.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="65.5" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="68.5" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="65.5" y="227.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="68.5" y="238.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="65.5" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="68.5" y="222.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="65.9" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="68.9" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="65.9" y="227.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="68.9" y="238.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="66.2" y="243.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="69.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.06%)</title><rect x="66.6" y="371.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="69.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="66.6" y="355.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="66.6" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="66.6" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="69.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="66.6" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="66.6" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="66.6" y="275.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="66.6" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.6" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="66.6" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="69.6" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="66.6" y="227.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="69.6" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="66.6" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="69.6" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="66.6" y="195.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="69.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="66.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="69.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="66.9" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="66.9" y="291.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="66.9" y="275.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="66.9" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="69.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="66.9" y="243.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="69.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="66.9" y="227.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="69.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="67.3" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="67.3" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.3" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="67.3" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.3" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="67.3" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.3" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="67.3" y="371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.3" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="67.6" y="435.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="70.6" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 0.38%)</title><rect x="68.0" y="451.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="71.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (13 samples, 0.38%)</title><rect x="68.0" y="435.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (13 samples, 0.38%)</title><rect x="68.0" y="419.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.38%)</title><rect x="68.0" y="403.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="71.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.38%)</title><rect x="68.0" y="387.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.0" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.06%)</title><rect x="68.0" y="371.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.0" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="68.0" y="355.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.0" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="68.3" y="339.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.32%)</title><rect x="68.7" y="371.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (10 samples, 0.29%)</title><rect x="69.0" y="355.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="72.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (10 samples, 0.29%)</title><rect x="69.0" y="339.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="72.0" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (10 samples, 0.29%)</title><rect x="69.0" y="323.0" width="3.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="72.0" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=44035] (22 samples, 0.64%)</title><rect x="72.5" y="515.0" width="7.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="75.5" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (22 samples, 0.64%)</title><rect x="72.5" y="499.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (13 samples, 0.38%)</title><rect x="72.5" y="483.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.5" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="72.5" y="467.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (12 samples, 0.35%)</title><rect x="72.8" y="467.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (12 samples, 0.35%)</title><rect x="72.8" y="451.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="75.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (12 samples, 0.35%)</title><rect x="72.8" y="435.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (12 samples, 0.35%)</title><rect x="72.8" y="419.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.8" y="430.0"></text>
</g>
<g>
<title>kevent (11 samples, 0.32%)</title><rect x="73.1" y="403.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="76.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (9 samples, 0.26%)</title><rect x="76.9" y="483.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8 samples, 0.23%)</title><rect x="76.9" y="467.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="79.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.18%)</title><rect x="76.9" y="451.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.15%)</title><rect x="76.9" y="435.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.15%)</title><rect x="76.9" y="419.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.9" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="76.9" y="403.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.15%)</title><rect x="76.9" y="387.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (5 samples, 0.15%)</title><rect x="76.9" y="371.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="79.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="76.9" y="355.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.15%)</title><rect x="76.9" y="339.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="76.9" y="323.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="76.9" y="307.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="76.9" y="291.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="79.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="76.9" y="275.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="76.9" y="259.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="76.9" y="243.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="79.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="76.9" y="227.0" width="1.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="79.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.03%)</title><rect x="78.7" y="435.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="81.7" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="78.7" y="419.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="81.7" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="78.7" y="403.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="81.7" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="78.7" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="81.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="78.7" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="81.7" y="382.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="78.7" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="81.7" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="78.7" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="81.7" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="78.7" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="81.7" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="78.7" y="307.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="81.7" y="318.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="78.7" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="81.7" y="302.0"></text>
</g>
<g>
<title>G1ContiguousSpace::used() const (1 samples, 0.03%)</title><rect x="78.7" y="275.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="81.7" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="79.0" y="451.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="79.0" y="435.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="79.0" y="419.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="79.0" y="403.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="79.0" y="387.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="79.0" y="371.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="79.0" y="355.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="79.0" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.0" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="79.0" y="323.0" width="0.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="82.0" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="79.7" y="467.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="82.7" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="79.7" y="451.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="82.7" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=25859] (65 samples, 1.90%)</title><rect x="80.0" y="515.0" width="22.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="83.0" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (65 samples, 1.90%)</title><rect x="80.0" y="499.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.0" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (47 samples, 1.37%)</title><rect x="80.0" y="483.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.0" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="80.0" y="467.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="80.4" y="451.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="83.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="80.4" y="435.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.4" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="80.4" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="83.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="80.4" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="80.4" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="83.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (45 samples, 1.32%)</title><rect x="80.7" y="467.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (45 samples, 1.32%)</title><rect x="80.7" y="451.0" width="15.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (45 samples, 1.32%)</title><rect x="80.7" y="435.0" width="15.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (42 samples, 1.23%)</title><rect x="80.7" y="419.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.7" y="430.0"></text>
</g>
<g>
<title>kevent (40 samples, 1.17%)</title><rect x="81.4" y="403.0" width="13.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="84.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="95.2" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="95.2" y="403.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="95.2" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="95.2" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="95.2" y="355.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="95.6" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="95.6" y="371.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="98.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="95.6" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.6" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="95.9" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="98.9" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="95.9" y="403.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="95.9" y="387.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18 samples, 0.53%)</title><rect x="96.3" y="483.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (17 samples, 0.50%)</title><rect x="96.6" y="467.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.35%)</title><rect x="96.6" y="451.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10 samples, 0.29%)</title><rect x="96.6" y="435.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.29%)</title><rect x="96.6" y="419.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="99.6" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.26%)</title><rect x="96.6" y="403.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.26%)</title><rect x="96.6" y="387.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.20%)</title><rect x="96.6" y="371.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.20%)</title><rect x="96.6" y="355.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="96.6" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="96.6" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="96.6" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="96.6" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="99.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="96.9" y="339.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="96.9" y="323.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.09%)</title><rect x="97.3" y="307.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.09%)</title><rect x="97.3" y="291.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.09%)</title><rect x="97.3" y="275.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="97.3" y="259.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.3" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="97.3" y="243.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="100.3" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="97.6" y="227.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="100.6" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="97.6" y="211.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="100.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="98.3" y="339.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="101.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="98.3" y="323.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="98.3" y="307.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="98.3" y="291.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="98.7" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="98.7" y="259.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="101.7" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="98.7" y="243.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="101.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (1 samples, 0.03%)</title><rect x="99.0" y="371.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="99.0" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="99.0" y="339.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="99.0" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="99.0" y="307.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="102.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="99.0" y="291.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="102.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="99.0" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="99.0" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="99.0" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="99.0" y="227.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="102.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="99.0" y="211.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="102.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="99.0" y="195.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="102.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="99.4" y="371.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="99.4" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.03%)</title><rect x="99.7" y="403.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="99.7" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="99.7" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="99.7" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="99.7" y="339.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="100.1" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.1" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="100.1" y="419.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (5 samples, 0.15%)</title><rect x="100.7" y="451.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (5 samples, 0.15%)</title><rect x="100.7" y="435.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.15%)</title><rect x="100.7" y="419.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="100.7" y="403.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (5 samples, 0.15%)</title><rect x="100.7" y="387.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (5 samples, 0.15%)</title><rect x="100.7" y="371.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.15%)</title><rect x="100.7" y="355.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.15%)</title><rect x="100.7" y="339.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.7" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.15%)</title><rect x="100.7" y="323.0" width="1.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="103.7" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=36355] (18 samples, 0.53%)</title><rect x="102.5" y="515.0" width="6.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="105.5" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (18 samples, 0.53%)</title><rect x="102.5" y="499.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="105.5" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (14 samples, 0.41%)</title><rect x="102.5" y="483.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (14 samples, 0.41%)</title><rect x="102.5" y="467.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (14 samples, 0.41%)</title><rect x="102.5" y="451.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (14 samples, 0.41%)</title><rect x="102.5" y="435.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (11 samples, 0.32%)</title><rect x="102.5" y="419.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="105.5" y="430.0"></text>
</g>
<g>
<title>kevent (11 samples, 0.32%)</title><rect x="102.5" y="403.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="105.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="106.3" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="106.3" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="106.3" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="106.3" y="371.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="106.3" y="355.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="106.6" y="419.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="109.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="107.0" y="419.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="107.0" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="107.0" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4 samples, 0.12%)</title><rect x="107.3" y="483.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4 samples, 0.12%)</title><rect x="107.3" y="467.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.06%)</title><rect x="107.3" y="451.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1 samples, 0.03%)</title><rect x="107.3" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="110.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.03%)</title><rect x="107.3" y="419.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.3" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="107.3" y="403.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.3" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (1 samples, 0.03%)</title><rect x="107.3" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (1 samples, 0.03%)</title><rect x="107.3" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="107.3" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.03%)</title><rect x="107.3" y="339.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="107.3" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="107.3" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="107.3" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="107.3" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.3" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="107.3" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="110.3" y="270.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="107.3" y="243.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="110.3" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="107.6" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.6" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="107.6" y="419.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="110.6" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="107.6" y="403.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.6" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="108.0" y="451.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="111.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="108.0" y="435.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="108.0" y="419.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="108.0" y="403.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="111.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="108.0" y="387.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="108.0" y="371.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="111.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="108.0" y="355.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="108.0" y="339.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="111.0" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="108.0" y="323.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="111.0" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=44547] (26 samples, 0.76%)</title><rect x="108.7" y="515.0" width="8.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="111.7" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (26 samples, 0.76%)</title><rect x="108.7" y="499.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (12 samples, 0.35%)</title><rect x="108.7" y="483.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (12 samples, 0.35%)</title><rect x="108.7" y="467.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (12 samples, 0.35%)</title><rect x="108.7" y="451.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (12 samples, 0.35%)</title><rect x="108.7" y="435.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="111.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (12 samples, 0.35%)</title><rect x="108.7" y="419.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.7" y="430.0"></text>
</g>
<g>
<title>kevent (12 samples, 0.35%)</title><rect x="108.7" y="403.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="111.7" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (14 samples, 0.41%)</title><rect x="112.8" y="483.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (14 samples, 0.41%)</title><rect x="112.8" y="467.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.8" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12 samples, 0.35%)</title><rect x="112.8" y="451.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.8" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 0.23%)</title><rect x="112.8" y="435.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 0.23%)</title><rect x="112.8" y="419.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.8" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (8 samples, 0.23%)</title><rect x="112.8" y="403.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="112.8" y="387.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="115.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="112.8" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.8" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="112.8" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (7 samples, 0.20%)</title><rect x="113.2" y="387.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (7 samples, 0.20%)</title><rect x="113.2" y="371.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.20%)</title><rect x="113.2" y="355.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="116.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.20%)</title><rect x="113.2" y="339.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="113.2" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="116.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="113.2" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="113.2" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="113.2" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="113.5" y="323.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="113.5" y="307.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="113.5" y="291.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="116.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="113.5" y="275.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.18%)</title><rect x="113.5" y="259.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="116.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="113.5" y="243.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="116.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="113.5" y="227.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="116.5" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="115.2" y="243.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="118.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="115.6" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="115.6" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="115.9" y="435.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.9" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="116.6" y="419.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="117.0" y="451.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="117.0" y="435.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="117.0" y="419.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="117.0" y="403.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="117.0" y="387.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="120.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="117.0" y="371.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="117.0" y="355.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="120.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="117.0" y="339.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="120.0" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="117.0" y="323.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="120.0" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=35587] (37 samples, 1.08%)</title><rect x="117.6" y="515.0" width="12.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="120.6" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (37 samples, 1.08%)</title><rect x="117.6" y="499.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (27 samples, 0.79%)</title><rect x="117.6" y="483.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (27 samples, 0.79%)</title><rect x="117.6" y="467.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (27 samples, 0.79%)</title><rect x="117.6" y="451.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (27 samples, 0.79%)</title><rect x="117.6" y="435.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="120.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (26 samples, 0.76%)</title><rect x="117.6" y="419.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.6" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="117.6" y="403.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="120.6" y="414.0"></text>
</g>
<g>
<title>kevent (25 samples, 0.73%)</title><rect x="118.0" y="403.0" width="8.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="121.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="126.6" y="419.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.6" y="430.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="126.6" y="403.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="129.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1 samples, 0.03%)</title><rect x="126.6" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.6" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (10 samples, 0.29%)</title><rect x="127.0" y="483.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.0" y="494.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="127.0" y="467.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="130.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (9 samples, 0.26%)</title><rect x="127.3" y="467.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.3" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.15%)</title><rect x="127.3" y="451.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.3" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (4 samples, 0.12%)</title><rect x="127.3" y="435.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.12%)</title><rect x="127.3" y="419.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.3" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (4 samples, 0.12%)</title><rect x="127.3" y="403.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="127.3" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="130.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="127.3" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="127.3" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="127.3" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (3 samples, 0.09%)</title><rect x="127.7" y="387.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="130.7" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (3 samples, 0.09%)</title><rect x="127.7" y="371.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="130.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="127.7" y="355.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="127.7" y="339.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="127.7" y="323.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="130.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="127.7" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="130.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="127.7" y="291.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="127.7" y="275.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.7" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="127.7" y="259.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.7" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="127.7" y="243.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="130.7" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="127.7" y="227.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="130.7" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="127.7" y="211.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="130.7" y="222.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="127.7" y="195.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="130.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="128.0" y="227.0" width="0.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="131.0" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="128.7" y="435.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.7" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="128.7" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.7" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="128.7" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="131.7" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="128.7" y="387.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="131.7" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="128.7" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="131.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="129.0" y="451.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="129.0" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="132.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.12%)</title><rect x="129.0" y="419.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="129.0" y="403.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="132.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="129.0" y="387.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="132.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.09%)</title><rect x="129.0" y="371.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="132.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.09%)</title><rect x="129.0" y="355.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="132.0" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.09%)</title><rect x="129.0" y="339.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="132.0" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (3 samples, 0.09%)</title><rect x="129.0" y="323.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="132.0" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="130.1" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="130.1" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="133.1" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="130.1" y="339.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="133.1" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=39427] (68 samples, 1.99%)</title><rect x="130.4" y="515.0" width="23.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="133.4" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (68 samples, 1.99%)</title><rect x="130.4" y="499.0" width="23.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="133.4" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (44 samples, 1.29%)</title><rect x="130.4" y="483.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.4" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="130.4" y="467.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.4" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="131.1" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="134.1" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (40 samples, 1.17%)</title><rect x="131.5" y="467.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (40 samples, 1.17%)</title><rect x="131.5" y="451.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (40 samples, 1.17%)</title><rect x="131.5" y="435.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (35 samples, 1.02%)</title><rect x="131.5" y="419.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.5" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="132.1" y="403.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="135.1" y="414.0"></text>
</g>
<g>
<title>kevent (32 samples, 0.94%)</title><rect x="132.5" y="403.0" width="11.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="135.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.09%)</title><rect x="143.5" y="419.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="143.5" y="403.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="143.5" y="387.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (1 samples, 0.03%)</title><rect x="143.5" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="143.9" y="403.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (2 samples, 0.06%)</title><rect x="143.9" y="387.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="146.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (2 samples, 0.06%)</title><rect x="143.9" y="371.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.06%)</title><rect x="143.9" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.06%)</title><rect x="144.6" y="419.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.6" y="430.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.cancelledKeys (1 samples, 0.03%)</title><rect x="144.9" y="403.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="145.3" y="467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.3" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="145.3" y="451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="145.3" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="148.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (24 samples, 0.70%)</title><rect x="145.6" y="483.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (23 samples, 0.67%)</title><rect x="145.9" y="467.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (13 samples, 0.38%)</title><rect x="145.9" y="451.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.9" y="462.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="145.9" y="435.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10 samples, 0.29%)</title><rect x="146.3" y="435.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.29%)</title><rect x="146.3" y="419.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="149.3" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (10 samples, 0.29%)</title><rect x="146.3" y="403.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.3" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="146.3" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.3" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="146.3" y="371.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="146.3" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (9 samples, 0.26%)</title><rect x="146.6" y="387.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="149.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="146.6" y="371.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="146.6" y="355.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="149.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="146.6" y="339.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="149.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="146.6" y="323.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="146.6" y="307.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="146.6" y="291.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="149.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="147.0" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="147.0" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="147.0" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="147.0" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="150.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="147.0" y="275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="147.0" y="259.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="147.0" y="243.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="150.0" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="147.0" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="150.0" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="147.0" y="211.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="150.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="147.3" y="339.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="147.3" y="323.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="150.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="147.3" y="307.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="147.3" y="291.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="147.3" y="275.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.3" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="147.3" y="259.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="150.3" y="270.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="147.3" y="243.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="150.3" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="147.7" y="243.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="150.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (4 samples, 0.12%)</title><rect x="148.0" y="371.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="151.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="148.0" y="355.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="151.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="148.0" y="339.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="148.0" y="323.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="148.0" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="148.0" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="148.0" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="148.0" y="259.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="151.0" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="148.0" y="243.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="151.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="148.0" y="227.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="151.0" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="148.0" y="211.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="151.0" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="148.0" y="195.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="151.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="148.4" y="323.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="151.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="148.4" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="151.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="148.4" y="291.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="151.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="148.4" y="275.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="151.4" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="148.7" y="259.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="151.7" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="148.7" y="243.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="151.7" y="254.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="148.7" y="227.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="151.7" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="149.0" y="227.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="152.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="149.4" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="149.4" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.4" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="149.7" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="150.1" y="419.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="153.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (10 samples, 0.29%)</title><rect x="150.4" y="451.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="153.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (10 samples, 0.29%)</title><rect x="150.4" y="435.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (10 samples, 0.29%)</title><rect x="150.4" y="419.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.29%)</title><rect x="150.4" y="403.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="153.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (10 samples, 0.29%)</title><rect x="150.4" y="387.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.23%)</title><rect x="150.8" y="371.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="153.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.23%)</title><rect x="150.8" y="355.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (8 samples, 0.23%)</title><rect x="150.8" y="339.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.8" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (7 samples, 0.20%)</title><rect x="151.1" y="323.0" width="2.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="154.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="153.5" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="153.5" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="156.5" y="366.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=26627] (67 samples, 1.96%)</title><rect x="153.9" y="515.0" width="23.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="156.9" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (67 samples, 1.96%)</title><rect x="153.9" y="499.0" width="23.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="156.9" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (45 samples, 1.32%)</title><rect x="153.9" y="483.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="156.9" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="154.2" y="467.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="157.2" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (43 samples, 1.26%)</title><rect x="154.6" y="467.0" width="14.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (43 samples, 1.26%)</title><rect x="154.6" y="451.0" width="14.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (43 samples, 1.26%)</title><rect x="154.6" y="435.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.6" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (41 samples, 1.20%)</title><rect x="154.6" y="419.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.6" y="430.0"></text>
</g>
<g>
<title>kevent (41 samples, 1.20%)</title><rect x="154.6" y="403.0" width="14.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="157.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="168.7" y="419.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="171.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="169.1" y="419.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.1" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (22 samples, 0.64%)</title><rect x="169.4" y="483.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.64%)</title><rect x="169.4" y="467.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="172.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (9 samples, 0.26%)</title><rect x="169.4" y="451.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (7 samples, 0.20%)</title><rect x="169.4" y="435.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (7 samples, 0.20%)</title><rect x="169.4" y="419.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.4" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (7 samples, 0.20%)</title><rect x="169.4" y="403.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="172.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="169.4" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="169.7" y="387.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="169.7" y="371.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="172.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="169.7" y="355.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="169.7" y="339.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="169.7" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="169.7" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="169.7" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.7" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="170.1" y="275.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.1" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="170.1" y="259.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="173.1" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="170.1" y="243.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="173.1" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.06%)</title><rect x="171.1" y="371.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="174.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="171.1" y="355.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="174.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="171.1" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="174.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="171.1" y="323.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="171.1" y="307.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="174.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="171.1" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="174.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="171.1" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="171.5" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="174.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="171.5" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="171.5" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="171.5" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="171.8" y="435.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.8" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="172.2" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="172.2" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (13 samples, 0.38%)</title><rect x="172.5" y="451.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (13 samples, 0.38%)</title><rect x="172.5" y="435.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (13 samples, 0.38%)</title><rect x="172.5" y="419.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.38%)</title><rect x="172.5" y="403.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="175.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.38%)</title><rect x="172.5" y="387.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.5" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.06%)</title><rect x="172.9" y="371.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="175.9" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.06%)</title><rect x="172.9" y="355.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="173.2" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (8 samples, 0.23%)</title><rect x="173.5" y="371.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (8 samples, 0.23%)</title><rect x="173.5" y="355.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (8 samples, 0.23%)</title><rect x="173.5" y="339.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.5" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (7 samples, 0.20%)</title><rect x="173.9" y="323.0" width="2.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="176.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="176.3" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="176.6" y="355.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.6" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="176.6" y="339.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="179.6" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=34819] (25 samples, 0.73%)</title><rect x="177.0" y="515.0" width="8.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="180.0" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (25 samples, 0.73%)</title><rect x="177.0" y="499.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="180.0" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (13 samples, 0.38%)</title><rect x="177.0" y="483.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (13 samples, 0.38%)</title><rect x="177.0" y="467.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="180.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (13 samples, 0.38%)</title><rect x="177.0" y="451.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (13 samples, 0.38%)</title><rect x="177.0" y="435.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="180.0" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (13 samples, 0.38%)</title><rect x="177.0" y="419.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="180.0" y="430.0"></text>
</g>
<g>
<title>kevent (10 samples, 0.29%)</title><rect x="178.0" y="403.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="181.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (12 samples, 0.35%)</title><rect x="181.5" y="483.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="184.5" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (12 samples, 0.35%)</title><rect x="181.5" y="467.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.5" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 0.23%)</title><rect x="181.5" y="451.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.5" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="181.5" y="435.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="184.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.15%)</title><rect x="181.8" y="435.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.15%)</title><rect x="181.8" y="419.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="184.8" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="181.8" y="403.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.8" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (5 samples, 0.15%)</title><rect x="181.8" y="387.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="184.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (5 samples, 0.15%)</title><rect x="181.8" y="371.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (5 samples, 0.15%)</title><rect x="181.8" y="355.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (5 samples, 0.15%)</title><rect x="181.8" y="339.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="181.8" y="323.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="184.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="181.8" y="307.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="181.8" y="291.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="181.8" y="275.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.8" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="181.8" y="259.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="184.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="181.8" y="243.0" width="1.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="184.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="181.8" y="227.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="184.8" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="183.2" y="227.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="186.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="183.5" y="435.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.03%)</title><rect x="183.5" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="183.5" y="403.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.5" y="414.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="183.5" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="186.5" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="183.5" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="183.9" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.9" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="183.9" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.9" y="430.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="183.9" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="183.9" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="183.9" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.9" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="183.9" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="186.9" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="183.9" y="339.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="186.9" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="183.9" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="186.9" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="183.9" y="307.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="186.9" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="184.2" y="451.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="184.2" y="435.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.12%)</title><rect x="184.2" y="419.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="184.2" y="403.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="184.2" y="387.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.2" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="184.2" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.2" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="184.2" y="355.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="187.2" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="184.2" y="339.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="187.2" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="184.2" y="323.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="187.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.06%)</title><rect x="184.9" y="371.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.9" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.06%)</title><rect x="184.9" y="355.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="187.9" y="366.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="184.9" y="339.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="187.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="185.3" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.3" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #4 tid=85763] (40 samples, 1.17%)</title><rect x="185.6" y="515.0" width="13.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="188.6" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (40 samples, 1.17%)</title><rect x="185.6" y="499.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (22 samples, 0.64%)</title><rect x="185.6" y="483.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="188.6" y="494.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.06%)</title><rect x="185.6" y="467.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.03%)</title><rect x="186.0" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="189.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.03%)</title><rect x="186.0" y="435.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="186.0" y="419.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.0" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="186.0" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.03%)</title><rect x="186.0" y="387.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.0" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (20 samples, 0.58%)</title><rect x="186.3" y="467.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="189.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (20 samples, 0.58%)</title><rect x="186.3" y="451.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (20 samples, 0.58%)</title><rect x="186.3" y="435.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (19 samples, 0.56%)</title><rect x="186.3" y="419.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.3" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="187.0" y="403.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="190.0" y="414.0"></text>
</g>
<g>
<title>kevent (16 samples, 0.47%)</title><rect x="187.3" y="403.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="190.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="192.9" y="419.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (18 samples, 0.53%)</title><rect x="193.2" y="483.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (18 samples, 0.53%)</title><rect x="193.2" y="467.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (15 samples, 0.44%)</title><rect x="193.2" y="451.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (12 samples, 0.35%)</title><rect x="193.2" y="435.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (12 samples, 0.35%)</title><rect x="193.2" y="419.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.2" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (12 samples, 0.35%)</title><rect x="193.2" y="403.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="196.2" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="193.2" y="387.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.2" y="398.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="193.2" y="371.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.2" y="382.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="193.2" y="355.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="196.2" y="366.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="193.2" y="339.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.2" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="193.2" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (11 samples, 0.32%)</title><rect x="193.6" y="387.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="196.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (10 samples, 0.29%)</title><rect x="193.9" y="371.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (10 samples, 0.29%)</title><rect x="193.9" y="355.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (10 samples, 0.29%)</title><rect x="193.9" y="339.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="193.9" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="196.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="193.9" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="193.9" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="193.9" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="196.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.26%)</title><rect x="194.2" y="323.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="197.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.26%)</title><rect x="194.2" y="307.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.26%)</title><rect x="194.2" y="291.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.26%)</title><rect x="194.2" y="275.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.23%)</title><rect x="194.6" y="259.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="197.6" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.20%)</title><rect x="194.6" y="243.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="197.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="194.6" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="197.6" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="194.6" y="211.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="197.6" y="222.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="194.6" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="197.6" y="206.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="194.6" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="197.6" y="190.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="194.6" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="197.6" y="174.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="194.9" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="197.9" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="194.9" y="211.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="197.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (4 samples, 0.12%)</title><rect x="195.3" y="227.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="198.3" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.03%)</title><rect x="196.7" y="227.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="199.7" y="238.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.03%)</title><rect x="197.0" y="243.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="200.0" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="197.4" y="435.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.4" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="198.0" y="419.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (3 samples, 0.09%)</title><rect x="198.4" y="451.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (3 samples, 0.09%)</title><rect x="198.4" y="435.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.09%)</title><rect x="198.4" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.09%)</title><rect x="198.4" y="403.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (3 samples, 0.09%)</title><rect x="198.4" y="387.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (3 samples, 0.09%)</title><rect x="198.4" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (3 samples, 0.09%)</title><rect x="198.4" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="201.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (3 samples, 0.09%)</title><rect x="198.4" y="339.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.4" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (2 samples, 0.06%)</title><rect x="198.7" y="323.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="201.7" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=38659] (82 samples, 2.40%)</title><rect x="199.4" y="515.0" width="28.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="202.4" y="526.0">[N..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (82 samples, 2.40%)</title><rect x="199.4" y="499.0" width="28.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.4" y="510.0">on..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (44 samples, 1.29%)</title><rect x="199.4" y="483.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (43 samples, 1.26%)</title><rect x="199.8" y="467.0" width="14.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="202.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (43 samples, 1.26%)</title><rect x="199.8" y="451.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (43 samples, 1.26%)</title><rect x="199.8" y="435.0" width="14.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (40 samples, 1.17%)</title><rect x="199.8" y="419.0" width="13.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.8" y="430.0"></text>
</g>
<g>
<title>kevent (33 samples, 0.96%)</title><rect x="202.2" y="403.0" width="11.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="205.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.06%)</title><rect x="213.6" y="419.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (2 samples, 0.06%)</title><rect x="213.6" y="403.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.6" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="213.6" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="213.6" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.03%)</title><rect x="213.6" y="355.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.6" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="213.9" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="213.9" y="371.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.9" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="213.9" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="214.3" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="217.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (38 samples, 1.11%)</title><rect x="214.6" y="483.0" width="13.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (38 samples, 1.11%)</title><rect x="214.6" y="467.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="217.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (20 samples, 0.58%)</title><rect x="214.6" y="451.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.6" y="462.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1 samples, 0.03%)</title><rect x="214.6" y="435.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (18 samples, 0.53%)</title><rect x="214.9" y="435.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (18 samples, 0.53%)</title><rect x="214.9" y="419.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="217.9" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (16 samples, 0.47%)</title><rect x="214.9" y="403.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="214.9" y="387.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.9" y="398.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.03%)</title><rect x="215.3" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.3" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.03%)</title><rect x="215.3" y="355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (14 samples, 0.41%)</title><rect x="215.6" y="387.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.20%)</title><rect x="215.6" y="371.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.20%)</title><rect x="215.6" y="355.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="215.6" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="218.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="215.6" y="323.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="215.6" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="215.6" y="291.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="216.0" y="339.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="216.0" y="323.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.12%)</title><rect x="216.0" y="307.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.12%)</title><rect x="216.0" y="291.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.12%)</title><rect x="216.0" y="275.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="219.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.12%)</title><rect x="216.0" y="259.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="216.3" y="243.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="219.3" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.09%)</title><rect x="216.3" y="227.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="219.3" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="216.3" y="211.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="219.3" y="222.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="217.0" y="211.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="220.0" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="217.4" y="339.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="217.4" y="323.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="217.4" y="307.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="217.4" y="291.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.4" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="217.7" y="275.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.7" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="217.7" y="259.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="220.7" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="217.7" y="243.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="220.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (7 samples, 0.20%)</title><rect x="218.1" y="371.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (7 samples, 0.20%)</title><rect x="218.1" y="355.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.20%)</title><rect x="218.1" y="339.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="218.1" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="218.1" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.09%)</title><rect x="218.1" y="291.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.09%)</title><rect x="218.1" y="275.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="221.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.09%)</title><rect x="218.1" y="259.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="218.1" y="243.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="218.1" y="227.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="221.1" y="238.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="218.1" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.1" y="222.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="218.1" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="221.1" y="206.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="218.1" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="221.1" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="218.1" y="163.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="221.1" y="174.0"></text>
</g>
<g>
<title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="218.1" y="147.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="221.1" y="158.0"></text>
</g>
<g>
<title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="218.1" y="131.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="221.1" y="142.0"></text>
</g>
<g>
<title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="218.1" y="115.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="221.1" y="126.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="218.4" y="211.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="221.4" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="218.4" y="195.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="221.4" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="219.1" y="323.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="219.1" y="307.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="219.1" y="291.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="222.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="219.1" y="275.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="219.8" y="259.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.8" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="219.8" y="243.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="222.8" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="219.8" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="222.8" y="238.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="219.8" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="222.8" y="222.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="220.1" y="227.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="223.1" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="220.1" y="211.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="223.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (2 samples, 0.06%)</title><rect x="220.5" y="403.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="220.5" y="387.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.06%)</title><rect x="220.5" y="371.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="220.5" y="355.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.06%)</title><rect x="220.5" y="339.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.5" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="220.8" y="323.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="223.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="221.2" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="221.2" y="419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 0.53%)</title><rect x="221.5" y="451.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.5" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (18 samples, 0.53%)</title><rect x="221.5" y="435.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="224.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (18 samples, 0.53%)</title><rect x="221.5" y="419.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="224.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.53%)</title><rect x="221.5" y="403.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (18 samples, 0.53%)</title><rect x="221.5" y="387.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (16 samples, 0.47%)</title><rect x="221.8" y="371.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.8" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (16 samples, 0.47%)</title><rect x="221.8" y="355.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (15 samples, 0.44%)</title><rect x="222.2" y="339.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.2" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (15 samples, 0.44%)</title><rect x="222.2" y="323.0" width="5.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="225.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="227.4" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="227.4" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.4" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="227.4" y="339.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="230.4" y="350.0"></text>
</g>
<g>
<title>[NIO Selector #5 tid=85507] (27 samples, 0.79%)</title><rect x="227.7" y="515.0" width="9.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="230.7" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (27 samples, 0.79%)</title><rect x="227.7" y="499.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.7" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (23 samples, 0.67%)</title><rect x="227.7" y="483.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.7" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (23 samples, 0.67%)</title><rect x="227.7" y="467.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (23 samples, 0.67%)</title><rect x="227.7" y="451.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (23 samples, 0.67%)</title><rect x="227.7" y="435.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (21 samples, 0.61%)</title><rect x="227.7" y="419.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.7" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="228.1" y="403.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="231.1" y="414.0"></text>
</g>
<g>
<title>kevent (19 samples, 0.56%)</title><rect x="228.4" y="403.0" width="6.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="231.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="235.0" y="419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.0" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="235.0" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.0" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="235.0" y="387.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.0" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="235.0" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="235.3" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="235.3" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (4 samples, 0.12%)</title><rect x="235.6" y="483.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (4 samples, 0.12%)</title><rect x="235.6" y="467.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.09%)</title><rect x="235.6" y="451.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 0.09%)</title><rect x="235.6" y="435.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.09%)</title><rect x="235.6" y="419.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.6" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (3 samples, 0.09%)</title><rect x="235.6" y="403.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (3 samples, 0.09%)</title><rect x="235.6" y="387.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (3 samples, 0.09%)</title><rect x="235.6" y="371.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.09%)</title><rect x="235.6" y="355.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (3 samples, 0.09%)</title><rect x="235.6" y="339.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="235.6" y="323.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="235.6" y="307.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="235.6" y="291.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="235.6" y="275.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="235.6" y="259.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.6" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="235.6" y="243.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="238.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="235.6" y="227.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="238.6" y="238.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="236.3" y="227.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="239.3" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (1 samples, 0.03%)</title><rect x="236.7" y="451.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.03%)</title><rect x="236.7" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.03%)</title><rect x="236.7" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="239.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="236.7" y="403.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="239.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.03%)</title><rect x="236.7" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.03%)</title><rect x="236.7" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.03%)</title><rect x="236.7" y="355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.03%)</title><rect x="236.7" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="239.7" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="236.7" y="323.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="239.7" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=27651] (77 samples, 2.25%)</title><rect x="237.0" y="515.0" width="26.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="240.0" y="526.0">[..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (77 samples, 2.25%)</title><rect x="237.0" y="499.0" width="26.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.0" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (45 samples, 1.32%)</title><rect x="237.0" y="483.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.0" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="237.4" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="240.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (43 samples, 1.26%)</title><rect x="237.7" y="467.0" width="14.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (43 samples, 1.26%)</title><rect x="237.7" y="451.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="240.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (43 samples, 1.26%)</title><rect x="237.7" y="435.0" width="14.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (40 samples, 1.17%)</title><rect x="237.7" y="419.0" width="13.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="430.0"></text>
</g>
<g>
<title>kevent (38 samples, 1.11%)</title><rect x="238.4" y="403.0" width="13.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="241.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="251.5" y="419.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="251.5" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="251.5" y="387.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="251.5" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="254.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="251.5" y="355.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="251.9" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="254.9" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="251.9" y="403.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="251.9" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.9" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="252.2" y="419.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (32 samples, 0.94%)</title><rect x="252.6" y="483.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (31 samples, 0.91%)</title><rect x="252.6" y="467.0" width="10.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (19 samples, 0.56%)</title><rect x="252.6" y="451.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.6" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="252.9" y="435.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="255.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (13 samples, 0.38%)</title><rect x="253.2" y="435.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (13 samples, 0.38%)</title><rect x="253.2" y="419.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.2" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (13 samples, 0.38%)</title><rect x="253.2" y="403.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (13 samples, 0.38%)</title><rect x="253.2" y="387.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="256.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (11 samples, 0.32%)</title><rect x="253.2" y="371.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (11 samples, 0.32%)</title><rect x="253.2" y="355.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="253.2" y="339.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="253.2" y="323.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.09%)</title><rect x="253.2" y="307.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.09%)</title><rect x="253.2" y="291.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="256.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.09%)</title><rect x="253.2" y="275.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="253.2" y="259.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.2" y="270.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.09%)</title><rect x="253.2" y="243.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="256.2" y="254.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.06%)</title><rect x="253.2" y="227.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="256.2" y="238.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="253.2" y="211.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="256.2" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="253.9" y="227.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="256.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 0.23%)</title><rect x="254.3" y="339.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.23%)</title><rect x="254.3" y="323.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 0.23%)</title><rect x="254.3" y="307.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 0.23%)</title><rect x="254.3" y="291.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.3" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (6 samples, 0.18%)</title><rect x="255.0" y="275.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.0" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (6 samples, 0.18%)</title><rect x="255.0" y="259.0" width="2.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="258.0" y="270.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="255.0" y="243.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="258.0" y="254.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="255.0" y="227.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="258.0" y="238.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="255.3" y="243.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="258.3" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="255.7" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="258.7" y="254.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="255.7" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="258.7" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="255.7" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="258.7" y="222.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="255.7" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="258.7" y="206.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="256.0" y="243.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="259.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.06%)</title><rect x="257.0" y="371.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="257.0" y="355.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="257.0" y="339.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="257.0" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="260.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="257.0" y="307.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="257.0" y="291.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="257.0" y="275.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="257.0" y="259.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.0" y="270.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="257.0" y="243.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="260.0" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="257.4" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="260.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="257.4" y="227.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="260.4" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.12%)</title><rect x="257.7" y="435.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="258.4" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.4" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="258.8" y="403.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="261.8" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="258.8" y="387.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="261.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="258.8" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="261.8" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="258.8" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="261.8" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="258.8" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="261.8" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="258.8" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="261.8" y="334.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="258.8" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="261.8" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::print_stats(char const*) (1 samples, 0.03%)</title><rect x="258.8" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="261.8" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (12 samples, 0.35%)</title><rect x="259.1" y="451.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (12 samples, 0.35%)</title><rect x="259.1" y="435.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (12 samples, 0.35%)</title><rect x="259.1" y="419.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="259.1" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="259.1" y="387.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="262.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="259.1" y="371.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="259.1" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.32%)</title><rect x="259.5" y="403.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (11 samples, 0.32%)</title><rect x="259.5" y="387.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (11 samples, 0.32%)</title><rect x="259.5" y="371.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.5" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (11 samples, 0.32%)</title><rect x="259.5" y="355.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="262.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (11 samples, 0.32%)</title><rect x="259.5" y="339.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.5" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (11 samples, 0.32%)</title><rect x="259.5" y="323.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="262.5" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="263.3" y="467.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="266.3" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="263.3" y="451.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="266.3" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #6 tid=34307] (37 samples, 1.08%)</title><rect x="263.6" y="515.0" width="12.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="266.6" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (37 samples, 1.08%)</title><rect x="263.6" y="499.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.6" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (24 samples, 0.70%)</title><rect x="263.6" y="483.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (23 samples, 0.67%)</title><rect x="263.9" y="467.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="266.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (23 samples, 0.67%)</title><rect x="263.9" y="451.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (23 samples, 0.67%)</title><rect x="263.9" y="435.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (21 samples, 0.61%)</title><rect x="264.3" y="419.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.3" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="264.6" y="403.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="267.6" y="414.0"></text>
</g>
<g>
<title>kevent (19 samples, 0.56%)</title><rect x="265.0" y="403.0" width="6.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="268.0" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="271.5" y="419.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.5" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="271.5" y="403.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.03%)</title><rect x="271.5" y="387.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.03%)</title><rect x="271.5" y="371.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (13 samples, 0.38%)</title><rect x="271.9" y="483.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.9" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (13 samples, 0.38%)</title><rect x="271.9" y="467.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (6 samples, 0.18%)</title><rect x="271.9" y="451.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.9" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (5 samples, 0.15%)</title><rect x="271.9" y="435.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (5 samples, 0.15%)</title><rect x="271.9" y="419.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.9" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (5 samples, 0.15%)</title><rect x="271.9" y="403.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="271.9" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.9" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="271.9" y="371.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="274.9" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (4 samples, 0.12%)</title><rect x="272.2" y="387.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.2" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (4 samples, 0.12%)</title><rect x="272.2" y="371.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="272.2" y="355.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="272.2" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="272.2" y="323.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="272.2" y="307.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="272.2" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="272.2" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="272.6" y="323.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="272.6" y="307.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="272.6" y="291.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="272.6" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="272.9" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.9" y="270.0"></text>
</g>
<g>
<title>Thread::current() (1 samples, 0.03%)</title><rect x="272.9" y="243.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="275.9" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="273.3" y="243.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="276.3" y="254.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="273.3" y="227.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="276.3" y="238.0"></text>
</g>
<g>
<title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (1 samples, 0.03%)</title><rect x="273.3" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="276.3" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="273.6" y="435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.6" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="273.6" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="273.6" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="273.6" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="276.6" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="276.6" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="273.6" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="276.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="273.6" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="276.6" y="350.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="273.6" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="276.6" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (7 samples, 0.20%)</title><rect x="273.9" y="451.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.9" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (7 samples, 0.20%)</title><rect x="273.9" y="435.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="276.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (7 samples, 0.20%)</title><rect x="273.9" y="419.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="273.9" y="403.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="273.9" y="387.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="273.9" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="273.9" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.18%)</title><rect x="274.3" y="403.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.3" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (6 samples, 0.18%)</title><rect x="274.3" y="387.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="277.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.18%)</title><rect x="274.3" y="371.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="277.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (6 samples, 0.18%)</title><rect x="274.3" y="355.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="277.3" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (6 samples, 0.18%)</title><rect x="274.3" y="339.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="277.3" y="350.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="274.3" y="323.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="277.3" y="334.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="274.3" y="307.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="277.3" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.15%)</title><rect x="274.6" y="323.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="277.6" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=32003] (35 samples, 1.02%)</title><rect x="276.4" y="515.0" width="12.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="279.4" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (35 samples, 1.02%)</title><rect x="276.4" y="499.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.4" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (25 samples, 0.73%)</title><rect x="276.4" y="483.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (24 samples, 0.70%)</title><rect x="276.7" y="467.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.7" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (24 samples, 0.70%)</title><rect x="276.7" y="451.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.7" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (23 samples, 0.67%)</title><rect x="277.1" y="435.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.1" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (21 samples, 0.61%)</title><rect x="277.1" y="419.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.1" y="430.0"></text>
</g>
<g>
<title>kevent (21 samples, 0.61%)</title><rect x="277.1" y="403.0" width="7.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="280.1" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="284.3" y="419.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.3" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.03%)</title><rect x="284.6" y="419.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.6" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (10 samples, 0.29%)</title><rect x="285.0" y="483.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.0" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (10 samples, 0.29%)</title><rect x="285.0" y="467.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.0" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7 samples, 0.20%)</title><rect x="285.3" y="451.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="285.3" y="435.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="288.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 0.09%)</title><rect x="285.7" y="435.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3 samples, 0.09%)</title><rect x="285.7" y="419.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.7" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2 samples, 0.06%)</title><rect x="286.0" y="403.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.0" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (2 samples, 0.06%)</title><rect x="286.0" y="387.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.0" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (2 samples, 0.06%)</title><rect x="286.0" y="371.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="286.0" y="355.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="289.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="286.0" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="286.0" y="323.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="286.0" y="307.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="286.0" y="291.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="286.0" y="275.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.0" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="286.0" y="259.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.0" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="286.0" y="243.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="289.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="286.0" y="227.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="289.0" y="238.0"></text>
</g>
<g>
<title>addr_from_java(long) (1 samples, 0.03%)</title><rect x="286.4" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="289.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="286.7" y="435.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="286.7" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="286.7" y="403.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="287.1" y="435.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.1" y="446.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="287.1" y="419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.1" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="287.1" y="403.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.1" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="287.4" y="435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.4" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="287.4" y="419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.4" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="287.4" y="403.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="290.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (2 samples, 0.06%)</title><rect x="287.7" y="451.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.7" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.06%)</title><rect x="287.7" y="435.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="290.7" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.06%)</title><rect x="287.7" y="419.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.7" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="287.7" y="403.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.06%)</title><rect x="287.7" y="387.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.7" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (2 samples, 0.06%)</title><rect x="287.7" y="371.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.7" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (2 samples, 0.06%)</title><rect x="287.7" y="355.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.7" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (2 samples, 0.06%)</title><rect x="287.7" y="339.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="290.7" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.03%)</title><rect x="288.1" y="323.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="291.1" y="334.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=37891] (75 samples, 2.19%)</title><rect x="288.4" y="515.0" width="25.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="291.4" y="526.0">[..</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="288.4" y="499.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="291.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="288.4" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="291.4" y="494.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="288.4" y="467.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="291.4" y="478.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (74 samples, 2.16%)</title><rect x="288.8" y="499.0" width="25.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.8" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (51 samples, 1.49%)</title><rect x="288.8" y="483.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.8" y="494.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="288.8" y="467.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="291.8" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="289.1" y="467.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="292.1" y="478.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="289.1" y="451.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="292.1" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (48 samples, 1.40%)</title><rect x="289.5" y="467.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (48 samples, 1.40%)</title><rect x="289.5" y="451.0" width="16.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (48 samples, 1.40%)</title><rect x="289.5" y="435.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.5" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (47 samples, 1.37%)</title><rect x="289.5" y="419.0" width="16.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.5" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="289.8" y="403.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="292.8" y="414.0"></text>
</g>
<g>
<title>kevent (45 samples, 1.32%)</title><rect x="290.2" y="403.0" width="15.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="293.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="305.7" y="419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.7" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="305.7" y="403.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.03%)</title><rect x="306.0" y="467.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="309.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.03%)</title><rect x="306.0" y="451.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.03%)</title><rect x="306.0" y="435.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.0" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (1 samples, 0.03%)</title><rect x="306.0" y="419.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="309.0" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (23 samples, 0.67%)</title><rect x="306.4" y="483.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.4" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (22 samples, 0.64%)</title><rect x="306.4" y="467.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="309.4" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (14 samples, 0.41%)</title><rect x="306.4" y="451.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.4" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (9 samples, 0.26%)</title><rect x="306.4" y="435.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (9 samples, 0.26%)</title><rect x="306.4" y="419.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.4" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (9 samples, 0.26%)</title><rect x="306.4" y="403.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="306.4" y="387.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="306.7" y="371.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="306.7" y="355.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.7" y="366.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="306.7" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (7 samples, 0.20%)</title><rect x="307.1" y="387.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.06%)</title><rect x="307.1" y="371.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (2 samples, 0.06%)</title><rect x="307.1" y="355.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="307.1" y="339.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="307.1" y="323.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="310.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="307.1" y="307.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="310.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="307.1" y="291.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="307.1" y="275.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.1" y="286.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="307.4" y="259.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="310.4" y="270.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="307.4" y="243.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="310.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (4 samples, 0.12%)</title><rect x="307.8" y="371.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.12%)</title><rect x="307.8" y="355.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 0.12%)</title><rect x="307.8" y="339.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.8" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (1 samples, 0.03%)</title><rect x="307.8" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="307.8" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="307.8" y="291.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.03%)</title><rect x="307.8" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="308.1" y="323.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="308.1" y="307.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="308.1" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="308.1" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="308.1" y="259.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="308.1" y="243.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.1" y="254.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="308.1" y="227.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="311.1" y="238.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="308.1" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="311.1" y="222.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="308.1" y="195.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="311.1" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.06%)</title><rect x="308.5" y="323.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="308.5" y="307.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="308.5" y="291.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="308.5" y="275.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="311.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.06%)</title><rect x="308.5" y="259.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.5" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (2 samples, 0.06%)</title><rect x="308.5" y="243.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="311.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="308.5" y="227.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="311.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.primaryFor (1 samples, 0.03%)</title><rect x="309.1" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="312.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="309.1" y="355.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.06%)</title><rect x="309.5" y="435.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.03%)</title><rect x="309.8" y="419.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="310.2" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.2" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="310.2" y="419.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.2" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="310.2" y="403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.2" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="310.5" y="435.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.5" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="310.9" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.9" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (8 samples, 0.23%)</title><rect x="311.2" y="451.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.2" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (8 samples, 0.23%)</title><rect x="311.2" y="435.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.2" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (8 samples, 0.23%)</title><rect x="311.2" y="419.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.23%)</title><rect x="311.2" y="403.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (8 samples, 0.23%)</title><rect x="311.2" y="387.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.2" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="311.2" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.2" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="311.2" y="355.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.2" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="311.2" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (6 samples, 0.18%)</title><rect x="311.6" y="371.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.6" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (5 samples, 0.15%)</title><rect x="311.9" y="355.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (5 samples, 0.15%)</title><rect x="311.9" y="339.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.9" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (5 samples, 0.15%)</title><rect x="311.9" y="323.0" width="1.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="314.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="313.6" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.6" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="314.0" y="467.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="317.0" y="478.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="314.0" y="451.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="317.0" y="462.0"></text>
</g>
<g>
<title>[NIO Selector #7 tid=47619] (39 samples, 1.14%)</title><rect x="314.3" y="515.0" width="13.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="317.3" y="526.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (39 samples, 1.14%)</title><rect x="314.3" y="499.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="317.3" y="510.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (24 samples, 0.70%)</title><rect x="314.3" y="483.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (24 samples, 0.70%)</title><rect x="314.3" y="467.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (24 samples, 0.70%)</title><rect x="314.3" y="451.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (24 samples, 0.70%)</title><rect x="314.3" y="435.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (23 samples, 0.67%)</title><rect x="314.3" y="419.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.3" y="430.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.03%)</title><rect x="314.3" y="403.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="317.3" y="414.0"></text>
</g>
<g>
<title>kevent (22 samples, 0.64%)</title><rect x="314.7" y="403.0" width="7.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="317.7" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (1 samples, 0.03%)</title><rect x="322.3" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="325.3" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.pollFirst (1 samples, 0.03%)</title><rect x="322.3" y="403.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (15 samples, 0.44%)</title><rect x="322.6" y="483.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.6" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (15 samples, 0.44%)</title><rect x="322.6" y="467.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (11 samples, 0.32%)</title><rect x="322.6" y="451.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="462.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6 samples, 0.18%)</title><rect x="322.6" y="435.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6 samples, 0.18%)</title><rect x="322.6" y="419.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="325.6" y="430.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6 samples, 0.18%)</title><rect x="322.6" y="403.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="325.6" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.entity (6 samples, 0.18%)</title><rect x="322.6" y="387.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.6" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.put (6 samples, 0.18%)</title><rect x="322.6" y="371.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.6" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.18%)</title><rect x="322.6" y="355.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (6 samples, 0.18%)</title><rect x="322.6" y="339.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.18%)</title><rect x="322.6" y="323.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.18%)</title><rect x="322.6" y="307.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.18%)</title><rect x="322.6" y="291.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.18%)</title><rect x="322.6" y="275.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="325.6" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.15%)</title><rect x="322.9" y="259.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.9" y="270.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (5 samples, 0.15%)</title><rect x="322.9" y="243.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="325.9" y="254.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="322.9" y="227.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="325.9" y="238.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="322.9" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="325.9" y="222.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="323.3" y="227.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="326.3" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="324.3" y="227.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="327.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1 samples, 0.03%)</title><rect x="324.7" y="435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.7" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="324.7" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="327.7" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="324.7" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.7" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="325.0" y="435.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="325.0" y="419.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.0" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="325.0" y="403.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.0" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.09%)</title><rect x="325.4" y="435.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.4" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (4 samples, 0.12%)</title><rect x="326.4" y="451.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (4 samples, 0.12%)</title><rect x="326.4" y="435.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.4" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.12%)</title><rect x="326.4" y="419.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.4" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="326.4" y="403.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.4" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (4 samples, 0.12%)</title><rect x="326.4" y="387.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="329.4" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (4 samples, 0.12%)</title><rect x="326.4" y="371.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.4" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (4 samples, 0.12%)</title><rect x="326.4" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (4 samples, 0.12%)</title><rect x="326.4" y="339.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.4" y="350.0"></text>
</g>
<g>
<title>rpc_errlist (4 samples, 0.12%)</title><rect x="326.4" y="323.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="329.4" y="334.0"></text>
</g>
<g>
<title>[async_worker_0 tid=24071] (190 samples, 5.56%)</title><rect x="327.8" y="515.0" width="65.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="330.8" y="526.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (190 samples, 5.56%)</title><rect x="327.8" y="499.0" width="65.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.8" y="510.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (190 samples, 5.56%)</title><rect x="327.8" y="483.0" width="65.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.8" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (190 samples, 5.56%)</title><rect x="327.8" y="467.0" width="65.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.8" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.06%)</title><rect x="327.8" y="451.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.06%)</title><rect x="327.8" y="435.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="330.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.06%)</title><rect x="327.8" y="419.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.06%)</title><rect x="327.8" y="403.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.03%)</title><rect x="328.1" y="387.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (31 samples, 0.91%)</title><rect x="328.5" y="451.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (31 samples, 0.91%)</title><rect x="328.5" y="435.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (26 samples, 0.76%)</title><rect x="328.5" y="419.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="331.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="328.5" y="403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="328.5" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="328.5" y="371.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="328.5" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (25 samples, 0.73%)</title><rect x="328.8" y="403.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="331.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (25 samples, 0.73%)</title><rect x="328.8" y="387.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.8" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (24 samples, 0.70%)</title><rect x="329.2" y="371.0" width="8.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="332.2" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 0.64%)</title><rect x="329.5" y="355.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="332.5" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (20 samples, 0.58%)</title><rect x="329.8" y="339.0" width="6.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="332.8" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="336.7" y="339.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="339.7" y="350.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="336.7" y="323.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="339.7" y="334.0"></text>
</g>
<g>
<title>in_ByteSize(int) (1 samples, 0.03%)</title><rect x="337.1" y="355.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="340.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="337.4" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="337.4" y="403.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="337.4" y="387.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="337.4" y="371.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.4" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="337.4" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.4" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="337.4" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.4" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="337.8" y="419.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="337.8" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="340.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="337.8" y="387.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="337.8" y="371.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="340.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="337.8" y="355.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="340.8" y="366.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="337.8" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="340.8" y="350.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="338.1" y="339.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="341.1" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="338.1" y="323.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="341.1" y="334.0"></text>
</g>
<g>
<title>SafeThreadsListPtr::acquire_stable_list_fast_path() (1 samples, 0.03%)</title><rect x="338.1" y="307.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="341.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="338.5" y="323.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="341.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (83 samples, 2.43%)</title><rect x="339.2" y="451.0" width="28.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.2" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (83 samples, 2.43%)</title><rect x="339.2" y="435.0" width="28.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.2" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (83 samples, 2.43%)</title><rect x="339.2" y="419.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.2" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (18 samples, 0.53%)</title><rect x="339.2" y="403.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="342.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="339.2" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="339.2" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="339.2" y="355.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (17 samples, 0.50%)</title><rect x="339.5" y="387.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="339.5" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.5" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="339.5" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.47%)</title><rect x="339.8" y="371.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="342.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (16 samples, 0.47%)</title><rect x="339.8" y="355.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="342.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (16 samples, 0.47%)</title><rect x="339.8" y="339.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (16 samples, 0.47%)</title><rect x="339.8" y="323.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (16 samples, 0.47%)</title><rect x="339.8" y="307.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="339.8" y="291.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="342.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="339.8" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="339.8" y="259.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.8" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="340.2" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="343.2" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="340.2" y="227.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="343.2" y="238.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.03%)</title><rect x="340.2" y="211.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="343.2" y="222.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.03%)</title><rect x="340.2" y="195.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="343.2" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="340.5" y="291.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="343.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="340.5" y="275.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.41%)</title><rect x="340.5" y="259.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="343.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.41%)</title><rect x="340.5" y="243.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="343.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.41%)</title><rect x="340.5" y="227.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="343.5" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="340.9" y="211.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="343.9" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="341.2" y="211.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="344.2" y="222.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="341.6" y="211.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="344.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (65 samples, 1.90%)</title><rect x="345.4" y="403.0" width="22.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="348.4" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="345.4" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="345.4" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="345.4" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="345.4" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="348.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (64 samples, 1.87%)</title><rect x="345.7" y="387.0" width="22.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.7" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (64 samples, 1.87%)</title><rect x="345.7" y="371.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="348.7" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (38 samples, 1.11%)</title><rect x="346.1" y="355.0" width="13.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.1" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="346.1" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="349.1" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="346.1" y="323.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="349.1" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="346.1" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="349.1" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="346.1" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="349.1" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="346.1" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="349.1" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="346.1" y="259.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="349.1" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="346.1" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="349.1" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="346.1" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="349.1" y="238.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="346.1" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="349.1" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.03%)</title><rect x="346.1" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="349.1" y="206.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="346.1" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="349.1" y="190.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="346.1" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="349.1" y="174.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.08%)</title><rect x="346.4" y="339.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 1.08%)</title><rect x="346.4" y="323.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 1.08%)</title><rect x="346.4" y="307.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="346.7" y="291.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.7" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="346.7" y="275.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (34 samples, 0.99%)</title><rect x="347.1" y="275.0" width="11.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.03%)</title><rect x="347.1" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (33 samples, 0.96%)</title><rect x="347.4" y="259.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="350.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (33 samples, 0.96%)</title><rect x="347.4" y="243.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.4" y="254.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="347.8" y="227.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="350.8" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (31 samples, 0.91%)</title><rect x="348.1" y="227.0" width="10.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="351.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="358.8" y="275.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="361.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="358.8" y="259.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="361.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="358.8" y="243.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="361.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.09%)</title><rect x="359.2" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.03%)</title><rect x="359.2" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="362.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="359.2" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.2" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.06%)</title><rect x="359.5" y="339.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="360.2" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (20 samples, 0.58%)</title><rect x="360.5" y="355.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (17 samples, 0.50%)</title><rect x="360.5" y="339.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="363.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (17 samples, 0.50%)</title><rect x="360.5" y="323.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="363.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (17 samples, 0.50%)</title><rect x="360.5" y="307.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (17 samples, 0.50%)</title><rect x="360.5" y="291.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="363.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.50%)</title><rect x="360.5" y="275.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.50%)</title><rect x="360.5" y="259.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.50%)</title><rect x="360.5" y="243.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="363.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (2 samples, 0.06%)</title><rect x="360.5" y="227.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (15 samples, 0.44%)</title><rect x="361.2" y="227.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.41%)</title><rect x="361.6" y="211.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.6" y="222.0"></text>
</g>
<g>
<title>write (14 samples, 0.41%)</title><rect x="361.6" y="195.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="364.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (3 samples, 0.09%)</title><rect x="366.4" y="339.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.4" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.09%)</title><rect x="366.4" y="323.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.4" y="334.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="366.4" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.4" y="318.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (2 samples, 0.06%)</title><rect x="366.8" y="307.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="369.8" y="318.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="366.8" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="369.8" y="302.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="366.8" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="369.8" y="286.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="366.8" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="369.8" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="366.8" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="369.8" y="254.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="367.1" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="370.1" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="367.1" y="275.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="370.1" y="286.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="367.1" y="259.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="370.1" y="270.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.03%)</title><rect x="367.1" y="243.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="370.1" y="254.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="367.5" y="355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.5" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.03%)</title><rect x="367.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="367.5" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="370.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (74 samples, 2.16%)</title><rect x="367.8" y="451.0" width="25.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (74 samples, 2.16%)</title><rect x="367.8" y="435.0" width="25.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.8" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.18%)</title><rect x="367.8" y="419.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.18%)</title><rect x="367.8" y="403.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="370.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="367.8" y="387.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="367.8" y="371.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="370.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.18%)</title><rect x="367.8" y="355.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="370.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (6 samples, 0.18%)</title><rect x="367.8" y="339.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (6 samples, 0.18%)</title><rect x="367.8" y="323.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="370.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="367.8" y="307.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="367.8" y="291.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="367.8" y="275.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="367.8" y="259.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="370.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="368.1" y="243.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="371.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.12%)</title><rect x="368.5" y="243.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.5" y="254.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="368.5" y="227.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="371.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (68 samples, 1.99%)</title><rect x="369.9" y="419.0" width="23.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.9" y="430.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (68 samples, 1.99%)</title><rect x="369.9" y="403.0" width="23.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="372.9" y="414.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (68 samples, 1.99%)</title><rect x="369.9" y="387.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.9" y="398.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (68 samples, 1.99%)</title><rect x="369.9" y="371.0" width="23.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="372.9" y="382.0">J..</text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="369.9" y="355.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="372.9" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (67 samples, 1.96%)</title><rect x="370.2" y="355.0" width="23.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="373.2" y="366.0">r..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (67 samples, 1.96%)</title><rect x="370.2" y="339.0" width="23.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.2" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (67 samples, 1.96%)</title><rect x="370.2" y="323.0" width="23.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="373.2" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (67 samples, 1.96%)</title><rect x="370.2" y="307.0" width="23.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="373.2" y="318.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (67 samples, 1.96%)</title><rect x="370.2" y="291.0" width="23.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="373.2" y="302.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (66 samples, 1.93%)</title><rect x="370.2" y="275.0" width="22.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="373.2" y="286.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (19 samples, 0.56%)</title><rect x="370.9" y="259.0" width="6.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="373.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (19 samples, 0.56%)</title><rect x="370.9" y="243.0" width="6.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="373.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (19 samples, 0.56%)</title><rect x="370.9" y="227.0" width="6.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="373.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (18 samples, 0.53%)</title><rect x="370.9" y="211.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="373.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (18 samples, 0.53%)</title><rect x="370.9" y="195.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="373.9" y="206.0"></text>
</g>
<g>
<title>write (18 samples, 0.53%)</title><rect x="370.9" y="179.0" width="6.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="373.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="377.1" y="211.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="377.1" y="195.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="380.1" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="377.1" y="179.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="380.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.03%)</title><rect x="377.5" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="380.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="377.8" y="259.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="380.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="377.8" y="243.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="377.8" y="227.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="380.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="377.8" y="211.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.15%)</title><rect x="377.8" y="195.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="380.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="377.8" y="179.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="380.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="379.5" y="259.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="382.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="379.5" y="243.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="382.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="379.5" y="227.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="382.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="379.5" y="211.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="382.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="379.5" y="195.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="382.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="379.5" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="382.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="379.5" y="163.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="382.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.06%)</title><rect x="379.5" y="147.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="382.5" y="158.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="379.9" y="131.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="382.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (20 samples, 0.58%)</title><rect x="380.2" y="259.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="383.2" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (13 samples, 0.38%)</title><rect x="381.9" y="243.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="384.9" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="386.4" y="243.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="389.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="386.4" y="227.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="389.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (16 samples, 0.47%)</title><rect x="387.1" y="259.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="390.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (16 samples, 0.47%)</title><rect x="387.1" y="243.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="390.1" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (16 samples, 0.47%)</title><rect x="387.1" y="227.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="390.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="392.6" y="259.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="395.6" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="392.6" y="243.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="395.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="392.6" y="227.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="395.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="393.0" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="396.0" y="286.0"></text>
</g>
<g>
<title>[async_worker_0 tid=56067] (61 samples, 1.78%)</title><rect x="393.3" y="515.0" width="21.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="396.3" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (61 samples, 1.78%)</title><rect x="393.3" y="499.0" width="21.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.3" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (61 samples, 1.78%)</title><rect x="393.3" y="483.0" width="21.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="396.3" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (61 samples, 1.78%)</title><rect x="393.3" y="467.0" width="21.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 0.26%)</title><rect x="393.3" y="451.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (9 samples, 0.26%)</title><rect x="393.3" y="435.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (8 samples, 0.23%)</title><rect x="393.3" y="419.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.23%)</title><rect x="393.3" y="403.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.23%)</title><rect x="393.3" y="387.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="396.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.23%)</title><rect x="393.3" y="371.0" width="2.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="396.3" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.23%)</title><rect x="393.3" y="355.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="396.3" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.23%)</title><rect x="393.3" y="339.0" width="2.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="396.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="396.1" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="396.1" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="396.1" y="387.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="396.1" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="396.1" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="396.1" y="339.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.1" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="396.1" y="323.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="399.1" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="396.1" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="399.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="396.1" y="291.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="399.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (52 samples, 1.52%)</title><rect x="396.4" y="451.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (52 samples, 1.52%)</title><rect x="396.4" y="435.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="399.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (12 samples, 0.35%)</title><rect x="396.4" y="419.0" width="4.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 0.35%)</title><rect x="396.4" y="403.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="399.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="396.4" y="387.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="396.8" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.29%)</title><rect x="397.1" y="387.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.29%)</title><rect x="397.1" y="371.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.29%)</title><rect x="397.1" y="355.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="400.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.29%)</title><rect x="397.1" y="339.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="400.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.29%)</title><rect x="397.1" y="323.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="397.1" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="400.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="397.1" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="397.1" y="275.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="400.1" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="397.1" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="400.1" y="270.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="397.1" y="243.0" width="0.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="400.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="397.5" y="307.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="400.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="397.5" y="291.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.26%)</title><rect x="397.5" y="275.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.26%)</title><rect x="397.5" y="259.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.26%)</title><rect x="397.5" y="243.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="400.5" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="397.5" y="227.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="400.5" y="238.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="397.8" y="227.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="400.8" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (40 samples, 1.17%)</title><rect x="400.6" y="419.0" width="13.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.6" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="400.6" y="403.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.6" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="400.6" y="387.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.6" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (40 samples, 1.17%)</title><rect x="400.6" y="371.0" width="13.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="403.6" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (40 samples, 1.17%)</title><rect x="400.6" y="355.0" width="13.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="403.6" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="400.6" y="339.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="403.6" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="400.6" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="403.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 1.14%)</title><rect x="400.9" y="339.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (39 samples, 1.14%)</title><rect x="400.9" y="323.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="403.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (39 samples, 1.14%)</title><rect x="400.9" y="307.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="403.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (37 samples, 1.08%)</title><rect x="400.9" y="291.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="403.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (37 samples, 1.08%)</title><rect x="400.9" y="275.0" width="12.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="403.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (12 samples, 0.35%)</title><rect x="400.9" y="259.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="403.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (12 samples, 0.35%)</title><rect x="400.9" y="243.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="403.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (12 samples, 0.35%)</title><rect x="400.9" y="227.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="403.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (12 samples, 0.35%)</title><rect x="400.9" y="211.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="403.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (12 samples, 0.35%)</title><rect x="400.9" y="195.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="403.9" y="206.0"></text>
</g>
<g>
<title>write (12 samples, 0.35%)</title><rect x="400.9" y="179.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="403.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.12%)</title><rect x="405.1" y="259.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="408.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="405.1" y="243.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="408.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="405.1" y="227.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="405.1" y="211.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="408.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="405.1" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="408.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="405.4" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="408.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="405.4" y="179.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="408.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="406.1" y="163.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="409.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="406.1" y="147.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="409.1" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (12 samples, 0.35%)</title><rect x="406.4" y="259.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="409.4" y="270.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="406.8" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="409.8" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="407.1" y="243.0" width="3.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="410.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (8 samples, 0.23%)</title><rect x="410.6" y="259.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="413.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 0.23%)</title><rect x="410.6" y="243.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="413.6" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (6 samples, 0.18%)</title><rect x="411.3" y="227.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="414.3" y="238.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="413.3" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="416.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="413.7" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="416.7" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="413.7" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="416.7" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="413.7" y="259.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="416.7" y="270.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="413.7" y="243.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="416.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="414.0" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="417.0" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="414.0" y="275.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="417.0" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="414.0" y="259.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="417.0" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="414.0" y="243.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="417.0" y="254.0"></text>
</g>
<g>
<title>[async_worker_0 tid=77315] (66 samples, 1.93%)</title><rect x="414.4" y="515.0" width="22.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="417.4" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (66 samples, 1.93%)</title><rect x="414.4" y="499.0" width="22.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.4" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (66 samples, 1.93%)</title><rect x="414.4" y="483.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.4" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (66 samples, 1.93%)</title><rect x="414.4" y="467.0" width="22.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.4" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 0.44%)</title><rect x="414.4" y="451.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (15 samples, 0.44%)</title><rect x="414.4" y="435.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 0.44%)</title><rect x="414.4" y="419.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 0.44%)</title><rect x="414.4" y="403.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="417.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (15 samples, 0.44%)</title><rect x="414.4" y="387.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.4" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (13 samples, 0.38%)</title><rect x="415.1" y="371.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="418.1" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.35%)</title><rect x="415.1" y="355.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="418.1" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.35%)</title><rect x="415.1" y="339.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="418.1" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="419.2" y="355.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="422.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (51 samples, 1.49%)</title><rect x="419.5" y="451.0" width="17.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (51 samples, 1.49%)</title><rect x="419.5" y="435.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="419.5" y="419.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.23%)</title><rect x="419.5" y="403.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="419.5" y="387.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="419.5" y="371.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="419.9" y="371.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="419.9" y="355.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="419.9" y="339.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="419.9" y="323.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="419.9" y="307.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="419.9" y="291.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="419.9" y="275.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="419.9" y="259.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="422.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="420.2" y="243.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="423.2" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="420.2" y="227.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="423.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (43 samples, 1.26%)</title><rect x="422.3" y="419.0" width="14.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.3" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (43 samples, 1.26%)</title><rect x="422.3" y="403.0" width="14.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.3" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (43 samples, 1.26%)</title><rect x="422.3" y="387.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="425.3" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (42 samples, 1.23%)</title><rect x="422.7" y="371.0" width="14.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="425.7" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (42 samples, 1.23%)</title><rect x="422.7" y="355.0" width="14.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.7" y="366.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="422.7" y="339.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="425.7" y="350.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="423.0" y="339.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="426.0" y="350.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="423.0" y="323.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="426.0" y="334.0"></text>
</g>
<g>
<title>szone_malloc (1 samples, 0.03%)</title><rect x="423.0" y="307.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="426.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (40 samples, 1.17%)</title><rect x="423.3" y="339.0" width="13.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="426.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (40 samples, 1.17%)</title><rect x="423.3" y="323.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (39 samples, 1.14%)</title><rect x="423.3" y="307.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="426.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (36 samples, 1.05%)</title><rect x="423.3" y="291.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="426.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (35 samples, 1.02%)</title><rect x="423.3" y="275.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="426.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (15 samples, 0.44%)</title><rect x="423.3" y="259.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="426.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (15 samples, 0.44%)</title><rect x="423.3" y="243.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="426.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (15 samples, 0.44%)</title><rect x="423.3" y="227.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="426.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (14 samples, 0.41%)</title><rect x="423.3" y="211.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (14 samples, 0.41%)</title><rect x="423.3" y="195.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="426.3" y="206.0"></text>
</g>
<g>
<title>write (14 samples, 0.41%)</title><rect x="423.3" y="179.0" width="4.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="426.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="428.2" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="428.2" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="431.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="428.2" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.06%)</title><rect x="428.5" y="259.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="431.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="428.5" y="243.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="428.5" y="227.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.03%)</title><rect x="428.5" y="211.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="431.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="428.9" y="211.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="431.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="428.9" y="195.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="431.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="428.9" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="431.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="428.9" y="163.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="431.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="428.9" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="431.9" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="428.9" y="131.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="431.9" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (12 samples, 0.35%)</title><rect x="429.2" y="259.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="432.2" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="429.6" y="243.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="432.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="433.0" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="436.0" y="254.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="433.0" y="227.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="436.0" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_check_init_slow (1 samples, 0.03%)</title><rect x="433.0" y="211.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="436.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (6 samples, 0.18%)</title><rect x="433.4" y="259.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="436.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 0.18%)</title><rect x="433.4" y="243.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="436.4" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (5 samples, 0.15%)</title><rect x="433.7" y="227.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="436.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.03%)</title><rect x="435.4" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="438.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="435.8" y="291.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="438.8" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="435.8" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="438.8" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="435.8" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="438.8" y="270.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="435.8" y="243.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="438.8" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="435.8" y="227.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="438.8" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="435.8" y="211.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="438.8" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="435.8" y="195.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="438.8" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="436.1" y="275.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="439.1" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="436.1" y="259.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="439.1" y="270.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="436.1" y="243.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="439.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="436.5" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="439.5" y="302.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="436.5" y="275.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="439.5" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="436.5" y="259.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="439.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="436.8" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="439.8" y="318.0"></text>
</g>
<g>
<title>[async_worker_1 tid=52227] (179 samples, 5.23%)</title><rect x="437.1" y="515.0" width="61.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="440.1" y="526.0">[async..</text>
</g>
<g>
<title>java/lang/Thread.run (179 samples, 5.23%)</title><rect x="437.1" y="499.0" width="61.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.1" y="510.0">java/l..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (179 samples, 5.23%)</title><rect x="437.1" y="483.0" width="61.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.1" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (179 samples, 5.23%)</title><rect x="437.1" y="467.0" width="61.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.1" y="478.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (28 samples, 0.82%)</title><rect x="437.1" y="451.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (28 samples, 0.82%)</title><rect x="437.1" y="435.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="440.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (24 samples, 0.70%)</title><rect x="437.1" y="419.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="437.1" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="440.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="437.1" y="387.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="437.1" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="437.1" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (23 samples, 0.67%)</title><rect x="437.5" y="403.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="440.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (23 samples, 0.67%)</title><rect x="437.5" y="387.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="440.5" y="398.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="438.5" y="371.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="441.5" y="382.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="438.9" y="371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="441.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (18 samples, 0.53%)</title><rect x="439.2" y="371.0" width="6.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="442.2" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.50%)</title><rect x="439.2" y="355.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="442.2" y="366.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="439.2" y="339.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="442.2" y="350.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="439.2" y="323.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="442.2" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (16 samples, 0.47%)</title><rect x="439.6" y="339.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="442.6" y="350.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="445.1" y="355.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="448.1" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="445.4" y="419.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.4" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="445.4" y="403.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.4" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="445.4" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.4" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="445.4" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.4" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="445.4" y="355.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.4" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="445.4" y="339.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="448.4" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="445.4" y="323.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="448.4" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="445.8" y="323.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="448.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (81 samples, 2.37%)</title><rect x="446.8" y="451.0" width="28.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (81 samples, 2.37%)</title><rect x="446.8" y="435.0" width="28.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.8" y="446.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (81 samples, 2.37%)</title><rect x="446.8" y="419.0" width="28.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.8" y="430.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.50%)</title><rect x="446.8" y="403.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="447.2" y="387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="447.2" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="447.2" y="355.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.41%)</title><rect x="447.5" y="387.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="450.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="447.5" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="450.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.38%)</title><rect x="447.8" y="371.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.38%)</title><rect x="447.8" y="355.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.38%)</title><rect x="447.8" y="339.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.8" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.38%)</title><rect x="447.8" y="323.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.38%)</title><rect x="447.8" y="307.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="450.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="447.8" y="291.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="447.8" y="275.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="447.8" y="259.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="450.8" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="448.2" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="451.2" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.03%)</title><rect x="448.2" y="227.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="451.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="448.5" y="291.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="448.5" y="275.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (11 samples, 0.32%)</title><rect x="448.5" y="259.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="451.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (11 samples, 0.32%)</title><rect x="448.5" y="243.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (11 samples, 0.32%)</title><rect x="448.5" y="227.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.5" y="238.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="448.5" y="211.0" width="3.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="451.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="452.3" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (64 samples, 1.87%)</title><rect x="452.7" y="403.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.7" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="452.7" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="455.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="452.7" y="371.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="452.7" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="452.7" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (63 samples, 1.84%)</title><rect x="453.0" y="387.0" width="21.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="456.0" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (63 samples, 1.84%)</title><rect x="453.0" y="371.0" width="21.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="456.0" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (39 samples, 1.14%)</title><rect x="453.0" y="355.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="456.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.08%)</title><rect x="453.4" y="339.0" width="12.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="456.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="453.4" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="453.4" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.03%)</title><rect x="453.4" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 1.05%)</title><rect x="453.7" y="323.0" width="12.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="456.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="453.7" y="307.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="456.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="453.7" y="291.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="456.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (35 samples, 1.02%)</title><rect x="453.7" y="275.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="456.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (35 samples, 1.02%)</title><rect x="453.7" y="259.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (35 samples, 1.02%)</title><rect x="453.7" y="243.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="456.7" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.99%)</title><rect x="454.1" y="227.0" width="11.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="457.1" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="465.8" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="465.8" y="259.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.03%)</title><rect x="465.8" y="243.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="468.8" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (1 samples, 0.03%)</title><rect x="466.1" y="339.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (4 samples, 0.12%)</title><rect x="466.5" y="355.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (3 samples, 0.09%)</title><rect x="466.5" y="339.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="469.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="466.8" y="323.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.8" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="467.2" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="470.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="467.5" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="470.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="467.5" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="467.5" y="307.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.5" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="467.5" y="291.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="470.5" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="467.5" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="470.5" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="467.5" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="470.5" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.06%)</title><rect x="467.9" y="355.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="470.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="468.2" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.2" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (18 samples, 0.53%)</title><rect x="468.5" y="355.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="471.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (9 samples, 0.26%)</title><rect x="468.5" y="339.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (9 samples, 0.26%)</title><rect x="468.5" y="323.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (9 samples, 0.26%)</title><rect x="468.5" y="307.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="471.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.26%)</title><rect x="468.5" y="291.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="468.5" y="275.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="471.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="468.5" y="259.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.26%)</title><rect x="468.5" y="243.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.26%)</title><rect x="468.5" y="227.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.26%)</title><rect x="468.5" y="211.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.5" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="468.5" y="195.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="471.5" y="206.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="468.9" y="195.0" width="2.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="471.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (9 samples, 0.26%)</title><rect x="471.6" y="339.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.6" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (9 samples, 0.26%)</title><rect x="471.6" y="323.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.6" y="334.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (9 samples, 0.26%)</title><rect x="471.6" y="307.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="474.6" y="318.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="471.6" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="474.6" y="302.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="472.0" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="475.0" y="302.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="472.3" y="291.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="475.3" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="472.3" y="275.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="475.3" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="472.3" y="259.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="475.3" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="472.3" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="475.3" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="472.3" y="227.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="475.3" y="238.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="472.3" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="475.3" y="222.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="472.7" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="475.7" y="302.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="472.7" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="475.7" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (5 samples, 0.15%)</title><rect x="473.0" y="291.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="476.0" y="302.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="473.0" y="275.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="476.0" y="286.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="473.0" y="259.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="476.0" y="270.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (4 samples, 0.12%)</title><rect x="473.4" y="275.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="476.4" y="286.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="473.7" y="259.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="476.7" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="474.1" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="477.1" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.03%)</title><rect x="474.1" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="477.1" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="474.1" y="227.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="477.1" y="238.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="474.1" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.1" y="222.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.03%)</title><rect x="474.1" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="477.1" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="474.4" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="477.4" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="474.4" y="243.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="477.4" y="254.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="474.4" y="227.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="477.4" y="238.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.03%)</title><rect x="474.4" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="477.4" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (70 samples, 2.05%)</title><rect x="474.8" y="451.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (70 samples, 2.05%)</title><rect x="474.8" y="435.0" width="24.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="477.8" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.20%)</title><rect x="474.8" y="419.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="474.8" y="403.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="474.8" y="387.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="477.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="474.8" y="371.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="474.8" y="355.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="477.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="474.8" y="339.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="477.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="474.8" y="323.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.8" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="474.8" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="477.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="474.8" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="474.8" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="475.1" y="307.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="478.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="475.1" y="291.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="475.1" y="275.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="478.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="475.1" y="259.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="475.1" y="243.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.1" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="475.1" y="227.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="478.1" y="238.0"></text>
</g>
<g>
<title>write (5 samples, 0.15%)</title><rect x="475.4" y="227.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="478.4" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (63 samples, 1.84%)</title><rect x="477.2" y="419.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="480.2" y="430.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (62 samples, 1.81%)</title><rect x="477.2" y="403.0" width="21.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="480.2" y="414.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (62 samples, 1.81%)</title><rect x="477.2" y="387.0" width="21.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.2" y="398.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (62 samples, 1.81%)</title><rect x="477.2" y="371.0" width="21.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="480.2" y="382.0">J..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="477.2" y="355.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="480.2" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (61 samples, 1.78%)</title><rect x="477.5" y="355.0" width="21.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="480.5" y="366.0">r..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="477.5" y="339.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="480.5" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="477.5" y="323.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="480.5" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="477.5" y="307.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="480.5" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="477.5" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="480.5" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="477.5" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="480.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="477.5" y="259.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="480.5" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.03%)</title><rect x="477.5" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="480.5" y="254.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="477.9" y="339.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="480.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (59 samples, 1.73%)</title><rect x="478.2" y="339.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="481.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (59 samples, 1.73%)</title><rect x="478.2" y="323.0" width="20.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="481.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (58 samples, 1.70%)</title><rect x="478.2" y="307.0" width="20.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="481.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (56 samples, 1.64%)</title><rect x="478.5" y="291.0" width="19.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="481.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (56 samples, 1.64%)</title><rect x="478.5" y="275.0" width="19.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="481.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (15 samples, 0.44%)</title><rect x="478.5" y="259.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="481.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (14 samples, 0.41%)</title><rect x="478.9" y="243.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="481.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (14 samples, 0.41%)</title><rect x="478.9" y="227.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="481.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (12 samples, 0.35%)</title><rect x="478.9" y="211.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="481.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (12 samples, 0.35%)</title><rect x="478.9" y="195.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="481.9" y="206.0"></text>
</g>
<g>
<title>write (12 samples, 0.35%)</title><rect x="478.9" y="179.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="481.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.06%)</title><rect x="483.0" y="211.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="486.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="483.0" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="486.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="483.4" y="195.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="486.4" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="483.4" y="179.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="486.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="483.7" y="259.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="486.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="483.7" y="243.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="486.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="483.7" y="227.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="486.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="483.7" y="211.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="486.7" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="483.7" y="195.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="486.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="484.1" y="195.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="487.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="484.4" y="179.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="487.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (21 samples, 0.61%)</title><rect x="485.5" y="259.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="488.5" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (14 samples, 0.41%)</title><rect x="486.1" y="243.0" width="4.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="489.1" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.15%)</title><rect x="491.0" y="243.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="494.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (5 samples, 0.15%)</title><rect x="491.0" y="227.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="494.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (14 samples, 0.41%)</title><rect x="492.7" y="259.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 0.41%)</title><rect x="492.7" y="243.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="495.7" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (14 samples, 0.41%)</title><rect x="492.7" y="227.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="495.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="497.5" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="500.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="497.9" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="500.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="498.2" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="501.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="498.6" y="403.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.6" y="414.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="498.6" y="387.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="501.6" y="398.0"></text>
</g>
<g>
<title>[async_worker_1 tid=53763] (69 samples, 2.02%)</title><rect x="498.9" y="515.0" width="23.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="501.9" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (69 samples, 2.02%)</title><rect x="498.9" y="499.0" width="23.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.9" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (69 samples, 2.02%)</title><rect x="498.9" y="483.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="501.9" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (69 samples, 2.02%)</title><rect x="498.9" y="467.0" width="23.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.9" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 0.38%)</title><rect x="498.9" y="451.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (13 samples, 0.38%)</title><rect x="498.9" y="435.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 0.38%)</title><rect x="498.9" y="419.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 0.38%)</title><rect x="498.9" y="403.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (13 samples, 0.38%)</title><rect x="498.9" y="387.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (12 samples, 0.35%)</title><rect x="499.3" y="371.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="502.3" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.32%)</title><rect x="499.3" y="355.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="502.3" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (11 samples, 0.32%)</title><rect x="499.3" y="339.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="502.3" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="503.0" y="355.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="506.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (56 samples, 1.64%)</title><rect x="503.4" y="451.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (56 samples, 1.64%)</title><rect x="503.4" y="435.0" width="19.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="506.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.20%)</title><rect x="503.4" y="419.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="503.4" y="403.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="503.4" y="387.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="506.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="503.4" y="371.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="503.4" y="355.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="503.4" y="339.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="506.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="503.4" y="323.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="506.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="503.4" y="307.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="506.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="503.4" y="291.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="506.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="503.4" y="275.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="503.4" y="259.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="503.4" y="243.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="506.4" y="254.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="503.7" y="227.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="506.7" y="238.0"></text>
</g>
<g>
<title>write (5 samples, 0.15%)</title><rect x="504.1" y="227.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="507.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (49 samples, 1.43%)</title><rect x="505.8" y="419.0" width="16.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.8" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (47 samples, 1.37%)</title><rect x="505.8" y="403.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.8" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (47 samples, 1.37%)</title><rect x="505.8" y="387.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.8" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (47 samples, 1.37%)</title><rect x="505.8" y="371.0" width="16.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="508.8" y="382.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="505.8" y="355.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="508.8" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="506.2" y="355.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="509.2" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (45 samples, 1.32%)</title><rect x="506.5" y="355.0" width="15.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.5" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (45 samples, 1.32%)</title><rect x="506.5" y="339.0" width="15.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="509.5" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (45 samples, 1.32%)</title><rect x="506.5" y="323.0" width="15.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="509.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (45 samples, 1.32%)</title><rect x="506.5" y="307.0" width="15.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="509.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (45 samples, 1.32%)</title><rect x="506.5" y="291.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="509.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (45 samples, 1.32%)</title><rect x="506.5" y="275.0" width="15.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="509.5" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (11 samples, 0.32%)</title><rect x="507.2" y="259.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (11 samples, 0.32%)</title><rect x="507.2" y="243.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="510.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (11 samples, 0.32%)</title><rect x="507.2" y="227.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (11 samples, 0.32%)</title><rect x="507.2" y="211.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (11 samples, 0.32%)</title><rect x="507.2" y="195.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="510.2" y="206.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="507.2" y="179.0" width="3.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="510.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (6 samples, 0.18%)</title><rect x="511.0" y="259.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="514.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="511.0" y="243.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="514.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="511.0" y="227.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="514.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="511.0" y="211.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="514.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.15%)</title><rect x="511.0" y="195.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="514.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="511.3" y="179.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="514.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="512.7" y="195.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="515.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="513.1" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="516.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="513.1" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="516.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="513.1" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="516.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="513.1" y="211.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="516.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="513.1" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="516.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (17 samples, 0.50%)</title><rect x="513.4" y="259.0" width="5.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="516.4" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (11 samples, 0.32%)</title><rect x="515.1" y="243.0" width="3.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="518.1" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="518.9" y="243.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="521.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="518.9" y="227.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="521.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 0.15%)</title><rect x="519.3" y="259.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="522.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (5 samples, 0.15%)</title><rect x="519.3" y="243.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="522.3" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (4 samples, 0.12%)</title><rect x="519.6" y="227.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="522.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (2 samples, 0.06%)</title><rect x="521.0" y="259.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="524.0" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="521.3" y="243.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="524.3" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="521.3" y="227.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="524.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="521.7" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="524.7" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="521.7" y="243.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="524.7" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="521.7" y="227.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="524.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toByteArray (2 samples, 0.06%)</title><rect x="522.0" y="403.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="525.0" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="522.0" y="387.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="525.0" y="398.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="522.0" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="525.0" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="522.0" y="355.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.0" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="522.0" y="339.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="525.0" y="350.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="522.0" y="323.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="525.0" y="334.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="522.0" y="307.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="525.0" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="522.4" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.4" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="522.4" y="371.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.4" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="522.4" y="355.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="525.4" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="522.4" y="339.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="525.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="522.4" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="525.4" y="334.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="522.4" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.4" y="318.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="522.4" y="291.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="525.4" y="302.0"></text>
</g>
<g>
<title>[async_worker_1 tid=54275] (70 samples, 2.05%)</title><rect x="522.7" y="515.0" width="24.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="525.7" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (70 samples, 2.05%)</title><rect x="522.7" y="499.0" width="24.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.7" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (70 samples, 2.05%)</title><rect x="522.7" y="483.0" width="24.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="525.7" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (70 samples, 2.05%)</title><rect x="522.7" y="467.0" width="24.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.7" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.47%)</title><rect x="522.7" y="451.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.47%)</title><rect x="522.7" y="435.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="525.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 0.35%)</title><rect x="522.7" y="419.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="525.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="522.7" y="403.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="522.7" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="525.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="522.7" y="371.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="522.7" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="525.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (11 samples, 0.32%)</title><rect x="523.1" y="403.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="526.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (11 samples, 0.32%)</title><rect x="523.1" y="387.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="526.1" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 0.23%)</title><rect x="523.7" y="371.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="526.7" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.20%)</title><rect x="523.7" y="355.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="526.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="523.7" y="339.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="526.7" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="526.2" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="529.2" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="526.2" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="529.2" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.03%)</title><rect x="526.2" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="529.2" y="334.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="526.5" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="529.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="526.9" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="529.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="526.9" y="403.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="526.9" y="387.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="529.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="526.9" y="371.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="526.9" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="527.2" y="355.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="530.2" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="527.2" y="339.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="530.2" y="350.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.03%)</title><rect x="527.2" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="530.2" y="334.0"></text>
</g>
<g>
<title>Thread::last_handle_mark() const (1 samples, 0.03%)</title><rect x="527.2" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="530.2" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="527.5" y="323.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="530.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (54 samples, 1.58%)</title><rect x="528.2" y="451.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.2" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (54 samples, 1.58%)</title><rect x="528.2" y="435.0" width="18.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.2" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.26%)</title><rect x="528.6" y="419.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="528.6" y="403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="528.6" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="531.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="528.6" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.23%)</title><rect x="528.9" y="403.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="531.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="528.9" y="387.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="528.9" y="371.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="531.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.23%)</title><rect x="528.9" y="355.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.23%)</title><rect x="528.9" y="339.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.23%)</title><rect x="528.9" y="323.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="528.9" y="307.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="531.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="528.9" y="291.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="528.9" y="275.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="531.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="528.9" y="259.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="531.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="528.9" y="243.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="531.9" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="528.9" y="227.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="531.9" y="238.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="529.3" y="227.0" width="2.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="532.3" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="531.3" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="534.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (44 samples, 1.29%)</title><rect x="531.7" y="419.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.7" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (44 samples, 1.29%)</title><rect x="531.7" y="403.0" width="15.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.7" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (44 samples, 1.29%)</title><rect x="531.7" y="387.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="534.7" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (44 samples, 1.29%)</title><rect x="531.7" y="371.0" width="15.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="534.7" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (44 samples, 1.29%)</title><rect x="531.7" y="355.0" width="15.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="534.7" y="366.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="531.7" y="339.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="534.7" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="531.7" y="323.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="534.7" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="531.7" y="307.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="534.7" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="532.0" y="339.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="535.0" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="532.0" y="323.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="535.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (42 samples, 1.23%)</title><rect x="532.4" y="339.0" width="14.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="535.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.23%)</title><rect x="532.4" y="323.0" width="14.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="535.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.23%)</title><rect x="532.4" y="307.0" width="14.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="535.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (41 samples, 1.20%)</title><rect x="532.4" y="291.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="535.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (40 samples, 1.17%)</title><rect x="532.4" y="275.0" width="13.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="535.4" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_destroy (1 samples, 0.03%)</title><rect x="532.4" y="259.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="535.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (10 samples, 0.29%)</title><rect x="532.7" y="259.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="535.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (10 samples, 0.29%)</title><rect x="532.7" y="243.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="535.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (10 samples, 0.29%)</title><rect x="532.7" y="227.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="535.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (9 samples, 0.26%)</title><rect x="532.7" y="211.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="535.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (9 samples, 0.26%)</title><rect x="532.7" y="195.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="532.7" y="179.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="535.7" y="190.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="533.1" y="179.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="536.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="535.8" y="211.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="538.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="535.8" y="195.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="538.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="536.2" y="259.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="536.5" y="243.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="539.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="536.5" y="227.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="539.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="536.5" y="211.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="536.5" y="195.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="539.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="537.2" y="179.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="540.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="537.5" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="540.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="537.5" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="540.5" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="537.5" y="131.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="537.9" y="259.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="540.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="537.9" y="243.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="540.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="537.9" y="227.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.03%)</title><rect x="537.9" y="211.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="540.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="538.2" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="541.2" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="538.2" y="195.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="541.2" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="538.2" y="179.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="541.2" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="538.2" y="163.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="541.2" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="538.2" y="147.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="541.2" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="538.2" y="131.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="541.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 0.41%)</title><rect x="538.6" y="259.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="541.6" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="540.0" y="243.0" width="3.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="543.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (8 samples, 0.23%)</title><rect x="543.4" y="259.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="546.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 0.23%)</title><rect x="543.4" y="243.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="546.4" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (7 samples, 0.20%)</title><rect x="543.8" y="227.0" width="2.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="546.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.03%)</title><rect x="546.2" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="546.5" y="291.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.5" y="302.0"></text>
</g>
<g>
<title>default_zone_free_definite_size (1 samples, 0.03%)</title><rect x="546.5" y="275.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="549.5" y="286.0"></text>
</g>
<g>
<title>[async_worker_2 tid=54787] (51 samples, 1.49%)</title><rect x="546.9" y="515.0" width="17.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="549.9" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (51 samples, 1.49%)</title><rect x="546.9" y="499.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="549.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (51 samples, 1.49%)</title><rect x="546.9" y="483.0" width="17.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (51 samples, 1.49%)</title><rect x="546.9" y="467.0" width="17.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.9" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 0.26%)</title><rect x="546.9" y="451.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="549.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (9 samples, 0.26%)</title><rect x="546.9" y="435.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="549.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 0.26%)</title><rect x="546.9" y="419.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.26%)</title><rect x="546.9" y="403.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="549.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.26%)</title><rect x="546.9" y="387.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (9 samples, 0.26%)</title><rect x="546.9" y="371.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="549.9" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.26%)</title><rect x="546.9" y="355.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="549.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.26%)</title><rect x="546.9" y="339.0" width="3.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="549.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (42 samples, 1.23%)</title><rect x="550.0" y="451.0" width="14.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (42 samples, 1.23%)</title><rect x="550.0" y="435.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.26%)</title><rect x="550.0" y="419.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="550.0" y="403.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="550.0" y="387.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="550.0" y="371.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="553.0" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.26%)</title><rect x="550.0" y="355.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.26%)</title><rect x="550.0" y="339.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="553.0" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.26%)</title><rect x="550.0" y="323.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="550.0" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="550.0" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="550.0" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.0" y="286.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="550.0" y="259.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="553.0" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="550.3" y="307.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="550.3" y="291.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.23%)</title><rect x="550.3" y="275.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.23%)</title><rect x="550.3" y="259.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="550.7" y="243.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="553.7" y="254.0"></text>
</g>
<g>
<title>write (7 samples, 0.20%)</title><rect x="550.7" y="227.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="553.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (33 samples, 0.96%)</title><rect x="553.1" y="419.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.1" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (33 samples, 0.96%)</title><rect x="553.1" y="403.0" width="11.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="556.1" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (33 samples, 0.96%)</title><rect x="553.1" y="387.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="556.1" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (33 samples, 0.96%)</title><rect x="553.1" y="371.0" width="11.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="556.1" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (33 samples, 0.96%)</title><rect x="553.1" y="355.0" width="11.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="556.1" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="553.1" y="339.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="556.1" y="350.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="553.1" y="323.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="556.1" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="553.1" y="307.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="556.1" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="553.1" y="291.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="556.1" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="553.1" y="275.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="556.1" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="553.1" y="259.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="556.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (32 samples, 0.94%)</title><rect x="553.4" y="339.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="556.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (32 samples, 0.94%)</title><rect x="553.4" y="323.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="556.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (32 samples, 0.94%)</title><rect x="553.4" y="307.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="556.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (32 samples, 0.94%)</title><rect x="553.4" y="291.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="556.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (32 samples, 0.94%)</title><rect x="553.4" y="275.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="556.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (12 samples, 0.35%)</title><rect x="553.8" y="259.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="556.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (12 samples, 0.35%)</title><rect x="553.8" y="243.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="556.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (12 samples, 0.35%)</title><rect x="553.8" y="227.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="556.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (10 samples, 0.29%)</title><rect x="553.8" y="211.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="556.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (10 samples, 0.29%)</title><rect x="553.8" y="195.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="556.8" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="553.8" y="179.0" width="3.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="556.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.06%)</title><rect x="557.2" y="211.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="560.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="557.2" y="195.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="560.2" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="557.6" y="179.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="560.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="557.9" y="259.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="560.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="557.9" y="243.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="560.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="558.3" y="227.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="561.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="558.3" y="211.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="561.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="558.3" y="195.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="561.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="558.6" y="179.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="561.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="559.3" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="562.3" y="174.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="559.3" y="147.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="562.3" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="559.6" y="259.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="562.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="559.6" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="562.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="559.6" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="562.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="559.6" y="211.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="562.6" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="559.6" y="195.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="562.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="560.0" y="259.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="563.0" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (8 samples, 0.23%)</title><rect x="560.3" y="243.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="563.3" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="563.1" y="243.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="566.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="563.1" y="227.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="566.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (2 samples, 0.06%)</title><rect x="563.8" y="259.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="566.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.06%)</title><rect x="563.8" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="566.8" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.06%)</title><rect x="563.8" y="227.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="566.8" y="238.0"></text>
</g>
<g>
<title>[async_worker_2 tid=55555] (65 samples, 1.90%)</title><rect x="564.5" y="515.0" width="22.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="567.5" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (65 samples, 1.90%)</title><rect x="564.5" y="499.0" width="22.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.5" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 1.90%)</title><rect x="564.5" y="483.0" width="22.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 1.90%)</title><rect x="564.5" y="467.0" width="22.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.47%)</title><rect x="564.5" y="451.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.47%)</title><rect x="564.5" y="435.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 0.47%)</title><rect x="564.5" y="419.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="564.5" y="403.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="564.5" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="564.5" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="564.5" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 0.44%)</title><rect x="564.8" y="403.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (15 samples, 0.44%)</title><rect x="564.8" y="387.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="567.8" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (14 samples, 0.41%)</title><rect x="565.2" y="371.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="568.2" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.32%)</title><rect x="565.2" y="355.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="568.2" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (10 samples, 0.29%)</title><rect x="565.2" y="339.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="568.2" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="568.6" y="339.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="571.6" y="350.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="568.9" y="355.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="571.9" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="569.3" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="572.3" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="569.3" y="339.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="572.3" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="569.3" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.3" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="569.3" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="572.3" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="569.3" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="572.3" y="302.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="569.3" y="275.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="572.3" y="286.0"></text>
</g>
<g>
<title>pthread_cond_wait (1 samples, 0.03%)</title><rect x="569.6" y="355.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="572.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (49 samples, 1.43%)</title><rect x="570.0" y="451.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="573.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (49 samples, 1.43%)</title><rect x="570.0" y="435.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="573.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.26%)</title><rect x="570.0" y="419.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="570.0" y="403.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="573.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="570.0" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="573.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="570.3" y="387.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="573.3" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="570.3" y="371.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="573.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="570.3" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="573.3" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="570.3" y="339.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="573.3" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="570.3" y="323.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="573.3" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.03%)</title><rect x="570.3" y="307.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="573.3" y="318.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="570.3" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="573.3" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="570.7" y="371.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="573.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="570.7" y="355.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="573.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="570.7" y="339.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="573.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="570.7" y="323.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="570.7" y="307.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="573.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="570.7" y="291.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="573.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="570.7" y="275.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="573.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="570.7" y="259.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="570.7" y="243.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.7" y="254.0"></text>
</g>
<g>
<title>write (7 samples, 0.20%)</title><rect x="570.7" y="227.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="573.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (40 samples, 1.17%)</title><rect x="573.1" y="419.0" width="13.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.1" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="573.1" y="403.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="576.1" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="573.1" y="387.0" width="13.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="576.1" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (40 samples, 1.17%)</title><rect x="573.1" y="371.0" width="13.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="576.1" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (40 samples, 1.17%)</title><rect x="573.1" y="355.0" width="13.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="576.1" y="366.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="573.1" y="339.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="576.1" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="573.1" y="323.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="576.1" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="573.1" y="307.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="576.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (39 samples, 1.14%)</title><rect x="573.4" y="339.0" width="13.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (39 samples, 1.14%)</title><rect x="573.4" y="323.0" width="13.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="576.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (39 samples, 1.14%)</title><rect x="573.4" y="307.0" width="13.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="576.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (39 samples, 1.14%)</title><rect x="573.4" y="291.0" width="13.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="576.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (38 samples, 1.11%)</title><rect x="573.4" y="275.0" width="13.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="576.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (10 samples, 0.29%)</title><rect x="573.4" y="259.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="576.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (10 samples, 0.29%)</title><rect x="573.4" y="243.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (10 samples, 0.29%)</title><rect x="573.4" y="227.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="576.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (10 samples, 0.29%)</title><rect x="573.4" y="211.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="576.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (10 samples, 0.29%)</title><rect x="573.4" y="195.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="576.4" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="573.4" y="179.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="576.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.06%)</title><rect x="576.9" y="259.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="579.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="576.9" y="243.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="579.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="576.9" y="227.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="579.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="576.9" y="211.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="579.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="576.9" y="195.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="579.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="576.9" y="179.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="579.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (13 samples, 0.38%)</title><rect x="577.6" y="259.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="580.6" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (11 samples, 0.32%)</title><rect x="577.6" y="243.0" width="3.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="580.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="581.4" y="243.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="584.4" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="581.4" y="227.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="584.4" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="581.7" y="227.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="584.7" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="581.7" y="211.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="584.7" y="222.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="581.7" y="195.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="584.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (12 samples, 0.35%)</title><rect x="582.1" y="259.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="585.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (12 samples, 0.35%)</title><rect x="582.1" y="243.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="585.1" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.35%)</title><rect x="582.1" y="227.0" width="4.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="585.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="586.2" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="589.2" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="586.2" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="589.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="586.2" y="227.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="589.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="586.5" y="275.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="589.5" y="286.0"></text>
</g>
<g>
<title>[async_worker_2 tid=80131] (174 samples, 5.09%)</title><rect x="586.9" y="515.0" width="60.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="589.9" y="526.0">[async..</text>
</g>
<g>
<title>java/lang/Thread.run (174 samples, 5.09%)</title><rect x="586.9" y="499.0" width="60.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.9" y="510.0">java/l..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (174 samples, 5.09%)</title><rect x="586.9" y="483.0" width="60.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="589.9" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (174 samples, 5.09%)</title><rect x="586.9" y="467.0" width="60.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="589.9" y="478.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (25 samples, 0.73%)</title><rect x="586.9" y="451.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="589.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (25 samples, 0.73%)</title><rect x="586.9" y="435.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="589.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (21 samples, 0.61%)</title><rect x="586.9" y="419.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="589.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.03%)</title><rect x="586.9" y="403.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="586.9" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="586.9" y="371.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="589.9" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="586.9" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="589.9" y="366.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="586.9" y="339.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="589.9" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="586.9" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="589.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="586.9" y="307.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="589.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (20 samples, 0.58%)</title><rect x="587.2" y="403.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.2" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (20 samples, 0.58%)</title><rect x="587.2" y="387.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="590.2" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (18 samples, 0.53%)</title><rect x="587.9" y="371.0" width="6.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="590.9" y="382.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="587.9" y="355.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="590.9" y="366.0"></text>
</g>
<g>
<title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.03%)</title><rect x="587.9" y="339.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.9" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 0.44%)</title><rect x="588.3" y="355.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="591.3" y="366.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="588.3" y="339.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.3" y="350.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.03%)</title><rect x="588.3" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="591.3" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.38%)</title><rect x="588.6" y="339.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="591.6" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="593.1" y="339.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="596.1" y="350.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="593.1" y="323.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="596.1" y="334.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="593.4" y="355.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="596.4" y="366.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="593.8" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="596.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="594.1" y="419.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="597.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="594.1" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="597.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="594.1" y="387.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="594.1" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="597.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="594.1" y="355.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.1" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="594.1" y="339.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="597.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="594.5" y="419.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="594.5" y="403.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="597.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="594.5" y="387.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="594.5" y="371.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="597.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="594.5" y="355.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="597.5" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="594.5" y="339.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="597.5" y="350.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="594.8" y="323.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="597.8" y="334.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="595.2" y="323.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="598.2" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_updateval (1 samples, 0.03%)</title><rect x="595.2" y="307.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="598.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (82 samples, 2.40%)</title><rect x="595.5" y="451.0" width="28.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="598.5" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (82 samples, 2.40%)</title><rect x="595.5" y="435.0" width="28.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="598.5" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (82 samples, 2.40%)</title><rect x="595.5" y="419.0" width="28.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="598.5" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (20 samples, 0.58%)</title><rect x="595.9" y="403.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 0.56%)</title><rect x="596.2" y="387.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.2" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="596.2" y="371.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="599.2" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="596.2" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.53%)</title><rect x="596.5" y="371.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 0.53%)</title><rect x="596.5" y="355.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="599.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (18 samples, 0.53%)</title><rect x="596.5" y="339.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="599.5" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (18 samples, 0.53%)</title><rect x="596.5" y="323.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (18 samples, 0.53%)</title><rect x="596.5" y="307.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="596.5" y="291.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="599.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="596.5" y="275.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="596.5" y="259.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="599.5" y="270.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.03%)</title><rect x="596.5" y="243.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="599.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.50%)</title><rect x="596.9" y="291.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="599.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.50%)</title><rect x="596.9" y="275.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="599.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.50%)</title><rect x="596.9" y="259.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="599.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.50%)</title><rect x="596.9" y="243.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 0.44%)</title><rect x="597.6" y="227.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.6" y="238.0"></text>
</g>
<g>
<title>write (15 samples, 0.44%)</title><rect x="597.6" y="211.0" width="5.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="600.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (61 samples, 1.78%)</title><rect x="602.8" y="403.0" width="21.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="605.8" y="414.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (61 samples, 1.78%)</title><rect x="602.8" y="387.0" width="21.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.8" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (61 samples, 1.78%)</title><rect x="602.8" y="371.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="605.8" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (27 samples, 0.79%)</title><rect x="602.8" y="355.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="605.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (26 samples, 0.76%)</title><rect x="603.1" y="339.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="606.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (26 samples, 0.76%)</title><rect x="603.1" y="323.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.76%)</title><rect x="603.1" y="307.0" width="9.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="606.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (26 samples, 0.76%)</title><rect x="603.1" y="291.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="606.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (26 samples, 0.76%)</title><rect x="603.1" y="275.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="606.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (26 samples, 0.76%)</title><rect x="603.1" y="259.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (26 samples, 0.76%)</title><rect x="603.1" y="243.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="606.1" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (25 samples, 0.73%)</title><rect x="603.5" y="227.0" width="8.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="606.5" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.09%)</title><rect x="612.1" y="355.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.1" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="612.1" y="339.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="615.1" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="612.4" y="323.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.4" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="612.4" y="307.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="615.4" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="612.8" y="339.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="615.8" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 0.12%)</title><rect x="613.1" y="355.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.1" y="366.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="613.8" y="339.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="616.8" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="614.1" y="339.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.1" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (25 samples, 0.73%)</title><rect x="614.5" y="355.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="617.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (19 samples, 0.56%)</title><rect x="614.5" y="339.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (19 samples, 0.56%)</title><rect x="614.5" y="323.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (19 samples, 0.56%)</title><rect x="614.5" y="307.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="617.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (19 samples, 0.56%)</title><rect x="614.5" y="291.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="617.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (18 samples, 0.53%)</title><rect x="614.5" y="275.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="617.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (17 samples, 0.50%)</title><rect x="614.5" y="259.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.50%)</title><rect x="614.5" y="243.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="617.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.50%)</title><rect x="614.5" y="227.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="617.5" y="238.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="616.2" y="211.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="619.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (11 samples, 0.32%)</title><rect x="616.6" y="211.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="619.6" y="222.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="616.6" y="195.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="619.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="620.4" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="623.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.03%)</title><rect x="620.7" y="275.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="620.7" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="623.7" y="270.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="620.7" y="243.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="623.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (6 samples, 0.18%)</title><rect x="621.0" y="339.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="624.0" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.18%)</title><rect x="621.0" y="323.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="624.0" y="334.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (3 samples, 0.09%)</title><rect x="621.4" y="307.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="624.4" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="621.4" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.4" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="621.4" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.4" y="286.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="621.4" y="259.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="624.4" y="270.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="621.7" y="291.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.7" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="622.1" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="625.1" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="622.1" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.1" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="622.1" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="625.1" y="270.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_begin() const (1 samples, 0.03%)</title><rect x="622.1" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="625.1" y="254.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="622.4" y="307.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="625.4" y="318.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="622.8" y="307.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="625.8" y="318.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="623.1" y="355.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.1" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="623.5" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.5" y="366.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.03%)</title><rect x="623.5" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.5" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.03%)</title><rect x="623.5" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.5" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="623.5" y="307.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.5" y="318.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="623.5" y="291.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="626.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (67 samples, 1.96%)</title><rect x="623.8" y="451.0" width="23.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (67 samples, 1.96%)</title><rect x="623.8" y="435.0" width="23.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.8" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.20%)</title><rect x="623.8" y="419.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="623.8" y="403.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.8" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="623.8" y="387.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="623.8" y="371.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="623.8" y="355.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="623.8" y="339.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.8" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="623.8" y="323.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="626.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="623.8" y="307.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="623.8" y="291.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="626.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="623.8" y="275.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="623.8" y="259.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="626.8" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="624.2" y="243.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="627.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (5 samples, 0.15%)</title><rect x="624.5" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.5" y="254.0"></text>
</g>
<g>
<title>write (5 samples, 0.15%)</title><rect x="624.5" y="227.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="627.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (60 samples, 1.75%)</title><rect x="626.2" y="419.0" width="20.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.2" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (60 samples, 1.75%)</title><rect x="626.2" y="403.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="629.2" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (60 samples, 1.75%)</title><rect x="626.2" y="387.0" width="20.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="629.2" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (60 samples, 1.75%)</title><rect x="626.2" y="371.0" width="20.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="629.2" y="382.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="626.2" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="629.2" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (59 samples, 1.73%)</title><rect x="626.6" y="355.0" width="20.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="629.6" y="366.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="626.6" y="339.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="629.6" y="350.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="626.9" y="339.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="629.9" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="626.9" y="323.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="629.9" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="626.9" y="307.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="629.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (57 samples, 1.67%)</title><rect x="627.3" y="339.0" width="19.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (57 samples, 1.67%)</title><rect x="627.3" y="323.0" width="19.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="630.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (57 samples, 1.67%)</title><rect x="627.3" y="307.0" width="19.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="630.3" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (55 samples, 1.61%)</title><rect x="627.3" y="291.0" width="18.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="630.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (55 samples, 1.61%)</title><rect x="627.3" y="275.0" width="18.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="630.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (10 samples, 0.29%)</title><rect x="627.6" y="259.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="630.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (9 samples, 0.26%)</title><rect x="627.6" y="243.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="630.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (9 samples, 0.26%)</title><rect x="627.6" y="227.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="630.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (9 samples, 0.26%)</title><rect x="627.6" y="211.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="630.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (9 samples, 0.26%)</title><rect x="627.6" y="195.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="630.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="627.6" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="630.6" y="190.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="627.9" y="179.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="630.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="630.7" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.06%)</title><rect x="631.1" y="259.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="634.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.12%)</title><rect x="631.7" y="259.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="634.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="631.7" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="634.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="632.1" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="635.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="632.1" y="227.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="635.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="632.1" y="211.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="632.1" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="635.1" y="206.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="632.1" y="179.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="635.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="632.4" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="632.8" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="635.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="632.8" y="147.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="635.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="633.1" y="259.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="636.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="633.1" y="243.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="636.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="633.1" y="227.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="636.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="633.1" y="211.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="636.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="633.1" y="195.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="636.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="633.5" y="179.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="636.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="633.5" y="163.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="636.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="633.5" y="147.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="636.5" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="633.5" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="636.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (26 samples, 0.76%)</title><rect x="633.8" y="259.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="636.8" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (13 samples, 0.38%)</title><rect x="636.6" y="243.0" width="4.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="639.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.12%)</title><rect x="641.1" y="243.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="644.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="641.1" y="227.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="644.1" y="238.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="642.4" y="243.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="645.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (10 samples, 0.29%)</title><rect x="642.8" y="259.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="645.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (10 samples, 0.29%)</title><rect x="642.8" y="243.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="645.8" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="642.8" y="227.0" width="3.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="645.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="646.2" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="649.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="646.2" y="275.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="649.2" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="646.2" y="259.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="649.2" y="270.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="646.6" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="649.6" y="302.0"></text>
</g>
<g>
<title>[async_worker_3 tid=55043] (83 samples, 2.43%)</title><rect x="646.9" y="515.0" width="28.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="649.9" y="526.0">[a..</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="646.9" y="499.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="649.9" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="646.9" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="649.9" y="494.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.03%)</title><rect x="646.9" y="467.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="649.9" y="478.0"></text>
</g>
<g>
<title>java/lang/Thread.run (82 samples, 2.40%)</title><rect x="647.3" y="499.0" width="28.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="650.3" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (82 samples, 2.40%)</title><rect x="647.3" y="483.0" width="28.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="650.3" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (82 samples, 2.40%)</title><rect x="647.3" y="467.0" width="28.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="650.3" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15 samples, 0.44%)</title><rect x="647.3" y="451.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="650.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (15 samples, 0.44%)</title><rect x="647.3" y="435.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="650.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15 samples, 0.44%)</title><rect x="647.3" y="419.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="650.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (15 samples, 0.44%)</title><rect x="647.3" y="403.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="650.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (15 samples, 0.44%)</title><rect x="647.3" y="387.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (15 samples, 0.44%)</title><rect x="647.3" y="371.0" width="5.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="650.3" y="382.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="647.3" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="650.3" y="366.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="647.3" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="650.3" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.41%)</title><rect x="647.6" y="355.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.6" y="366.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.06%)</title><rect x="647.6" y="339.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="650.6" y="350.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="648.0" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="651.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (12 samples, 0.35%)</title><rect x="648.3" y="339.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="651.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (67 samples, 1.96%)</title><rect x="652.4" y="451.0" width="23.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.4" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (67 samples, 1.96%)</title><rect x="652.4" y="435.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="655.4" y="446.0">r..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="652.4" y="419.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="655.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.26%)</title><rect x="652.8" y="419.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="652.8" y="403.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="655.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="652.8" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="652.8" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="655.8" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="653.1" y="387.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.1" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="653.1" y="371.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="656.1" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.23%)</title><rect x="653.1" y="355.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="656.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.23%)</title><rect x="653.1" y="339.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.23%)</title><rect x="653.1" y="323.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="656.1" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="653.1" y="307.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="653.1" y="291.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="656.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.23%)</title><rect x="653.1" y="275.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="656.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.23%)</title><rect x="653.1" y="259.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (8 samples, 0.23%)</title><rect x="653.1" y="243.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.1" y="254.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="653.1" y="227.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="656.1" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (57 samples, 1.67%)</title><rect x="655.9" y="419.0" width="19.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="658.9" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (57 samples, 1.67%)</title><rect x="655.9" y="403.0" width="19.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.9" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (57 samples, 1.67%)</title><rect x="655.9" y="387.0" width="19.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="658.9" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (57 samples, 1.67%)</title><rect x="655.9" y="371.0" width="19.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="658.9" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="655.9" y="355.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="658.9" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (56 samples, 1.64%)</title><rect x="656.2" y="355.0" width="19.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="659.2" y="366.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="656.2" y="339.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="659.2" y="350.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="656.6" y="339.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="659.6" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="656.6" y="323.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="659.6" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="656.6" y="307.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="659.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (54 samples, 1.58%)</title><rect x="656.9" y="339.0" width="18.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (54 samples, 1.58%)</title><rect x="656.9" y="323.0" width="18.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="659.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (53 samples, 1.55%)</title><rect x="656.9" y="307.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="659.9" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (52 samples, 1.52%)</title><rect x="656.9" y="291.0" width="18.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="659.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (52 samples, 1.52%)</title><rect x="656.9" y="275.0" width="18.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="659.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (21 samples, 0.61%)</title><rect x="657.3" y="259.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (21 samples, 0.61%)</title><rect x="657.3" y="243.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="660.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (21 samples, 0.61%)</title><rect x="657.3" y="227.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="660.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (21 samples, 0.61%)</title><rect x="657.3" y="211.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="660.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (21 samples, 0.61%)</title><rect x="657.3" y="195.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="660.3" y="206.0"></text>
</g>
<g>
<title>write (21 samples, 0.61%)</title><rect x="657.3" y="179.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="660.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.12%)</title><rect x="664.5" y="259.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="667.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="664.9" y="243.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="667.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="664.9" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="667.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="664.9" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="667.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="664.9" y="195.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="667.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="665.2" y="179.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="668.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="665.2" y="163.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.03%)</title><rect x="665.2" y="147.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="668.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="665.6" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="668.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="665.9" y="259.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="668.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="665.9" y="243.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="668.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="665.9" y="227.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="668.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="665.9" y="211.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="665.9" y="195.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="668.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="666.2" y="179.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="669.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="666.2" y="163.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="669.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="666.2" y="147.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="669.2" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (20 samples, 0.58%)</title><rect x="666.6" y="259.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="669.6" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (17 samples, 0.50%)</title><rect x="667.3" y="243.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="670.3" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="673.1" y="243.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="676.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="673.1" y="227.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="676.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (4 samples, 0.12%)</title><rect x="673.5" y="259.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="676.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 0.12%)</title><rect x="673.5" y="243.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="676.5" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (3 samples, 0.09%)</title><rect x="673.5" y="227.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="676.5" y="238.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.03%)</title><rect x="674.5" y="227.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="674.9" y="291.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="677.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="674.9" y="275.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="677.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="675.2" y="307.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="678.2" y="318.0"></text>
</g>
<g>
<title>[async_worker_3 tid=76291] (65 samples, 1.90%)</title><rect x="675.6" y="515.0" width="22.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="678.6" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (65 samples, 1.90%)</title><rect x="675.6" y="499.0" width="22.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="678.6" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 1.90%)</title><rect x="675.6" y="483.0" width="22.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.6" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 1.90%)</title><rect x="675.6" y="467.0" width="22.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.6" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 0.23%)</title><rect x="675.6" y="451.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (8 samples, 0.23%)</title><rect x="675.6" y="435.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (8 samples, 0.23%)</title><rect x="675.6" y="419.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.23%)</title><rect x="675.6" y="403.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.23%)</title><rect x="675.6" y="387.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.6" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.20%)</title><rect x="675.9" y="371.0" width="2.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="678.9" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (6 samples, 0.18%)</title><rect x="675.9" y="355.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="678.9" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.18%)</title><rect x="675.9" y="339.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="678.9" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="678.0" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.0" y="366.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="678.0" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="681.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (57 samples, 1.67%)</title><rect x="678.3" y="451.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="681.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (57 samples, 1.67%)</title><rect x="678.3" y="435.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="678.3" y="419.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="681.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.23%)</title><rect x="678.3" y="403.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="678.3" y="387.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="681.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="678.3" y="371.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.23%)</title><rect x="678.3" y="355.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="681.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.23%)</title><rect x="678.3" y="339.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="681.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.23%)</title><rect x="678.3" y="323.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="681.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="678.3" y="307.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="681.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="678.3" y="291.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="681.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.23%)</title><rect x="678.3" y="275.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="681.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.23%)</title><rect x="678.3" y="259.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="679.0" y="243.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="682.0" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="679.0" y="227.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="682.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (49 samples, 1.43%)</title><rect x="681.1" y="419.0" width="16.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="684.1" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (49 samples, 1.43%)</title><rect x="681.1" y="403.0" width="16.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="684.1" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (49 samples, 1.43%)</title><rect x="681.1" y="387.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="684.1" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (49 samples, 1.43%)</title><rect x="681.1" y="371.0" width="16.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="684.1" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (49 samples, 1.43%)</title><rect x="681.1" y="355.0" width="16.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="684.1" y="366.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="681.4" y="339.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="684.4" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="681.4" y="323.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="684.4" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="681.4" y="307.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="684.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (47 samples, 1.37%)</title><rect x="681.8" y="339.0" width="16.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 1.37%)</title><rect x="681.8" y="323.0" width="16.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="684.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 1.37%)</title><rect x="681.8" y="307.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="684.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (46 samples, 1.35%)</title><rect x="681.8" y="291.0" width="15.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (46 samples, 1.35%)</title><rect x="681.8" y="275.0" width="15.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="684.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (16 samples, 0.47%)</title><rect x="681.8" y="259.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="684.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (16 samples, 0.47%)</title><rect x="681.8" y="243.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="684.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (16 samples, 0.47%)</title><rect x="681.8" y="227.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="684.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (16 samples, 0.47%)</title><rect x="681.8" y="211.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="684.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (16 samples, 0.47%)</title><rect x="681.8" y="195.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="684.8" y="206.0"></text>
</g>
<g>
<title>write (16 samples, 0.47%)</title><rect x="681.8" y="179.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="684.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.06%)</title><rect x="687.3" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="687.3" y="243.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="690.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="687.3" y="227.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="690.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="687.3" y="211.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="690.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="687.3" y="195.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="690.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="687.3" y="179.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="690.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="687.6" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="690.6" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="687.6" y="147.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="690.6" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="688.0" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="691.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="688.0" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="691.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="688.0" y="227.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="691.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="688.0" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="688.0" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="691.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="688.0" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="691.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="688.0" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="691.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (17 samples, 0.50%)</title><rect x="688.3" y="259.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="691.3" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (11 samples, 0.32%)</title><rect x="690.4" y="243.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="693.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (9 samples, 0.26%)</title><rect x="694.2" y="259.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (9 samples, 0.26%)</title><rect x="694.2" y="243.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="697.2" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (8 samples, 0.23%)</title><rect x="694.5" y="227.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="697.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="697.3" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="700.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="697.3" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="700.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="697.6" y="291.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="700.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="697.6" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="700.6" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="697.6" y="259.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.6" y="270.0"></text>
</g>
<g>
<title>[async_worker_3 tid=81411] (191 samples, 5.58%)</title><rect x="698.0" y="515.0" width="65.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="701.0" y="526.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (191 samples, 5.58%)</title><rect x="698.0" y="499.0" width="65.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.0" y="510.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (191 samples, 5.58%)</title><rect x="698.0" y="483.0" width="65.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="701.0" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (191 samples, 5.58%)</title><rect x="698.0" y="467.0" width="65.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="701.0" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (28 samples, 0.82%)</title><rect x="698.0" y="451.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="701.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (28 samples, 0.82%)</title><rect x="698.0" y="435.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (24 samples, 0.70%)</title><rect x="698.0" y="419.0" width="8.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="698.0" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="701.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="698.0" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="701.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="698.0" y="371.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="698.0" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (23 samples, 0.67%)</title><rect x="698.3" y="403.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="701.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (23 samples, 0.67%)</title><rect x="698.3" y="387.0" width="8.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="701.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (21 samples, 0.61%)</title><rect x="699.0" y="371.0" width="7.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="702.0" y="382.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="699.0" y="355.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="702.0" y="366.0"></text>
</g>
<g>
<title>Chunk::next() const (1 samples, 0.03%)</title><rect x="699.0" y="339.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="702.0" y="350.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="699.4" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="702.4" y="366.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="699.4" y="339.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.4" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="699.4" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.4" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="699.7" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="702.7" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.50%)</title><rect x="700.1" y="355.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="703.1" y="366.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="700.1" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.1" y="350.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="700.1" y="323.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.1" y="334.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="700.1" y="307.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="703.1" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.44%)</title><rect x="700.4" y="339.0" width="5.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="703.4" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="705.6" y="339.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="708.6" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="705.9" y="355.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="708.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="706.3" y="419.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="706.3" y="403.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="706.3" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="709.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="706.3" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="706.3" y="355.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="709.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="706.3" y="339.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.3" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="706.3" y="323.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="709.3" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="706.3" y="307.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="709.3" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="706.3" y="291.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="709.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="706.6" y="419.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="706.6" y="403.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="706.6" y="387.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="706.6" y="371.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="709.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="706.6" y="355.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="706.6" y="339.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="709.6" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="706.6" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="709.6" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="707.0" y="323.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="710.0" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="707.3" y="323.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="710.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (92 samples, 2.69%)</title><rect x="707.6" y="451.0" width="31.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.6" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (92 samples, 2.69%)</title><rect x="707.6" y="435.0" width="31.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="710.6" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (92 samples, 2.69%)</title><rect x="707.6" y="419.0" width="31.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="710.6" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (17 samples, 0.50%)</title><rect x="707.6" y="403.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="710.6" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (16 samples, 0.47%)</title><rect x="707.6" y="387.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="710.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="707.6" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="710.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.41%)</title><rect x="708.3" y="371.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.41%)</title><rect x="708.3" y="355.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.41%)</title><rect x="708.3" y="339.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="711.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.41%)</title><rect x="708.3" y="323.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="711.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.41%)</title><rect x="708.3" y="307.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="708.3" y="291.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="708.3" y="275.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.41%)</title><rect x="708.3" y="259.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.41%)</title><rect x="708.3" y="243.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.41%)</title><rect x="708.3" y="227.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.3" y="238.0"></text>
</g>
<g>
<title>write (13 samples, 0.38%)</title><rect x="708.7" y="211.0" width="4.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="711.7" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="713.2" y="387.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="716.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="713.2" y="371.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="713.2" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="716.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (75 samples, 2.19%)</title><rect x="713.5" y="403.0" width="25.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="716.5" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.06%)</title><rect x="713.5" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="716.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.06%)</title><rect x="713.5" y="371.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.06%)</title><rect x="713.5" y="355.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.06%)</title><rect x="713.5" y="339.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.5" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (73 samples, 2.13%)</title><rect x="714.2" y="387.0" width="25.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.2" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (73 samples, 2.13%)</title><rect x="714.2" y="371.0" width="25.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.2" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (39 samples, 1.14%)</title><rect x="714.5" y="355.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="717.5" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="714.9" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="717.9" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="714.9" y="323.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.9" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="714.9" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="717.9" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="714.9" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="717.9" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="714.9" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="717.9" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="714.9" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="717.9" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.08%)</title><rect x="715.2" y="339.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="718.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 1.08%)</title><rect x="715.2" y="323.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (37 samples, 1.08%)</title><rect x="715.2" y="307.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="718.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="715.6" y="291.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 1.05%)</title><rect x="715.6" y="275.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="718.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 1.05%)</title><rect x="715.6" y="259.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 1.05%)</title><rect x="715.6" y="243.0" width="12.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="718.6" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.99%)</title><rect x="716.3" y="227.0" width="11.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="719.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.09%)</title><rect x="728.0" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="728.0" y="339.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.0" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="728.0" y="323.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.06%)</title><rect x="728.0" y="307.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="728.7" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="731.7" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="728.7" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.7" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="728.7" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.7" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="728.7" y="291.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="731.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.06%)</title><rect x="729.0" y="355.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="729.4" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="732.4" y="350.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="729.4" y="323.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="732.4" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (27 samples, 0.79%)</title><rect x="729.7" y="355.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="732.7" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (24 samples, 0.70%)</title><rect x="729.7" y="339.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="732.7" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (24 samples, 0.70%)</title><rect x="729.7" y="323.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="732.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (24 samples, 0.70%)</title><rect x="729.7" y="307.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (24 samples, 0.70%)</title><rect x="729.7" y="291.0" width="8.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (22 samples, 0.64%)</title><rect x="729.7" y="275.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="732.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (22 samples, 0.64%)</title><rect x="729.7" y="259.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="732.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (22 samples, 0.64%)</title><rect x="729.7" y="243.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="732.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (22 samples, 0.64%)</title><rect x="729.7" y="227.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (22 samples, 0.64%)</title><rect x="729.7" y="211.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="732.7" y="222.0"></text>
</g>
<g>
<title>write (22 samples, 0.64%)</title><rect x="729.7" y="195.0" width="7.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="732.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (2 samples, 0.06%)</title><rect x="737.3" y="275.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="740.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="737.7" y="259.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="740.7" y="270.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="737.7" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="740.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (3 samples, 0.09%)</title><rect x="738.0" y="339.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="741.0" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (3 samples, 0.09%)</title><rect x="738.0" y="323.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.0" y="334.0"></text>
</g>
<g>
<title>call_stub (1 samples, 0.03%)</title><rect x="738.0" y="307.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="741.0" y="318.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.06%)</title><rect x="738.4" y="307.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="741.4" y="318.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="739.0" y="355.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (71 samples, 2.08%)</title><rect x="739.4" y="451.0" width="24.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="742.4" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (71 samples, 2.08%)</title><rect x="739.4" y="435.0" width="24.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.4" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.32%)</title><rect x="739.4" y="419.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (10 samples, 0.29%)</title><rect x="739.4" y="403.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.29%)</title><rect x="739.4" y="387.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="742.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (10 samples, 0.29%)</title><rect x="739.4" y="371.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (10 samples, 0.29%)</title><rect x="739.4" y="355.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="742.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (10 samples, 0.29%)</title><rect x="739.4" y="339.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.29%)</title><rect x="739.4" y="323.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="739.4" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="739.4" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="739.4" y="275.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="739.4" y="259.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="739.7" y="307.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="742.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="739.7" y="291.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="742.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.26%)</title><rect x="739.7" y="275.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.26%)</title><rect x="739.7" y="259.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="742.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (8 samples, 0.23%)</title><rect x="740.1" y="243.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="743.1" y="254.0"></text>
</g>
<g>
<title>write (8 samples, 0.23%)</title><rect x="740.1" y="227.0" width="2.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="743.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="742.8" y="403.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="745.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="742.8" y="387.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="745.8" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="742.8" y="371.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="745.8" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (60 samples, 1.75%)</title><rect x="743.2" y="419.0" width="20.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.2" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (60 samples, 1.75%)</title><rect x="743.2" y="403.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="746.2" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (60 samples, 1.75%)</title><rect x="743.2" y="387.0" width="20.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="746.2" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (59 samples, 1.73%)</title><rect x="743.5" y="371.0" width="20.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="746.5" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (58 samples, 1.70%)</title><rect x="743.9" y="355.0" width="20.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.9" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="744.2" y="339.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="747.2" y="350.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.03%)</title><rect x="744.2" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="747.2" y="334.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.06%)</title><rect x="744.6" y="339.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="747.6" y="350.0"></text>
</g>
<g>
<title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.03%)</title><rect x="744.6" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="747.6" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="744.9" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="747.9" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="744.9" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="747.9" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="744.9" y="291.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="747.9" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="744.9" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.9" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="744.9" y="259.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.9" y="270.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.03%)</title><rect x="744.9" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="747.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (54 samples, 1.58%)</title><rect x="745.3" y="339.0" width="18.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="748.3" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (54 samples, 1.58%)</title><rect x="745.3" y="323.0" width="18.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="748.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (54 samples, 1.58%)</title><rect x="745.3" y="307.0" width="18.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.3" y="318.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="745.3" y="291.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="748.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (51 samples, 1.49%)</title><rect x="745.6" y="291.0" width="17.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="748.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (50 samples, 1.46%)</title><rect x="745.6" y="275.0" width="17.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="748.6" y="286.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="745.6" y="259.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="748.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.03%)</title><rect x="745.9" y="259.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="748.9" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="745.9" y="243.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (15 samples, 0.44%)</title><rect x="746.3" y="259.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (15 samples, 0.44%)</title><rect x="746.3" y="243.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="749.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (15 samples, 0.44%)</title><rect x="746.3" y="227.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="749.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (15 samples, 0.44%)</title><rect x="746.3" y="211.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="749.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (14 samples, 0.41%)</title><rect x="746.6" y="195.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="749.6" y="206.0"></text>
</g>
<g>
<title>write (14 samples, 0.41%)</title><rect x="746.6" y="179.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="749.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.03%)</title><rect x="751.5" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="754.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.5" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="754.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.5" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="754.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.5" y="211.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="754.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="751.5" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="754.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="751.5" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="754.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="751.8" y="259.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.8" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="754.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.8" y="227.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="751.8" y="211.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="754.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="751.8" y="195.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="754.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="751.8" y="179.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="754.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="751.8" y="163.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="754.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="751.8" y="147.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="754.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="751.8" y="131.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.8" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="751.8" y="115.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="754.8" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (15 samples, 0.44%)</title><rect x="752.2" y="259.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.2" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (9 samples, 0.26%)</title><rect x="754.2" y="243.0" width="3.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="757.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (11 samples, 0.32%)</title><rect x="757.3" y="259.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="760.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="757.3" y="243.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="760.3" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="757.7" y="227.0" width="3.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="760.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.09%)</title><rect x="761.1" y="259.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="764.1" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (2 samples, 0.06%)</title><rect x="761.1" y="243.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="764.1" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="761.1" y="227.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="764.1" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="761.8" y="243.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.8" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (1 samples, 0.03%)</title><rect x="761.8" y="227.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="764.8" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (1 samples, 0.03%)</title><rect x="761.8" y="211.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="764.8" y="222.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.03%)</title><rect x="761.8" y="195.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="764.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="762.2" y="259.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="765.2" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="762.2" y="243.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="762.2" y="227.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="765.2" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="762.5" y="259.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="765.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="762.9" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="765.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="763.2" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="766.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (1 samples, 0.03%)</title><rect x="763.2" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="766.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="763.5" y="291.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="766.5" y="302.0"></text>
</g>
<g>
<title>[async_worker_4 tid=56835] (73 samples, 2.13%)</title><rect x="763.9" y="515.0" width="25.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="766.9" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (73 samples, 2.13%)</title><rect x="763.9" y="499.0" width="25.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="766.9" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (73 samples, 2.13%)</title><rect x="763.9" y="483.0" width="25.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.9" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (73 samples, 2.13%)</title><rect x="763.9" y="467.0" width="25.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.9" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (17 samples, 0.50%)</title><rect x="763.9" y="451.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (17 samples, 0.50%)</title><rect x="763.9" y="435.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="766.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (17 samples, 0.50%)</title><rect x="763.9" y="419.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="766.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (17 samples, 0.50%)</title><rect x="763.9" y="403.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="766.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (17 samples, 0.50%)</title><rect x="763.9" y="387.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.9" y="398.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="763.9" y="371.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="766.9" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (16 samples, 0.47%)</title><rect x="764.2" y="371.0" width="5.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="767.2" y="382.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.03%)</title><rect x="764.2" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.2" y="366.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="764.6" y="355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.6" y="366.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="764.6" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="767.6" y="350.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 0.41%)</title><rect x="764.9" y="355.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="767.9" y="366.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="764.9" y="339.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="767.9" y="350.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="764.9" y="323.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (13 samples, 0.38%)</title><rect x="765.3" y="339.0" width="4.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="768.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (1 samples, 0.03%)</title><rect x="769.8" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (1 samples, 0.03%)</title><rect x="769.8" y="435.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="772.8" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (1 samples, 0.03%)</title><rect x="769.8" y="419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (1 samples, 0.03%)</title><rect x="769.8" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="772.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1 samples, 0.03%)</title><rect x="769.8" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1 samples, 0.03%)</title><rect x="769.8" y="371.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="769.8" y="355.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="772.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="769.8" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="769.8" y="323.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.8" y="334.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="769.8" y="307.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="772.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (55 samples, 1.61%)</title><rect x="770.1" y="451.0" width="19.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="773.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (55 samples, 1.61%)</title><rect x="770.1" y="435.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="773.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 0.29%)</title><rect x="770.1" y="419.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.1" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="770.4" y="403.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="770.4" y="387.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="773.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="770.4" y="371.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.26%)</title><rect x="770.4" y="355.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.26%)</title><rect x="770.4" y="339.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.26%)</title><rect x="770.4" y="323.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="773.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.09%)</title><rect x="770.4" y="307.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.09%)</title><rect x="770.4" y="291.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="773.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.09%)</title><rect x="770.4" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.4" y="286.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="770.8" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="773.8" y="270.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="770.8" y="243.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="773.8" y="254.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="770.8" y="227.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="773.8" y="238.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="771.1" y="211.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="774.1" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="771.5" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="774.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="771.5" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="771.5" y="275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="774.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="771.5" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (5 samples, 0.15%)</title><rect x="771.8" y="307.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="774.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (5 samples, 0.15%)</title><rect x="771.8" y="291.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="774.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (5 samples, 0.15%)</title><rect x="771.8" y="275.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="774.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (5 samples, 0.15%)</title><rect x="771.8" y="259.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (5 samples, 0.15%)</title><rect x="771.8" y="243.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.8" y="254.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="772.2" y="227.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="775.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (45 samples, 1.32%)</title><rect x="773.5" y="419.0" width="15.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.5" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (45 samples, 1.32%)</title><rect x="773.5" y="403.0" width="15.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.5" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (45 samples, 1.32%)</title><rect x="773.5" y="387.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.5" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (45 samples, 1.32%)</title><rect x="773.5" y="371.0" width="15.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="776.5" y="382.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="773.5" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.5" y="366.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="773.9" y="355.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="776.9" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (43 samples, 1.26%)</title><rect x="774.2" y="355.0" width="14.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="777.2" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="774.2" y="339.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="777.2" y="350.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="774.2" y="323.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="777.2" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="774.2" y="307.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="777.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (42 samples, 1.23%)</title><rect x="774.6" y="339.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.23%)</title><rect x="774.6" y="323.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (40 samples, 1.17%)</title><rect x="774.6" y="307.0" width="13.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="777.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (40 samples, 1.17%)</title><rect x="774.6" y="291.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="777.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (40 samples, 1.17%)</title><rect x="774.6" y="275.0" width="13.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="777.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (12 samples, 0.35%)</title><rect x="774.6" y="259.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (12 samples, 0.35%)</title><rect x="774.6" y="243.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="777.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (12 samples, 0.35%)</title><rect x="774.6" y="227.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="777.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (11 samples, 0.32%)</title><rect x="774.6" y="211.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="777.6" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="774.6" y="195.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="777.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (10 samples, 0.29%)</title><rect x="774.9" y="195.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="777.9" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="774.9" y="179.0" width="3.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="777.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="778.4" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="781.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="778.4" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="778.7" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="781.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="779.1" y="259.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="779.1" y="243.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="782.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="779.1" y="227.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="782.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (5 samples, 0.15%)</title><rect x="779.1" y="211.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="782.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (5 samples, 0.15%)</title><rect x="779.1" y="195.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="782.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="779.1" y="179.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.06%)</title><rect x="780.1" y="163.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="780.5" y="147.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="783.5" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="780.5" y="131.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="783.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="780.8" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="783.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="780.8" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="783.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="780.8" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="780.8" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="783.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="780.8" y="195.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="780.8" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="783.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="780.8" y="163.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="783.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 0.41%)</title><rect x="781.1" y="259.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="784.1" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.35%)</title><rect x="781.5" y="243.0" width="4.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="784.5" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="785.6" y="243.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="788.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="785.6" y="227.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="788.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (7 samples, 0.20%)</title><rect x="786.0" y="259.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="789.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (7 samples, 0.20%)</title><rect x="786.0" y="243.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="789.0" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (6 samples, 0.18%)</title><rect x="786.3" y="227.0" width="2.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="789.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="788.4" y="307.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="791.4" y="318.0"></text>
</g>
<g>
<title>[async_worker_4 tid=57603] (72 samples, 2.11%)</title><rect x="789.1" y="515.0" width="24.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="792.1" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (72 samples, 2.11%)</title><rect x="789.1" y="499.0" width="24.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="792.1" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (72 samples, 2.11%)</title><rect x="789.1" y="483.0" width="24.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="792.1" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (72 samples, 2.11%)</title><rect x="789.1" y="467.0" width="24.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.1" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (16 samples, 0.47%)</title><rect x="789.1" y="451.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="792.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (16 samples, 0.47%)</title><rect x="789.1" y="435.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="792.1" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (16 samples, 0.47%)</title><rect x="789.1" y="419.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="792.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (16 samples, 0.47%)</title><rect x="789.1" y="403.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="792.1" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (16 samples, 0.47%)</title><rect x="789.1" y="387.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="792.1" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (15 samples, 0.44%)</title><rect x="789.4" y="371.0" width="5.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="792.4" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (15 samples, 0.44%)</title><rect x="789.4" y="355.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="792.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (14 samples, 0.41%)</title><rect x="789.4" y="339.0" width="4.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="792.4" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="794.3" y="339.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="797.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (56 samples, 1.64%)</title><rect x="794.6" y="451.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (56 samples, 1.64%)</title><rect x="794.6" y="435.0" width="19.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="797.6" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (10 samples, 0.29%)</title><rect x="794.6" y="419.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.6" y="430.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="794.6" y="403.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="794.6" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="794.6" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="797.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="794.6" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="797.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="794.9" y="403.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="797.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="794.9" y="387.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="797.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="794.9" y="371.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.26%)</title><rect x="794.9" y="355.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="797.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.26%)</title><rect x="794.9" y="339.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.26%)</title><rect x="794.9" y="323.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="794.9" y="307.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.26%)</title><rect x="794.9" y="291.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (9 samples, 0.26%)</title><rect x="794.9" y="275.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="797.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (9 samples, 0.26%)</title><rect x="794.9" y="259.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.26%)</title><rect x="794.9" y="243.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.9" y="254.0"></text>
</g>
<g>
<title>write (9 samples, 0.26%)</title><rect x="794.9" y="227.0" width="3.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="797.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (46 samples, 1.35%)</title><rect x="798.0" y="419.0" width="15.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="801.0" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (46 samples, 1.35%)</title><rect x="798.0" y="403.0" width="15.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.0" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (46 samples, 1.35%)</title><rect x="798.0" y="387.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="801.0" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (46 samples, 1.35%)</title><rect x="798.0" y="371.0" width="15.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="801.0" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (46 samples, 1.35%)</title><rect x="798.0" y="355.0" width="15.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.0" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (46 samples, 1.35%)</title><rect x="798.0" y="339.0" width="15.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="801.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (46 samples, 1.35%)</title><rect x="798.0" y="323.0" width="15.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.0" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (46 samples, 1.35%)</title><rect x="798.0" y="307.0" width="15.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.0" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (46 samples, 1.35%)</title><rect x="798.0" y="291.0" width="15.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="801.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (45 samples, 1.32%)</title><rect x="798.0" y="275.0" width="15.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="801.0" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.03%)</title><rect x="798.0" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (15 samples, 0.44%)</title><rect x="798.4" y="259.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="801.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (15 samples, 0.44%)</title><rect x="798.4" y="243.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="801.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (15 samples, 0.44%)</title><rect x="798.4" y="227.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="801.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (15 samples, 0.44%)</title><rect x="798.4" y="211.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="801.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (15 samples, 0.44%)</title><rect x="798.4" y="195.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="801.4" y="206.0"></text>
</g>
<g>
<title>write (15 samples, 0.44%)</title><rect x="798.4" y="179.0" width="5.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="801.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="803.6" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="806.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="803.6" y="243.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="803.6" y="227.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="806.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="803.6" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="806.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="803.6" y="195.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="803.6" y="179.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="803.6" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="806.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="803.6" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="806.6" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="803.6" y="131.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="806.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="803.9" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="806.9" y="174.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="803.9" y="147.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="806.9" y="158.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long long, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="804.3" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="807.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="804.6" y="259.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="804.6" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="807.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="804.6" y="227.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="807.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="804.6" y="211.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="807.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="804.6" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="804.6" y="179.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="807.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (23 samples, 0.67%)</title><rect x="804.9" y="259.0" width="8.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.9" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (19 samples, 0.56%)</title><rect x="805.6" y="243.0" width="6.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="808.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="812.2" y="243.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="812.2" y="227.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="815.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (2 samples, 0.06%)</title><rect x="812.9" y="259.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (2 samples, 0.06%)</title><rect x="812.9" y="243.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.9" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (2 samples, 0.06%)</title><rect x="812.9" y="227.0" width="0.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="815.9" y="238.0"></text>
</g>
<g>
<title>std::__1::condition_variable::~condition_variable() (1 samples, 0.03%)</title><rect x="813.6" y="275.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="816.6" y="286.0"></text>
</g>
<g>
<title>[async_worker_4 tid=80899] (179 samples, 5.23%)</title><rect x="813.9" y="515.0" width="61.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="816.9" y="526.0">[async..</text>
</g>
<g>
<title>java/lang/Thread.run (179 samples, 5.23%)</title><rect x="813.9" y="499.0" width="61.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.9" y="510.0">java/l..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (179 samples, 5.23%)</title><rect x="813.9" y="483.0" width="61.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="816.9" y="494.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (179 samples, 5.23%)</title><rect x="813.9" y="467.0" width="61.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.9" y="478.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (29 samples, 0.85%)</title><rect x="813.9" y="451.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="816.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (29 samples, 0.85%)</title><rect x="813.9" y="435.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (25 samples, 0.73%)</title><rect x="813.9" y="419.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="813.9" y="403.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="813.9" y="387.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="813.9" y="371.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.9" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="813.9" y="355.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (24 samples, 0.70%)</title><rect x="814.3" y="403.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="817.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (24 samples, 0.70%)</title><rect x="814.3" y="387.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="817.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (23 samples, 0.67%)</title><rect x="814.3" y="371.0" width="7.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="817.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::parker() (1 samples, 0.03%)</title><rect x="814.3" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.3" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.61%)</title><rect x="814.6" y="355.0" width="7.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="817.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (20 samples, 0.58%)</title><rect x="814.6" y="339.0" width="6.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="817.6" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="821.5" y="339.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="824.5" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="821.9" y="355.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="824.9" y="366.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="821.9" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="824.9" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.03%)</title><rect x="822.2" y="371.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="825.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.12%)</title><rect x="822.5" y="419.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="825.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.12%)</title><rect x="822.5" y="403.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.12%)</title><rect x="822.5" y="387.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.12%)</title><rect x="822.5" y="371.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="825.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="822.5" y="355.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.5" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="822.9" y="339.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="825.9" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="822.9" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="825.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="823.2" y="323.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="826.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (82 samples, 2.40%)</title><rect x="823.9" y="451.0" width="28.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.9" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (82 samples, 2.40%)</title><rect x="823.9" y="435.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.9" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (82 samples, 2.40%)</title><rect x="823.9" y="419.0" width="28.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.9" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (16 samples, 0.47%)</title><rect x="823.9" y="403.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (16 samples, 0.47%)</title><rect x="823.9" y="387.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="826.9" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="823.9" y="371.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.9" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="824.3" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="827.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.41%)</title><rect x="824.6" y="371.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.6" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (14 samples, 0.41%)</title><rect x="824.6" y="355.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.6" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (14 samples, 0.41%)</title><rect x="824.6" y="339.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (14 samples, 0.41%)</title><rect x="824.6" y="323.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="827.6" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (14 samples, 0.41%)</title><rect x="824.6" y="307.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="824.6" y="291.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="827.6" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (14 samples, 0.41%)</title><rect x="824.6" y="275.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="827.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (14 samples, 0.41%)</title><rect x="824.6" y="259.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="827.6" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (14 samples, 0.41%)</title><rect x="824.6" y="243.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.6" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (14 samples, 0.41%)</title><rect x="824.6" y="227.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.6" y="238.0"></text>
</g>
<g>
<title>write (14 samples, 0.41%)</title><rect x="824.6" y="211.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="827.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (66 samples, 1.93%)</title><rect x="829.4" y="403.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="832.4" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="829.4" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="832.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="829.4" y="371.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="832.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="829.4" y="355.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="832.4" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="829.4" y="339.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="832.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (65 samples, 1.90%)</title><rect x="829.8" y="387.0" width="22.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="832.8" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (65 samples, 1.90%)</title><rect x="829.8" y="371.0" width="22.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="832.8" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (40 samples, 1.17%)</title><rect x="829.8" y="355.0" width="13.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="832.8" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="829.8" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.8" y="350.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="829.8" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="832.8" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="829.8" y="307.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="829.8" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="832.8" y="302.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="829.8" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.8" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="829.8" y="259.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="832.8" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="829.8" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="832.8" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="829.8" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.8" y="238.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="829.8" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.8" y="222.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.03%)</title><rect x="829.8" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="832.8" y="206.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (39 samples, 1.14%)</title><rect x="830.1" y="339.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (39 samples, 1.14%)</title><rect x="830.1" y="323.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.1" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="830.1" y="307.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.1" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="830.1" y="291.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="833.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="830.1" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="830.1" y="259.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.1" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="830.1" y="243.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="830.1" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="833.1" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="830.1" y="211.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.1" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 1.11%)</title><rect x="830.5" y="307.0" width="13.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="833.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (38 samples, 1.11%)</title><rect x="830.5" y="291.0" width="13.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (38 samples, 1.11%)</title><rect x="830.5" y="275.0" width="13.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (38 samples, 1.11%)</title><rect x="830.5" y="259.0" width="13.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (38 samples, 1.11%)</title><rect x="830.5" y="243.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.5" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.99%)</title><rect x="831.9" y="227.0" width="11.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="834.9" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.09%)</title><rect x="843.6" y="355.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="843.6" y="339.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="846.6" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="843.9" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="843.9" y="307.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="846.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="844.3" y="339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="847.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 0.12%)</title><rect x="844.6" y="355.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.6" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="845.3" y="339.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="848.3" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="845.7" y="323.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="848.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="846.0" y="355.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.0" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setTimeout (1 samples, 0.03%)</title><rect x="846.4" y="355.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.4" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (1 samples, 0.03%)</title><rect x="846.4" y="339.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="849.4" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (15 samples, 0.44%)</title><rect x="846.7" y="355.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="849.7" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (13 samples, 0.38%)</title><rect x="846.7" y="339.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="849.7" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (13 samples, 0.38%)</title><rect x="846.7" y="323.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.7" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (13 samples, 0.38%)</title><rect x="846.7" y="307.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="849.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.38%)</title><rect x="846.7" y="291.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="849.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="846.7" y="275.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.29%)</title><rect x="846.7" y="259.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="849.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.29%)</title><rect x="846.7" y="243.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="849.7" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.29%)</title><rect x="846.7" y="227.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="849.7" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.29%)</title><rect x="846.7" y="211.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.7" y="222.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="846.7" y="195.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="849.7" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="850.1" y="259.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (2 samples, 0.06%)</title><rect x="850.5" y="275.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (2 samples, 0.06%)</title><rect x="851.2" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="854.2" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.06%)</title><rect x="851.2" y="323.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="854.2" y="334.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (2 samples, 0.06%)</title><rect x="851.2" y="307.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="854.2" y="318.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="851.2" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="854.2" y="302.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="851.2" y="275.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.2" y="286.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="851.5" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.5" y="302.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.03%)</title><rect x="851.5" y="275.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="854.5" y="286.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.03%)</title><rect x="851.5" y="259.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="854.5" y="270.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="851.9" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="854.9" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (68 samples, 1.99%)</title><rect x="852.2" y="451.0" width="23.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="855.2" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (68 samples, 1.99%)</title><rect x="852.2" y="435.0" width="23.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.2" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="852.2" y="419.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.2" y="430.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="852.6" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.6" y="414.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="852.6" y="387.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.6" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="852.6" y="371.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.6" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.18%)</title><rect x="852.9" y="403.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.9" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="852.9" y="387.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="852.9" y="371.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (6 samples, 0.18%)</title><rect x="852.9" y="355.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (6 samples, 0.18%)</title><rect x="852.9" y="339.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="855.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (6 samples, 0.18%)</title><rect x="852.9" y="323.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="852.9" y="307.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="852.9" y="291.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="855.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="852.9" y="275.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="852.9" y="259.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="852.9" y="243.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.9" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="852.9" y="227.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="855.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (60 samples, 1.75%)</title><rect x="855.0" y="419.0" width="20.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.0" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (60 samples, 1.75%)</title><rect x="855.0" y="403.0" width="20.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.0" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="855.0" y="387.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="858.0" y="398.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (59 samples, 1.73%)</title><rect x="855.3" y="387.0" width="20.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="858.3" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (59 samples, 1.73%)</title><rect x="855.3" y="371.0" width="20.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="858.3" y="382.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="855.3" y="355.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="858.3" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (58 samples, 1.70%)</title><rect x="855.7" y="355.0" width="20.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="858.7" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.06%)</title><rect x="856.0" y="339.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="859.0" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (55 samples, 1.61%)</title><rect x="856.7" y="339.0" width="19.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.7" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (55 samples, 1.61%)</title><rect x="856.7" y="323.0" width="19.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="859.7" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (55 samples, 1.61%)</title><rect x="856.7" y="307.0" width="19.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.7" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (52 samples, 1.52%)</title><rect x="856.7" y="291.0" width="17.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="859.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (52 samples, 1.52%)</title><rect x="856.7" y="275.0" width="17.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="859.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (16 samples, 0.47%)</title><rect x="856.7" y="259.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="859.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (16 samples, 0.47%)</title><rect x="856.7" y="243.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="859.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (16 samples, 0.47%)</title><rect x="856.7" y="227.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (15 samples, 0.44%)</title><rect x="856.7" y="211.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (15 samples, 0.44%)</title><rect x="856.7" y="195.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="859.7" y="206.0"></text>
</g>
<g>
<title>write (15 samples, 0.44%)</title><rect x="856.7" y="179.0" width="5.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="859.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="861.9" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="864.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="861.9" y="195.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="864.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.03%)</title><rect x="862.2" y="259.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="865.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.03%)</title><rect x="862.6" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="865.6" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="862.6" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="865.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (6 samples, 0.18%)</title><rect x="862.9" y="259.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="862.9" y="243.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="865.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="862.9" y="227.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="865.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (6 samples, 0.18%)</title><rect x="862.9" y="211.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="865.9" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.06%)</title><rect x="862.9" y="195.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="865.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="863.6" y="195.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="866.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="863.6" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="866.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="863.9" y="179.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="864.6" y="163.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="867.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="864.6" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="867.6" y="158.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="864.6" y="131.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="867.6" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="865.0" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (15 samples, 0.44%)</title><rect x="865.3" y="259.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="868.3" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="866.4" y="243.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="869.4" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="869.8" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="872.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="869.8" y="227.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="872.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (11 samples, 0.32%)</title><rect x="870.5" y="259.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="873.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="870.5" y="243.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="873.5" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="870.8" y="227.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="873.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="874.3" y="259.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.3" y="270.0"></text>
</g>
<g>
<title>std::__1::mutex::unlock() (1 samples, 0.03%)</title><rect x="874.3" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="877.3" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (1 samples, 0.03%)</title><rect x="874.3" y="227.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="877.3" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (1 samples, 0.03%)</title><rect x="874.3" y="211.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="877.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="874.6" y="291.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.6" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (2 samples, 0.06%)</title><rect x="874.6" y="275.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="877.6" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="875.3" y="291.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.3" y="302.0"></text>
</g>
<g>
<title>[async_worker_5 tid=73987] (59 samples, 1.73%)</title><rect x="875.7" y="515.0" width="20.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="878.7" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (59 samples, 1.73%)</title><rect x="875.7" y="499.0" width="20.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="878.7" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (59 samples, 1.73%)</title><rect x="875.7" y="483.0" width="20.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="878.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (59 samples, 1.73%)</title><rect x="875.7" y="467.0" width="20.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="878.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 0.29%)</title><rect x="875.7" y="451.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="878.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (10 samples, 0.29%)</title><rect x="875.7" y="435.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="878.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 0.26%)</title><rect x="875.7" y="419.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="878.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.26%)</title><rect x="875.7" y="403.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="878.7" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (9 samples, 0.26%)</title><rect x="875.7" y="387.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="878.7" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (9 samples, 0.26%)</title><rect x="875.7" y="371.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="878.7" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.26%)</title><rect x="875.7" y="355.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="878.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (9 samples, 0.26%)</title><rect x="875.7" y="339.0" width="3.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="878.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="878.8" y="419.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="881.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="878.8" y="403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="881.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="878.8" y="387.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="878.8" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.8" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="878.8" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="881.8" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (49 samples, 1.43%)</title><rect x="879.1" y="451.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="882.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (49 samples, 1.43%)</title><rect x="879.1" y="435.0" width="16.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="882.1" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="879.5" y="419.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="882.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="879.5" y="403.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="879.5" y="387.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="882.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="879.5" y="371.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="879.5" y="355.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="882.5" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="879.5" y="339.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="882.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="879.5" y="323.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="882.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="879.5" y="307.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="882.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="879.5" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="882.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="879.5" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="882.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="879.5" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="882.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="879.8" y="307.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="882.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (6 samples, 0.18%)</title><rect x="879.8" y="291.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="882.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (6 samples, 0.18%)</title><rect x="879.8" y="275.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="882.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (6 samples, 0.18%)</title><rect x="879.8" y="259.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="882.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="879.8" y="243.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.8" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="879.8" y="227.0" width="2.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="882.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="881.9" y="403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="884.9" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (40 samples, 1.17%)</title><rect x="882.2" y="419.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="885.2" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="882.2" y="403.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="885.2" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (40 samples, 1.17%)</title><rect x="882.2" y="387.0" width="13.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="885.2" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (40 samples, 1.17%)</title><rect x="882.2" y="371.0" width="13.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="885.2" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (40 samples, 1.17%)</title><rect x="882.2" y="355.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (40 samples, 1.17%)</title><rect x="882.2" y="339.0" width="13.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="885.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (40 samples, 1.17%)</title><rect x="882.2" y="323.0" width="13.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (40 samples, 1.17%)</title><rect x="882.2" y="307.0" width="13.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="885.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (38 samples, 1.11%)</title><rect x="882.2" y="291.0" width="13.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (37 samples, 1.08%)</title><rect x="882.6" y="275.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="885.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (10 samples, 0.29%)</title><rect x="882.6" y="259.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="885.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (10 samples, 0.29%)</title><rect x="882.6" y="243.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="885.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (10 samples, 0.29%)</title><rect x="882.6" y="227.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="885.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (10 samples, 0.29%)</title><rect x="882.6" y="211.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (10 samples, 0.29%)</title><rect x="882.6" y="195.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.6" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="882.6" y="179.0" width="3.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="885.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (8 samples, 0.23%)</title><rect x="886.0" y="259.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (8 samples, 0.23%)</title><rect x="886.0" y="243.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="889.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.23%)</title><rect x="886.0" y="227.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="889.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (8 samples, 0.23%)</title><rect x="886.0" y="211.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (8 samples, 0.23%)</title><rect x="886.0" y="195.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="889.0" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (8 samples, 0.23%)</title><rect x="886.0" y="179.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="888.4" y="163.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="891.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="888.4" y="147.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="891.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="888.8" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="888.8" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="888.8" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="891.8" y="238.0"></text>
</g>
<g>
<title>Java_org_rocksdb_Statistics_toString (1 samples, 0.03%)</title><rect x="888.8" y="211.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="891.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="889.1" y="259.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="892.1" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (7 samples, 0.20%)</title><rect x="889.8" y="243.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="892.8" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="892.2" y="243.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="892.2" y="227.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="895.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (6 samples, 0.18%)</title><rect x="892.9" y="259.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="895.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 0.18%)</title><rect x="892.9" y="243.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.9" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (6 samples, 0.18%)</title><rect x="892.9" y="227.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="895.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="895.0" y="259.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="895.3" y="291.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="898.3" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="895.3" y="275.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="898.3" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="895.3" y="259.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="898.3" y="270.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="895.3" y="243.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="898.3" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="895.3" y="227.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="898.3" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="895.3" y="211.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="898.3" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="895.3" y="195.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="898.3" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="895.3" y="179.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="898.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="895.7" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="898.7" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="895.7" y="275.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="898.7" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="895.7" y="259.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="898.7" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="895.7" y="243.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="898.7" y="254.0"></text>
</g>
<g>
<title>[async_worker_5 tid=75011] (62 samples, 1.81%)</title><rect x="896.0" y="515.0" width="21.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="899.0" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (62 samples, 1.81%)</title><rect x="896.0" y="499.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="899.0" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (62 samples, 1.81%)</title><rect x="896.0" y="483.0" width="21.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="899.0" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (62 samples, 1.81%)</title><rect x="896.0" y="467.0" width="21.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="899.0" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (13 samples, 0.38%)</title><rect x="896.0" y="451.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="899.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (13 samples, 0.38%)</title><rect x="896.0" y="435.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="899.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (12 samples, 0.35%)</title><rect x="896.0" y="419.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (12 samples, 0.35%)</title><rect x="896.0" y="403.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="899.0" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (12 samples, 0.35%)</title><rect x="896.0" y="387.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="899.0" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (11 samples, 0.32%)</title><rect x="896.4" y="371.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="899.4" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.29%)</title><rect x="896.4" y="355.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="899.4" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 0.23%)</title><rect x="896.7" y="339.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="899.7" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="899.5" y="339.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="902.5" y="350.0"></text>
</g>
<g>
<title>_pthread_mutex_droplock (1 samples, 0.03%)</title><rect x="899.5" y="323.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="902.5" y="334.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="899.8" y="355.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="902.8" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="900.2" y="419.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="900.2" y="403.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="900.2" y="387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="900.2" y="371.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="900.2" y="355.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.2" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="900.2" y="339.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="903.2" y="350.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="900.2" y="323.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="903.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (49 samples, 1.43%)</title><rect x="900.5" y="451.0" width="16.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (49 samples, 1.43%)</title><rect x="900.5" y="435.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.18%)</title><rect x="900.5" y="419.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (6 samples, 0.18%)</title><rect x="900.5" y="403.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.5" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="900.5" y="387.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (6 samples, 0.18%)</title><rect x="900.5" y="371.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (5 samples, 0.15%)</title><rect x="900.9" y="355.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="903.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (5 samples, 0.15%)</title><rect x="900.9" y="339.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (5 samples, 0.15%)</title><rect x="900.9" y="323.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (5 samples, 0.15%)</title><rect x="900.9" y="307.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (5 samples, 0.15%)</title><rect x="900.9" y="291.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="903.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (5 samples, 0.15%)</title><rect x="900.9" y="275.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="903.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="900.9" y="259.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (4 samples, 0.12%)</title><rect x="901.2" y="259.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.12%)</title><rect x="901.2" y="243.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="904.2" y="254.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="901.2" y="227.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="904.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (43 samples, 1.26%)</title><rect x="902.6" y="419.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.6" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (43 samples, 1.26%)</title><rect x="902.6" y="403.0" width="14.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.6" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (42 samples, 1.23%)</title><rect x="902.9" y="387.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.9" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (42 samples, 1.23%)</title><rect x="902.9" y="371.0" width="14.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="905.9" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (42 samples, 1.23%)</title><rect x="902.9" y="355.0" width="14.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="905.9" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (42 samples, 1.23%)</title><rect x="902.9" y="339.0" width="14.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="905.9" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.23%)</title><rect x="902.9" y="323.0" width="14.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="905.9" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (42 samples, 1.23%)</title><rect x="902.9" y="307.0" width="14.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.9" y="318.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="902.9" y="291.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="905.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (40 samples, 1.17%)</title><rect x="903.3" y="291.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="906.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (40 samples, 1.17%)</title><rect x="903.3" y="275.0" width="13.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="906.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.03%)</title><rect x="904.0" y="259.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="907.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (11 samples, 0.32%)</title><rect x="904.3" y="259.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="907.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (11 samples, 0.32%)</title><rect x="904.3" y="243.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (11 samples, 0.32%)</title><rect x="904.3" y="227.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (11 samples, 0.32%)</title><rect x="904.3" y="211.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (11 samples, 0.32%)</title><rect x="904.3" y="195.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="907.3" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="904.7" y="179.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="907.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="908.1" y="259.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="908.1" y="243.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="908.1" y="227.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="908.1" y="211.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="908.1" y="195.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="908.1" y="179.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="908.5" y="179.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="908.8" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="908.8" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="911.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="909.1" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="912.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="909.1" y="243.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="909.1" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="909.1" y="211.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="912.1" y="222.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.03%)</title><rect x="909.1" y="195.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="909.5" y="259.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="912.5" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (8 samples, 0.23%)</title><rect x="909.8" y="243.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="912.8" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (2 samples, 0.06%)</title><rect x="912.6" y="243.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="915.6" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.06%)</title><rect x="912.6" y="227.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="915.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (11 samples, 0.32%)</title><rect x="913.3" y="259.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="916.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (11 samples, 0.32%)</title><rect x="913.3" y="243.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.3" y="254.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="913.3" y="227.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="916.3" y="238.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (10 samples, 0.29%)</title><rect x="913.6" y="227.0" width="3.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="916.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="917.1" y="291.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="920.1" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="917.1" y="275.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.1" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="917.1" y="259.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="920.1" y="270.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="917.1" y="243.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="920.1" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="917.1" y="227.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="920.1" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="917.1" y="211.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="920.1" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="917.1" y="195.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="920.1" y="206.0"></text>
</g>
<g>
<title>[async_worker_5 tid=81667] (190 samples, 5.56%)</title><rect x="917.4" y="515.0" width="65.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="920.4" y="526.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (190 samples, 5.56%)</title><rect x="917.4" y="499.0" width="65.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.4" y="510.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (190 samples, 5.56%)</title><rect x="917.4" y="483.0" width="65.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.4" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (190 samples, 5.56%)</title><rect x="917.4" y="467.0" width="65.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.4" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (35 samples, 1.02%)</title><rect x="917.4" y="451.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (34 samples, 0.99%)</title><rect x="917.8" y="435.0" width="11.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (31 samples, 0.91%)</title><rect x="917.8" y="419.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (31 samples, 0.91%)</title><rect x="917.8" y="403.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (31 samples, 0.91%)</title><rect x="917.8" y="387.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.8" y="398.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (1 samples, 0.03%)</title><rect x="919.2" y="371.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.2" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (26 samples, 0.76%)</title><rect x="919.5" y="371.0" width="9.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="922.5" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="919.5" y="355.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="922.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="919.5" y="339.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.5" y="350.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="919.5" y="323.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.5" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="919.5" y="307.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="922.5" y="318.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.03%)</title><rect x="919.5" y="291.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="922.5" y="302.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.06%)</title><rect x="919.8" y="355.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.8" y="366.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2 samples, 0.06%)</title><rect x="919.8" y="339.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.8" y="350.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.06%)</title><rect x="919.8" y="323.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="922.8" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 0.67%)</title><rect x="920.5" y="355.0" width="8.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="923.5" y="366.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.03%)</title><rect x="920.9" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="923.9" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="920.9" y="323.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="923.9" y="334.0"></text>
</g>
<g>
<title>__psynch_cvwait (21 samples, 0.61%)</title><rect x="921.2" y="339.0" width="7.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="924.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.09%)</title><rect x="928.5" y="419.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="931.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.09%)</title><rect x="928.5" y="403.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="931.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.09%)</title><rect x="928.5" y="387.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="931.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.09%)</title><rect x="928.5" y="371.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="931.5" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.09%)</title><rect x="928.5" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.5" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.09%)</title><rect x="928.5" y="339.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="931.5" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="928.5" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.5" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (2 samples, 0.06%)</title><rect x="928.8" y="323.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="931.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (87 samples, 2.54%)</title><rect x="929.5" y="451.0" width="30.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.5" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (87 samples, 2.54%)</title><rect x="929.5" y="435.0" width="30.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="932.5" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (87 samples, 2.54%)</title><rect x="929.5" y="419.0" width="30.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.5" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.41%)</title><rect x="929.8" y="403.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="932.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (14 samples, 0.41%)</title><rect x="929.8" y="387.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="929.8" y="371.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="932.8" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="929.8" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="932.8" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.38%)</title><rect x="930.2" y="371.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="933.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 0.38%)</title><rect x="930.2" y="355.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="933.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (13 samples, 0.38%)</title><rect x="930.2" y="339.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="933.2" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (13 samples, 0.38%)</title><rect x="930.2" y="323.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="933.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.38%)</title><rect x="930.2" y="307.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="933.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.06%)</title><rect x="930.2" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="933.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.06%)</title><rect x="930.2" y="275.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="933.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (2 samples, 0.06%)</title><rect x="930.2" y="259.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="933.2" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="930.2" y="243.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.2" y="254.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="930.2" y="227.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="933.2" y="238.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (2 samples, 0.06%)</title><rect x="930.2" y="211.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="933.2" y="222.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.03%)</title><rect x="930.5" y="195.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="933.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="930.9" y="291.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="933.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="930.9" y="275.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="933.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (11 samples, 0.32%)</title><rect x="930.9" y="259.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (1 samples, 0.03%)</title><rect x="930.9" y="243.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="933.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.29%)</title><rect x="931.2" y="243.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="934.2" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.29%)</title><rect x="931.2" y="227.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="934.2" y="238.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="931.2" y="211.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="934.2" y="222.0"></text>
</g>
<g>
<title>write (9 samples, 0.26%)</title><rect x="931.6" y="211.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="934.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (72 samples, 2.11%)</title><rect x="934.7" y="403.0" width="24.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="937.7" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.12%)</title><rect x="934.7" y="387.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="937.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.12%)</title><rect x="934.7" y="371.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="937.7" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.12%)</title><rect x="934.7" y="355.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="937.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.12%)</title><rect x="934.7" y="339.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="937.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.03%)</title><rect x="935.4" y="323.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="938.4" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="935.7" y="323.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="938.7" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (68 samples, 1.99%)</title><rect x="936.1" y="387.0" width="23.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.1" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (68 samples, 1.99%)</title><rect x="936.1" y="371.0" width="23.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.1" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (38 samples, 1.11%)</title><rect x="936.1" y="355.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="939.1" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.08%)</title><rect x="936.4" y="339.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="939.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="936.4" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="939.4" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="936.4" y="307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="939.4" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="936.4" y="291.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (36 samples, 1.05%)</title><rect x="936.7" y="323.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="939.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="936.7" y="307.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="939.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="936.7" y="291.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="939.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (36 samples, 1.05%)</title><rect x="936.7" y="275.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (36 samples, 1.05%)</title><rect x="936.7" y="259.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (36 samples, 1.05%)</title><rect x="936.7" y="243.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.7" y="254.0"></text>
</g>
<g>
<title>rpc_errlist (34 samples, 0.99%)</title><rect x="937.4" y="227.0" width="11.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="940.4" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2 samples, 0.06%)</title><rect x="949.2" y="355.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="952.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.06%)</title><rect x="949.2" y="339.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="952.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="949.5" y="323.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="952.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1 samples, 0.03%)</title><rect x="949.9" y="355.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="952.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (27 samples, 0.79%)</title><rect x="950.2" y="355.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="953.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (21 samples, 0.61%)</title><rect x="950.2" y="339.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="953.2" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (21 samples, 0.61%)</title><rect x="950.2" y="323.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="953.2" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (20 samples, 0.58%)</title><rect x="950.5" y="307.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="953.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (20 samples, 0.58%)</title><rect x="950.5" y="291.0" width="7.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="953.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.47%)</title><rect x="950.5" y="275.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="953.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (16 samples, 0.47%)</title><rect x="950.5" y="259.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="953.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (16 samples, 0.47%)</title><rect x="950.5" y="243.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="953.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (16 samples, 0.47%)</title><rect x="950.5" y="227.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="953.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (15 samples, 0.44%)</title><rect x="950.9" y="211.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="953.9" y="222.0"></text>
</g>
<g>
<title>write (15 samples, 0.44%)</title><rect x="950.9" y="195.0" width="5.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="953.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.09%)</title><rect x="956.1" y="275.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="959.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.03%)</title><rect x="956.8" y="259.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="959.8" y="270.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="956.8" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="959.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.03%)</title><rect x="957.1" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="960.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (6 samples, 0.18%)</title><rect x="957.5" y="339.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="960.5" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (6 samples, 0.18%)</title><rect x="957.5" y="323.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="960.5" y="334.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (3 samples, 0.09%)</title><rect x="957.5" y="307.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="960.5" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="957.5" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.5" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="957.5" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.5" y="286.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.03%)</title><rect x="957.5" y="259.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="960.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="957.8" y="291.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.8" y="302.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="957.8" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="960.8" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.03%)</title><rect x="958.1" y="291.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.1" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (1 samples, 0.03%)</title><rect x="958.1" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.1" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="958.1" y="259.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.1" y="270.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="958.1" y="243.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="961.1" y="254.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.03%)</title><rect x="958.1" y="227.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.1" y="238.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.03%)</title><rect x="958.1" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.1" y="222.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="958.5" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="961.5" y="318.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="958.8" y="307.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.8" y="318.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.03%)</title><rect x="959.2" y="307.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (68 samples, 1.99%)</title><rect x="959.5" y="451.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.5" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (68 samples, 1.99%)</title><rect x="959.5" y="435.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="962.5" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (5 samples, 0.15%)</title><rect x="959.5" y="419.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="962.5" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (5 samples, 0.15%)</title><rect x="959.5" y="403.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="962.5" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="959.5" y="387.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="962.5" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.12%)</title><rect x="959.9" y="387.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="962.9" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4 samples, 0.12%)</title><rect x="959.9" y="371.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.9" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (4 samples, 0.12%)</title><rect x="959.9" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="962.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (4 samples, 0.12%)</title><rect x="959.9" y="339.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (4 samples, 0.12%)</title><rect x="959.9" y="323.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="962.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4 samples, 0.12%)</title><rect x="959.9" y="307.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.9" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (4 samples, 0.12%)</title><rect x="959.9" y="291.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="962.9" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (4 samples, 0.12%)</title><rect x="959.9" y="275.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (4 samples, 0.12%)</title><rect x="959.9" y="259.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="962.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.12%)</title><rect x="959.9" y="243.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="962.9" y="254.0"></text>
</g>
<g>
<title>write (4 samples, 0.12%)</title><rect x="959.9" y="227.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="962.9" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (63 samples, 1.84%)</title><rect x="961.2" y="419.0" width="21.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="964.2" y="430.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="961.2" y="403.0" width="21.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.2" y="414.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="961.2" y="387.0" width="21.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="964.2" y="398.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (63 samples, 1.84%)</title><rect x="961.2" y="371.0" width="21.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="964.2" y="382.0">J..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (62 samples, 1.81%)</title><rect x="961.6" y="355.0" width="21.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="964.6" y="366.0">r..</text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="961.6" y="339.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="964.6" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="961.6" y="323.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="964.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (61 samples, 1.78%)</title><rect x="961.9" y="339.0" width="21.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.9" y="350.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (61 samples, 1.78%)</title><rect x="961.9" y="323.0" width="21.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.9" y="334.0">r..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (61 samples, 1.78%)</title><rect x="961.9" y="307.0" width="21.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.9" y="318.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (60 samples, 1.75%)</title><rect x="961.9" y="291.0" width="20.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="964.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (59 samples, 1.73%)</title><rect x="961.9" y="275.0" width="20.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="964.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (13 samples, 0.38%)</title><rect x="962.3" y="259.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (13 samples, 0.38%)</title><rect x="962.3" y="243.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (13 samples, 0.38%)</title><rect x="962.3" y="227.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="965.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="962.3" y="211.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="965.3" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (11 samples, 0.32%)</title><rect x="962.6" y="211.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (11 samples, 0.32%)</title><rect x="962.6" y="195.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.6" y="206.0"></text>
</g>
<g>
<title>write (10 samples, 0.29%)</title><rect x="963.0" y="179.0" width="3.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="966.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="966.4" y="211.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="966.4" y="195.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="966.8" y="259.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="969.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="966.8" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="966.8" y="227.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="969.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="966.8" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="969.8" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="966.8" y="195.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="969.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="966.8" y="179.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="969.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="967.5" y="195.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="970.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="967.8" y="259.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="970.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="967.8" y="243.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.8" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="967.8" y="227.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="970.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="967.8" y="211.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="970.8" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="967.8" y="195.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="970.8" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="967.8" y="179.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="970.8" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="967.8" y="163.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="970.8" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="967.8" y="147.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="970.8" y="158.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="968.1" y="195.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="971.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (23 samples, 0.67%)</title><rect x="968.5" y="259.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.5" y="270.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="969.5" y="243.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="972.5" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (15 samples, 0.44%)</title><rect x="969.9" y="243.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="972.9" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.12%)</title><rect x="975.0" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="975.0" y="227.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="978.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (16 samples, 0.47%)</title><rect x="976.4" y="259.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="979.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (16 samples, 0.47%)</title><rect x="976.4" y="243.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.4" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (15 samples, 0.44%)</title><rect x="976.8" y="227.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="979.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="981.9" y="259.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.9" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="981.9" y="243.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="984.9" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="981.9" y="227.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="984.9" y="238.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.03%)</title><rect x="982.3" y="275.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.3" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="982.6" y="291.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.6" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="982.6" y="275.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="985.6" y="286.0"></text>
</g>
<g>
<title>[async_worker_6 tid=52995] (190 samples, 5.56%)</title><rect x="983.0" y="515.0" width="65.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="986.0" y="526.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (190 samples, 5.56%)</title><rect x="983.0" y="499.0" width="65.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="986.0" y="510.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (190 samples, 5.56%)</title><rect x="983.0" y="483.0" width="65.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="986.0" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (190 samples, 5.56%)</title><rect x="983.0" y="467.0" width="65.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="986.0" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (33 samples, 0.96%)</title><rect x="983.0" y="451.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="986.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (33 samples, 0.96%)</title><rect x="983.0" y="435.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (28 samples, 0.82%)</title><rect x="983.0" y="419.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="986.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.03%)</title><rect x="983.0" y="403.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="983.0" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="986.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.03%)</title><rect x="983.0" y="371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="986.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="983.0" y="355.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="986.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="983.0" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="986.0" y="350.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.03%)</title><rect x="983.0" y="323.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="986.0" y="334.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="983.0" y="307.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="986.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (27 samples, 0.79%)</title><rect x="983.3" y="403.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="986.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (27 samples, 0.79%)</title><rect x="983.3" y="387.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="986.3" y="398.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="983.7" y="371.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.7" y="382.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (25 samples, 0.73%)</title><rect x="984.0" y="371.0" width="8.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="987.0" y="382.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="984.4" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.4" y="366.0"></text>
</g>
<g>
<title>ThreadStatistics::monitor_wait() (1 samples, 0.03%)</title><rect x="984.4" y="339.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.4" y="350.0"></text>
</g>
<g>
<title>ThreadStatistics::check_and_reset_count() (1 samples, 0.03%)</title><rect x="984.4" y="323.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.4" y="334.0"></text>
</g>
<g>
<title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (1 samples, 0.03%)</title><rect x="984.7" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.7" y="366.0"></text>
</g>
<g>
<title>JfrEventSetting::is_enabled(JfrEventId) (1 samples, 0.03%)</title><rect x="984.7" y="339.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.7" y="350.0"></text>
</g>
<g>
<title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.03%)</title><rect x="984.7" y="323.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.7" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.61%)</title><rect x="985.1" y="355.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.1" y="366.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="985.1" y="339.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="988.1" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (18 samples, 0.53%)</title><rect x="985.4" y="339.0" width="6.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="988.4" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="991.6" y="339.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="994.6" y="350.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="991.6" y="323.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="994.6" y="334.0"></text>
</g>
<g>
<title>_pthread_testcancel (1 samples, 0.03%)</title><rect x="992.0" y="339.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="995.0" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="992.3" y="355.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.3" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="992.3" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="995.3" y="350.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="992.3" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.3" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="992.3" y="307.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.3" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="992.3" y="291.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.15%)</title><rect x="992.6" y="419.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="995.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="992.6" y="403.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="995.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="992.6" y="387.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="995.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.15%)</title><rect x="992.6" y="371.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="995.6" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.12%)</title><rect x="993.0" y="355.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="996.0" y="366.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (4 samples, 0.12%)</title><rect x="993.0" y="339.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="996.0" y="350.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.03%)</title><rect x="993.0" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.0" y="334.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.03%)</title><rect x="993.0" y="307.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 0.09%)</title><rect x="993.3" y="323.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="996.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (87 samples, 2.54%)</title><rect x="994.4" y="451.0" width="30.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="997.4" y="462.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (87 samples, 2.54%)</title><rect x="994.4" y="435.0" width="30.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="997.4" y="446.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (87 samples, 2.54%)</title><rect x="994.4" y="419.0" width="30.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="997.4" y="430.0">ru..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (11 samples, 0.32%)</title><rect x="994.4" y="403.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="997.4" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="994.4" y="387.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="997.4" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="994.4" y="371.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="997.4" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="994.4" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="997.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1 samples, 0.03%)</title><rect x="994.4" y="339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="997.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="994.7" y="387.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="997.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="994.7" y="371.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="997.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (9 samples, 0.26%)</title><rect x="994.7" y="355.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="997.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 0.26%)</title><rect x="994.7" y="339.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="997.7" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (9 samples, 0.26%)</title><rect x="994.7" y="323.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (9 samples, 0.26%)</title><rect x="994.7" y="307.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="997.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="994.7" y="291.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="997.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="994.7" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="997.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.03%)</title><rect x="994.7" y="259.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="997.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="995.1" y="291.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="998.1" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="995.1" y="275.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="998.1" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.23%)</title><rect x="995.1" y="259.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="998.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.23%)</title><rect x="995.1" y="243.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.1" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="995.4" y="227.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="998.4" y="238.0"></text>
</g>
<g>
<title>write (7 samples, 0.20%)</title><rect x="995.4" y="211.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="998.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.03%)</title><rect x="997.8" y="387.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.8" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (76 samples, 2.22%)</title><rect x="998.2" y="403.0" width="26.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.2" y="414.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (76 samples, 2.22%)</title><rect x="998.2" y="387.0" width="26.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1001.2" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (76 samples, 2.22%)</title><rect x="998.2" y="371.0" width="26.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1001.2" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (48 samples, 1.40%)</title><rect x="998.2" y="355.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1001.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="998.2" y="339.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.2" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="998.2" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1001.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (47 samples, 1.37%)</title><rect x="998.5" y="339.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1001.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (47 samples, 1.37%)</title><rect x="998.5" y="323.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1001.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (47 samples, 1.37%)</title><rect x="998.5" y="307.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (47 samples, 1.37%)</title><rect x="998.5" y="291.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1001.5" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="998.5" y="275.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (45 samples, 1.32%)</title><rect x="998.9" y="275.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1001.9" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (45 samples, 1.32%)</title><rect x="998.9" y="259.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1001.9" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (45 samples, 1.32%)</title><rect x="998.9" y="243.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1001.9" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="999.2" y="227.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1002.2" y="238.0"></text>
</g>
<g>
<title>rpc_errlist (43 samples, 1.26%)</title><rect x="999.5" y="227.0" width="14.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1002.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.03%)</title><rect x="1014.4" y="275.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1017.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.03%)</title><rect x="1014.4" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.4" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="1014.7" y="355.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1017.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (1 samples, 0.03%)</title><rect x="1014.7" y="339.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1014.7" y="323.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1017.7" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1014.7" y="307.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1017.7" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4 samples, 0.12%)</title><rect x="1015.1" y="355.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1018.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.09%)</title><rect x="1015.4" y="339.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.4" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (23 samples, 0.67%)</title><rect x="1016.5" y="355.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (13 samples, 0.38%)</title><rect x="1016.8" y="339.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1019.8" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (13 samples, 0.38%)</title><rect x="1016.8" y="323.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.8" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (13 samples, 0.38%)</title><rect x="1016.8" y="307.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1019.8" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (13 samples, 0.38%)</title><rect x="1016.8" y="291.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.8" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.29%)</title><rect x="1016.8" y="275.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.8" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.29%)</title><rect x="1016.8" y="259.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1019.8" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.29%)</title><rect x="1016.8" y="243.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1019.8" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.29%)</title><rect x="1016.8" y="227.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1019.8" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.29%)</title><rect x="1016.8" y="211.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1019.8" y="222.0"></text>
</g>
<g>
<title>write (9 samples, 0.26%)</title><rect x="1017.1" y="195.0" width="3.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1020.1" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.09%)</title><rect x="1020.2" y="275.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1023.2" y="286.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.03%)</title><rect x="1020.2" y="259.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1023.2" y="270.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.03%)</title><rect x="1020.2" y="243.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1023.2" y="254.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.03%)</title><rect x="1020.2" y="227.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1023.2" y="238.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.03%)</title><rect x="1020.2" y="211.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1023.2" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.06%)</title><rect x="1020.6" y="259.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1023.6" y="270.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.03%)</title><rect x="1020.6" y="243.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1023.6" y="254.0"></text>
</g>
<g>
<title>pthread_self (1 samples, 0.03%)</title><rect x="1020.9" y="243.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1023.9" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (9 samples, 0.26%)</title><rect x="1021.3" y="339.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.3" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (9 samples, 0.26%)</title><rect x="1021.3" y="323.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.3" y="334.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (7 samples, 0.20%)</title><rect x="1021.6" y="307.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1024.6" y="318.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.06%)</title><rect x="1022.0" y="291.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1025.0" y="302.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.03%)</title><rect x="1022.0" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.0" y="286.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.03%)</title><rect x="1022.3" y="275.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1025.3" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (4 samples, 0.12%)</title><rect x="1022.7" y="291.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.7" y="302.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (4 samples, 0.12%)</title><rect x="1022.7" y="275.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.7" y="286.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.03%)</title><rect x="1022.7" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.7" y="270.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.09%)</title><rect x="1023.0" y="259.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.0" y="270.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.09%)</title><rect x="1023.0" y="243.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.0" y="254.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="1023.7" y="227.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.7" y="238.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (1 samples, 0.03%)</title><rect x="1023.7" y="211.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1026.7" y="222.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="1024.0" y="307.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1027.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (70 samples, 2.05%)</title><rect x="1024.4" y="451.0" width="24.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1027.4" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (70 samples, 2.05%)</title><rect x="1024.4" y="435.0" width="24.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1027.4" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.20%)</title><rect x="1024.4" y="419.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1027.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.20%)</title><rect x="1024.4" y="403.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1027.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1024.4" y="387.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1027.4" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1024.4" y="371.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="1024.4" y="355.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1027.4" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="1024.4" y="339.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1027.4" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="1024.4" y="323.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1027.4" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1024.4" y="307.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1024.4" y="291.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1027.4" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="1024.4" y="275.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1027.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="1024.4" y="259.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1027.4" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1024.4" y="243.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1027.4" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="1024.7" y="243.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1027.7" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="1024.7" y="227.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1027.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (63 samples, 1.84%)</title><rect x="1026.8" y="419.0" width="21.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1029.8" y="430.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="1026.8" y="403.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1029.8" y="414.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="1026.8" y="387.0" width="21.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1029.8" y="398.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (63 samples, 1.84%)</title><rect x="1026.8" y="371.0" width="21.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1029.8" y="382.0">J..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (63 samples, 1.84%)</title><rect x="1026.8" y="355.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.8" y="366.0">r..</text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.03%)</title><rect x="1026.8" y="339.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1029.8" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1026.8" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.8" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1026.8" y="307.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.8" y="318.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1026.8" y="291.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.8" y="302.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1026.8" y="275.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1029.8" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1026.8" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.8" y="270.0"></text>
</g>
<g>
<title>OrderAccess::acquire() (1 samples, 0.03%)</title><rect x="1026.8" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.8" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.06%)</title><rect x="1027.1" y="339.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1030.1" y="350.0"></text>
</g>
<g>
<title>malloc (2 samples, 0.06%)</title><rect x="1027.1" y="323.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1030.1" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (2 samples, 0.06%)</title><rect x="1027.1" y="307.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1030.1" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="1027.1" y="291.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1030.1" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="1027.1" y="275.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1030.1" y="286.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1027.5" y="259.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1030.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (60 samples, 1.75%)</title><rect x="1027.8" y="339.0" width="20.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (60 samples, 1.75%)</title><rect x="1027.8" y="323.0" width="20.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1030.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (60 samples, 1.75%)</title><rect x="1027.8" y="307.0" width="20.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (58 samples, 1.70%)</title><rect x="1027.8" y="291.0" width="20.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1030.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (58 samples, 1.70%)</title><rect x="1027.8" y="275.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (15 samples, 0.44%)</title><rect x="1028.2" y="259.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1031.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (15 samples, 0.44%)</title><rect x="1028.2" y="243.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (15 samples, 0.44%)</title><rect x="1028.2" y="227.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (12 samples, 0.35%)</title><rect x="1028.9" y="211.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1031.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (12 samples, 0.35%)</title><rect x="1028.9" y="195.0" width="4.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.9" y="206.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="1029.2" y="179.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1032.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1033.0" y="211.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="1033.4" y="259.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1033.4" y="243.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1033.4" y="227.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1033.4" y="211.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="1033.4" y="195.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1033.7" y="179.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="1034.4" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1034.4" y="243.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1037.4" y="254.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1034.4" y="227.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1037.4" y="238.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1034.4" y="211.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1037.4" y="222.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="1034.4" y="195.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1037.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (26 samples, 0.76%)</title><rect x="1034.7" y="259.0" width="9.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.7" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (14 samples, 0.41%)</title><rect x="1037.2" y="243.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1040.2" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (5 samples, 0.15%)</title><rect x="1042.0" y="243.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1045.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="1042.0" y="227.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1045.0" y="238.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1043.4" y="227.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1046.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (12 samples, 0.35%)</title><rect x="1043.7" y="259.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (12 samples, 0.35%)</title><rect x="1043.7" y="243.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.7" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.35%)</title><rect x="1043.7" y="227.0" width="4.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1046.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1047.8" y="291.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1047.8" y="275.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.8" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1047.8" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1050.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="1048.2" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.2" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1048.2" y="275.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1051.2" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1048.2" y="259.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1051.2" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1048.2" y="243.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1051.2" y="254.0"></text>
</g>
<g>
<title>[async_worker_6 tid=57347] (64 samples, 1.87%)</title><rect x="1048.5" y="515.0" width="22.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1051.5" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (64 samples, 1.87%)</title><rect x="1048.5" y="499.0" width="22.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1051.5" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (64 samples, 1.87%)</title><rect x="1048.5" y="483.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1051.5" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (64 samples, 1.87%)</title><rect x="1048.5" y="467.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1051.5" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 0.23%)</title><rect x="1048.5" y="451.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1051.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (8 samples, 0.23%)</title><rect x="1048.5" y="435.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1051.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (7 samples, 0.20%)</title><rect x="1048.9" y="419.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.20%)</title><rect x="1048.9" y="403.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1051.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.20%)</title><rect x="1048.9" y="387.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1051.9" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.20%)</title><rect x="1048.9" y="371.0" width="2.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1051.9" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.20%)</title><rect x="1048.9" y="355.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.9" y="366.0"></text>
</g>
<g>
<title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (1 samples, 0.03%)</title><rect x="1048.9" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.9" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="1048.9" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.9" y="334.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.03%)</title><rect x="1048.9" y="307.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.9" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.18%)</title><rect x="1049.2" y="339.0" width="2.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1052.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (56 samples, 1.64%)</title><rect x="1051.3" y="451.0" width="19.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1054.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (56 samples, 1.64%)</title><rect x="1051.3" y="435.0" width="19.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1054.3" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="1051.3" y="419.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1054.3" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.23%)</title><rect x="1051.3" y="403.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1054.3" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="1051.3" y="387.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1054.3" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8 samples, 0.23%)</title><rect x="1051.3" y="371.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1054.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (8 samples, 0.23%)</title><rect x="1051.3" y="355.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (8 samples, 0.23%)</title><rect x="1051.3" y="339.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1054.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (8 samples, 0.23%)</title><rect x="1051.3" y="323.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="1051.3" y="307.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1054.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (8 samples, 0.23%)</title><rect x="1051.3" y="291.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1054.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (8 samples, 0.23%)</title><rect x="1051.3" y="275.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1054.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (8 samples, 0.23%)</title><rect x="1051.3" y="259.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1054.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (6 samples, 0.18%)</title><rect x="1052.0" y="243.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.0" y="254.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="1052.0" y="227.0" width="2.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1055.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (48 samples, 1.40%)</title><rect x="1054.1" y="419.0" width="16.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1057.1" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (48 samples, 1.40%)</title><rect x="1054.1" y="403.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1057.1" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (48 samples, 1.40%)</title><rect x="1054.1" y="387.0" width="16.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1057.1" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (48 samples, 1.40%)</title><rect x="1054.1" y="371.0" width="16.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1057.1" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (48 samples, 1.40%)</title><rect x="1054.1" y="355.0" width="16.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.1" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="1054.1" y="339.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1057.1" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1054.1" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (47 samples, 1.37%)</title><rect x="1054.4" y="339.0" width="16.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.4" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 1.37%)</title><rect x="1054.4" y="323.0" width="16.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (47 samples, 1.37%)</title><rect x="1054.4" y="307.0" width="16.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (42 samples, 1.23%)</title><rect x="1054.7" y="291.0" width="14.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1057.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (1 samples, 0.03%)</title><rect x="1054.7" y="275.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (41 samples, 1.20%)</title><rect x="1055.1" y="275.0" width="14.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1058.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (7 samples, 0.20%)</title><rect x="1055.4" y="259.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1058.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (7 samples, 0.20%)</title><rect x="1055.4" y="243.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (7 samples, 0.20%)</title><rect x="1055.4" y="227.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (7 samples, 0.20%)</title><rect x="1055.4" y="211.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.4" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (7 samples, 0.20%)</title><rect x="1055.4" y="195.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.4" y="206.0"></text>
</g>
<g>
<title>write (7 samples, 0.20%)</title><rect x="1055.4" y="179.0" width="2.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1058.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="1057.9" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1057.9" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1057.9" y="227.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="1057.9" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (3 samples, 0.09%)</title><rect x="1057.9" y="195.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="1057.9" y="179.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1060.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1058.5" y="163.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.5" y="174.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.03%)</title><rect x="1058.5" y="147.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1061.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="1058.9" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1058.9" y="243.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1058.9" y="227.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1058.9" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="1058.9" y="195.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1058.9" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1058.9" y="163.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.9" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (20 samples, 0.58%)</title><rect x="1059.2" y="259.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.2" y="270.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.03%)</title><rect x="1061.3" y="243.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1064.3" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (9 samples, 0.26%)</title><rect x="1061.6" y="243.0" width="3.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1064.6" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (4 samples, 0.12%)</title><rect x="1064.8" y="243.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1067.8" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.12%)</title><rect x="1064.8" y="227.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1067.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (8 samples, 0.23%)</title><rect x="1066.1" y="259.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 0.23%)</title><rect x="1066.1" y="243.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.1" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (7 samples, 0.20%)</title><rect x="1066.5" y="227.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1069.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1068.9" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1071.9" y="270.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="1068.9" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.9" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.03%)</title><rect x="1068.9" y="227.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1071.9" y="238.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.03%)</title><rect x="1068.9" y="211.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1071.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1069.2" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1069.2" y="275.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1069.6" y="291.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.6" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.03%)</title><rect x="1069.6" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.6" y="286.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="1069.6" y="259.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.6" y="270.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1069.6" y="243.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1072.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.06%)</title><rect x="1069.9" y="291.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.9" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1069.9" y="275.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1072.9" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1069.9" y="259.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1072.9" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1069.9" y="243.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1072.9" y="254.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1070.3" y="275.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1073.3" y="286.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1070.3" y="259.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1073.3" y="270.0"></text>
</g>
<g>
<title>[async_worker_6 tid=59651] (43 samples, 1.26%)</title><rect x="1070.6" y="515.0" width="14.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1073.6" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (43 samples, 1.26%)</title><rect x="1070.6" y="499.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (43 samples, 1.26%)</title><rect x="1070.6" y="483.0" width="14.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1073.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (43 samples, 1.26%)</title><rect x="1070.6" y="467.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1073.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 0.20%)</title><rect x="1070.6" y="451.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1073.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (7 samples, 0.20%)</title><rect x="1070.6" y="435.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1073.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (7 samples, 0.20%)</title><rect x="1070.6" y="419.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.20%)</title><rect x="1070.6" y="403.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.20%)</title><rect x="1070.6" y="387.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1073.6" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.20%)</title><rect x="1070.6" y="371.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1073.6" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.20%)</title><rect x="1070.6" y="355.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1073.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="1070.6" y="339.0" width="2.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1073.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (36 samples, 1.05%)</title><rect x="1073.0" y="451.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (36 samples, 1.05%)</title><rect x="1073.0" y="435.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.0" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.26%)</title><rect x="1073.0" y="419.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.0" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9 samples, 0.26%)</title><rect x="1073.0" y="403.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.0" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="1073.0" y="387.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1076.0" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1073.7" y="387.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1076.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1073.7" y="371.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1076.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="1073.7" y="355.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1076.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="1073.7" y="339.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1076.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="1073.7" y="323.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1076.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1073.7" y="307.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1076.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1073.7" y="291.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1076.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="1073.7" y="275.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1076.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="1073.7" y="259.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1076.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="1073.7" y="243.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1076.7" y="254.0"></text>
</g>
<g>
<title>write (7 samples, 0.20%)</title><rect x="1073.7" y="227.0" width="2.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1076.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (27 samples, 0.79%)</title><rect x="1076.1" y="419.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1079.1" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (27 samples, 0.79%)</title><rect x="1076.1" y="403.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1079.1" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (27 samples, 0.79%)</title><rect x="1076.1" y="387.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1079.1" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (27 samples, 0.79%)</title><rect x="1076.1" y="371.0" width="9.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1079.1" y="382.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.03%)</title><rect x="1076.1" y="355.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1079.1" y="366.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (26 samples, 0.76%)</title><rect x="1076.5" y="355.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.5" y="366.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1076.5" y="339.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1079.5" y="350.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1076.5" y="323.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1079.5" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1076.5" y="307.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1079.5" y="318.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.03%)</title><rect x="1076.5" y="291.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1079.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (25 samples, 0.73%)</title><rect x="1076.8" y="339.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (25 samples, 0.73%)</title><rect x="1076.8" y="323.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.8" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (25 samples, 0.73%)</title><rect x="1076.8" y="307.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.8" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (22 samples, 0.64%)</title><rect x="1076.8" y="291.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (22 samples, 0.64%)</title><rect x="1076.8" y="275.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (4 samples, 0.12%)</title><rect x="1077.2" y="259.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (2 samples, 0.06%)</title><rect x="1077.9" y="243.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (2 samples, 0.06%)</title><rect x="1077.9" y="227.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (2 samples, 0.06%)</title><rect x="1077.9" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (2 samples, 0.06%)</title><rect x="1077.9" y="195.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.9" y="206.0"></text>
</g>
<g>
<title>write (2 samples, 0.06%)</title><rect x="1077.9" y="179.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1080.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="1078.6" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1078.9" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1078.9" y="227.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1081.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1078.9" y="211.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="1078.9" y="195.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1079.2" y="179.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1082.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (8 samples, 0.23%)</title><rect x="1079.6" y="259.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1082.6" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (6 samples, 0.18%)</title><rect x="1079.9" y="243.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1082.9" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="1082.0" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.0" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1082.0" y="227.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1085.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (6 samples, 0.18%)</title><rect x="1082.4" y="259.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (6 samples, 0.18%)</title><rect x="1082.4" y="243.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.4" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (5 samples, 0.15%)</title><rect x="1082.7" y="227.0" width="1.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1085.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1084.4" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.4" y="302.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="1084.4" y="275.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.4" y="286.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1084.4" y="259.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1087.4" y="270.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1084.4" y="243.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1087.4" y="254.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1084.4" y="227.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1087.4" y="238.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1084.4" y="211.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1087.4" y="222.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1084.4" y="195.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1087.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="1084.8" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.8" y="302.0"></text>
</g>
<g>
<title>free (1 samples, 0.03%)</title><rect x="1084.8" y="275.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1087.8" y="286.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.03%)</title><rect x="1084.8" y="259.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1087.8" y="270.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.03%)</title><rect x="1084.8" y="243.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1087.8" y="254.0"></text>
</g>
<g>
<title>szone_free_definite_size (1 samples, 0.03%)</title><rect x="1085.1" y="291.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1088.1" y="302.0"></text>
</g>
<g>
<title>[async_worker_7 tid=53507] (185 samples, 5.41%)</title><rect x="1085.5" y="515.0" width="63.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1088.5" y="526.0">[async_..</text>
</g>
<g>
<title>java/lang/Thread.run (185 samples, 5.41%)</title><rect x="1085.5" y="499.0" width="63.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.5" y="510.0">java/la..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (185 samples, 5.41%)</title><rect x="1085.5" y="483.0" width="63.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1088.5" y="494.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (185 samples, 5.41%)</title><rect x="1085.5" y="467.0" width="63.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.5" y="478.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (37 samples, 1.08%)</title><rect x="1085.5" y="451.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1088.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (37 samples, 1.08%)</title><rect x="1085.5" y="435.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1088.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (26 samples, 0.76%)</title><rect x="1085.8" y="419.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1088.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (26 samples, 0.76%)</title><rect x="1085.8" y="403.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1088.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (26 samples, 0.76%)</title><rect x="1085.8" y="387.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1088.8" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (26 samples, 0.76%)</title><rect x="1085.8" y="371.0" width="9.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1088.8" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 0.73%)</title><rect x="1085.8" y="355.0" width="8.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.8" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (23 samples, 0.67%)</title><rect x="1085.8" y="339.0" width="7.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1088.8" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (2 samples, 0.06%)</title><rect x="1093.7" y="339.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1096.7" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="1094.4" y="355.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1097.4" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.29%)</title><rect x="1094.8" y="419.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.29%)</title><rect x="1094.8" y="403.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1097.8" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.29%)</title><rect x="1094.8" y="387.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1097.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.29%)</title><rect x="1094.8" y="371.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1097.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (1 samples, 0.03%)</title><rect x="1094.8" y="355.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1097.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (9 samples, 0.26%)</title><rect x="1095.1" y="355.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1098.1" y="366.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="1095.1" y="339.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.1" y="350.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (8 samples, 0.23%)</title><rect x="1095.5" y="339.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1098.5" y="350.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.03%)</title><rect x="1095.5" y="323.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.5" y="334.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1095.5" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.5" y="318.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1095.5" y="291.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.5" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1095.5" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.5" y="286.0"></text>
</g>
<g>
<title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples, 0.03%)</title><rect x="1095.5" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.5" y="270.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (1 samples, 0.03%)</title><rect x="1095.8" y="323.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.8" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.03%)</title><rect x="1095.8" y="307.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.8" y="318.0"></text>
</g>
<g>
<title>__psynch_cvsignal (5 samples, 0.15%)</title><rect x="1096.2" y="323.0" width="1.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1099.2" y="334.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="1097.9" y="323.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1100.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$74/43533326.run (80 samples, 2.34%)</title><rect x="1098.2" y="451.0" width="27.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1101.2" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$entity$1 (80 samples, 2.34%)</title><rect x="1098.2" y="435.0" width="27.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1101.2" y="446.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.forwardRequest (80 samples, 2.34%)</title><rect x="1098.2" y="419.0" width="27.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1101.2" y="430.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (14 samples, 0.41%)</title><rect x="1098.2" y="403.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1101.2" y="414.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="1098.2" y="387.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1101.2" y="398.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1098.2" y="371.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1101.2" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1098.2" y="355.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1101.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13 samples, 0.38%)</title><rect x="1098.6" y="387.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1101.6" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="1098.6" y="371.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1101.6" y="382.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1098.9" y="355.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1101.9" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.32%)</title><rect x="1099.3" y="371.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1102.3" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 0.32%)</title><rect x="1099.3" y="355.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1102.3" y="366.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 0.32%)</title><rect x="1099.3" y="339.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1102.3" y="350.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (11 samples, 0.32%)</title><rect x="1099.3" y="323.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1102.3" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (11 samples, 0.32%)</title><rect x="1099.3" y="307.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1102.3" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="1099.3" y="291.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1102.3" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (11 samples, 0.32%)</title><rect x="1099.3" y="275.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1102.3" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (11 samples, 0.32%)</title><rect x="1099.3" y="259.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1102.3" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (11 samples, 0.32%)</title><rect x="1099.3" y="243.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1102.3" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (11 samples, 0.32%)</title><rect x="1099.3" y="227.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1102.3" y="238.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="1099.3" y="211.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1102.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.proxy (66 samples, 1.93%)</title><rect x="1103.1" y="403.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1106.1" y="414.0">r..</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="1103.1" y="387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.03%)</title><rect x="1103.1" y="371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1106.1" y="382.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="1103.1" y="355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="1103.1" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1106.1" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1 samples, 0.03%)</title><rect x="1103.1" y="323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1106.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (65 samples, 1.90%)</title><rect x="1103.4" y="387.0" width="22.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1106.4" y="398.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (65 samples, 1.90%)</title><rect x="1103.4" y="371.0" width="22.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1106.4" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (37 samples, 1.08%)</title><rect x="1103.7" y="355.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1106.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (37 samples, 1.08%)</title><rect x="1103.7" y="339.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1106.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (37 samples, 1.08%)</title><rect x="1103.7" y="323.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1106.7" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.03%)</title><rect x="1103.7" y="307.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1106.7" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="1103.7" y="291.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1106.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.03%)</title><rect x="1103.7" y="275.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1106.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.03%)</title><rect x="1103.7" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1106.7" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="1103.7" y="243.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1106.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="1103.7" y="227.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1106.7" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="1103.7" y="211.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1106.7" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="1104.1" y="307.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1107.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (36 samples, 1.05%)</title><rect x="1104.1" y="291.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1107.1" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="1104.1" y="275.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1107.1" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.03%)</title><rect x="1104.1" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.1" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (35 samples, 1.02%)</title><rect x="1104.4" y="275.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1107.4" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (35 samples, 1.02%)</title><rect x="1104.4" y="259.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.4" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (35 samples, 1.02%)</title><rect x="1104.4" y="243.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1107.4" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.03%)</title><rect x="1105.5" y="227.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1108.5" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1105.5" y="211.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1108.5" y="222.0"></text>
</g>
<g>
<title>rpc_errlist (31 samples, 0.91%)</title><rect x="1105.8" y="227.0" width="10.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1108.8" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1 samples, 0.03%)</title><rect x="1116.5" y="355.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1119.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="1116.5" y="339.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1119.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="1116.5" y="323.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.5" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.03%)</title><rect x="1116.5" y="307.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1119.5" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1116.5" y="291.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1119.5" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2 samples, 0.06%)</title><rect x="1116.9" y="355.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1119.9" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="1116.9" y="339.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1119.9" y="350.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="1117.2" y="323.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1120.2" y="334.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (21 samples, 0.61%)</title><rect x="1117.5" y="355.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1120.5" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (10 samples, 0.29%)</title><rect x="1117.5" y="339.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1120.5" y="350.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (10 samples, 0.29%)</title><rect x="1117.5" y="323.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.5" y="334.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (10 samples, 0.29%)</title><rect x="1117.5" y="307.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (10 samples, 0.29%)</title><rect x="1117.5" y="291.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.29%)</title><rect x="1117.5" y="275.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.5" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (10 samples, 0.29%)</title><rect x="1117.5" y="259.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1120.5" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (10 samples, 0.29%)</title><rect x="1117.5" y="243.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.5" y="254.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (10 samples, 0.29%)</title><rect x="1117.5" y="227.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1120.5" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (10 samples, 0.29%)</title><rect x="1117.5" y="211.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.5" y="222.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.03%)</title><rect x="1117.5" y="195.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1120.5" y="206.0"></text>
</g>
<g>
<title>write (9 samples, 0.26%)</title><rect x="1117.9" y="195.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1120.9" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (11 samples, 0.32%)</title><rect x="1121.0" y="339.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1124.0" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (11 samples, 0.32%)</title><rect x="1121.0" y="323.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1124.0" y="334.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="1121.0" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1124.0" y="318.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (8 samples, 0.23%)</title><rect x="1121.3" y="307.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1124.3" y="318.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.03%)</title><rect x="1121.7" y="291.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.7" y="302.0"></text>
</g>
<g>
<title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1122.0" y="291.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.0" y="302.0"></text>
</g>
<g>
<title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (1 samples, 0.03%)</title><rect x="1122.0" y="275.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.0" y="286.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.03%)</title><rect x="1122.4" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.4" y="302.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.03%)</title><rect x="1122.4" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.4" y="286.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.03%)</title><rect x="1122.7" y="291.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="302.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.03%)</title><rect x="1122.7" y="275.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.7" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.03%)</title><rect x="1122.7" y="259.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.7" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1122.7" y="243.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.7" y="254.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1122.7" y="227.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="238.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (1 samples, 0.03%)</title><rect x="1122.7" y="211.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.7" y="222.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.03%)</title><rect x="1122.7" y="195.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.7" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.03%)</title><rect x="1123.1" y="291.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.1" y="302.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="1123.1" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="286.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.06%)</title><rect x="1123.4" y="291.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.4" y="302.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.06%)</title><rect x="1123.4" y="275.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.4" y="286.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.03%)</title><rect x="1123.8" y="259.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.8" y="270.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.03%)</title><rect x="1124.1" y="307.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.1" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="1124.4" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.03%)</title><rect x="1124.4" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1127.4" y="302.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (1 samples, 0.03%)</title><rect x="1124.4" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1127.4" y="286.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (1 samples, 0.03%)</title><rect x="1124.8" y="355.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.8" y="366.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.03%)</title><rect x="1124.8" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1127.8" y="350.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.06%)</title><rect x="1125.1" y="355.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1128.1" y="366.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="1125.1" y="339.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.1" y="350.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="1125.1" y="323.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.1" y="334.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="1125.1" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.1" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.03%)</title><rect x="1125.5" y="339.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1128.5" y="350.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.03%)</title><rect x="1125.5" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1128.5" y="334.0"></text>
</g>
<g>
<title>java/util/LinkedList$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1125.5" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1128.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (68 samples, 1.99%)</title><rect x="1125.8" y="451.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.8" y="462.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (68 samples, 1.99%)</title><rect x="1125.8" y="435.0" width="23.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.8" y="446.0">r..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.12%)</title><rect x="1125.8" y="419.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1128.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (4 samples, 0.12%)</title><rect x="1125.8" y="403.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1128.8" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1125.8" y="387.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1128.8" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.09%)</title><rect x="1126.2" y="387.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (3 samples, 0.09%)</title><rect x="1126.2" y="371.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (3 samples, 0.09%)</title><rect x="1126.2" y="355.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1129.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (3 samples, 0.09%)</title><rect x="1126.2" y="339.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1129.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (3 samples, 0.09%)</title><rect x="1126.2" y="323.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1129.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.09%)</title><rect x="1126.2" y="307.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1129.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.09%)</title><rect x="1126.2" y="291.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (3 samples, 0.09%)</title><rect x="1126.2" y="275.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (3 samples, 0.09%)</title><rect x="1126.2" y="259.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (3 samples, 0.09%)</title><rect x="1126.2" y="243.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.2" y="254.0"></text>
</g>
<g>
<title>write (3 samples, 0.09%)</title><rect x="1126.2" y="227.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1129.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (64 samples, 1.87%)</title><rect x="1127.2" y="419.0" width="22.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1130.2" y="430.0">r..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="1127.2" y="403.0" width="21.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1130.2" y="414.0">o..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (63 samples, 1.84%)</title><rect x="1127.2" y="387.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1130.2" y="398.0">o..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (63 samples, 1.84%)</title><rect x="1127.2" y="371.0" width="21.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1130.2" y="382.0">J..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (63 samples, 1.84%)</title><rect x="1127.2" y="355.0" width="21.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="366.0">r..</text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1127.2" y="339.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1130.2" y="350.0"></text>
</g>
<g>
<title>tiny_free_no_lock (1 samples, 0.03%)</title><rect x="1127.2" y="323.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1130.2" y="334.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1127.2" y="307.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1130.2" y="318.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="1127.5" y="339.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1130.5" y="350.0"></text>
</g>
<g>
<title>EnableIf&lt;!(AccessInternal::MustConvertCompressedOop&lt;1097844ull, oopDesc*&gt;::value), oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::decode_internal&lt;1097844ull, oopDesc*&gt;(oopDesc*) (1 samples, 0.03%)</title><rect x="1127.5" y="323.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="334.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1127.9" y="339.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1130.9" y="350.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1127.9" y="323.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1130.9" y="334.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1127.9" y="307.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1130.9" y="318.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1127.9" y="291.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1130.9" y="302.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1127.9" y="275.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1130.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (60 samples, 1.75%)</title><rect x="1128.2" y="339.0" width="20.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.2" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (60 samples, 1.75%)</title><rect x="1128.2" y="323.0" width="20.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (60 samples, 1.75%)</title><rect x="1128.2" y="307.0" width="20.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (60 samples, 1.75%)</title><rect x="1128.2" y="291.0" width="20.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (59 samples, 1.73%)</title><rect x="1128.2" y="275.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (14 samples, 0.41%)</title><rect x="1128.2" y="259.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (12 samples, 0.35%)</title><rect x="1128.2" y="243.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.2" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (12 samples, 0.35%)</title><rect x="1128.2" y="227.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (12 samples, 0.35%)</title><rect x="1128.2" y="211.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.2" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (11 samples, 0.32%)</title><rect x="1128.6" y="195.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.6" y="206.0"></text>
</g>
<g>
<title>write (11 samples, 0.32%)</title><rect x="1128.6" y="179.0" width="3.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1131.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="1132.4" y="243.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.4" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="1132.7" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (4 samples, 0.12%)</title><rect x="1133.1" y="259.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1133.1" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.1" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1133.1" y="227.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1133.1" y="211.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="1133.1" y="195.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="206.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1133.1" y="179.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (3 samples, 0.09%)</title><rect x="1133.4" y="179.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="1134.5" y="259.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1134.5" y="243.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1134.5" y="227.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1134.5" y="211.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="1134.5" y="195.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.5" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1134.5" y="179.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1137.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1134.5" y="163.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (24 samples, 0.70%)</title><rect x="1135.1" y="259.0" width="8.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.1" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (13 samples, 0.38%)</title><rect x="1136.2" y="243.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1139.2" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (7 samples, 0.20%)</title><rect x="1140.7" y="243.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.7" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="1140.7" y="227.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1143.7" y="238.0"></text>
</g>
<g>
<title>std::__1::mutex::lock() (1 samples, 0.03%)</title><rect x="1143.1" y="243.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="254.0"></text>
</g>
<g>
<title>_pthread_mutex_lock_init_slow (1 samples, 0.03%)</title><rect x="1143.1" y="227.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1146.1" y="238.0"></text>
</g>
<g>
<title>_pthread_mutex_check_init_slow (1 samples, 0.03%)</title><rect x="1143.1" y="211.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1146.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (14 samples, 0.41%)</title><rect x="1143.4" y="259.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (14 samples, 0.41%)</title><rect x="1143.4" y="243.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.4" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (14 samples, 0.41%)</title><rect x="1143.4" y="227.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1146.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1148.3" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.3" y="270.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="1148.3" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.3" y="254.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.03%)</title><rect x="1148.3" y="227.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1151.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="1148.6" y="275.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (1 samples, 0.03%)</title><rect x="1148.9" y="403.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1151.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="1148.9" y="387.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1151.9" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1148.9" y="371.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.9" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1148.9" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1151.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1148.9" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1151.9" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1148.9" y="323.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1151.9" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="1148.9" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1151.9" y="318.0"></text>
</g>
<g>
<title>[async_worker_7 tid=58627] (55 samples, 1.61%)</title><rect x="1149.3" y="515.0" width="19.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1152.3" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.run (55 samples, 1.61%)</title><rect x="1149.3" y="499.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1152.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (55 samples, 1.61%)</title><rect x="1149.3" y="483.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1152.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (55 samples, 1.61%)</title><rect x="1149.3" y="467.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1152.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 0.26%)</title><rect x="1149.3" y="451.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1152.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (9 samples, 0.26%)</title><rect x="1149.3" y="435.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1152.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (8 samples, 0.23%)</title><rect x="1149.3" y="419.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1152.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.23%)</title><rect x="1149.3" y="403.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1152.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 0.23%)</title><rect x="1149.3" y="387.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1152.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.20%)</title><rect x="1149.6" y="371.0" width="2.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1152.6" y="382.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.20%)</title><rect x="1149.6" y="355.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.6" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (7 samples, 0.20%)</title><rect x="1149.6" y="339.0" width="2.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1152.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="1152.0" y="419.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1155.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="1152.0" y="403.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1155.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="1152.0" y="387.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1155.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="1152.0" y="371.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1155.0" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="1152.0" y="355.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.0" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="1152.0" y="339.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1155.0" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.03%)</title><rect x="1152.0" y="323.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1155.0" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.03%)</title><rect x="1152.0" y="307.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.0" y="318.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1152.0" y="291.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1155.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (46 samples, 1.35%)</title><rect x="1152.4" y="451.0" width="15.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1155.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (46 samples, 1.35%)</title><rect x="1152.4" y="435.0" width="15.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1155.4" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (8 samples, 0.23%)</title><rect x="1152.4" y="419.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1155.4" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (8 samples, 0.23%)</title><rect x="1152.4" y="403.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1155.4" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.03%)</title><rect x="1152.4" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1155.4" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1152.4" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1155.4" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1152.7" y="387.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.7" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (7 samples, 0.20%)</title><rect x="1152.7" y="371.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1155.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (7 samples, 0.20%)</title><rect x="1152.7" y="355.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1155.7" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (7 samples, 0.20%)</title><rect x="1152.7" y="339.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1155.7" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (7 samples, 0.20%)</title><rect x="1152.7" y="323.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1155.7" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1152.7" y="307.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1155.7" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (7 samples, 0.20%)</title><rect x="1152.7" y="291.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1155.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (7 samples, 0.20%)</title><rect x="1152.7" y="275.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1155.7" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (7 samples, 0.20%)</title><rect x="1152.7" y="259.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1155.7" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (7 samples, 0.20%)</title><rect x="1152.7" y="243.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1155.7" y="254.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (1 samples, 0.03%)</title><rect x="1152.7" y="227.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1155.7" y="238.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.03%)</title><rect x="1152.7" y="211.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1155.7" y="222.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="1153.1" y="227.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1156.1" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1155.2" y="419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1158.2" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1155.2" y="403.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.2" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1155.2" y="387.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.2" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1155.2" y="371.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.2" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1155.2" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.2" y="366.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="1155.2" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.2" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (37 samples, 1.08%)</title><rect x="1155.5" y="419.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1158.5" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (37 samples, 1.08%)</title><rect x="1155.5" y="403.0" width="12.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1158.5" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (37 samples, 1.08%)</title><rect x="1155.5" y="387.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1158.5" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (37 samples, 1.08%)</title><rect x="1155.5" y="371.0" width="12.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1158.5" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (37 samples, 1.08%)</title><rect x="1155.5" y="355.0" width="12.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.5" y="366.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="1155.5" y="339.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1158.5" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.03%)</title><rect x="1155.5" y="323.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1158.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (36 samples, 1.05%)</title><rect x="1155.8" y="339.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (35 samples, 1.02%)</title><rect x="1156.2" y="323.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.2" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (35 samples, 1.02%)</title><rect x="1156.2" y="307.0" width="12.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (33 samples, 0.96%)</title><rect x="1156.2" y="291.0" width="11.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (33 samples, 0.96%)</title><rect x="1156.2" y="275.0" width="11.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1159.2" y="286.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.03%)</title><rect x="1156.2" y="259.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1159.2" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (8 samples, 0.23%)</title><rect x="1156.5" y="259.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (8 samples, 0.23%)</title><rect x="1156.5" y="243.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (8 samples, 0.23%)</title><rect x="1156.5" y="227.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (6 samples, 0.18%)</title><rect x="1156.9" y="211.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (6 samples, 0.18%)</title><rect x="1156.9" y="195.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.9" y="206.0"></text>
</g>
<g>
<title>write (6 samples, 0.18%)</title><rect x="1156.9" y="179.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1159.9" y="190.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.03%)</title><rect x="1158.9" y="211.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (5 samples, 0.15%)</title><rect x="1159.3" y="259.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::Continue() (1 samples, 0.03%)</title><rect x="1159.3" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1159.6" y="243.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1159.6" y="227.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.12%)</title><rect x="1159.6" y="211.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.12%)</title><rect x="1159.6" y="195.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (4 samples, 0.12%)</title><rect x="1159.6" y="179.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="1160.7" y="163.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (2 samples, 0.06%)</title><rect x="1161.0" y="259.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1161.0" y="243.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1161.0" y="227.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.0" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1161.0" y="211.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.0" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.03%)</title><rect x="1161.0" y="195.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1164.0" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="1161.0" y="179.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1164.0" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (1 samples, 0.03%)</title><rect x="1161.0" y="163.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1164.0" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="1161.0" y="147.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1164.0" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="1161.0" y="131.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1164.0" y="142.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="1161.0" y="115.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1164.0" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (1 samples, 0.03%)</title><rect x="1161.4" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.4" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1161.4" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.03%)</title><rect x="1161.4" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.03%)</title><rect x="1161.4" y="147.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.03%)</title><rect x="1161.4" y="131.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="142.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.03%)</title><rect x="1161.4" y="115.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1164.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (12 samples, 0.35%)</title><rect x="1161.7" y="259.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.7" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (8 samples, 0.23%)</title><rect x="1162.7" y="243.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1165.7" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="1165.5" y="243.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.5" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1165.5" y="227.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1168.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 0.15%)</title><rect x="1165.8" y="259.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (5 samples, 0.15%)</title><rect x="1165.8" y="243.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (5 samples, 0.15%)</title><rect x="1165.8" y="227.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1168.8" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="1167.6" y="291.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="302.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.03%)</title><rect x="1167.6" y="275.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1170.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="1167.9" y="291.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.9" y="302.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1167.9" y="275.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1170.9" y="286.0"></text>
</g>
<g>
<title>[async_worker_7 tid=59139] (63 samples, 1.84%)</title><rect x="1168.3" y="515.0" width="21.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1171.3" y="526.0">[..</text>
</g>
<g>
<title>java/lang/Thread.run (63 samples, 1.84%)</title><rect x="1168.3" y="499.0" width="21.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1171.3" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (63 samples, 1.84%)</title><rect x="1168.3" y="483.0" width="21.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1171.3" y="494.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (63 samples, 1.84%)</title><rect x="1168.3" y="467.0" width="21.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1171.3" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (19 samples, 0.56%)</title><rect x="1168.3" y="451.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (19 samples, 0.56%)</title><rect x="1168.3" y="435.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (19 samples, 0.56%)</title><rect x="1168.3" y="419.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1171.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (19 samples, 0.56%)</title><rect x="1168.3" y="403.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1171.3" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (19 samples, 0.56%)</title><rect x="1168.3" y="387.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1171.3" y="398.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (19 samples, 0.56%)</title><rect x="1168.3" y="371.0" width="6.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1171.3" y="382.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.06%)</title><rect x="1168.3" y="355.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.3" y="366.0"></text>
</g>
<g>
<title>JavaThread::is_terminated() const (1 samples, 0.03%)</title><rect x="1168.3" y="339.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="350.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1168.3" y="323.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.3" y="334.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int const volatile*) const (1 samples, 0.03%)</title><rect x="1168.3" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.3" y="318.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.03%)</title><rect x="1168.3" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.3" y="302.0"></text>
</g>
<g>
<title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (1 samples, 0.03%)</title><rect x="1168.6" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="350.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::is_alive() (1 samples, 0.03%)</title><rect x="1169.0" y="355.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.0" y="366.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 0.47%)</title><rect x="1169.3" y="355.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.3" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (15 samples, 0.44%)</title><rect x="1169.3" y="339.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1172.3" y="350.0"></text>
</g>
<g>
<title>_pthread_cond_wait (1 samples, 0.03%)</title><rect x="1174.5" y="339.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1177.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl$$Lambda$79/1372769833.run (44 samples, 1.29%)</title><rect x="1174.8" y="451.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1177.8" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ServiceAsyncImpl.lambda$put$3 (44 samples, 1.29%)</title><rect x="1174.8" y="435.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1177.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13 samples, 0.38%)</title><rect x="1174.8" y="419.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1177.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (12 samples, 0.35%)</title><rect x="1175.2" y="403.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1178.2" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.35%)</title><rect x="1175.2" y="387.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1178.2" y="398.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (12 samples, 0.35%)</title><rect x="1175.2" y="371.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1178.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (12 samples, 0.35%)</title><rect x="1175.2" y="355.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1178.2" y="366.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (12 samples, 0.35%)</title><rect x="1175.2" y="339.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1178.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (12 samples, 0.35%)</title><rect x="1175.2" y="323.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1178.2" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.35%)</title><rect x="1175.2" y="307.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1178.2" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (12 samples, 0.35%)</title><rect x="1175.2" y="291.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1178.2" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (12 samples, 0.35%)</title><rect x="1175.2" y="275.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1178.2" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (12 samples, 0.35%)</title><rect x="1175.2" y="259.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1178.2" y="270.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (9 samples, 0.26%)</title><rect x="1176.2" y="243.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1179.2" y="254.0"></text>
</g>
<g>
<title>write (9 samples, 0.26%)</title><rect x="1176.2" y="227.0" width="3.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1179.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsert (31 samples, 0.91%)</title><rect x="1179.3" y="419.0" width="10.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1182.3" y="430.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (31 samples, 0.91%)</title><rect x="1179.3" y="403.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1182.3" y="414.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (31 samples, 0.91%)</title><rect x="1179.3" y="387.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1182.3" y="398.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (31 samples, 0.91%)</title><rect x="1179.3" y="371.0" width="10.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1182.3" y="382.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (31 samples, 0.91%)</title><rect x="1179.3" y="355.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.3" y="366.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.03%)</title><rect x="1179.3" y="339.0" width="0.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1182.3" y="350.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="1179.3" y="323.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1182.3" y="334.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (30 samples, 0.88%)</title><rect x="1179.6" y="339.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 0.88%)</title><rect x="1179.6" y="323.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 0.88%)</title><rect x="1179.6" y="307.0" width="10.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (30 samples, 0.88%)</title><rect x="1179.6" y="291.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="302.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (29 samples, 0.85%)</title><rect x="1179.6" y="275.0" width="10.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (5 samples, 0.15%)</title><rect x="1179.6" y="259.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (5 samples, 0.15%)</title><rect x="1179.6" y="243.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.6" y="254.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 0.15%)</title><rect x="1179.6" y="227.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (5 samples, 0.15%)</title><rect x="1179.6" y="211.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (5 samples, 0.15%)</title><rect x="1179.6" y="195.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="206.0"></text>
</g>
<g>
<title>write (5 samples, 0.15%)</title><rect x="1179.6" y="179.0" width="1.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1182.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="1181.4" y="259.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1181.7" y="243.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1181.7" y="227.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="1181.7" y="211.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="1181.7" y="195.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="1181.7" y="179.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (15 samples, 0.44%)</title><rect x="1182.4" y="259.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.4" y="270.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (12 samples, 0.35%)</title><rect x="1183.1" y="243.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="1187.2" y="243.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="254.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.03%)</title><rect x="1187.2" y="227.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1190.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (5 samples, 0.15%)</title><rect x="1187.6" y="259.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (5 samples, 0.15%)</title><rect x="1187.6" y="243.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.6" y="254.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (5 samples, 0.15%)</title><rect x="1187.6" y="227.0" width="1.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1190.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="1189.3" y="259.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.03%)</title><rect x="1189.7" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.7" y="286.0"></text>
</g>
</g>
</svg>
