<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (2,515 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.04%)</title><rect x="10.0" y="643.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.04%)</title><rect x="10.0" y="627.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.04%)</title><rect x="10.5" y="643.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="638.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.04%)</title><rect x="10.5" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.5" y="622.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,511 samples, 99.84%)</title><rect x="10.9" y="643.0" width="1178.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (4 samples, 0.16%)</title><rect x="12.8" y="627.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.8" y="638.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector$1.next (4 samples, 0.16%)</title><rect x="12.8" y="611.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="15.8" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (503 samples, 20.00%)</title><rect x="14.7" y="627.0" width="236.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="17.7" y="638.0">one/nio/net/JavaSelector.select</text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="16.1" y="611.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="19.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (2 samples, 0.08%)</title><rect x="16.6" y="611.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.6" y="622.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (2 samples, 0.08%)</title><rect x="17.5" y="611.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (2 samples, 0.08%)</title><rect x="17.5" y="595.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.5" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.16%)</title><rect x="18.4" y="611.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.4" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (491 samples, 19.52%)</title><rect x="20.3" y="611.0" width="230.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.3" y="622.0">sun/nio/ch/SelectorImpl.select</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (491 samples, 19.52%)</title><rect x="20.3" y="595.0" width="230.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="23.3" y="606.0">sun/nio/ch/SelectorImpl.lockAn..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (490 samples, 19.48%)</title><rect x="20.8" y="579.0" width="229.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.8" y="590.0">sun/nio/ch/KQueueSelectorImpl...</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (452 samples, 17.97%)</title><rect x="22.2" y="563.0" width="212.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.2" y="574.0">sun/nio/ch/KQueue.poll</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (5 samples, 0.20%)</title><rect x="36.7" y="547.0" width="2.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="39.7" y="558.0"></text>
</g>
<g>
<title>kevent (416 samples, 16.54%)</title><rect x="39.1" y="547.0" width="195.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="42.1" y="558.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (14 samples, 0.56%)</title><rect x="234.3" y="563.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="237.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.04%)</title><rect x="234.3" y="547.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="234.3" y="531.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.3" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="234.3" y="515.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="237.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="234.3" y="499.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="237.3" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="234.3" y="483.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="237.3" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="234.3" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="237.3" y="478.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.04%)</title><rect x="234.3" y="451.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.3" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.36%)</title><rect x="234.7" y="547.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.36%)</title><rect x="234.7" y="531.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.7" y="542.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (9 samples, 0.36%)</title><rect x="234.7" y="515.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.04%)</title><rect x="238.5" y="499.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.5" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (4 samples, 0.16%)</title><rect x="239.0" y="547.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="242.0" y="558.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.08%)</title><rect x="239.4" y="531.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.08%)</title><rect x="239.4" y="515.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.08%)</title><rect x="239.4" y="499.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.04%)</title><rect x="240.4" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.04%)</title><rect x="240.4" y="515.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.4" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="240.4" y="499.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 0.12%)</title><rect x="240.8" y="563.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.8" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (11 samples, 0.44%)</title><rect x="242.2" y="563.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.2" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (11 samples, 0.44%)</title><rect x="242.2" y="547.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="245.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (4 samples, 0.16%)</title><rect x="242.2" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.2" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.28%)</title><rect x="244.1" y="531.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.1" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (7 samples, 0.28%)</title><rect x="244.1" y="515.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="247.1" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (7 samples, 0.28%)</title><rect x="244.1" y="499.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (3 samples, 0.12%)</title><rect x="247.4" y="563.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.4" y="574.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (3 samples, 0.12%)</title><rect x="247.4" y="547.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="250.4" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.12%)</title><rect x="247.4" y="531.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.4" y="542.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.12%)</title><rect x="247.4" y="515.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.4" y="526.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (3 samples, 0.12%)</title><rect x="247.4" y="499.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (4 samples, 0.16%)</title><rect x="248.8" y="563.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (2 samples, 0.08%)</title><rect x="249.8" y="547.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (2 samples, 0.08%)</title><rect x="249.8" y="531.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (2 samples, 0.08%)</title><rect x="249.8" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.8" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.08%)</title><rect x="249.8" y="499.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.8" y="510.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,996 samples, 79.36%)</title><rect x="250.7" y="627.0" width="936.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.7" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,996 samples, 79.36%)</title><rect x="250.7" y="611.0" width="936.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.7" y="622.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,888 samples, 75.07%)</title><rect x="251.6" y="595.0" width="885.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.6" y="606.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,860 samples, 73.96%)</title><rect x="255.9" y="579.0" width="872.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.9" y="590.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2 samples, 0.08%)</title><rect x="257.3" y="563.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.3" y="574.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.12%)</title><rect x="258.2" y="563.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="261.2" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,852 samples, 73.64%)</title><rect x="259.6" y="563.0" width="868.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.6" y="574.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (1,842 samples, 73.24%)</title><rect x="260.1" y="547.0" width="864.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.1" y="558.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.08%)</title><rect x="260.1" y="531.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="263.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="260.1" y="515.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="260.1" y="499.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.1" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (7 samples, 0.28%)</title><rect x="261.0" y="531.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.0" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.28%)</title><rect x="261.0" y="515.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.0" y="526.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.04%)</title><rect x="262.4" y="499.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.4" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.04%)</title><rect x="262.4" y="483.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="265.4" y="494.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="262.4" y="467.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="265.4" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="262.9" y="499.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="265.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.08%)</title><rect x="263.4" y="499.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="263.4" y="483.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.4" y="494.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="263.4" y="467.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.4" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="263.4" y="451.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.entity (1,833 samples, 72.88%)</title><rect x="264.3" y="531.0" width="860.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.3" y="542.0">ru/mail/polis/service/ReplicationServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.12%)</title><rect x="264.3" y="515.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="267.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.08%)</title><rect x="264.3" y="499.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.3" y="510.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="264.3" y="483.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.04%)</title><rect x="265.2" y="499.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.04%)</title><rect x="265.2" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.2" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.04%)</title><rect x="265.2" y="467.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.2" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="265.2" y="451.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="268.2" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.08%)</title><rect x="265.7" y="515.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="265.7" y="499.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="265.7" y="483.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.7" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationFactor.getReplicationFactor (1 samples, 0.04%)</title><rect x="266.6" y="515.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.handleMultipleCase (1,826 samples, 72.60%)</title><rect x="267.1" y="515.0" width="856.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="270.1" y="526.0">ru/mail/polis/service/ReplicationServiceImpl.handleMultipleCase</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (340 samples, 13.52%)</title><rect x="268.5" y="499.0" width="159.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="271.5" y="510.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.08%)</title><rect x="269.5" y="483.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.5" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.08%)</title><rect x="269.5" y="467.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.5" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.08%)</title><rect x="269.5" y="451.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="269.9" y="435.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="272.9" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (330 samples, 13.12%)</title><rect x="270.4" y="483.0" width="154.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.4" y="494.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.64%)</title><rect x="270.4" y="467.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.4" y="478.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.04%)</title><rect x="274.6" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="274.6" y="435.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="277.6" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="274.6" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="277.6" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="274.6" y="403.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="277.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="274.6" y="387.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="277.6" y="398.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.24%)</title><rect x="275.1" y="451.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.1" y="462.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.24%)</title><rect x="275.1" y="435.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.1" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.24%)</title><rect x="275.1" y="419.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.24%)</title><rect x="275.1" y="403.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.1" y="414.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.24%)</title><rect x="275.1" y="387.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.1" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="276.5" y="371.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="279.5" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (314 samples, 12.49%)</title><rect x="277.9" y="467.0" width="147.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.9" y="478.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session.write (314 samples, 12.49%)</title><rect x="277.9" y="451.0" width="147.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="280.9" y="462.0">one/nio/net/Session..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (313 samples, 12.45%)</title><rect x="277.9" y="435.0" width="146.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="280.9" y="446.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (313 samples, 12.45%)</title><rect x="277.9" y="419.0" width="146.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.9" y="430.0">one/nio/net/JavaSo..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.52%)</title><rect x="277.9" y="403.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.9" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.52%)</title><rect x="277.9" y="387.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.52%)</title><rect x="277.9" y="371.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.9" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.52%)</title><rect x="277.9" y="355.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.9" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.52%)</title><rect x="277.9" y="339.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.9" y="350.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="278.8" y="323.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="281.8" y="334.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.08%)</title><rect x="279.3" y="323.0" width="1.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="282.3" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.32%)</title><rect x="280.3" y="323.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="283.3" y="334.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (3 samples, 0.12%)</title><rect x="280.3" y="307.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="283.3" y="318.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.20%)</title><rect x="281.7" y="307.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="284.7" y="318.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (5 samples, 0.20%)</title><rect x="281.7" y="291.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="284.7" y="302.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.04%)</title><rect x="282.1" y="275.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.1" y="286.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (3 samples, 0.12%)</title><rect x="282.6" y="275.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="285.6" y="286.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (300 samples, 11.93%)</title><rect x="284.0" y="403.0" width="140.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.0" y="414.0">sun/nio/ch/SocketC..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.08%)</title><rect x="286.3" y="387.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.08%)</title><rect x="286.3" y="371.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.08%)</title><rect x="286.3" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.08%)</title><rect x="286.3" y="339.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="289.3" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (291 samples, 11.57%)</title><rect x="287.3" y="387.0" width="136.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="398.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (290 samples, 11.53%)</title><rect x="287.8" y="371.0" width="136.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.8" y="382.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (290 samples, 11.53%)</title><rect x="287.8" y="355.0" width="136.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.8" y="366.0">sun/nio/ch/IOUtil..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (290 samples, 11.53%)</title><rect x="287.8" y="339.0" width="136.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.8" y="350.0">sun/nio/ch/Socket..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (285 samples, 11.33%)</title><rect x="290.1" y="323.0" width="133.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.1" y="334.0">sun/nio/ch/FileDi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.08%)</title><rect x="293.4" y="307.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="296.4" y="318.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.04%)</title><rect x="294.3" y="307.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="297.3" y="318.0"></text>
</g>
<g>
<title>write (275 samples, 10.93%)</title><rect x="294.8" y="307.0" width="129.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="297.8" y="318.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.04%)</title><rect x="423.8" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.8" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.04%)</title><rect x="423.8" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.8" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="423.8" y="355.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.8" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.04%)</title><rect x="424.3" y="387.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.3" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="424.3" y="371.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="427.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.04%)</title><rect x="424.8" y="435.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.24%)</title><rect x="425.2" y="483.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="428.2" y="494.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.20%)</title><rect x="425.7" y="467.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="428.7" y="478.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.20%)</title><rect x="425.7" y="451.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.7" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleGet (1,483 samples, 58.97%)</title><rect x="428.0" y="499.0" width="695.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.0" y="510.0">ru/mail/polis/service/ReplicationHandler.multipleGet</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="429.0" y="483.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="432.0" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="429.0" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="432.0" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.12%)</title><rect x="429.5" y="483.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.5" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.12%)</title><rect x="429.5" y="467.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.5" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="429.5" y="451.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.5" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="429.5" y="435.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="432.5" y="446.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="429.5" y="419.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="432.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="429.5" y="403.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="432.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="429.9" y="403.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.9" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="429.9" y="387.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="432.9" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.08%)</title><rect x="429.9" y="371.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="432.9" y="382.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="430.4" y="355.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="433.4" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (908 samples, 36.10%)</title><rect x="430.9" y="483.0" width="426.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.9" y="494.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (4 samples, 0.16%)</title><rect x="430.9" y="467.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.9" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (904 samples, 35.94%)</title><rect x="432.7" y="467.0" width="424.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="435.7" y="478.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (904 samples, 35.94%)</title><rect x="432.7" y="451.0" width="424.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.7" y="462.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (453 samples, 18.01%)</title><rect x="433.2" y="435.0" width="212.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.2" y="446.0">one/nio/http/HttpClient$Resp..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.16%)</title><rect x="438.4" y="419.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="441.4" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.16%)</title><rect x="438.4" y="403.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="441.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.16%)</title><rect x="438.4" y="387.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="441.4" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.12%)</title><rect x="438.4" y="371.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="441.4" y="382.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.04%)</title><rect x="438.4" y="355.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="441.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.08%)</title><rect x="438.8" y="355.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="441.8" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.04%)</title><rect x="438.8" y="339.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="441.8" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="438.8" y="323.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="441.8" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.04%)</title><rect x="438.8" y="307.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="441.8" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="439.3" y="339.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="442.3" y="350.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="439.8" y="371.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="442.8" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (2 samples, 0.08%)</title><rect x="440.2" y="419.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="443.2" y="430.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (436 samples, 17.34%)</title><rect x="441.2" y="419.0" width="204.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.2" y="430.0">one/nio/net/JavaSocket.read</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (436 samples, 17.34%)</title><rect x="441.2" y="403.0" width="204.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="444.2" y="414.0">sun/nio/ch/SocketChannelImp..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (419 samples, 16.66%)</title><rect x="445.4" y="387.0" width="196.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="448.4" y="398.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (419 samples, 16.66%)</title><rect x="445.4" y="371.0" width="196.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.4" y="382.0">sun/nio/ch/IOUtil.read</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (419 samples, 16.66%)</title><rect x="445.4" y="355.0" width="196.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.4" y="366.0">sun/nio/ch/IOUtil.readInto..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (419 samples, 16.66%)</title><rect x="445.4" y="339.0" width="196.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.4" y="350.0">sun/nio/ch/SocketDispatche..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (414 samples, 16.46%)</title><rect x="447.7" y="323.0" width="194.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="450.7" y="334.0">sun/nio/ch/FileDispatcher..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.16%)</title><rect x="457.6" y="307.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="460.6" y="318.0"></text>
</g>
<g>
<title>rpc_errlist (389 samples, 15.47%)</title><rect x="459.5" y="307.0" width="182.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="462.5" y="318.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (5 samples, 0.20%)</title><rect x="642.0" y="387.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.0" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (2 samples, 0.08%)</title><rect x="643.4" y="371.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="646.4" y="382.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.04%)</title><rect x="643.4" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.4" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.04%)</title><rect x="643.9" y="355.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.9" y="366.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (1 samples, 0.04%)</title><rect x="643.9" y="339.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.9" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (1 samples, 0.04%)</title><rect x="643.9" y="323.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.9" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.08%)</title><rect x="644.3" y="387.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.3" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="644.8" y="371.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.8" y="382.0"></text>
</g>
<g>
<title>unsafe_arraycopy (1 samples, 0.04%)</title><rect x="645.3" y="387.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="648.3" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (35 samples, 1.39%)</title><rect x="645.7" y="435.0" width="16.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="648.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (26 samples, 1.03%)</title><rect x="646.2" y="419.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="649.2" y="430.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.12%)</title><rect x="649.5" y="403.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="652.5" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.64%)</title><rect x="650.9" y="403.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.04%)</title><rect x="652.3" y="387.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="655.3" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (12 samples, 0.48%)</title><rect x="652.8" y="387.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="655.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (8 samples, 0.32%)</title><rect x="658.4" y="419.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="661.4" y="430.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.20%)</title><rect x="659.8" y="403.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="662.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.20%)</title><rect x="659.8" y="387.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.8" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="661.7" y="371.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="664.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (23 samples, 0.91%)</title><rect x="662.2" y="435.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.2" y="446.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.08%)</title><rect x="665.9" y="419.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.9" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.08%)</title><rect x="665.9" y="403.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="668.9" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.44%)</title><rect x="666.9" y="419.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="669.9" y="430.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.08%)</title><rect x="667.3" y="403.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.04%)</title><rect x="667.8" y="387.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="670.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.04%)</title><rect x="668.3" y="403.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.28%)</title><rect x="668.7" y="403.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.7" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.28%)</title><rect x="668.7" y="387.0" width="3.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="671.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.08%)</title><rect x="669.7" y="371.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.7" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.12%)</title><rect x="670.6" y="371.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="673.6" y="382.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="671.1" y="355.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="674.1" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.08%)</title><rect x="672.0" y="419.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="675.0" y="430.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="672.5" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="675.5" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.04%)</title><rect x="672.5" y="387.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.16%)</title><rect x="673.0" y="435.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="676.0" y="446.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.12%)</title><rect x="673.4" y="419.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.4" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.12%)</title><rect x="673.4" y="403.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="676.4" y="414.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (2 samples, 0.08%)</title><rect x="674.8" y="435.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.8" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (374 samples, 14.87%)</title><rect x="675.8" y="435.0" width="175.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.8" y="446.0">one/nio/net/JavaSocket...</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (264 samples, 10.50%)</title><rect x="675.8" y="419.0" width="123.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.8" y="430.0">java/nio/channe..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (263 samples, 10.46%)</title><rect x="676.2" y="403.0" width="123.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.2" y="414.0">java/nio/channe..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (261 samples, 10.38%)</title><rect x="677.2" y="387.0" width="122.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.2" y="398.0">java/nio/channe..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (256 samples, 10.18%)</title><rect x="679.5" y="371.0" width="120.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="682.5" y="382.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (246 samples, 9.78%)</title><rect x="679.5" y="355.0" width="115.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="682.5" y="366.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (246 samples, 9.78%)</title><rect x="679.5" y="339.0" width="115.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.5" y="350.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (246 samples, 9.78%)</title><rect x="679.5" y="323.0" width="115.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="682.5" y="334.0">sun/nio/ch/IOU..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.04%)</title><rect x="681.4" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.4" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (241 samples, 9.58%)</title><rect x="681.9" y="307.0" width="113.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.9" y="318.0">sun/nio/ch/Soc..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.20%)</title><rect x="683.7" y="291.0" width="2.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="686.7" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (232 samples, 9.22%)</title><rect x="686.1" y="291.0" width="108.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.1" y="302.0">sun/nio/ch/Fi..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (7 samples, 0.28%)</title><rect x="688.4" y="275.0" width="3.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="691.4" y="286.0"></text>
</g>
<g>
<title>write (220 samples, 8.75%)</title><rect x="691.7" y="275.0" width="103.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="694.7" y="286.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (9 samples, 0.36%)</title><rect x="794.9" y="355.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="797.9" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (9 samples, 0.36%)</title><rect x="794.9" y="339.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="797.9" y="350.0"></text>
</g>
<g>
<title>JNI_OnLoad (2 samples, 0.08%)</title><rect x="795.4" y="323.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="798.4" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.04%)</title><rect x="796.4" y="323.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="799.4" y="334.0"></text>
</g>
<g>
<title>pthread_self (5 samples, 0.20%)</title><rect x="796.8" y="323.0" width="2.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="799.8" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.04%)</title><rect x="799.2" y="355.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="802.2" y="366.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.04%)</title><rect x="799.2" y="339.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.2" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (109 samples, 4.33%)</title><rect x="799.6" y="419.0" width="51.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="802.6" y="430.0">sun/n..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (102 samples, 4.06%)</title><rect x="802.9" y="403.0" width="47.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.9" y="414.0">java..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.04%)</title><rect x="803.9" y="387.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.9" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.04%)</title><rect x="804.3" y="387.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="807.3" y="398.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="804.8" y="387.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.8" y="398.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.04%)</title><rect x="805.3" y="387.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="808.3" y="398.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (73 samples, 2.90%)</title><rect x="805.7" y="387.0" width="34.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="808.7" y="398.0">JV..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="811.4" y="371.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="814.4" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.08%)</title><rect x="811.8" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="814.8" y="382.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.04%)</title><rect x="812.8" y="371.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.8" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (3 samples, 0.12%)</title><rect x="813.2" y="371.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.2" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (3 samples, 0.12%)</title><rect x="813.2" y="355.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="816.2" y="366.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (2 samples, 0.08%)</title><rect x="813.7" y="339.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="816.7" y="350.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (12 samples, 0.48%)</title><rect x="814.7" y="371.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="817.7" y="382.0"></text>
</g>
<g>
<title>AbstractInterpreter::size_top_interpreter_activation(Method*) (3 samples, 0.12%)</title><rect x="816.1" y="355.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.1" y="366.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.04%)</title><rect x="817.5" y="355.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="820.5" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.04%)</title><rect x="817.9" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="820.9" y="366.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (2 samples, 0.08%)</title><rect x="818.4" y="355.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="821.4" y="366.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.08%)</title><rect x="818.4" y="339.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="821.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::can_call_java() const (1 samples, 0.04%)</title><rect x="819.3" y="355.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.3" y="366.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.04%)</title><rect x="819.8" y="355.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="822.8" y="366.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (12 samples, 0.48%)</title><rect x="820.3" y="371.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.3" y="382.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (10 samples, 0.40%)</title><rect x="820.3" y="355.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="823.3" y="366.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (7 samples, 0.28%)</title><rect x="820.3" y="339.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="823.3" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="823.6" y="339.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.6" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="823.6" y="323.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="826.6" y="334.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.04%)</title><rect x="824.0" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.0" y="350.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.04%)</title><rect x="824.5" y="339.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.5" y="350.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.04%)</title><rect x="825.0" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="828.0" y="366.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.04%)</title><rect x="825.4" y="355.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.4" y="366.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.04%)</title><rect x="825.9" y="371.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.9" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.04%)</title><rect x="826.4" y="371.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.4" y="382.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.04%)</title><rect x="826.4" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.4" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.04%)</title><rect x="826.4" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="829.4" y="350.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (3 samples, 0.12%)</title><rect x="826.9" y="371.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="829.9" y="382.0"></text>
</g>
<g>
<title>os::current_stack_pointer() (1 samples, 0.04%)</title><rect x="828.3" y="371.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="831.3" y="382.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples, 0.12%)</title><rect x="828.7" y="371.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.7" y="382.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (1 samples, 0.04%)</title><rect x="830.1" y="371.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="833.1" y="382.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.04%)</title><rect x="830.1" y="355.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="833.1" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (20 samples, 0.80%)</title><rect x="830.6" y="371.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="833.6" y="382.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (7 samples, 0.28%)</title><rect x="830.6" y="355.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="833.6" y="366.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (4 samples, 0.16%)</title><rect x="832.0" y="339.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="835.0" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (13 samples, 0.52%)</title><rect x="833.9" y="355.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="836.9" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.16%)</title><rect x="833.9" y="339.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="836.9" y="350.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.12%)</title><rect x="834.4" y="323.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="837.4" y="334.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.12%)</title><rect x="834.4" y="307.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="837.4" y="318.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.12%)</title><rect x="834.4" y="291.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="837.4" y="302.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (3 samples, 0.12%)</title><rect x="834.4" y="275.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="837.4" y="286.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.04%)</title><rect x="835.8" y="339.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="838.8" y="350.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (8 samples, 0.32%)</title><rect x="836.2" y="339.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.2" y="350.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.04%)</title><rect x="837.2" y="323.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="840.2" y="334.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.04%)</title><rect x="837.2" y="307.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="840.2" y="318.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (1 samples, 0.04%)</title><rect x="837.2" y="291.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.2" y="302.0"></text>
</g>
<g>
<title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples, 0.04%)</title><rect x="837.6" y="323.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="840.6" y="334.0"></text>
</g>
<g>
<title>nmethod::scopes_pcs_begin() const (1 samples, 0.04%)</title><rect x="838.1" y="323.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.1" y="334.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_compiled_frame(int) (3 samples, 0.12%)</title><rect x="838.6" y="323.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.6" y="334.0"></text>
</g>
<g>
<title>nmethod::metadata_at(int) const (2 samples, 0.08%)</title><rect x="839.0" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="842.0" y="318.0"></text>
</g>
<g>
<title>nmethod::metadata_addr_at(int) const (1 samples, 0.04%)</title><rect x="839.5" y="291.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="842.5" y="302.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.04%)</title><rect x="840.0" y="387.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="843.0" y="398.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="840.5" y="387.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="843.5" y="398.0"></text>
</g>
<g>
<title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (1 samples, 0.04%)</title><rect x="840.9" y="387.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="843.9" y="398.0"></text>
</g>
<g>
<title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (1 samples, 0.04%)</title><rect x="841.4" y="387.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.4" y="398.0"></text>
</g>
<g>
<title>call_stub (7 samples, 0.28%)</title><rect x="841.9" y="387.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="844.9" y="398.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (2 samples, 0.08%)</title><rect x="845.1" y="387.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="848.1" y="398.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.04%)</title><rect x="846.1" y="387.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (4 samples, 0.16%)</title><rect x="846.6" y="387.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="849.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.04%)</title><rect x="848.0" y="371.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.0" y="382.0"></text>
</g>
<g>
<title>java/nio/channels/Channels.newOutputStream (1 samples, 0.04%)</title><rect x="848.0" y="355.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.0" y="366.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.12%)</title><rect x="848.4" y="387.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.4" y="398.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.08%)</title><rect x="849.8" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="852.8" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.socket (1 samples, 0.04%)</title><rect x="850.8" y="419.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="853.8" y="430.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (10 samples, 0.40%)</title><rect x="851.2" y="435.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="854.2" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.08%)</title><rect x="853.6" y="419.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="856.6" y="430.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.08%)</title><rect x="853.6" y="403.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="856.6" y="414.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.08%)</title><rect x="853.6" y="387.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="856.6" y="398.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (3 samples, 0.12%)</title><rect x="854.5" y="419.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="857.5" y="430.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (3 samples, 0.12%)</title><rect x="854.5" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="857.5" y="414.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.08%)</title><rect x="855.9" y="435.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.9" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (2 samples, 0.08%)</title><rect x="855.9" y="419.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="858.9" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (2 samples, 0.08%)</title><rect x="855.9" y="403.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="858.9" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (2 samples, 0.08%)</title><rect x="856.9" y="483.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.08%)</title><rect x="856.9" y="467.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="859.9" y="478.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (1 samples, 0.04%)</title><rect x="857.3" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.3" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="857.3" y="435.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="860.3" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.getNodeReplica (5 samples, 0.20%)</title><rect x="857.8" y="483.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.8" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1 samples, 0.04%)</title><rect x="859.2" y="467.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.syncValues (1 samples, 0.04%)</title><rect x="859.7" y="467.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="862.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.handleExternal (17 samples, 0.68%)</title><rect x="860.2" y="483.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.08%)</title><rect x="860.6" y="467.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="863.6" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.syncValues (4 samples, 0.16%)</title><rect x="861.6" y="467.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.6" y="478.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.08%)</title><rect x="861.6" y="451.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="864.6" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.08%)</title><rect x="861.6" y="435.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="864.6" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (2 samples, 0.08%)</title><rect x="861.6" y="419.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="864.6" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (2 samples, 0.08%)</title><rect x="861.6" y="403.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="864.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (2 samples, 0.08%)</title><rect x="861.6" y="387.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="864.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/PipelineHelper.&lt;init&gt; (1 samples, 0.04%)</title><rect x="862.0" y="371.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="865.0" y="382.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.04%)</title><rect x="862.0" y="355.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="865.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (2 samples, 0.08%)</title><rect x="862.5" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="865.5" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (2 samples, 0.08%)</title><rect x="862.5" y="435.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="865.5" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.08%)</title><rect x="862.5" y="419.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="865.5" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.08%)</title><rect x="862.5" y="403.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="865.5" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.08%)</title><rect x="862.5" y="387.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="865.5" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.04%)</title><rect x="863.0" y="371.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="866.0" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (1 samples, 0.04%)</title><rect x="863.0" y="355.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="866.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.04%)</title><rect x="863.0" y="339.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="866.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils$$Lambda$75/1428751275.test (1 samples, 0.04%)</title><rect x="863.0" y="323.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.0" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.lambda$syncValues$0 (1 samples, 0.04%)</title><rect x="863.0" y="307.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.getValueBytes (10 samples, 0.40%)</title><rect x="863.4" y="467.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="863.4" y="451.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="866.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.16%)</title><rect x="863.9" y="451.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="866.9" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="865.3" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.3" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="865.3" y="419.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.3" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="865.3" y="403.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.3" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="865.3" y="387.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.3" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="865.3" y="371.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.3" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.04%)</title><rect x="865.8" y="451.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.8" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putShort (4 samples, 0.16%)</title><rect x="866.3" y="451.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="869.3" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceUtils.handleInternal (538 samples, 21.39%)</title><rect x="868.1" y="483.0" width="252.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="871.1" y="494.0">ru/mail/polis/service/ReplicationS..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="868.1" y="467.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="871.1" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="868.1" y="451.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="871.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="868.1" y="435.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="871.1" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="868.1" y="419.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.1" y="430.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="868.1" y="403.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="871.1" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="868.1" y="387.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="871.1" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="868.1" y="371.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="871.1" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.getValue (529 samples, 21.03%)</title><rect x="868.6" y="467.0" width="248.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.6" y="478.0">ru/mail/polis/dao/DaoEngine.getVa..</text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.getValueFromBytes (523 samples, 20.80%)</title><rect x="868.6" y="451.0" width="245.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="871.6" y="462.0">ru/mail/polis/dao/DaoEngine.getVa..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (518 samples, 20.60%)</title><rect x="868.6" y="435.0" width="243.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="871.6" y="446.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (518 samples, 20.60%)</title><rect x="868.6" y="419.0" width="243.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.6" y="430.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (514 samples, 20.44%)</title><rect x="870.0" y="403.0" width="241.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="873.0" y="414.0">Java_org_rocksdb_RocksDB_get__J_..</text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (2 samples, 0.08%)</title><rect x="870.5" y="387.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="873.5" y="398.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.04%)</title><rect x="871.4" y="387.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="874.4" y="398.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (2 samples, 0.08%)</title><rect x="871.9" y="387.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.9" y="398.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="872.8" y="387.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="875.8" y="398.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.04%)</title><rect x="873.3" y="387.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="876.3" y="398.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.08%)</title><rect x="873.8" y="387.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="876.8" y="398.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.16%)</title><rect x="874.7" y="387.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="877.7" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (498 samples, 19.80%)</title><rect x="876.6" y="387.0" width="233.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.6" y="398.0">rocksdb_get_helper(JNIEnv_*, ro..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="878.9" y="371.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="881.9" y="382.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.12%)</title><rect x="879.4" y="371.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.4" y="382.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.04%)</title><rect x="880.8" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="883.8" y="382.0"></text>
</g>
<g>
<title>Java_org_rocksdb_ColumnFamilyHandle_disposeInternal (41 samples, 1.63%)</title><rect x="881.3" y="371.0" width="19.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="884.3" y="382.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (1 samples, 0.04%)</title><rect x="882.2" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="885.2" y="366.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.04%)</title><rect x="882.7" y="355.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="885.7" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="883.2" y="355.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.2" y="366.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.04%)</title><rect x="883.6" y="355.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="886.6" y="366.0"></text>
</g>
<g>
<title>jni_NewByteArray (32 samples, 1.27%)</title><rect x="884.1" y="355.0" width="15.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="887.1" y="366.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.04%)</title><rect x="885.0" y="339.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="888.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="885.5" y="339.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="888.5" y="350.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="886.0" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="889.0" y="350.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="886.0" y="323.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.0" y="334.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="886.4" y="339.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="889.4" y="350.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.12%)</title><rect x="886.9" y="339.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="889.9" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.12%)</title><rect x="886.9" y="323.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="889.9" y="334.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.12%)</title><rect x="886.9" y="307.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.9" y="318.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.12%)</title><rect x="886.9" y="291.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.9" y="302.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.12%)</title><rect x="886.9" y="275.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="889.9" y="286.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.04%)</title><rect x="886.9" y="259.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="889.9" y="270.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.08%)</title><rect x="887.4" y="259.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="890.4" y="270.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.08%)</title><rect x="887.4" y="243.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.4" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (23 samples, 0.91%)</title><rect x="888.3" y="339.0" width="10.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="891.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.64%)</title><rect x="890.7" y="323.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.04%)</title><rect x="890.7" y="307.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.7" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.48%)</title><rect x="891.1" y="307.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="894.1" y="318.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.08%)</title><rect x="892.5" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (2 samples, 0.08%)</title><rect x="892.5" y="275.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="895.5" y="286.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_dtrace_sampler() (1 samples, 0.04%)</title><rect x="893.5" y="291.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="896.5" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.04%)</title><rect x="893.9" y="291.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="896.9" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_low_memory_detector() (1 samples, 0.04%)</title><rect x="894.4" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="897.4" y="302.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (2 samples, 0.08%)</title><rect x="894.9" y="291.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="897.9" y="302.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.04%)</title><rect x="895.8" y="291.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="898.8" y="302.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="896.3" y="291.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="899.3" y="302.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.12%)</title><rect x="896.8" y="307.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="899.8" y="318.0"></text>
</g>
<g>
<title>Klass::check_array_allocation_length(int, int, Thread*) (2 samples, 0.08%)</title><rect x="898.2" y="323.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.2" y="334.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.08%)</title><rect x="899.1" y="355.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="902.1" y="366.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.04%)</title><rect x="900.0" y="355.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="903.0" y="366.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="900.5" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="903.5" y="382.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.04%)</title><rect x="901.0" y="371.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="904.0" y="382.0"></text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (1 samples, 0.04%)</title><rect x="901.5" y="371.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="904.5" y="382.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.08%)</title><rect x="901.9" y="371.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="904.9" y="382.0"></text>
</g>
<g>
<title>free (4 samples, 0.16%)</title><rect x="902.9" y="371.0" width="1.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="905.9" y="382.0"></text>
</g>
<g>
<title>szone_size (3 samples, 0.12%)</title><rect x="903.3" y="355.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="906.3" y="366.0"></text>
</g>
<g>
<title>tiny_size (3 samples, 0.12%)</title><rect x="903.3" y="339.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="906.3" y="350.0"></text>
</g>
<g>
<title>free_tiny (9 samples, 0.36%)</title><rect x="904.7" y="371.0" width="4.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="907.7" y="382.0"></text>
</g>
<g>
<title>tiny_free_no_lock (8 samples, 0.32%)</title><rect x="905.2" y="355.0" width="3.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="908.2" y="366.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (3 samples, 0.12%)</title><rect x="907.6" y="339.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="910.6" y="350.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.16%)</title><rect x="909.0" y="371.0" width="1.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="912.0" y="382.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="909.0" y="355.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="912.0" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3 samples, 0.12%)</title><rect x="909.4" y="355.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="912.4" y="366.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="909.4" y="339.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.4" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.08%)</title><rect x="909.9" y="339.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="912.9" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.04%)</title><rect x="909.9" y="323.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.9" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="909.9" y="307.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.9" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="909.9" y="291.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.9" y="302.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.04%)</title><rect x="909.9" y="275.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="912.9" y="286.0"></text>
</g>
<g>
<title>SafepointMechanism::poll_bit() (1 samples, 0.04%)</title><rect x="910.4" y="323.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="913.4" y="334.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (17 samples, 0.68%)</title><rect x="910.8" y="371.0" width="8.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="913.8" y="382.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.04%)</title><rect x="914.1" y="355.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="917.1" y="366.0"></text>
</g>
<g>
<title>os::is_MP() (1 samples, 0.04%)</title><rect x="914.1" y="339.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.1" y="350.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.04%)</title><rect x="914.6" y="355.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.6" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.24%)</title><rect x="915.1" y="355.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.1" y="366.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.20%)</title><rect x="915.1" y="339.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="918.1" y="350.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.20%)</title><rect x="915.1" y="323.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="918.1" y="334.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5 samples, 0.20%)</title><rect x="915.1" y="307.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="918.1" y="318.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.20%)</title><rect x="915.1" y="291.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.1" y="302.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.04%)</title><rect x="915.1" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="918.1" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.04%)</title><rect x="915.5" y="275.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="918.5" y="286.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::~ScopedFence() (1 samples, 0.04%)</title><rect x="916.0" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.0" y="286.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile* const volatile*) (2 samples, 0.08%)</title><rect x="916.5" y="275.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="919.5" y="286.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.04%)</title><rect x="916.5" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="919.5" y="270.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.04%)</title><rect x="916.9" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="919.9" y="270.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.04%)</title><rect x="917.4" y="339.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.4" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (2 samples, 0.08%)</title><rect x="917.9" y="355.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="920.9" y="366.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.04%)</title><rect x="918.8" y="371.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="921.8" y="382.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.04%)</title><rect x="919.3" y="371.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="922.3" y="382.0"></text>
</g>
<g>
<title>operator new(unsigned long) (16 samples, 0.64%)</title><rect x="919.7" y="371.0" width="7.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="922.7" y="382.0"></text>
</g>
<g>
<title>malloc (16 samples, 0.64%)</title><rect x="919.7" y="355.0" width="7.6" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="922.7" y="366.0"></text>
</g>
<g>
<title>default_zone_malloc (1 samples, 0.04%)</title><rect x="919.7" y="339.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="922.7" y="350.0"></text>
</g>
<g>
<title>malloc_zone_malloc (14 samples, 0.56%)</title><rect x="920.2" y="339.0" width="6.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="923.2" y="350.0"></text>
</g>
<g>
<title>default_zone_malloc (2 samples, 0.08%)</title><rect x="921.6" y="323.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="924.6" y="334.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (9 samples, 0.36%)</title><rect x="922.6" y="323.0" width="4.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="925.6" y="334.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (9 samples, 0.36%)</title><rect x="922.6" y="307.0" width="4.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="925.6" y="318.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (1 samples, 0.04%)</title><rect x="926.3" y="291.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="929.3" y="302.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (1 samples, 0.04%)</title><rect x="926.8" y="339.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="929.8" y="350.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (388 samples, 15.43%)</title><rect x="927.3" y="371.0" width="182.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.3" y="382.0">rocksdb::CompactedDBImpl..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.04%)</title><rect x="928.2" y="355.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="931.2" y="366.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (383 samples, 15.23%)</title><rect x="928.7" y="355.0" width="179.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="931.7" y="366.0">rocksdb::CompactedDBImp..</text>
</g>
<g>
<title>_os_semaphore_wait.cold.1 (2 samples, 0.08%)</title><rect x="929.1" y="339.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="932.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (6 samples, 0.24%)</title><rect x="930.1" y="339.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.1" y="350.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetHash(rocksdb::Cache::Handle*) const (1 samples, 0.04%)</title><rect x="930.1" y="323.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.1" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.04%)</title><rect x="930.5" y="323.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.5" y="334.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (3 samples, 0.12%)</title><rect x="931.0" y="323.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.0" y="334.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="931.0" y="307.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="934.0" y="318.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.04%)</title><rect x="931.5" y="307.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="934.5" y="318.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (1 samples, 0.04%)</title><rect x="931.9" y="307.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.9" y="318.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (1 samples, 0.04%)</title><rect x="931.9" y="291.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="934.9" y="302.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.04%)</title><rect x="931.9" y="275.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="934.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (1 samples, 0.04%)</title><rect x="932.4" y="323.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.4" y="334.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (370 samples, 14.71%)</title><rect x="932.9" y="339.0" width="173.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="935.9" y="350.0">rocksdb::DBImpl::Get(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*) (369 samples, 14.67%)</title><rect x="933.4" y="323.0" width="173.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.4" y="334.0">rocksdb::DBImpl::Get(r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.08%)</title><rect x="933.4" y="307.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="936.4" y="318.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (364 samples, 14.47%)</title><rect x="934.3" y="307.0" width="170.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.3" y="318.0">rocksdb::DBImpl::GetIm..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (7 samples, 0.28%)</title><rect x="939.0" y="291.0" width="3.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="942.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (1 samples, 0.04%)</title><rect x="942.3" y="291.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.3" y="302.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.20%)</title><rect x="942.7" y="291.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.04%)</title><rect x="943.2" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="946.2" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.04%)</title><rect x="943.7" y="275.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.04%)</title><rect x="943.7" y="259.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="946.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.08%)</title><rect x="944.1" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="947.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.08%)</title><rect x="944.1" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (3 samples, 0.12%)</title><rect x="945.1" y="291.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.1" y="302.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (3 samples, 0.12%)</title><rect x="945.1" y="275.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.04%)</title><rect x="946.0" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.0" y="270.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (1 samples, 0.04%)</title><rect x="946.5" y="291.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="949.5" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (2 samples, 0.08%)</title><rect x="947.0" y="291.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.0" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.04%)</title><rect x="947.9" y="291.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="950.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long long, rocksdb::Slice const*) (2 samples, 0.08%)</title><rect x="948.4" y="291.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="951.4" y="302.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="948.8" y="275.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="951.8" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (62 samples, 2.47%)</title><rect x="949.3" y="291.0" width="29.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="952.3" y="302.0">ro..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="951.7" y="275.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="954.7" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.04%)</title><rect x="952.1" y="275.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="955.1" y="286.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="952.6" y="275.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.6" y="286.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (54 samples, 2.15%)</title><rect x="953.1" y="275.0" width="25.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="956.1" y="286.0">r..</text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long long, bool, rocksdb::ReadCallback*, bool*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*) (1 samples, 0.04%)</title><rect x="965.7" y="259.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="968.7" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (24 samples, 0.95%)</title><rect x="966.2" y="259.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="969.2" y="270.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.12%)</title><rect x="967.6" y="243.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="970.6" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (7 samples, 0.28%)</title><rect x="969.0" y="243.0" width="3.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="972.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (11 samples, 0.44%)</title><rect x="972.3" y="243.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="975.3" y="254.0"></text>
</g>
<g>
<title>_platform_memcmp (9 samples, 0.36%)</title><rect x="973.2" y="227.0" width="4.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="976.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.08%)</title><rect x="977.5" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="980.5" y="270.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="978.4" y="291.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="981.4" y="302.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.08%)</title><rect x="978.9" y="291.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="981.9" y="302.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (1 samples, 0.04%)</title><rect x="979.8" y="291.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.8" y="302.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (263 samples, 10.46%)</title><rect x="980.3" y="291.0" width="123.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.3" y="302.0">rocksdb::Versio..</text>
</g>
<g>
<title>rocksdb::FileIndexer::GetNextLevelIndex(unsigned long, unsigned long, int, int, int*, int*) const (2 samples, 0.08%)</title><rect x="985.9" y="275.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.9" y="286.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, bool*, rocksdb::MergeContext*, bool, unsigned long long*, rocksdb::Env*, unsigned long long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long long) (3 samples, 0.12%)</title><rect x="986.8" y="275.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.8" y="286.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="987.3" y="259.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="990.3" y="270.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="987.8" y="259.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="990.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (239 samples, 9.50%)</title><rect x="988.3" y="275.0" width="112.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.3" y="286.0">rocksdb::Table..</text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="990.1" y="259.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="993.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (1 samples, 0.04%)</title><rect x="990.6" y="259.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="993.6" y="270.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.08%)</title><rect x="991.1" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.1" y="270.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (229 samples, 9.11%)</title><rect x="992.0" y="259.0" width="107.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.0" y="270.0">rocksdb::Bloc..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (2 samples, 0.08%)</title><rect x="1002.8" y="243.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1005.8" y="254.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (5 samples, 0.20%)</title><rect x="1003.7" y="243.0" width="2.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1006.7" y="254.0"></text>
</g>
<g>
<title>free_tiny (3 samples, 0.12%)</title><rect x="1006.1" y="243.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1009.1" y="254.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.04%)</title><rect x="1007.5" y="243.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1010.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (19 samples, 0.76%)</title><rect x="1008.0" y="243.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (16 samples, 0.64%)</title><rect x="1008.9" y="227.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1011.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (14 samples, 0.56%)</title><rect x="1009.8" y="211.0" width="6.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.8" y="222.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.52%)</title><rect x="1010.3" y="195.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1013.3" y="206.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.52%)</title><rect x="1010.3" y="179.0" width="6.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1013.3" y="190.0"></text>
</g>
<g>
<title>malloc_zone_malloc (13 samples, 0.52%)</title><rect x="1010.3" y="163.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1013.3" y="174.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (10 samples, 0.40%)</title><rect x="1011.7" y="147.0" width="4.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1014.7" y="158.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (10 samples, 0.40%)</title><rect x="1011.7" y="131.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1014.7" y="142.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (3 samples, 0.12%)</title><rect x="1013.1" y="115.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1016.1" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (4 samples, 0.16%)</title><rect x="1014.5" y="115.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1017.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (1 samples, 0.04%)</title><rect x="1016.4" y="227.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (13 samples, 0.52%)</title><rect x="1016.9" y="243.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.9" y="254.0"></text>
</g>
<g>
<title>free (5 samples, 0.20%)</title><rect x="1018.3" y="227.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1021.3" y="238.0"></text>
</g>
<g>
<title>szone_size (4 samples, 0.16%)</title><rect x="1018.7" y="211.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1021.7" y="222.0"></text>
</g>
<g>
<title>tiny_size (4 samples, 0.16%)</title><rect x="1018.7" y="195.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1021.7" y="206.0"></text>
</g>
<g>
<title>free_tiny (4 samples, 0.16%)</title><rect x="1020.6" y="227.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1023.6" y="238.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.04%)</title><rect x="1022.5" y="227.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1025.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (2 samples, 0.08%)</title><rect x="1023.0" y="243.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (3 samples, 0.12%)</title><rect x="1023.9" y="243.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1026.9" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (2 samples, 0.08%)</title><rect x="1025.3" y="243.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::FindBlockForward() (1 samples, 0.04%)</title><rect x="1026.3" y="243.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (57 samples, 2.27%)</title><rect x="1026.7" y="243.0" width="26.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.7" y="254.0">r..</text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (1 samples, 0.04%)</title><rect x="1028.1" y="227.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.1" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (1 samples, 0.04%)</title><rect x="1028.6" y="227.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1031.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (1 samples, 0.04%)</title><rect x="1028.6" y="211.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1031.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (52 samples, 2.07%)</title><rect x="1029.1" y="227.0" width="24.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1032.1" y="238.0">r..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (44 samples, 1.75%)</title><rect x="1030.9" y="211.0" width="20.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1033.9" y="222.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::DumpDataBlocks(rocksdb::WritableFile*) (32 samples, 1.27%)</title><rect x="1033.3" y="195.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (1 samples, 0.04%)</title><rect x="1034.7" y="179.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::Hash64(char const*, unsigned long) (1 samples, 0.04%)</title><rect x="1035.2" y="179.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.2" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (1 samples, 0.04%)</title><rect x="1035.6" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (20 samples, 0.80%)</title><rect x="1036.1" y="179.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.1" y="190.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="1040.3" y="163.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1043.3" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.04%)</title><rect x="1040.8" y="163.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1043.8" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.08%)</title><rect x="1041.3" y="163.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1044.3" y="174.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.16%)</title><rect x="1042.2" y="163.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.2" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (4 samples, 0.16%)</title><rect x="1042.2" y="147.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1045.2" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexwait (4 samples, 0.16%)</title><rect x="1042.2" y="131.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1045.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (3 samples, 0.12%)</title><rect x="1044.1" y="163.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.1" y="174.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (3 samples, 0.12%)</title><rect x="1044.1" y="147.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1047.1" y="158.0"></text>
</g>
<g>
<title>__psynch_mutexdrop (3 samples, 0.12%)</title><rect x="1044.1" y="131.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1047.1" y="142.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (1 samples, 0.04%)</title><rect x="1045.5" y="179.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (1 samples, 0.04%)</title><rect x="1045.5" y="163.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.5" y="174.0"></text>
</g>
<g>
<title>operator delete[](void*) (1 samples, 0.04%)</title><rect x="1045.5" y="147.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1048.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (5 samples, 0.20%)</title><rect x="1046.0" y="179.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (1 samples, 0.04%)</title><rect x="1048.3" y="195.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (4 samples, 0.16%)</title><rect x="1048.8" y="195.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long long, unsigned long, rocksdb::Slice*, char*, std::__1::unique_ptr&lt;char [], std::__1::default_delete&lt;char []&gt; &gt;*, bool) const (1 samples, 0.04%)</title><rect x="1049.2" y="179.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.2" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.04%)</title><rect x="1049.2" y="163.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1052.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (2 samples, 0.08%)</title><rect x="1049.7" y="179.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (2 samples, 0.08%)</title><rect x="1049.7" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1052.7" y="174.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (2 samples, 0.08%)</title><rect x="1049.7" y="147.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.7" y="158.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (2 samples, 0.08%)</title><rect x="1049.7" y="131.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1052.7" y="142.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (2 samples, 0.08%)</title><rect x="1049.7" y="115.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.7" y="126.0"></text>
</g>
<g>
<title>snappy::Uncompress(snappy::Source*, snappy::Sink*) (2 samples, 0.08%)</title><rect x="1049.7" y="99.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.7" y="110.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (2 samples, 0.08%)</title><rect x="1049.7" y="83.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1052.7" y="94.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (2 samples, 0.08%)</title><rect x="1049.7" y="67.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.7" y="78.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (2 samples, 0.08%)</title><rect x="1049.7" y="51.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.7" y="62.0"></text>
</g>
<g>
<title>snappy::SnappyIOVecWriter::GetIOVecPointer(iovec const*, unsigned long) (1 samples, 0.04%)</title><rect x="1050.2" y="35.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.2" y="46.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (2 samples, 0.08%)</title><rect x="1050.7" y="195.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.7" y="206.0"></text>
</g>
<g>
<title>thread_chkstk_darwin (4 samples, 0.16%)</title><rect x="1051.6" y="211.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1054.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (39 samples, 1.55%)</title><rect x="1053.5" y="243.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (1 samples, 0.04%)</title><rect x="1053.5" y="227.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1056.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (35 samples, 1.39%)</title><rect x="1053.9" y="227.0" width="16.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.9" y="238.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1059.6" y="211.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1062.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (9 samples, 0.36%)</title><rect x="1060.0" y="211.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1063.0" y="222.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (13 samples, 0.52%)</title><rect x="1064.3" y="211.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.3" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.04%)</title><rect x="1065.7" y="195.0" width="0.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1068.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (9 samples, 0.36%)</title><rect x="1066.1" y="195.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.1" y="206.0"></text>
</g>
<g>
<title>_platform_memcmp (4 samples, 0.16%)</title><rect x="1068.5" y="179.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1071.5" y="190.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::SeekForPrev(rocksdb::Slice const&amp;) (2 samples, 0.08%)</title><rect x="1070.4" y="227.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1073.4" y="238.0"></text>
</g>
<g>
<title>rocksdb::IterKey::EnlargeBuffer(unsigned long) (1 samples, 0.04%)</title><rect x="1071.3" y="227.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (9 samples, 0.36%)</title><rect x="1071.8" y="243.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.8" y="254.0"></text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (1 samples, 0.04%)</title><rect x="1074.6" y="227.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1077.6" y="238.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (2 samples, 0.08%)</title><rect x="1075.0" y="227.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.0" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="1075.5" y="211.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1078.5" y="222.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::Slice const&amp;, unsigned long long) (1 samples, 0.04%)</title><rect x="1076.0" y="243.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (2 samples, 0.08%)</title><rect x="1076.5" y="243.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1079.5" y="254.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (46 samples, 1.83%)</title><rect x="1077.4" y="243.0" width="21.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.4" y="254.0">r..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (3 samples, 0.12%)</title><rect x="1077.9" y="227.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1080.9" y="238.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (2 samples, 0.08%)</title><rect x="1079.3" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1082.3" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (1 samples, 0.04%)</title><rect x="1080.2" y="227.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.2" y="238.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::PrefixSeek(rocksdb::Slice const&amp;, unsigned int*, bool*) (38 samples, 1.51%)</title><rect x="1080.7" y="227.0" width="17.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1083.7" y="238.0"></text>
</g>
<g>
<title>_platform_memcmp (1 samples, 0.04%)</title><rect x="1089.6" y="211.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1092.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Next() (10 samples, 0.40%)</title><rect x="1090.1" y="211.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.1" y="222.0"></text>
</g>
<g>
<title>rocksdb::Block::ApproximateMemoryUsage() const (5 samples, 0.20%)</title><rect x="1091.9" y="195.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.9" y="206.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long long*) (1 samples, 0.04%)</title><rect x="1093.3" y="179.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (1 samples, 0.04%)</title><rect x="1093.8" y="179.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.8" y="190.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (1 samples, 0.04%)</title><rect x="1094.3" y="195.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.3" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (8 samples, 0.32%)</title><rect x="1094.8" y="211.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.8" y="222.0"></text>
</g>
<g>
<title>_platform_memcmp (5 samples, 0.20%)</title><rect x="1096.2" y="195.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1099.2" y="206.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="1098.5" y="227.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1101.5" y="238.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (1 samples, 0.04%)</title><rect x="1099.0" y="243.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.0" y="254.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableIterator::Prev() (1 samples, 0.04%)</title><rect x="1099.4" y="259.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.4" y="270.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (1 samples, 0.04%)</title><rect x="1099.9" y="259.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.9" y="270.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, bool*, bool*, unsigned long long*, rocksdb::ReadCallback*, bool*, bool) (7 samples, 0.28%)</title><rect x="1100.4" y="275.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.4" y="286.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.04%)</title><rect x="1101.8" y="259.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.8" y="270.0"></text>
</g>
<g>
<title>rocksdb::ReactiveVersionSet::ApplyOneVersionEditToBuilder(rocksdb::VersionEdit&amp;, std::__1::unordered_set&lt;rocksdb::ColumnFamilyData*, std::__1::hash&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::equal_to&lt;rocksdb::ColumnFamilyData*&gt;, std::__1::allocator&lt;rocksdb::ColumnFamilyData*&gt; &gt;*, rocksdb::VersionEdit*) (2 samples, 0.08%)</title><rect x="1102.3" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.3" y="270.0"></text>
</g>
<g>
<title>rocksdb::FindFile(rocksdb::InternalKeyComparator const&amp;, rocksdb::LevelFilesBrief const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.08%)</title><rect x="1102.3" y="243.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.3" y="254.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.04%)</title><rect x="1103.2" y="259.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.2" y="270.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (3 samples, 0.12%)</title><rect x="1103.7" y="291.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="302.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.04%)</title><rect x="1105.1" y="307.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.1" y="318.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long long*, unsigned long long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (1 samples, 0.04%)</title><rect x="1105.5" y="307.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.5" y="318.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="1106.0" y="307.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.0" y="318.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.08%)</title><rect x="1106.5" y="339.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.5" y="350.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.04%)</title><rect x="1107.0" y="323.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1110.0" y="334.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (2 samples, 0.08%)</title><rect x="1107.4" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.4" y="350.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::assign(char const*, unsigned long) (2 samples, 0.08%)</title><rect x="1108.4" y="355.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.4" y="366.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.08%)</title><rect x="1109.3" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.3" y="382.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;) (2 samples, 0.08%)</title><rect x="1110.2" y="387.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.2" y="398.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.04%)</title><rect x="1111.2" y="403.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.2" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (5 samples, 0.20%)</title><rect x="1111.6" y="435.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1114.6" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.16%)</title><rect x="1112.1" y="419.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1112.1" y="403.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1115.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1112.1" y="387.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.1" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.12%)</title><rect x="1112.6" y="371.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1115.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="1113.1" y="355.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1116.1" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="1113.1" y="339.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1116.1" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.04%)</title><rect x="1113.1" y="323.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1116.1" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1113.5" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.5" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.04%)</title><rect x="1113.5" y="339.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1116.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.composeFromBytes (6 samples, 0.24%)</title><rect x="1114.0" y="451.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.0" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.20%)</title><rect x="1114.0" y="435.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.0" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (5 samples, 0.20%)</title><rect x="1114.0" y="419.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.0" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1114.5" y="403.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1117.5" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1114.5" y="387.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.5" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.16%)</title><rect x="1114.5" y="371.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1117.5" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.08%)</title><rect x="1115.4" y="355.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1118.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.08%)</title><rect x="1115.4" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1118.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.04%)</title><rect x="1116.3" y="435.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1119.3" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (1 samples, 0.04%)</title><rect x="1116.3" y="419.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1119.3" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.getValueBytes (8 samples, 0.32%)</title><rect x="1116.8" y="467.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1119.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.04%)</title><rect x="1116.8" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1119.8" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1116.8" y="435.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1119.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1116.8" y="419.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1119.8" y="430.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.04%)</title><rect x="1117.3" y="451.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.3" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (6 samples, 0.24%)</title><rect x="1117.7" y="451.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.7" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (5 samples, 0.20%)</title><rect x="1117.7" y="435.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1120.7" y="446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1119.2" y="419.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1122.2" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.04%)</title><rect x="1119.6" y="419.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.putLongUnaligned (1 samples, 0.04%)</title><rect x="1120.1" y="435.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1123.1" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.isSelfId (4 samples, 0.16%)</title><rect x="1120.6" y="483.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1123.6" y="494.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.16%)</title><rect x="1120.6" y="467.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1123.6" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1122.0" y="451.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1125.0" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Value.composeFromBytes (3 samples, 0.12%)</title><rect x="1122.4" y="483.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.4" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="1122.4" y="467.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.4" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.04%)</title><rect x="1122.4" y="451.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1125.4" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.4" y="435.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.4" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1125.4" y="430.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1122.4" y="403.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1125.4" y="414.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getShort (2 samples, 0.08%)</title><rect x="1122.9" y="467.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1125.9" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextGetIndex (1 samples, 0.04%)</title><rect x="1123.4" y="451.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1126.4" y="462.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="1123.4" y="435.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1126.4" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.getSize (1 samples, 0.04%)</title><rect x="1123.8" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1126.8" y="526.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.16%)</title><rect x="1124.3" y="547.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.3" y="558.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.20%)</title><rect x="1126.2" y="547.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1129.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.20%)</title><rect x="1126.2" y="531.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.04%)</title><rect x="1126.2" y="515.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1129.2" y="526.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.04%)</title><rect x="1126.2" y="499.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1129.2" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.16%)</title><rect x="1126.7" y="515.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1129.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.12%)</title><rect x="1127.1" y="499.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1130.1" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 0.48%)</title><rect x="1128.5" y="579.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (2 samples, 0.08%)</title><rect x="1128.5" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="1128.5" y="547.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.08%)</title><rect x="1128.5" y="531.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1131.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.08%)</title><rect x="1128.5" y="515.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1131.5" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.12%)</title><rect x="1129.5" y="563.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1132.5" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.12%)</title><rect x="1129.5" y="547.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1132.5" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.28%)</title><rect x="1130.9" y="563.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1133.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.16%)</title><rect x="1134.2" y="579.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1137.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.04%)</title><rect x="1135.6" y="563.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1138.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.04%)</title><rect x="1135.6" y="547.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1138.6" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (1 samples, 0.04%)</title><rect x="1136.0" y="579.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1139.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1 samples, 0.04%)</title><rect x="1136.0" y="563.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1139.0" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="1136.5" y="579.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1139.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.08%)</title><rect x="1136.5" y="563.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1139.5" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (106 samples, 4.21%)</title><rect x="1137.5" y="595.0" width="49.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1140.5" y="606.0">one/n..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (103 samples, 4.10%)</title><rect x="1138.9" y="579.0" width="48.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1141.9" y="590.0">one/..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (103 samples, 4.10%)</title><rect x="1138.9" y="563.0" width="48.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1141.9" y="574.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (96 samples, 3.82%)</title><rect x="1139.8" y="547.0" width="45.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.8" y="558.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (96 samples, 3.82%)</title><rect x="1139.8" y="531.0" width="45.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1142.8" y="542.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (96 samples, 3.82%)</title><rect x="1139.8" y="515.0" width="45.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1142.8" y="526.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (96 samples, 3.82%)</title><rect x="1139.8" y="499.0" width="45.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1142.8" y="510.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (89 samples, 3.54%)</title><rect x="1142.6" y="483.0" width="41.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1145.6" y="494.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.16%)</title><rect x="1144.0" y="467.0" width="1.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1147.0" y="478.0"></text>
</g>
<g>
<title>fdval (3 samples, 0.12%)</title><rect x="1144.5" y="451.0" width="1.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1147.5" y="462.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.04%)</title><rect x="1145.9" y="467.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1148.9" y="478.0"></text>
</g>
<g>
<title>rpc_errlist (81 samples, 3.22%)</title><rect x="1146.4" y="467.0" width="38.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1149.4" y="478.0">rpc..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.04%)</title><rect x="1184.4" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (5 samples, 0.20%)</title><rect x="1184.8" y="547.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.8" y="558.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (5 samples, 0.20%)</title><rect x="1184.8" y="531.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1187.8" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1185.8" y="515.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1188.8" y="526.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.08%)</title><rect x="1186.2" y="515.0" width="1.0" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.16%)</title><rect x="1187.2" y="627.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="638.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.16%)</title><rect x="1187.2" y="611.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1190.2" y="622.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (3 samples, 0.12%)</title><rect x="1187.7" y="595.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.04%)</title><rect x="1188.6" y="579.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1191.6" y="590.0"></text>
</g>
<g>
<title>thread_start (2 samples, 0.08%)</title><rect x="1189.1" y="643.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.1" y="654.0"></text>
</g>
<g>
<title>_pthread_start (2 samples, 0.08%)</title><rect x="1189.1" y="627.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.1" y="638.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.08%)</title><rect x="1189.1" y="611.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1192.1" y="622.0"></text>
</g>
<g>
<title>Thread::call_run() (2 samples, 0.08%)</title><rect x="1189.1" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.1" y="606.0"></text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.04%)</title><rect x="1189.1" y="579.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="590.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.04%)</title><rect x="1189.1" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="574.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.04%)</title><rect x="1189.1" y="547.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1192.1" y="558.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.04%)</title><rect x="1189.5" y="579.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.04%)</title><rect x="1189.5" y="563.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="574.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.04%)</title><rect x="1189.5" y="547.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1192.5" y="558.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.04%)</title><rect x="1189.5" y="531.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.5" y="542.0"></text>
</g>
</g>
</svg>
