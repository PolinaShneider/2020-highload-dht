<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (4,128 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.05%)</title><rect x="10.0" y="483.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>Method::from_compiled_entry_no_trampoline() const (1 samples, 0.02%)</title><rect x="10.0" y="467.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>nmethod::verified_entry_point() const (1 samples, 0.02%)</title><rect x="10.3" y="467.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.3" y="478.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.15%)</title><rect x="10.6" y="483.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="10.6" y="467.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.6" y="478.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title><rect x="10.6" y="451.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.6" y="462.0"></text>
</g>
<g>
<title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (5 samples, 0.12%)</title><rect x="10.9" y="467.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.9" y="478.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.05%)</title><rect x="10.9" y="451.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.9" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.05%)</title><rect x="10.9" y="435.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.9" y="446.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="11.4" y="451.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.4" y="462.0"></text>
</g>
<g>
<title>Method::get_c2i_entry() (1 samples, 0.02%)</title><rect x="11.7" y="451.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.7" y="462.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="12.0" y="451.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.0" y="462.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (4,107 samples, 99.49%)</title><rect x="12.3" y="483.0" width="1174.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.3" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (455 samples, 11.02%)</title><rect x="14.0" y="467.0" width="130.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.0" y="478.0">one/nio/net/Java..</text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="16.6" y="451.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="19.6" y="462.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.02%)</title><rect x="16.6" y="435.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="19.6" y="446.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.02%)</title><rect x="16.9" y="451.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.9" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="16.9" y="435.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.9" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.iteratorFor (3 samples, 0.07%)</title><rect x="17.1" y="451.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="462.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title><rect x="18.0" y="451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.0" y="462.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.02%)</title><rect x="18.3" y="451.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.3" y="462.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.02%)</title><rect x="18.3" y="435.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="21.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (438 samples, 10.61%)</title><rect x="18.6" y="451.0" width="125.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.6" y="462.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (436 samples, 10.56%)</title><rect x="19.1" y="435.0" width="124.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="446.0">sun/nio/ch/Sele..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (435 samples, 10.54%)</title><rect x="19.4" y="419.0" width="124.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.4" y="430.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (427 samples, 10.34%)</title><rect x="19.4" y="403.0" width="122.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.4" y="414.0">sun/nio/ch/KQue..</text>
</g>
<g>
<title>Java_sun_nio_ch_KQueue_poll (1 samples, 0.02%)</title><rect x="24.6" y="387.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="27.6" y="398.0"></text>
</g>
<g>
<title>kevent (408 samples, 9.88%)</title><rect x="24.9" y="387.0" width="116.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="27.9" y="398.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processEvents (3 samples, 0.07%)</title><rect x="141.5" y="403.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.05%)</title><rect x="141.5" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="144.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.05%)</title><rect x="141.5" y="371.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (2 samples, 0.05%)</title><rect x="141.5" y="355.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.02%)</title><rect x="142.1" y="387.0" width="0.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="145.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.begin (2 samples, 0.05%)</title><rect x="142.3" y="403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.3" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.begin (2 samples, 0.05%)</title><rect x="142.3" y="387.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.3" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.05%)</title><rect x="142.3" y="371.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="145.3" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.end (2 samples, 0.05%)</title><rect x="142.9" y="403.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.9" y="414.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelector.end (2 samples, 0.05%)</title><rect x="142.9" y="387.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.9" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.05%)</title><rect x="142.9" y="371.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="145.9" y="382.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (2 samples, 0.05%)</title><rect x="142.9" y="355.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="145.9" y="366.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.05%)</title><rect x="142.9" y="339.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.9" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.02%)</title><rect x="143.5" y="403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="146.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.02%)</title><rect x="143.5" y="387.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="146.5" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title><rect x="143.5" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="143.5" y="355.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.5" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title><rect x="143.5" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="146.5" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.02%)</title><rect x="143.8" y="451.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.8" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,646 samples, 88.32%)</title><rect x="144.1" y="467.0" width="1042.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.1" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,646 samples, 88.32%)</title><rect x="144.1" y="451.0" width="1042.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="147.1" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,572 samples, 86.53%)</title><rect x="144.6" y="435.0" width="1021.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="147.6" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (2 samples, 0.05%)</title><rect x="146.1" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.1" y="430.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.02%)</title><rect x="146.6" y="419.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="149.6" y="430.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3,535 samples, 85.63%)</title><rect x="146.9" y="419.0" width="1010.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.9" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (3,535 samples, 85.63%)</title><rect x="146.9" y="403.0" width="1010.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.9" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (3,532 samples, 85.56%)</title><rect x="146.9" y="387.0" width="1009.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.9" y="398.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.05%)</title><rect x="146.9" y="371.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="149.9" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="147.2" y="355.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="150.2" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="147.2" y="339.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="150.2" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (5 samples, 0.12%)</title><rect x="147.5" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.5" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (5 samples, 0.12%)</title><rect x="147.5" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="150.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.07%)</title><rect x="147.8" y="339.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title><rect x="147.8" y="323.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="150.8" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.02%)</title><rect x="147.8" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="150.8" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.02%)</title><rect x="147.8" y="291.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="150.8" y="302.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="147.8" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="150.8" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="147.8" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="150.8" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="147.8" y="243.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="150.8" y="254.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="147.8" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="150.8" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="147.8" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="150.8" y="222.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.02%)</title><rect x="147.8" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="150.8" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="147.8" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="150.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::finish(HeapWord*) const (1 samples, 0.02%)</title><rect x="147.8" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="150.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title><rect x="148.1" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.1" y="318.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.02%)</title><rect x="148.6" y="339.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="151.6" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.entity (3,525 samples, 85.39%)</title><rect x="148.9" y="371.0" width="1007.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.9" y="382.0">ru/mail/polis/service/ReplicationServiceImpl.entity</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.07%)</title><rect x="148.9" y="355.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.9" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="149.5" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="149.5" y="323.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="152.5" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.handleMultipleCase (3,522 samples, 85.32%)</title><rect x="149.8" y="355.0" width="1006.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="152.8" y="366.0">ru/mail/polis/service/ReplicationServiceImpl.handleMultipleCase</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (247 samples, 5.98%)</title><rect x="151.2" y="339.0" width="70.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.2" y="350.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (240 samples, 5.81%)</title><rect x="152.1" y="323.0" width="68.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.1" y="334.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 0.19%)</title><rect x="152.4" y="307.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.4" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (231 samples, 5.60%)</title><rect x="154.6" y="307.0" width="66.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.6" y="318.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session.write (231 samples, 5.60%)</title><rect x="154.6" y="291.0" width="66.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.6" y="302.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (230 samples, 5.57%)</title><rect x="154.6" y="275.0" width="65.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.6" y="286.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaSocket.write (230 samples, 5.57%)</title><rect x="154.6" y="259.0" width="65.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="157.6" y="270.0">one/nio..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7 samples, 0.17%)</title><rect x="154.6" y="243.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="157.6" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.17%)</title><rect x="154.6" y="227.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.6" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.17%)</title><rect x="154.6" y="211.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.6" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.17%)</title><rect x="154.6" y="195.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.6" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.17%)</title><rect x="154.6" y="179.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.6" y="190.0"></text>
</g>
<g>
<title>__cxx_global_var_init.4 (1 samples, 0.02%)</title><rect x="155.5" y="163.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="158.5" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.07%)</title><rect x="155.8" y="163.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="158.8" y="174.0"></text>
</g>
<g>
<title>__chk_fail_overlap.cold.1 (1 samples, 0.02%)</title><rect x="156.1" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="159.1" y="158.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (1 samples, 0.02%)</title><rect x="156.4" y="147.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="159.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (223 samples, 5.40%)</title><rect x="156.6" y="243.0" width="63.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.6" y="254.0">sun/nio..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.07%)</title><rect x="156.6" y="227.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.07%)</title><rect x="156.6" y="211.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.07%)</title><rect x="156.6" y="195.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.07%)</title><rect x="156.6" y="179.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="159.6" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (217 samples, 5.26%)</title><rect x="157.5" y="227.0" width="62.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="238.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (217 samples, 5.26%)</title><rect x="157.5" y="211.0" width="62.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="160.5" y="222.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (217 samples, 5.26%)</title><rect x="157.5" y="195.0" width="62.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="206.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (214 samples, 5.18%)</title><rect x="158.4" y="179.0" width="61.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.4" y="190.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (213 samples, 5.16%)</title><rect x="158.6" y="163.0" width="60.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.6" y="174.0">sun/ni..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (3 samples, 0.07%)</title><rect x="161.2" y="147.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="164.2" y="158.0"></text>
</g>
<g>
<title>write (201 samples, 4.87%)</title><rect x="162.1" y="147.0" width="57.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="165.1" y="158.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.07%)</title><rect x="219.5" y="227.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.5" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.07%)</title><rect x="219.5" y="211.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.5" y="222.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (3 samples, 0.07%)</title><rect x="219.5" y="195.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.5" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.02%)</title><rect x="220.4" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="223.4" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.10%)</title><rect x="220.7" y="323.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.7" y="334.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.07%)</title><rect x="221.0" y="307.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.0" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.07%)</title><rect x="221.0" y="291.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleUpsert (3,270 samples, 79.22%)</title><rect x="221.8" y="339.0" width="934.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="350.0">ru/mail/polis/service/ReplicationHandler.multipleUpsert</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.10%)</title><rect x="223.8" y="323.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.10%)</title><rect x="223.8" y="307.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.8" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.10%)</title><rect x="223.8" y="291.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.8" y="302.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="225.0" y="323.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="228.0" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.put (691 samples, 16.74%)</title><rect x="225.2" y="323.0" width="197.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.2" y="334.0">one/nio/http/HttpClient.put</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (1 samples, 0.02%)</title><rect x="225.2" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.2" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.02%)</title><rect x="225.2" y="291.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.2" y="302.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="225.2" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.02%)</title><rect x="225.2" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title><rect x="225.2" y="243.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (690 samples, 16.72%)</title><rect x="225.5" y="307.0" width="197.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.5" y="318.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (690 samples, 16.72%)</title><rect x="225.5" y="291.0" width="197.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.5" y="302.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (447 samples, 10.83%)</title><rect x="226.7" y="275.0" width="127.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.7" y="286.0">one/nio/http/Htt..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title><rect x="228.7" y="259.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="231.7" y="270.0"></text>
</g>
<g>
<title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.02%)</title><rect x="228.7" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="231.7" y="254.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.02%)</title><rect x="229.0" y="243.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="232.0" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title><rect x="229.0" y="227.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="232.0" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="229.0" y="211.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="232.0" y="222.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="229.0" y="195.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.0" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title><rect x="229.0" y="179.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="232.0" y="190.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.02%)</title><rect x="229.0" y="163.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="232.0" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title><rect x="229.0" y="147.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="232.0" y="158.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="229.0" y="131.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="232.0" y="142.0"></text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (1 samples, 0.02%)</title><rect x="229.2" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.2" y="270.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (437 samples, 10.59%)</title><rect x="229.5" y="259.0" width="125.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="232.5" y="270.0">one/nio/net/Jav..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (437 samples, 10.59%)</title><rect x="229.5" y="243.0" width="125.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.5" y="254.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="230.4" y="227.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="233.4" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (429 samples, 10.39%)</title><rect x="230.7" y="227.0" width="122.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.7" y="238.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (429 samples, 10.39%)</title><rect x="230.7" y="211.0" width="122.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.7" y="222.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (429 samples, 10.39%)</title><rect x="230.7" y="195.0" width="122.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.7" y="206.0">sun/nio/ch/IOUt..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (429 samples, 10.39%)</title><rect x="230.7" y="179.0" width="122.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.7" y="190.0">sun/nio/ch/Sock..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (428 samples, 10.37%)</title><rect x="231.0" y="163.0" width="122.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="174.0">sun/nio/ch/File..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="233.8" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="236.8" y="158.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.02%)</title><rect x="233.8" y="131.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="236.8" y="142.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.02%)</title><rect x="233.8" y="115.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="236.8" y="126.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="233.8" y="99.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="236.8" y="110.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.02%)</title><rect x="234.1" y="147.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="237.1" y="158.0"></text>
</g>
<g>
<title>convertReturnVal (1 samples, 0.02%)</title><rect x="234.4" y="147.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="237.4" y="158.0"></text>
</g>
<g>
<title>rpc_errlist (415 samples, 10.05%)</title><rect x="234.7" y="147.0" width="118.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="237.7" y="158.0">rpc_errlist</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.05%)</title><rect x="353.3" y="227.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.3" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="353.6" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.6" y="222.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="353.6" y="195.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.6" y="206.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.05%)</title><rect x="353.9" y="227.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="356.9" y="238.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="353.9" y="211.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="356.9" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (11 samples, 0.27%)</title><rect x="354.5" y="275.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.5" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (10 samples, 0.24%)</title><rect x="354.5" y="259.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.17%)</title><rect x="355.3" y="243.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.17%)</title><rect x="355.3" y="227.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="358.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.02%)</title><rect x="357.3" y="259.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.3" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="357.3" y="243.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="360.3" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="357.3" y="227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.3" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (1 samples, 0.02%)</title><rect x="357.6" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="360.6" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (15 samples, 0.36%)</title><rect x="357.9" y="275.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="360.9" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.05%)</title><rect x="361.6" y="259.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="361.6" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.6" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="361.6" y="227.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="364.6" y="238.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.05%)</title><rect x="361.6" y="211.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="364.6" y="222.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.05%)</title><rect x="361.6" y="195.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.02%)</title><rect x="362.2" y="275.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.02%)</title><rect x="362.2" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.02%)</title><rect x="362.2" y="243.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.2" y="254.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.writeFully (205 samples, 4.97%)</title><rect x="362.5" y="275.0" width="58.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.5" y="286.0">one/ni..</text>
</g>
<g>
<title>java/nio/channels/Channels$1.write (156 samples, 3.78%)</title><rect x="362.5" y="259.0" width="44.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.5" y="270.0">java..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFully (153 samples, 3.71%)</title><rect x="363.3" y="243.0" width="43.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.3" y="254.0">java..</text>
</g>
<g>
<title>java/nio/channels/Channels.writeFullyImpl (153 samples, 3.71%)</title><rect x="363.3" y="227.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.3" y="238.0">java..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (152 samples, 3.68%)</title><rect x="363.6" y="211.0" width="43.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.6" y="222.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (144 samples, 3.49%)</title><rect x="363.6" y="195.0" width="41.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="366.6" y="206.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (144 samples, 3.49%)</title><rect x="363.6" y="179.0" width="41.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.6" y="190.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (144 samples, 3.49%)</title><rect x="363.6" y="163.0" width="41.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.6" y="174.0">sun..</text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (144 samples, 3.49%)</title><rect x="363.6" y="147.0" width="41.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.6" y="158.0">sun..</text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.02%)</title><rect x="364.2" y="131.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="367.2" y="142.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="364.5" y="131.0" width="0.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="367.5" y="142.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (140 samples, 3.39%)</title><rect x="364.7" y="131.0" width="40.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.7" y="142.0">sun..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.10%)</title><rect x="365.9" y="115.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="368.9" y="126.0"></text>
</g>
<g>
<title>convertReturnVal (2 samples, 0.05%)</title><rect x="367.0" y="115.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="370.0" y="126.0"></text>
</g>
<g>
<title>write (130 samples, 3.15%)</title><rect x="367.6" y="115.0" width="37.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="370.6" y="126.0">write</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.beginWrite (5 samples, 0.12%)</title><rect x="404.8" y="195.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.8" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title><rect x="405.0" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.0" y="190.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title><rect x="405.0" y="163.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.0" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title><rect x="405.0" y="147.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="408.0" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (3 samples, 0.07%)</title><rect x="405.3" y="179.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.3" y="190.0"></text>
</g>
<g>
<title>pthread_self (2 samples, 0.05%)</title><rect x="405.6" y="163.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="408.6" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.07%)</title><rect x="406.2" y="195.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.2" y="206.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="406.5" y="179.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="409.5" y="190.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title><rect x="406.8" y="163.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.8" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor.getOutputStream (49 samples, 1.19%)</title><rect x="407.0" y="259.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="410.0" y="270.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (47 samples, 1.14%)</title><rect x="407.6" y="243.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="410.6" y="254.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.02%)</title><rect x="407.6" y="227.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="410.6" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (3 samples, 0.07%)</title><rect x="407.9" y="227.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="410.9" y="238.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (35 samples, 0.85%)</title><rect x="408.8" y="227.0" width="10.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="411.8" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.02%)</title><rect x="409.9" y="211.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="412.9" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (2 samples, 0.05%)</title><rect x="410.2" y="211.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="413.2" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.02%)</title><rect x="410.5" y="195.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="413.5" y="206.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (1 samples, 0.02%)</title><rect x="410.5" y="179.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="413.5" y="190.0"></text>
</g>
<g>
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.05%)</title><rect x="410.8" y="211.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.8" y="222.0"></text>
</g>
<g>
<title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples, 0.02%)</title><rect x="410.8" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="413.8" y="206.0"></text>
</g>
<g>
<title>OrderAccess::fence() (1 samples, 0.02%)</title><rect x="410.8" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="413.8" y="190.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="411.1" y="195.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="414.1" y="206.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.19%)</title><rect x="411.3" y="211.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="414.3" y="222.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.10%)</title><rect x="412.2" y="195.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="415.2" y="206.0"></text>
</g>
<g>
<title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.07%)</title><rect x="412.2" y="179.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="415.2" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title><rect x="413.1" y="179.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="416.1" y="190.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title><rect x="413.1" y="163.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="416.1" y="174.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="413.3" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="416.3" y="206.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.02%)</title><rect x="413.6" y="211.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="416.6" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="413.9" y="211.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="416.9" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (1 samples, 0.02%)</title><rect x="413.9" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.9" y="206.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="413.9" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="416.9" y="190.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="413.9" y="163.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="416.9" y="174.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="413.9" y="147.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="416.9" y="158.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.02%)</title><rect x="413.9" y="131.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="416.9" y="142.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="414.2" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="417.2" y="222.0"></text>
</g>
<g>
<title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples, 0.02%)</title><rect x="414.5" y="211.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="417.5" y="222.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (2 samples, 0.05%)</title><rect x="414.8" y="211.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="417.8" y="222.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (2 samples, 0.05%)</title><rect x="414.8" y="195.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="417.8" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (12 samples, 0.29%)</title><rect x="415.3" y="211.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="418.3" y="222.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.02%)</title><rect x="415.3" y="195.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="418.3" y="206.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (2 samples, 0.05%)</title><rect x="415.6" y="195.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="418.6" y="206.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (9 samples, 0.22%)</title><rect x="416.2" y="195.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="419.2" y="206.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (1 samples, 0.02%)</title><rect x="416.5" y="179.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="419.5" y="190.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.10%)</title><rect x="416.8" y="179.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.8" y="190.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="416.8" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="419.8" y="174.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.07%)</title><rect x="417.1" y="163.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="420.1" y="174.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.07%)</title><rect x="417.1" y="147.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="420.1" y="158.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.05%)</title><rect x="417.1" y="131.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="420.1" y="142.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (2 samples, 0.05%)</title><rect x="417.1" y="115.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="420.1" y="126.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.02%)</title><rect x="417.6" y="131.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="420.6" y="142.0"></text>
</g>
<g>
<title>vframeStreamCommon::fill_from_frame() (3 samples, 0.07%)</title><rect x="417.9" y="179.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="420.9" y="190.0"></text>
</g>
<g>
<title>CompiledMethod::find_pc_desc(unsigned char*, bool) (3 samples, 0.07%)</title><rect x="417.9" y="163.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="420.9" y="174.0"></text>
</g>
<g>
<title>PcDescCache::find_pc_desc(int, bool) (2 samples, 0.05%)</title><rect x="418.2" y="147.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="421.2" y="158.0"></text>
</g>
<g>
<title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="418.8" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="421.8" y="238.0"></text>
</g>
<g>
<title>Method::is_method() const volatile (1 samples, 0.02%)</title><rect x="419.1" y="227.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="422.1" y="238.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.02%)</title><rect x="419.3" y="227.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="422.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title><rect x="419.6" y="227.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="422.6" y="238.0"></text>
</g>
<g>
<title>methodHandle::~methodHandle() (1 samples, 0.02%)</title><rect x="419.9" y="227.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="422.9" y="238.0"></text>
</g>
<g>
<title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples, 0.02%)</title><rect x="420.2" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="423.2" y="238.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketAdaptor$2.run (1 samples, 0.02%)</title><rect x="420.5" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="423.5" y="238.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.02%)</title><rect x="420.8" y="227.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="423.8" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (4 samples, 0.10%)</title><rect x="421.1" y="275.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="424.1" y="286.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)</title><rect x="421.3" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="424.3" y="270.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.02%)</title><rect x="421.3" y="243.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="424.3" y="254.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.02%)</title><rect x="421.3" y="227.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="424.3" y="238.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (2 samples, 0.05%)</title><rect x="421.6" y="259.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="424.6" y="270.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (2 samples, 0.05%)</title><rect x="422.2" y="275.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.2" y="286.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (3 samples, 0.07%)</title><rect x="422.8" y="323.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.8" y="334.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="423.3" y="307.0" width="0.3" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="426.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.02%)</title><rect x="423.6" y="323.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.02%)</title><rect x="423.6" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.6" y="318.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.02%)</title><rect x="423.9" y="323.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="426.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.upsertValue (2,561 samples, 62.04%)</title><rect x="424.2" y="323.0" width="732.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.2" y="334.0">ru/mail/polis/dao/DaoEngine.upsertValue</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,554 samples, 61.87%)</title><rect x="424.2" y="307.0" width="730.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.2" y="318.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,547 samples, 61.70%)</title><rect x="425.1" y="291.0" width="728.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="428.1" y="302.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,544 samples, 61.63%)</title><rect x="425.9" y="275.0" width="727.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="428.9" y="286.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>ZBUFFv07_recommendedDOutSize (4 samples, 0.10%)</title><rect x="425.9" y="259.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="428.9" y="270.0"></text>
</g>
<g>
<title>__cxxabiv1::get_shim_type_info(unsigned long long, unsigned char const*, unsigned char, bool, _Unwind_Exception*) (1 samples, 0.02%)</title><rect x="427.1" y="259.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="430.1" y="270.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.05%)</title><rect x="427.3" y="259.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="430.3" y="270.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="427.9" y="259.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="430.9" y="270.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.02%)</title><rect x="428.2" y="259.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="431.2" y="270.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,535 samples, 61.41%)</title><rect x="428.5" y="259.0" width="724.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="431.5" y="270.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (3 samples, 0.07%)</title><rect x="428.8" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="431.8" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="429.6" y="243.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="432.6" y="254.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title><rect x="429.9" y="243.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="432.9" y="254.0"></text>
</g>
<g>
<title>__ulock_wake (1 samples, 0.02%)</title><rect x="430.2" y="243.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="433.2" y="254.0"></text>
</g>
<g>
<title>compiler_barrier() (1 samples, 0.02%)</title><rect x="430.5" y="243.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="433.5" y="254.0"></text>
</g>
<g>
<title>free (2 samples, 0.05%)</title><rect x="430.8" y="243.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="433.8" y="254.0"></text>
</g>
<g>
<title>szone_size (2 samples, 0.05%)</title><rect x="430.8" y="227.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="433.8" y="238.0"></text>
</g>
<g>
<title>tiny_size (2 samples, 0.05%)</title><rect x="430.8" y="211.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="433.8" y="222.0"></text>
</g>
<g>
<title>free_tiny (5 samples, 0.12%)</title><rect x="431.3" y="243.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="434.3" y="254.0"></text>
</g>
<g>
<title>tiny_free_no_lock (5 samples, 0.12%)</title><rect x="431.3" y="227.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="434.3" y="238.0"></text>
</g>
<g>
<title>tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="432.2" y="211.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="435.2" y="222.0"></text>
</g>
<g>
<title>tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="432.5" y="211.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="435.5" y="222.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.07%)</title><rect x="432.8" y="243.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="435.8" y="254.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.02%)</title><rect x="432.8" y="227.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="435.8" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2 samples, 0.05%)</title><rect x="433.1" y="227.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="436.1" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (2 samples, 0.05%)</title><rect x="433.1" y="211.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="436.1" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title><rect x="433.3" y="195.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="436.3" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="433.3" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="436.3" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="433.3" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="436.3" y="174.0"></text>
</g>
<g>
<title>ScopedFenceGeneral&lt;(ScopedFenceType)0&gt;::prefix() (1 samples, 0.02%)</title><rect x="433.3" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="436.3" y="158.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (16 samples, 0.39%)</title><rect x="433.6" y="243.0" width="4.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="436.6" y="254.0"></text>
</g>
<g>
<title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title><rect x="435.3" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="438.3" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (6 samples, 0.15%)</title><rect x="435.6" y="227.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="438.6" y="238.0"></text>
</g>
<g>
<title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.12%)</title><rect x="435.6" y="211.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="438.6" y="222.0"></text>
</g>
<g>
<title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title><rect x="436.2" y="195.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="439.2" y="206.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3 samples, 0.07%)</title><rect x="436.2" y="179.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="439.2" y="190.0"></text>
</g>
<g>
<title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;, void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)</title><rect x="436.2" y="163.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="439.2" y="174.0"></text>
</g>
<g>
<title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title><rect x="436.2" y="147.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="439.2" y="158.0"></text>
</g>
<g>
<title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples, 0.02%)</title><rect x="436.5" y="147.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.5" y="158.0"></text>
</g>
<g>
<title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)</title><rect x="436.8" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="439.8" y="174.0"></text>
</g>
<g>
<title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title><rect x="437.1" y="211.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="440.1" y="222.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="437.3" y="227.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="440.3" y="238.0"></text>
</g>
<g>
<title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**) (2 samples, 0.05%)</title><rect x="437.6" y="227.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="440.6" y="238.0"></text>
</g>
<g>
<title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::oop_load&lt;oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="437.9" y="211.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="440.9" y="222.0"></text>
</g>
<g>
<title>EnableIf&lt;HasDecorator&lt;1097844ull, MO_UNORDERED&gt;::value, oopDesc*&gt;::type RawAccessBarrier&lt;1097844ull&gt;::load_internal&lt;1097844ull, oopDesc*&gt;(void*) (1 samples, 0.02%)</title><rect x="437.9" y="195.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="440.9" y="206.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="438.2" y="243.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="441.2" y="254.0"></text>
</g>
<g>
<title>operator new(unsigned long) (13 samples, 0.31%)</title><rect x="438.5" y="243.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="441.5" y="254.0"></text>
</g>
<g>
<title>malloc (13 samples, 0.31%)</title><rect x="438.5" y="227.0" width="3.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="441.5" y="238.0"></text>
</g>
<g>
<title>malloc_zone_malloc (11 samples, 0.27%)</title><rect x="438.5" y="211.0" width="3.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="441.5" y="222.0"></text>
</g>
<g>
<title>default_zone_malloc (3 samples, 0.07%)</title><rect x="438.5" y="195.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="441.5" y="206.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (8 samples, 0.19%)</title><rect x="439.4" y="195.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="442.4" y="206.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="439.4" y="179.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="442.4" y="190.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (6 samples, 0.15%)</title><rect x="439.9" y="179.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="442.9" y="190.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title><rect x="440.5" y="163.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="443.5" y="174.0"></text>
</g>
<g>
<title>set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="440.8" y="163.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="443.8" y="174.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (2 samples, 0.05%)</title><rect x="441.1" y="163.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="444.1" y="174.0"></text>
</g>
<g>
<title>szone_malloc (2 samples, 0.05%)</title><rect x="441.6" y="211.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="444.6" y="222.0"></text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (2,487 samples, 60.25%)</title><rect x="442.2" y="243.0" width="710.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="445.2" y="254.0">rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,486 samples, 60.22%)</title><rect x="442.5" y="227.0" width="710.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="445.5" y="238.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice con..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,485 samples, 60.20%)</title><rect x="442.5" y="211.0" width="710.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="445.5" y="222.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;,..</text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="442.5" y="195.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="445.5" y="206.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.02%)</title><rect x="442.8" y="195.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="445.8" y="206.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,465 samples, 59.71%)</title><rect x="443.1" y="195.0" width="704.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="446.1" y="206.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*)</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title><rect x="443.6" y="179.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="446.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (2,455 samples, 59.47%)</title><rect x="443.9" y="179.0" width="701.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="446.9" y="190.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallb..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (5 samples, 0.12%)</title><rect x="448.2" y="163.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="451.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.05%)</title><rect x="449.6" y="163.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="452.6" y="174.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (181 samples, 4.38%)</title><rect x="450.2" y="163.0" width="51.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="453.2" y="174.0">rocks..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (179 samples, 4.34%)</title><rect x="450.2" y="147.0" width="51.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.2" y="158.0">rocks..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (179 samples, 4.34%)</title><rect x="450.2" y="131.0" width="51.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="453.2" y="142.0">rocks..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (167 samples, 4.05%)</title><rect x="450.5" y="115.0" width="47.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="453.5" y="126.0">rock..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (4 samples, 0.10%)</title><rect x="451.6" y="99.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="454.6" y="110.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (1 samples, 0.02%)</title><rect x="452.8" y="99.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="455.8" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (158 samples, 3.83%)</title><rect x="453.1" y="99.0" width="45.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="456.1" y="110.0">rock..</text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.02%)</title><rect x="453.6" y="83.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="456.6" y="94.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.02%)</title><rect x="453.9" y="83.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="456.9" y="94.0"></text>
</g>
<g>
<title>write (154 samples, 3.73%)</title><rect x="454.2" y="83.0" width="44.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="457.2" y="94.0">write</text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (4 samples, 0.10%)</title><rect x="498.2" y="115.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="501.2" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (7 samples, 0.17%)</title><rect x="499.4" y="115.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="502.4" y="126.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="499.7" y="99.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="502.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::PosixDirectory::Fsync(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.02%)</title><rect x="500.0" y="99.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="503.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (4 samples, 0.10%)</title><rect x="500.2" y="99.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="503.2" y="110.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="501.1" y="83.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="504.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (1 samples, 0.02%)</title><rect x="501.4" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="504.4" y="158.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="501.4" y="131.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="504.4" y="142.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="501.4" y="115.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="504.4" y="126.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="501.7" y="147.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="504.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (1 samples, 0.02%)</title><rect x="502.0" y="163.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="505.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="502.2" y="163.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="505.2" y="174.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.02%)</title><rect x="502.5" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="505.5" y="174.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.02%)</title><rect x="502.8" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="505.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (45 samples, 1.09%)</title><rect x="503.1" y="163.0" width="12.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="506.1" y="174.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (1 samples, 0.02%)</title><rect x="503.4" y="147.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="506.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (43 samples, 1.04%)</title><rect x="503.7" y="147.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="506.7" y="158.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (3 samples, 0.07%)</title><rect x="504.0" y="131.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="507.0" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (39 samples, 0.94%)</title><rect x="504.8" y="131.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="507.8" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (38 samples, 0.92%)</title><rect x="505.1" y="115.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="508.1" y="126.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (35 samples, 0.85%)</title><rect x="505.7" y="99.0" width="10.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="508.7" y="110.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="507.1" y="83.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="510.1" y="94.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (2 samples, 0.05%)</title><rect x="507.4" y="83.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="510.4" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (27 samples, 0.65%)</title><rect x="508.0" y="83.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="511.0" y="94.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title><rect x="512.8" y="67.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="515.8" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="513.1" y="67.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="516.1" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetMinLogContainingPrepSection() (1 samples, 0.02%)</title><rect x="513.1" y="51.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="516.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.17%)</title><rect x="513.4" y="67.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.4" y="78.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title><rect x="513.7" y="51.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="516.7" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (4 samples, 0.10%)</title><rect x="514.0" y="51.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="517.0" y="62.0"></text>
</g>
<g>
<title>_platform_memcmp (2 samples, 0.05%)</title><rect x="514.5" y="35.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="517.5" y="46.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="515.1" y="51.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="518.1" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="515.4" y="67.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="518.4" y="78.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (1 samples, 0.02%)</title><rect x="515.7" y="99.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="518.7" y="110.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (13 samples, 0.31%)</title><rect x="516.0" y="163.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="519.0" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.05%)</title><rect x="516.0" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="519.0" y="158.0"></text>
</g>
<g>
<title>Java_org_rocksdb_MemoryUtil_getApproximateMemoryUsageByType (1 samples, 0.02%)</title><rect x="516.0" y="131.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="519.0" y="142.0"></text>
</g>
<g>
<title>free_tiny (1 samples, 0.02%)</title><rect x="516.2" y="131.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="519.2" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (11 samples, 0.27%)</title><rect x="516.5" y="147.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="519.5" y="158.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (11 samples, 0.27%)</title><rect x="516.5" y="131.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="519.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (1 samples, 0.02%)</title><rect x="516.5" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="519.5" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (10 samples, 0.24%)</title><rect x="516.8" y="115.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="519.8" y="126.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.02%)</title><rect x="516.8" y="99.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="519.8" y="110.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.07%)</title><rect x="517.1" y="99.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="520.1" y="110.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.07%)</title><rect x="517.1" y="83.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="520.1" y="94.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.07%)</title><rect x="517.1" y="67.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="520.1" y="78.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="517.1" y="51.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="520.1" y="62.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.07%)</title><rect x="517.1" y="35.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="520.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (6 samples, 0.15%)</title><rect x="518.0" y="99.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.0" y="110.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.15%)</title><rect x="518.0" y="83.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="521.0" y="94.0"></text>
</g>
<g>
<title>rocksdb::SkipListFactory::CreateMemTableRep(rocksdb::MemTableRep::KeyComparator const&amp;, rocksdb::Allocator*, rocksdb::SliceTransform const*, rocksdb::Logger*) (6 samples, 0.15%)</title><rect x="518.0" y="67.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="521.0" y="78.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.05%)</title><rect x="518.8" y="51.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="521.8" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="519.1" y="35.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.1" y="46.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.02%)</title><rect x="519.4" y="51.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="522.4" y="62.0"></text>
</g>
<g>
<title>rocksdb::ReverseBytewiseComparator() (1 samples, 0.02%)</title><rect x="519.4" y="35.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.4" y="46.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="519.7" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="522.7" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1,245 samples, 30.16%)</title><rect x="520.0" y="163.0" width="355.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="523.0" y="174.0">rocksdb::WriteThread::AwaitState(rocksdb::WriteT..</text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title><rect x="533.4" y="147.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="536.4" y="158.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="533.7" y="147.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="536.7" y="158.0"></text>
</g>
<g>
<title>sched_yield (1 samples, 0.02%)</title><rect x="534.0" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="537.0" y="158.0"></text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (1,173 samples, 28.42%)</title><rect x="534.3" y="147.0" width="335.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="537.3" y="158.0">si_module_static_mdns.mdns_vtable</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (3 samples, 0.07%)</title><rect x="869.6" y="147.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.6" y="158.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.07%)</title><rect x="869.6" y="131.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="872.6" y="142.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.02%)</title><rect x="869.6" y="115.0" width="0.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="872.6" y="126.0"></text>
</g>
<g>
<title>clock_gettime_nsec_np (2 samples, 0.05%)</title><rect x="869.8" y="115.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="872.8" y="126.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.02%)</title><rect x="870.1" y="99.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="873.1" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (19 samples, 0.46%)</title><rect x="870.4" y="147.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="873.4" y="158.0"></text>
</g>
<g>
<title>__psynch_cvwait (19 samples, 0.46%)</title><rect x="870.4" y="131.0" width="5.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="873.4" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (938 samples, 22.72%)</title><rect x="875.8" y="163.0" width="268.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="878.8" y="174.0">rocksdb::WriteThread::CompleteParall..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (938 samples, 22.72%)</title><rect x="875.8" y="147.0" width="268.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="878.8" y="158.0">rocksdb::WriteThread::AwaitState(roc..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (912 samples, 22.09%)</title><rect x="881.3" y="131.0" width="260.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="884.3" y="142.0">si_module_static_mdns.mdns_vtable</text>
</g>
<g>
<title>std::__1::chrono::steady_clock::now() (1 samples, 0.02%)</title><rect x="1142.0" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.0" y="142.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.02%)</title><rect x="1142.0" y="115.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1145.0" y="126.0"></text>
</g>
<g>
<title>__block_literal_global (1 samples, 0.02%)</title><rect x="1142.0" y="99.0" width="0.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1145.0" y="110.0"></text>
</g>
<g>
<title>std::__1::condition_variable::wait(std::__1::unique_lock&lt;std::__1::mutex&gt;&amp;) (6 samples, 0.15%)</title><rect x="1142.3" y="131.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.3" y="142.0"></text>
</g>
<g>
<title>__psynch_cvwait (6 samples, 0.15%)</title><rect x="1142.3" y="115.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1145.3" y="126.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.07%)</title><rect x="1144.0" y="163.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.0" y="174.0"></text>
</g>
<g>
<title>std::__1::condition_variable::notify_one() (1 samples, 0.02%)</title><rect x="1144.5" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.5" y="158.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.02%)</title><rect x="1144.5" y="131.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1147.5" y="142.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (1 samples, 0.02%)</title><rect x="1144.8" y="163.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.8" y="174.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::__1::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.02%)</title><rect x="1144.8" y="147.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.8" y="158.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1145.1" y="163.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.1" y="174.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.02%)</title><rect x="1145.4" y="163.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.4" y="174.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyUserComparator(rocksdb::ColumnFamilyHandle*) (1 samples, 0.02%)</title><rect x="1145.4" y="147.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.4" y="158.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (1 samples, 0.02%)</title><rect x="1145.7" y="179.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1146.0" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.0" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.02%)</title><rect x="1146.3" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.3" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long long, rocksdb::DB*, bool, bool, bool) (1 samples, 0.02%)</title><rect x="1146.6" y="179.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.02%)</title><rect x="1146.8" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.8" y="190.0"></text>
</g>
<g>
<title>thread-local wrapper routine for rocksdb::perf_context (1 samples, 0.02%)</title><rect x="1147.1" y="179.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.1" y="190.0"></text>
</g>
<g>
<title>void* std::__1::__thread_proxy&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt; &gt;, rocksdb::RepeatableThread::RepeatableThread(std::__1::function&lt;void ()&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::Env*, unsigned long long, unsigned long long)::'lambda'()&gt; &gt;(void*) (1 samples, 0.02%)</title><rect x="1147.4" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="190.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (3 samples, 0.07%)</title><rect x="1147.7" y="195.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.7" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.07%)</title><rect x="1148.6" y="195.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.02%)</title><rect x="1148.6" y="179.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.6" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="1148.8" y="179.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="190.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1148.8" y="163.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1151.8" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="1149.1" y="179.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.17%)</title><rect x="1149.4" y="195.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.4" y="206.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.02%)</title><rect x="1149.4" y="179.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1152.4" y="190.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::reserve(unsigned long) (3 samples, 0.07%)</title><rect x="1149.7" y="179.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.7" y="190.0"></text>
</g>
<g>
<title>operator new(unsigned long) (3 samples, 0.07%)</title><rect x="1149.7" y="163.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1152.7" y="174.0"></text>
</g>
<g>
<title>malloc (3 samples, 0.07%)</title><rect x="1149.7" y="147.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1152.7" y="158.0"></text>
</g>
<g>
<title>malloc_zone_malloc (3 samples, 0.07%)</title><rect x="1149.7" y="131.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1152.7" y="142.0"></text>
</g>
<g>
<title>szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="1149.7" y="115.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1152.7" y="126.0"></text>
</g>
<g>
<title>tiny_malloc_should_clear (3 samples, 0.07%)</title><rect x="1149.7" y="99.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1152.7" y="110.0"></text>
</g>
<g>
<title>tiny_malloc_from_free_list (3 samples, 0.07%)</title><rect x="1149.7" y="83.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1152.7" y="94.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (2 samples, 0.05%)</title><rect x="1150.6" y="179.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.6" y="190.0"></text>
</g>
<g>
<title>_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1150.6" y="163.0" width="0.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1153.6" y="174.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::append(unsigned long, char) (1 samples, 0.02%)</title><rect x="1150.8" y="163.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="174.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="1150.8" y="147.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1153.8" y="158.0"></text>
</g>
<g>
<title>std::__1::moneypunct_byname&lt;wchar_t, true&gt;::moneypunct_byname(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, unsigned long) (.cold.1) (1 samples, 0.02%)</title><rect x="1151.1" y="179.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.1" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (3 samples, 0.07%)</title><rect x="1151.4" y="195.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.4" y="206.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="1151.4" y="179.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1154.4" y="190.0"></text>
</g>
<g>
<title>free_tiny (2 samples, 0.05%)</title><rect x="1151.7" y="179.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1154.7" y="190.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.02%)</title><rect x="1152.3" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.3" y="206.0"></text>
</g>
<g>
<title>std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;::resize(unsigned long, char) (1 samples, 0.02%)</title><rect x="1152.6" y="195.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.6" y="206.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1152.8" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.8" y="222.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.10%)</title><rect x="1153.1" y="291.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="302.0"></text>
</g>
<g>
<title>__commpage_gettimeofday (2 samples, 0.05%)</title><rect x="1153.4" y="275.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1156.4" y="286.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.02%)</title><rect x="1154.0" y="275.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1157.0" y="286.0"></text>
</g>
<g>
<title>__commpage_gettimeofday_internal (1 samples, 0.02%)</title><rect x="1154.0" y="259.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1157.0" y="270.0"></text>
</g>
<g>
<title>xdrmem_ops_unaligned (1 samples, 0.02%)</title><rect x="1154.0" y="243.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1157.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/util/Util.toShiftedArray (7 samples, 0.17%)</title><rect x="1154.3" y="307.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1157.3" y="318.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1155.7" y="291.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1158.7" y="302.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title><rect x="1156.0" y="291.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1159.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/Topology.getReplicas (1 samples, 0.02%)</title><rect x="1156.3" y="323.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1159.3" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.02%)</title><rect x="1156.3" y="307.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1159.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.07%)</title><rect x="1156.6" y="387.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1159.6" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.07%)</title><rect x="1156.6" y="371.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1159.6" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.07%)</title><rect x="1156.6" y="355.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1159.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.07%)</title><rect x="1156.6" y="339.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1159.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.07%)</title><rect x="1156.6" y="323.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1159.6" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (8 samples, 0.19%)</title><rect x="1157.4" y="419.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.15%)</title><rect x="1157.4" y="403.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.4" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.12%)</title><rect x="1157.7" y="387.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1160.7" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.05%)</title><rect x="1159.1" y="403.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1162.1" y="414.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.12%)</title><rect x="1159.7" y="419.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1162.7" y="430.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.10%)</title><rect x="1159.7" y="403.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1162.7" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.10%)</title><rect x="1159.7" y="387.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1162.7" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.02%)</title><rect x="1160.8" y="403.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1163.8" y="414.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title><rect x="1160.8" y="387.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1163.8" y="398.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.39%)</title><rect x="1161.1" y="419.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1164.1" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.15%)</title><rect x="1164.0" y="403.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1167.0" y="414.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (72 samples, 1.74%)</title><rect x="1165.7" y="435.0" width="20.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1168.7" y="446.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (69 samples, 1.67%)</title><rect x="1166.6" y="419.0" width="19.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1169.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (69 samples, 1.67%)</title><rect x="1166.6" y="403.0" width="19.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1169.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 1.57%)</title><rect x="1167.1" y="387.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1170.1" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (65 samples, 1.57%)</title><rect x="1167.1" y="371.0" width="18.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1170.1" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (65 samples, 1.57%)</title><rect x="1167.1" y="355.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1170.1" y="366.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (65 samples, 1.57%)</title><rect x="1167.1" y="339.0" width="18.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1170.1" y="350.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (63 samples, 1.53%)</title><rect x="1167.7" y="323.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1170.7" y="334.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title><rect x="1168.0" y="307.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1171.0" y="318.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.05%)</title><rect x="1168.0" y="291.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1171.0" y="302.0"></text>
</g>
<g>
<title>rpc_errlist (60 samples, 1.45%)</title><rect x="1168.6" y="307.0" width="17.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1171.6" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.05%)</title><rect x="1185.7" y="387.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.05%)</title><rect x="1185.7" y="371.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>thread_start (13 samples, 0.31%)</title><rect x="1186.3" y="483.0" width="3.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1189.3" y="494.0"></text>
</g>
<g>
<title>_pthread_start (13 samples, 0.31%)</title><rect x="1186.3" y="467.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.3" y="478.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (13 samples, 0.31%)</title><rect x="1186.3" y="451.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1189.3" y="462.0"></text>
</g>
<g>
<title>Thread::call_run() (13 samples, 0.31%)</title><rect x="1186.3" y="435.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="446.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.05%)</title><rect x="1186.3" y="419.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.3" y="430.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (2 samples, 0.05%)</title><rect x="1186.3" y="403.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.05%)</title><rect x="1186.3" y="387.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="398.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.05%)</title><rect x="1186.3" y="371.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="382.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.05%)</title><rect x="1186.3" y="355.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="366.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.05%)</title><rect x="1186.3" y="339.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.3" y="350.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.05%)</title><rect x="1186.3" y="323.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.3" y="334.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.17%)</title><rect x="1186.9" y="419.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.9" y="430.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.02%)</title><rect x="1186.9" y="403.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="414.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::do_parallel_work_for_region(unsigned int, bool, bool) (1 samples, 0.02%)</title><rect x="1186.9" y="387.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.9" y="398.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.10%)</title><rect x="1187.1" y="403.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.10%)</title><rect x="1187.1" y="387.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="398.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1187.1" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="382.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.07%)</title><rect x="1187.4" y="371.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.4" y="382.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 0.05%)</title><rect x="1188.3" y="403.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="414.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 0.05%)</title><rect x="1188.3" y="387.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1191.3" y="398.0"></text>
</g>
<g>
<title>JavaThread::run() (1 samples, 0.02%)</title><rect x="1188.9" y="419.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="1188.9" y="403.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="414.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.02%)</title><rect x="1188.9" y="387.0" width="0.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1191.9" y="398.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.02%)</title><rect x="1188.9" y="371.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1191.9" y="382.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.05%)</title><rect x="1189.1" y="419.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.1" y="430.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.05%)</title><rect x="1189.1" y="403.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.1" y="414.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.05%)</title><rect x="1189.1" y="387.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.1" y="398.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.05%)</title><rect x="1189.1" y="371.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="382.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.05%)</title><rect x="1189.1" y="355.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.05%)</title><rect x="1189.1" y="339.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.02%)</title><rect x="1189.1" y="323.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.1" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet*) (1 samples, 0.02%)</title><rect x="1189.1" y="307.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.1" y="318.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.02%)</title><rect x="1189.1" y="291.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.1" y="302.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.02%)</title><rect x="1189.1" y="275.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="286.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.02%)</title><rect x="1189.1" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.1" y="270.0"></text>
</g>
<g>
<title>free (1 samples, 0.02%)</title><rect x="1189.1" y="243.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1192.1" y="254.0"></text>
</g>
<g>
<title>szone_size (1 samples, 0.02%)</title><rect x="1189.1" y="227.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1192.1" y="238.0"></text>
</g>
<g>
<title>tiny_size (1 samples, 0.02%)</title><rect x="1189.1" y="211.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.1" y="222.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.02%)</title><rect x="1189.4" y="323.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.4" y="334.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.02%)</title><rect x="1189.4" y="307.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.4" y="318.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.02%)</title><rect x="1189.4" y="291.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.4" y="302.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.02%)</title><rect x="1189.4" y="275.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.4" y="286.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.02%)</title><rect x="1189.4" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.4" y="270.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write(char const*, __va_list_tag*, bool) (1 samples, 0.02%)</title><rect x="1189.4" y="243.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.4" y="254.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.02%)</title><rect x="1189.4" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.4" y="238.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.02%)</title><rect x="1189.4" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.4" y="222.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1189.4" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.4" y="206.0"></text>
</g>
<g>
<title>GCId::print_prefix(char*, unsigned long) (1 samples, 0.02%)</title><rect x="1189.4" y="179.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="190.0"></text>
</g>
<g>
<title>jio_snprintf (1 samples, 0.02%)</title><rect x="1189.4" y="163.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1192.4" y="174.0"></text>
</g>
<g>
<title>os::vsnprintf(char*, unsigned long, char const*, __va_list_tag*) (1 samples, 0.02%)</title><rect x="1189.4" y="147.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.4" y="158.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.02%)</title><rect x="1189.4" y="131.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1192.4" y="142.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.02%)</title><rect x="1189.4" y="115.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1192.4" y="126.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.02%)</title><rect x="1189.4" y="99.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1192.4" y="110.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.02%)</title><rect x="1189.4" y="83.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1192.4" y="94.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.02%)</title><rect x="1189.7" y="419.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.7" y="430.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.02%)</title><rect x="1189.7" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.7" y="414.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title><rect x="1189.7" y="387.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.7" y="398.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title><rect x="1189.7" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.7" y="382.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title><rect x="1189.7" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.7" y="366.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.02%)</title><rect x="1189.7" y="339.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1192.7" y="350.0"></text>
</g>
</g>
</svg>
