<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (135 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (57 samples, 42.22%)</title><rect x="10.0" y="963.0" width="498.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (57 samples, 42.22%)</title><rect x="10.0" y="947.0" width="498.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (57 samples, 42.22%)</title><rect x="10.0" y="931.0" width="498.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$AsyncSupply.run (47 samples, 34.81%)</title><rect x="10.0" y="915.0" width="410.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="926.0">java/util/concurrent/CompletableFuture$AsyncSupply.run</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 12.59%)</title><rect x="10.0" y="899.0" width="148.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="910.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompose.tryFire (17 samples, 12.59%)</title><rect x="10.0" y="883.0" width="148.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="894.0">java/util/concurren..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange$$Lambda$151/161472302.apply (17 samples, 12.59%)</title><rect x="10.0" y="867.0" width="148.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="878.0">jdk/internal/net/ht..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.lambda$responseAsync0$2 (17 samples, 12.59%)</title><rect x="10.0" y="851.0" width="148.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">jdk/internal/net/ht..</text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsyncImpl (17 samples, 12.59%)</title><rect x="10.0" y="835.0" width="148.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="846.0">jdk/internal/net/ht..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsync (16 samples, 11.85%)</title><rect x="10.0" y="819.0" width="139.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="830.0">jdk/internal/net/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl (16 samples, 11.85%)</title><rect x="10.0" y="803.0" width="139.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="814.0">jdk/internal/net/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.responseAsyncImpl0 (16 samples, 11.85%)</title><rect x="10.0" y="787.0" width="139.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="798.0">jdk/internal/net/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (5 samples, 3.70%)</title><rect x="10.0" y="771.0" width="43.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (5 samples, 3.70%)</title><rect x="10.0" y="755.0" width="43.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (5 samples, 3.70%)</title><rect x="10.0" y="739.0" width="43.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="750.0">java..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$373/1682020352.apply (5 samples, 3.70%)</title><rect x="10.0" y="723.0" width="43.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="734.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$9 (5 samples, 3.70%)</title><rect x="10.0" y="707.0" width="43.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="718.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.checkFor407 (5 samples, 3.70%)</title><rect x="10.0" y="691.0" width="43.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="702.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange$$Lambda$217/2005123261.apply (5 samples, 3.70%)</title><rect x="10.0" y="675.0" width="43.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="686.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.lambda$responseAsyncImpl0$8 (5 samples, 3.70%)</title><rect x="10.0" y="659.0" width="43.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="670.0">jdk/..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.sendHeadersAsync (5 samples, 3.70%)</title><rect x="10.0" y="643.0" width="43.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="654.0">jdk/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.74%)</title><rect x="10.0" y="627.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange$$Lambda$425/1256729928.get$Lambda (1 samples, 0.74%)</title><rect x="10.0" y="611.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.connectAsync (4 samples, 2.96%)</title><rect x="18.7" y="627.0" width="35.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.7" y="638.0">jd..</text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (4 samples, 2.96%)</title><rect x="18.7" y="611.0" width="35.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.7" y="622.0">ja..</text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection$$Lambda$421/352937006.run (4 samples, 2.96%)</title><rect x="18.7" y="595.0" width="35.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="606.0">jd..</text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.lambda$connectAsync$0 (4 samples, 2.96%)</title><rect x="18.7" y="579.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="590.0">jd..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.connect (4 samples, 2.96%)</title><rect x="18.7" y="563.0" width="35.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.7" y="574.0">su..</text>
</g>
<g>
<title>sun/nio/ch/Net.connect (4 samples, 2.96%)</title><rect x="18.7" y="547.0" width="35.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.7" y="558.0">su..</text>
</g>
<g>
<title>sun/nio/ch/Net.connect (4 samples, 2.96%)</title><rect x="18.7" y="531.0" width="35.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.7" y="542.0">su..</text>
</g>
<g>
<title>sun/nio/ch/Net.connect0 (4 samples, 2.96%)</title><rect x="18.7" y="515.0" width="35.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.7" y="526.0">su..</text>
</g>
<g>
<title>connect (4 samples, 2.96%)</title><rect x="18.7" y="499.0" width="35.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="21.7" y="510.0">co..</text>
</g>
<g>
<title>jdk/internal/net/http/Exchange.establishExchange (11 samples, 8.15%)</title><rect x="53.7" y="771.0" width="96.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.7" y="782.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.get (11 samples, 8.15%)</title><rect x="53.7" y="755.0" width="96.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.7" y="766.0">jdk/interna..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.handle (11 samples, 8.15%)</title><rect x="53.7" y="739.0" width="96.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.7" y="750.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandleStage (11 samples, 8.15%)</title><rect x="53.7" y="723.0" width="96.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="56.7" y="734.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniHandle (11 samples, 8.15%)</title><rect x="53.7" y="707.0" width="96.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.7" y="718.0">java/util/c..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl$$Lambda$221/322175225.apply (11 samples, 8.15%)</title><rect x="53.7" y="691.0" width="96.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.7" y="702.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.lambda$get$0 (11 samples, 8.15%)</title><rect x="53.7" y="675.0" width="96.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="56.7" y="686.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createExchangeImpl (11 samples, 8.15%)</title><rect x="53.7" y="659.0" width="96.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.7" y="670.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/ExchangeImpl.createHttp1Exchange (11 samples, 8.15%)</title><rect x="53.7" y="643.0" width="96.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.7" y="654.0">jdk/interna..</text>
</g>
<g>
<title>jdk/internal/net/http/Http1Exchange.&lt;init&gt; (11 samples, 8.15%)</title><rect x="53.7" y="627.0" width="96.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.7" y="638.0">jdk/interna..</text>
</g>
<g>
<title>java/util/LinkedList.add (1 samples, 0.74%)</title><rect x="53.7" y="611.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.7" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkLast (1 samples, 0.74%)</title><rect x="53.7" y="595.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.7" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getConnection (8 samples, 5.93%)</title><rect x="62.4" y="611.0" width="70.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.4" y="622.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpConnection.getPlainConnection (8 samples, 5.93%)</title><rect x="62.4" y="595.0" width="70.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.4" y="606.0">jdk/int..</text>
</g>
<g>
<title>jdk/internal/net/http/PlainHttpConnection.&lt;init&gt; (8 samples, 5.93%)</title><rect x="62.4" y="579.0" width="70.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="590.0">jdk/int..</text>
</g>
<g>
<title>java/nio/channels/SocketChannel.open (7 samples, 5.19%)</title><rect x="62.4" y="563.0" width="61.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.4" y="574.0">java/n..</text>
</g>
<g>
<title>sun/nio/ch/SelectorProviderImpl.openSocketChannel (7 samples, 5.19%)</title><rect x="62.4" y="547.0" width="61.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="65.4" y="558.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (7 samples, 5.19%)</title><rect x="62.4" y="531.0" width="61.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.4" y="542.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/Net.socket (7 samples, 5.19%)</title><rect x="62.4" y="515.0" width="61.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.4" y="526.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/Net.socket (7 samples, 5.19%)</title><rect x="62.4" y="499.0" width="61.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.4" y="510.0">sun/ni..</text>
</g>
<g>
<title>sun/nio/ch/Net.socket0 (7 samples, 5.19%)</title><rect x="62.4" y="483.0" width="61.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.4" y="494.0">sun/ni..</text>
</g>
<g>
<title>setsockopt (1 samples, 0.74%)</title><rect x="62.4" y="467.0" width="8.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="65.4" y="478.0"></text>
</g>
<g>
<title>socket (6 samples, 4.44%)</title><rect x="71.2" y="467.0" width="52.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="74.2" y="478.0">socket</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.getReceiveBufferSize (1 samples, 0.74%)</title><rect x="123.6" y="563.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="126.6" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.getIntegerNetProperty (1 samples, 0.74%)</title><rect x="123.6" y="547.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="126.6" y="558.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.74%)</title><rect x="123.6" y="531.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="126.6" y="542.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$78/1716093734.run (1 samples, 0.74%)</title><rect x="123.6" y="515.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="126.6" y="526.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$getIntegerNetProperty$11 (1 samples, 0.74%)</title><rect x="123.6" y="499.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.6" y="510.0"></text>
</g>
<g>
<title>sun/net/NetProperties.getInteger (1 samples, 0.74%)</title><rect x="123.6" y="483.0" width="8.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="126.6" y="494.0"></text>
</g>
<g>
<title>java/util/Properties.getProperty (1 samples, 0.74%)</title><rect x="123.6" y="467.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.74%)</title><rect x="123.6" y="451.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="126.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.getAddress (2 samples, 1.48%)</title><rect x="132.4" y="611.0" width="17.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.4" y="622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 1.48%)</title><rect x="132.4" y="595.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.4" y="606.0"></text>
</g>
<g>
<title>JVM_DoPrivileged (2 samples, 1.48%)</title><rect x="132.4" y="579.0" width="17.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="135.4" y="590.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 1.48%)</title><rect x="132.4" y="563.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="135.4" y="574.0"></text>
</g>
<g>
<title>vframeStreamCommon::security_next() (2 samples, 1.48%)</title><rect x="132.4" y="547.0" width="17.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="135.4" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 1.48%)</title><rect x="132.4" y="531.0" width="17.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="135.4" y="542.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 1.48%)</title><rect x="132.4" y="515.0" width="17.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="135.4" y="526.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 1.48%)</title><rect x="132.4" y="499.0" width="17.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="135.4" y="510.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.74%)</title><rect x="132.4" y="483.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="135.4" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.74%)</title><rect x="132.4" y="467.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="135.4" y="478.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.74%)</title><rect x="141.1" y="483.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="144.1" y="494.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.of (1 samples, 0.74%)</title><rect x="149.9" y="819.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="152.9" y="830.0"></text>
</g>
<g>
<title>jdk/internal/net/http/ResponseTimerEvent.&lt;init&gt; (1 samples, 0.74%)</title><rect x="149.9" y="803.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.9" y="814.0"></text>
</g>
<g>
<title>jdk/internal/net/http/TimeoutEvent.&lt;init&gt; (1 samples, 0.74%)</title><rect x="149.9" y="787.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.9" y="798.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.74%)</title><rect x="149.9" y="771.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.9" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.addTo (1 samples, 0.74%)</title><rect x="149.9" y="755.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.9" y="766.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.74%)</title><rect x="149.9" y="739.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.9" y="750.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.74%)</title><rect x="149.9" y="723.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="152.9" y="734.0"></text>
</g>
<g>
<title>java/time/Instant.plusSeconds (1 samples, 0.74%)</title><rect x="149.9" y="707.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.9" y="718.0"></text>
</g>
<g>
<title>java/time/Instant.plus (1 samples, 0.74%)</title><rect x="149.9" y="691.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.9" y="702.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (1 samples, 0.74%)</title><rect x="149.9" y="675.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.9" y="686.0"></text>
</g>
<g>
<title>java/time/Instant.create (1 samples, 0.74%)</title><rect x="149.9" y="659.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler$$Lambda$120/1168336161.get (30 samples, 22.22%)</title><rect x="158.6" y="899.0" width="262.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="161.6" y="910.0">ru/mail/polis/service/ReplicationHa..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.lambda$handleLocal$7 (30 samples, 22.22%)</title><rect x="158.6" y="883.0" width="262.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.6" y="894.0">ru/mail/polis/service/ReplicationHa..</text>
</g>
<g>
<title>ru/mail/polis/dao/DaoEngine.upsertValue (30 samples, 22.22%)</title><rect x="158.6" y="867.0" width="262.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.6" y="878.0">ru/mail/polis/dao/DaoEngine.upsertV..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (30 samples, 22.22%)</title><rect x="158.6" y="851.0" width="262.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.6" y="862.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (30 samples, 22.22%)</title><rect x="158.6" y="835.0" width="262.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.6" y="846.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (30 samples, 22.22%)</title><rect x="158.6" y="819.0" width="262.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="161.6" y="830.0">Java_org_rocksdb_RocksDB_put__J_3BI..</text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (30 samples, 22.22%)</title><rect x="158.6" y="803.0" width="262.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="161.6" y="814.0">rocksdb_put_helper(JNIEnv_*, rocksd..</text>
</g>
<g>
<title>rocksdb::CompactedDBImpl::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; const&amp;, rocksdb::DB**) (30 samples, 22.22%)</title><rect x="158.6" y="787.0" width="262.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="161.6" y="798.0">rocksdb::CompactedDBImpl::Open(rock..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 22.22%)</title><rect x="158.6" y="771.0" width="262.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="161.6" y="782.0">rocksdb::DBImpl::Put(rocksdb::Write..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 22.22%)</title><rect x="158.6" y="755.0" width="262.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="161.6" y="766.0">rocksdb::DB::Put(rocksdb::WriteOpti..</text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (30 samples, 22.22%)</title><rect x="158.6" y="739.0" width="262.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="161.6" y="750.0">rocksdb::DBImpl::Write(rocksdb::Wri..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long long*, unsigned long long, bool, unsigned long long*, unsigned long, rocksdb::PreReleaseCallback*) (30 samples, 22.22%)</title><rect x="158.6" y="723.0" width="262.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="161.6" y="734.0">rocksdb::DBImpl::WriteImpl(rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long long*, bool, bool, unsigned long long) (1 samples, 0.74%)</title><rect x="158.6" y="707.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="161.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long long*, unsigned long long*) (1 samples, 0.74%)</title><rect x="158.6" y="691.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="161.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (1 samples, 0.74%)</title><rect x="158.6" y="675.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="161.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (1 samples, 0.74%)</title><rect x="158.6" y="659.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="161.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (25 samples, 18.52%)</title><rect x="167.3" y="707.0" width="218.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="170.3" y="718.0">rocksdb::WriteThread::AwaitSt..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (25 samples, 18.52%)</title><rect x="167.3" y="691.0" width="218.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="170.3" y="702.0">si_module_static_mdns.mdns_vt..</text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (4 samples, 2.96%)</title><rect x="385.9" y="707.0" width="34.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="388.9" y="718.0">ro..</text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (4 samples, 2.96%)</title><rect x="385.9" y="691.0" width="34.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="388.9" y="702.0">ro..</text>
</g>
<g>
<title>si_module_static_mdns.mdns_vtable (4 samples, 2.96%)</title><rect x="385.9" y="675.0" width="34.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="388.9" y="686.0">si..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 7.41%)</title><rect x="420.8" y="915.0" width="87.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.8" y="926.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (10 samples, 7.41%)</title><rect x="420.8" y="899.0" width="87.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="423.8" y="910.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (9 samples, 6.67%)</title><rect x="420.8" y="883.0" width="78.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="423.8" y="894.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.74%)</title><rect x="420.8" y="867.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.74%)</title><rect x="420.8" y="851.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (8 samples, 5.93%)</title><rect x="429.6" y="867.0" width="69.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="432.6" y="878.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (8 samples, 5.93%)</title><rect x="429.6" y="851.0" width="69.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="432.6" y="862.0">jdk/int..</text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (8 samples, 5.93%)</title><rect x="429.6" y="835.0" width="69.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="432.6" y="846.0">Unsafe_..</text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 5.93%)</title><rect x="429.6" y="819.0" width="69.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="432.6" y="830.0">Parker:..</text>
</g>
<g>
<title>__psynch_cvwait (8 samples, 5.93%)</title><rect x="429.6" y="803.0" width="69.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="432.6" y="814.0">__psync..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.74%)</title><rect x="499.5" y="883.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.74%)</title><rect x="499.5" y="867.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.74%)</title><rect x="499.5" y="851.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.74%)</title><rect x="499.5" y="835.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="502.5" y="846.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.74%)</title><rect x="499.5" y="819.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.5" y="830.0"></text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.74%)</title><rect x="499.5" y="803.0" width="8.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="502.5" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.74%)</title><rect x="499.5" y="787.0" width="8.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="502.5" y="798.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (13 samples, 9.63%)</title><rect x="508.2" y="963.0" width="113.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.2" y="974.0">one/nio/server..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.74%)</title><rect x="517.0" y="947.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.0" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Socket.acceptNonBlocking (10 samples, 7.41%)</title><rect x="525.7" y="947.0" width="87.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="528.7" y="958.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (8 samples, 5.93%)</title><rect x="525.7" y="931.0" width="69.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="528.7" y="942.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/JavaServerSocket.accept (8 samples, 5.93%)</title><rect x="525.7" y="915.0" width="69.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="528.7" y="926.0">one/nio..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (8 samples, 5.93%)</title><rect x="525.7" y="899.0" width="69.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.7" y="910.0">sun/nio..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (1 samples, 0.74%)</title><rect x="525.7" y="883.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="528.7" y="894.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (1 samples, 0.74%)</title><rect x="525.7" y="867.0" width="8.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="528.7" y="878.0"></text>
</g>
<g>
<title>configureBlocking (1 samples, 0.74%)</title><rect x="525.7" y="851.0" width="8.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="528.7" y="862.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.74%)</title><rect x="525.7" y="835.0" width="8.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="528.7" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept (4 samples, 2.96%)</title><rect x="534.4" y="883.0" width="35.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="537.4" y="894.0">su..</text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.accept0 (4 samples, 2.96%)</title><rect x="534.4" y="867.0" width="35.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.4" y="878.0">su..</text>
</g>
<g>
<title>Java_sun_nio_ch_ServerSocketChannelImpl_accept0 (1 samples, 0.74%)</title><rect x="534.4" y="851.0" width="8.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="537.4" y="862.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (1 samples, 0.74%)</title><rect x="534.4" y="835.0" width="8.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="537.4" y="846.0"></text>
</g>
<g>
<title>jni_NewObject (1 samples, 0.74%)</title><rect x="534.4" y="819.0" width="8.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="537.4" y="830.0"></text>
</g>
<g>
<title>Fingerprinter::Fingerprinter(methodHandle const&amp;) (1 samples, 0.74%)</title><rect x="534.4" y="803.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.4" y="814.0"></text>
</g>
<g>
<title>accept (2 samples, 1.48%)</title><rect x="543.2" y="851.0" width="17.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="546.2" y="862.0"></text>
</g>
<g>
<title>java/net/InetSocketAddress.&lt;init&gt; (1 samples, 0.74%)</title><rect x="560.7" y="851.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="563.7" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/ServerSocketChannelImpl.end (1 samples, 0.74%)</title><rect x="569.4" y="883.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="572.4" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (2 samples, 1.48%)</title><rect x="578.1" y="883.0" width="17.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="581.1" y="894.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.&lt;init&gt; (1 samples, 0.74%)</title><rect x="578.1" y="867.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="581.1" y="878.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.&lt;init&gt; (1 samples, 0.74%)</title><rect x="578.1" y="851.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="581.1" y="862.0"></text>
</g>
<g>
<title>java/nio/channels/SelectableChannel.&lt;init&gt; (1 samples, 0.74%)</title><rect x="578.1" y="835.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.1" y="846.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.&lt;init&gt; (1 samples, 0.74%)</title><rect x="578.1" y="819.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localAddress (1 samples, 0.74%)</title><rect x="586.9" y="867.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="589.9" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/Net.localInetAddress (1 samples, 0.74%)</title><rect x="586.9" y="851.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="589.9" y="862.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_Net_localInetAddress (1 samples, 0.74%)</title><rect x="586.9" y="835.0" width="8.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="589.9" y="846.0"></text>
</g>
<g>
<title>NET_SockaddrToInetAddress (1 samples, 0.74%)</title><rect x="586.9" y="819.0" width="8.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="589.9" y="830.0"></text>
</g>
<g>
<title>jni_NewObject (1 samples, 0.74%)</title><rect x="586.9" y="803.0" width="8.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="589.9" y="814.0"></text>
</g>
<g>
<title>jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) (1 samples, 0.74%)</title><rect x="586.9" y="787.0" width="8.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="589.9" y="798.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.74%)</title><rect x="586.9" y="771.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="589.9" y="782.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.setBlocking (2 samples, 1.48%)</title><rect x="595.6" y="931.0" width="17.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="598.6" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.configureBlocking (2 samples, 1.48%)</title><rect x="595.6" y="915.0" width="17.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="598.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.implConfigureBlocking (2 samples, 1.48%)</title><rect x="595.6" y="899.0" width="17.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="598.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.74%)</title><rect x="595.6" y="883.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="598.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.74%)</title><rect x="595.6" y="867.0" width="8.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="598.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.74%)</title><rect x="595.6" y="851.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.configureBlocking (1 samples, 0.74%)</title><rect x="604.4" y="883.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="607.4" y="894.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_IOUtil_configureBlocking (1 samples, 0.74%)</title><rect x="604.4" y="867.0" width="8.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="607.4" y="878.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.74%)</title><rect x="604.4" y="851.0" width="8.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="607.4" y="862.0"></text>
</g>
<g>
<title>one/nio/server/Server.register (1 samples, 0.74%)</title><rect x="613.1" y="947.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="616.1" y="958.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.register (1 samples, 0.74%)</title><rect x="613.1" y="931.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="616.1" y="942.0"></text>
</g>
<g>
<title>one/nio/net/JavaSelector.enable (1 samples, 0.74%)</title><rect x="613.1" y="915.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.1" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.wakeup (1 samples, 0.74%)</title><rect x="613.1" y="899.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="616.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write1 (1 samples, 0.74%)</title><rect x="613.1" y="883.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="616.1" y="894.0"></text>
</g>
<g>
<title>write (1 samples, 0.74%)</title><rect x="613.1" y="867.0" width="8.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="616.1" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (23 samples, 17.04%)</title><rect x="621.9" y="963.0" width="201.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="624.9" y="974.0">one/nio/server/SelectorThr..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.select (13 samples, 9.63%)</title><rect x="630.6" y="947.0" width="113.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.6" y="958.0">one/nio/net/Ja..</text>
</g>
<g>
<title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.74%)</title><rect x="630.6" y="931.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.6" y="942.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractSelectableChannel.register (1 samples, 0.74%)</title><rect x="630.6" y="915.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.6" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.register (1 samples, 0.74%)</title><rect x="630.6" y="899.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$KeySetView.add (1 samples, 0.74%)</title><rect x="630.6" y="883.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (1 samples, 0.74%)</title><rect x="630.6" y="867.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (12 samples, 8.89%)</title><rect x="639.3" y="931.0" width="104.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.3" y="942.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (12 samples, 8.89%)</title><rect x="639.3" y="915.0" width="104.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.3" y="926.0">sun/nio/ch/S..</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (12 samples, 8.89%)</title><rect x="639.3" y="899.0" width="104.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.3" y="910.0">sun/nio/ch/K..</text>
</g>
<g>
<title>sun/nio/ch/KQueue.poll (9 samples, 6.67%)</title><rect x="639.3" y="883.0" width="78.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.3" y="894.0">sun/nio/c..</text>
</g>
<g>
<title>kevent (9 samples, 6.67%)</title><rect x="639.3" y="867.0" width="78.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="642.3" y="878.0">kevent</text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (3 samples, 2.22%)</title><rect x="718.0" y="883.0" width="26.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.0" y="894.0">s..</text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.74%)</title><rect x="718.0" y="867.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="721.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.74%)</title><rect x="718.0" y="851.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueue.register (2 samples, 1.48%)</title><rect x="726.7" y="867.0" width="17.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.7" y="878.0"></text>
</g>
<g>
<title>kevent (2 samples, 1.48%)</title><rect x="726.7" y="851.0" width="17.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="729.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (9 samples, 6.67%)</title><rect x="744.2" y="947.0" width="78.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.2" y="958.0">one/nio/n..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (9 samples, 6.67%)</title><rect x="744.2" y="931.0" width="78.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.2" y="942.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8 samples, 5.93%)</title><rect x="744.2" y="915.0" width="69.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.2" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8 samples, 5.93%)</title><rect x="744.2" y="899.0" width="69.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="747.2" y="910.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8 samples, 5.93%)</title><rect x="744.2" y="883.0" width="69.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.2" y="894.0">one/nio..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (8 samples, 5.93%)</title><rect x="744.2" y="867.0" width="69.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.2" y="878.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.74%)</title><rect x="744.2" y="851.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="747.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.74%)</title><rect x="744.2" y="835.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.74%)</title><rect x="744.2" y="819.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="747.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.74%)</title><rect x="744.2" y="803.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="747.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.74%)</title><rect x="744.2" y="787.0" width="8.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="747.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationServiceImpl.entity (7 samples, 5.19%)</title><rect x="753.0" y="851.0" width="61.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.0" y="862.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.handle (7 samples, 5.19%)</title><rect x="753.0" y="835.0" width="61.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.0" y="846.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.multipleUpsert (7 samples, 5.19%)</title><rect x="753.0" y="819.0" width="61.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="756.0" y="830.0">ru/mai..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientFacade.sendAsync (3 samples, 2.22%)</title><rect x="753.0" y="803.0" width="26.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="756.0" y="814.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (3 samples, 2.22%)</title><rect x="753.0" y="787.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="756.0" y="798.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (3 samples, 2.22%)</title><rect x="753.0" y="771.0" width="26.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="756.0" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpClientImpl.sendAsync (3 samples, 2.22%)</title><rect x="753.0" y="755.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.0" y="766.0">j..</text>
</g>
<g>
<title>jdk/internal/net/http/HttpRequestImpl.&lt;init&gt; (1 samples, 0.74%)</title><rect x="753.0" y="739.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.0" y="750.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.of (1 samples, 0.74%)</title><rect x="753.0" y="723.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.0" y="734.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.headersOf (1 samples, 0.74%)</title><rect x="753.0" y="707.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.forEach (1 samples, 0.74%)</title><rect x="753.0" y="691.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.0" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.forEach (1 samples, 0.74%)</title><rect x="753.0" y="675.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.0" y="686.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$128/1673674116.accept (1 samples, 0.74%)</title><rect x="753.0" y="659.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.0" y="670.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$1 (1 samples, 0.74%)</title><rect x="753.0" y="643.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.74%)</title><rect x="753.0" y="627.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.0" y="638.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders$$Lambda$135/2117289181.accept (1 samples, 0.74%)</title><rect x="753.0" y="611.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.0" y="622.0"></text>
</g>
<g>
<title>java/net/http/HttpHeaders.lambda$headersOf$0 (1 samples, 0.74%)</title><rect x="753.0" y="595.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.0" y="606.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$81/370370379.test (1 samples, 0.74%)</title><rect x="753.0" y="579.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="756.0" y="590.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$2 (1 samples, 0.74%)</title><rect x="753.0" y="563.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="756.0" y="574.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils$$Lambda$80/1523457748.test (1 samples, 0.74%)</title><rect x="753.0" y="547.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.0" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/Utils.lambda$static$1 (1 samples, 0.74%)</title><rect x="753.0" y="531.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="756.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.74%)</title><rect x="753.0" y="515.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.0" y="526.0"></text>
</g>
<g>
<title>java/util/TreeSet.contains (1 samples, 0.74%)</title><rect x="753.0" y="499.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.0" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.74%)</title><rect x="753.0" y="483.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="756.0" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.74%)</title><rect x="753.0" y="467.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.0" y="478.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync (2 samples, 1.48%)</title><rect x="761.7" y="739.0" width="17.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeAsync (1 samples, 0.74%)</title><rect x="761.7" y="723.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="764.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.74%)</title><rect x="761.7" y="707.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (1 samples, 0.74%)</title><rect x="761.7" y="691.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="764.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.74%)</title><rect x="761.7" y="675.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="764.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.74%)</title><rect x="761.7" y="659.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="764.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.74%)</title><rect x="761.7" y="643.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.74%)</title><rect x="761.7" y="627.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="764.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.74%)</title><rect x="761.7" y="611.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="764.7" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.74%)</title><rect x="761.7" y="595.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.7" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.74%)</title><rect x="761.7" y="579.0" width="8.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="764.7" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.74%)</title><rect x="761.7" y="563.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="764.7" y="574.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.74%)</title><rect x="761.7" y="547.0" width="8.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="764.7" y="558.0"></text>
</g>
<g>
<title>jdk/internal/net/http/MultiExchange.responseAsync0 (1 samples, 0.74%)</title><rect x="770.4" y="723.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.thenCompose (1 samples, 0.74%)</title><rect x="770.4" y="707.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="773.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniComposeStage (1 samples, 0.74%)</title><rect x="770.4" y="691.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="773.4" y="702.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.74%)</title><rect x="770.4" y="675.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/net/http/common/MinimalFuture.newIncompleteFuture (1 samples, 0.74%)</title><rect x="770.4" y="659.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.4" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ReplicationHandler.handleLocal (4 samples, 2.96%)</title><rect x="779.2" y="803.0" width="34.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="782.2" y="814.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.supplyAsync (4 samples, 2.96%)</title><rect x="779.2" y="787.0" width="34.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="782.2" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.asyncSupplyStage (4 samples, 2.96%)</title><rect x="779.2" y="771.0" width="34.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="782.2" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 2.96%)</title><rect x="779.2" y="755.0" width="34.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.2" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (4 samples, 2.96%)</title><rect x="779.2" y="739.0" width="34.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="782.2" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.74%)</title><rect x="779.2" y="723.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="782.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.74%)</title><rect x="779.2" y="707.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.74%)</title><rect x="779.2" y="691.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.74%)</title><rect x="779.2" y="675.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.74%)</title><rect x="779.2" y="659.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.74%)</title><rect x="779.2" y="643.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="782.2" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.74%)</title><rect x="779.2" y="627.0" width="8.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="782.2" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.74%)</title><rect x="779.2" y="611.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.2" y="622.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.74%)</title><rect x="779.2" y="595.0" width="8.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="782.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 2.22%)</title><rect x="787.9" y="723.0" width="26.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="790.9" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 2.22%)</title><rect x="787.9" y="707.0" width="26.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.9" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 2.22%)</title><rect x="787.9" y="691.0" width="26.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 2.22%)</title><rect x="787.9" y="675.0" width="26.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="790.9" y="686.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 2.22%)</title><rect x="787.9" y="659.0" width="26.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.9" y="670.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 2.22%)</title><rect x="787.9" y="643.0" width="26.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="790.9" y="654.0">U..</text>
</g>
<g>
<title>__psynch_cvsignal (3 samples, 2.22%)</title><rect x="787.9" y="627.0" width="26.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="790.9" y="638.0">_..</text>
</g>
<g>
<title>one/nio/net/Session.read (1 samples, 0.74%)</title><rect x="814.1" y="915.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.1" y="926.0"></text>
</g>
<g>
<title>one/nio/net/JavaSocket.read (1 samples, 0.74%)</title><rect x="814.1" y="899.0" width="8.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.1" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.74%)</title><rect x="814.1" y="883.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.74%)</title><rect x="814.1" y="867.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.74%)</title><rect x="814.1" y="851.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.74%)</title><rect x="814.1" y="835.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.1" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.74%)</title><rect x="814.1" y="819.0" width="8.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="817.1" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.74%)</title><rect x="814.1" y="803.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.1" y="814.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.74%)</title><rect x="814.1" y="787.0" width="8.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="817.1" y="798.0"></text>
</g>
<g>
<title>thread_start (42 samples, 31.11%)</title><rect x="822.9" y="963.0" width="367.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="825.9" y="974.0">thread_start</text>
</g>
<g>
<title>_pthread_start (42 samples, 31.11%)</title><rect x="822.9" y="947.0" width="367.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="825.9" y="958.0">_pthread_start</text>
</g>
<g>
<title>thread_native_entry(Thread*) (42 samples, 31.11%)</title><rect x="822.9" y="931.0" width="367.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="825.9" y="942.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (42 samples, 31.11%)</title><rect x="822.9" y="915.0" width="367.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="825.9" y="926.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 8.15%)</title><rect x="822.9" y="899.0" width="96.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="825.9" y="910.0">GangWorker:..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 5.93%)</title><rect x="822.9" y="883.0" width="69.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.9" y="894.0">G1ParTa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 5.19%)</title><rect x="822.9" y="867.0" width="61.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="825.9" y="878.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 3.70%)</title><rect x="822.9" y="851.0" width="43.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="825.9" y="862.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (5 samples, 3.70%)</title><rect x="822.9" y="835.0" width="43.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="825.9" y="846.0">G1Pa..</text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (5 samples, 3.70%)</title><rect x="822.9" y="819.0" width="43.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.9" y="830.0">void..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 3.70%)</title><rect x="822.9" y="803.0" width="43.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="825.9" y="814.0">G1Pa..</text>
</g>
<g>
<title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.74%)</title><rect x="831.6" y="787.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="834.6" y="798.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (3 samples, 2.22%)</title><rect x="840.4" y="787.0" width="26.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="843.4" y="798.0">_..</text>
</g>
<g>
<title>SpinPause (2 samples, 1.48%)</title><rect x="866.6" y="851.0" width="17.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="869.6" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.74%)</title><rect x="884.1" y="867.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="887.1" y="878.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.74%)</title><rect x="884.1" y="851.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="887.1" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.74%)</title><rect x="884.1" y="835.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.1" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (1 samples, 0.74%)</title><rect x="884.1" y="819.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="887.1" y="830.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.74%)</title><rect x="884.1" y="803.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="887.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.74%)</title><rect x="884.1" y="787.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="887.1" y="798.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.74%)</title><rect x="884.1" y="771.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.74%)</title><rect x="884.1" y="755.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="887.1" y="766.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.74%)</title><rect x="884.1" y="739.0" width="8.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="887.1" y="750.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.74%)</title><rect x="892.8" y="883.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="895.8" y="894.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.74%)</title><rect x="892.8" y="867.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="895.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.74%)</title><rect x="892.8" y="851.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.8" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.74%)</title><rect x="892.8" y="835.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="895.8" y="846.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.74%)</title><rect x="892.8" y="819.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="895.8" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.74%)</title><rect x="892.8" y="803.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="895.8" y="814.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.74%)</title><rect x="892.8" y="787.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="895.8" y="798.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (2 samples, 1.48%)</title><rect x="901.6" y="883.0" width="17.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.6" y="894.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (2 samples, 1.48%)</title><rect x="901.6" y="867.0" width="17.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="904.6" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (28 samples, 20.74%)</title><rect x="919.0" y="899.0" width="244.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.0" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (28 samples, 20.74%)</title><rect x="919.0" y="883.0" width="244.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.0" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (26 samples, 19.26%)</title><rect x="919.0" y="867.0" width="227.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.0" y="878.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (26 samples, 19.26%)</title><rect x="919.0" y="851.0" width="227.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.0" y="862.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (26 samples, 19.26%)</title><rect x="919.0" y="835.0" width="227.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.0" y="846.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (26 samples, 19.26%)</title><rect x="919.0" y="819.0" width="227.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.0" y="830.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 10.37%)</title><rect x="919.0" y="803.0" width="122.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.0" y="814.0">Compile::Code_G..</text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.74%)</title><rect x="919.0" y="787.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.0" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.74%)</title><rect x="919.0" y="771.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.0" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.74%)</title><rect x="919.0" y="755.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="922.0" y="766.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.74%)</title><rect x="919.0" y="739.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="922.0" y="750.0"></text>
</g>
<g>
<title>ProjNode::proj_type(Type const*) const (1 samples, 0.74%)</title><rect x="919.0" y="723.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="922.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 9.63%)</title><rect x="927.8" y="787.0" width="113.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="930.8" y="798.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.74%)</title><rect x="927.8" y="771.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="930.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.74%)</title><rect x="936.5" y="771.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="939.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 2.22%)</title><rect x="945.3" y="771.0" width="26.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.3" y="782.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.48%)</title><rect x="945.3" y="755.0" width="17.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.3" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.74%)</title><rect x="945.3" y="739.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.3" y="750.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.74%)</title><rect x="954.0" y="739.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="957.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.74%)</title><rect x="962.7" y="755.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 2.96%)</title><rect x="971.5" y="771.0" width="34.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="974.5" y="782.0">Ph..</text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.74%)</title><rect x="989.0" y="755.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.0" y="766.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.74%)</title><rect x="989.0" y="739.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.0" y="750.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.74%)</title><rect x="997.7" y="755.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1000.7" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.74%)</title><rect x="997.7" y="739.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1000.7" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.48%)</title><rect x="1006.4" y="771.0" width="17.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1009.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.74%)</title><rect x="1023.9" y="771.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.9" y="782.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.74%)</title><rect x="1023.9" y="755.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.9" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.74%)</title><rect x="1032.7" y="771.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1035.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.74%)</title><rect x="1032.7" y="755.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.7" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="1032.7" y="739.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1035.7" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 5.19%)</title><rect x="1041.4" y="803.0" width="61.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1044.4" y="814.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) (4 samples, 2.96%)</title><rect x="1041.4" y="787.0" width="35.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.4" y="798.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (4 samples, 2.96%)</title><rect x="1041.4" y="771.0" width="35.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1044.4" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.74%)</title><rect x="1041.4" y="755.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1044.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.74%)</title><rect x="1041.4" y="739.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1044.4" y="750.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.74%)</title><rect x="1041.4" y="723.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1044.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.74%)</title><rect x="1050.1" y="755.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (1 samples, 0.74%)</title><rect x="1050.1" y="739.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.1" y="750.0"></text>
</g>
<g>
<title>Node_Array::operator[](unsigned int) const (1 samples, 0.74%)</title><rect x="1050.1" y="723.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.1" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.74%)</title><rect x="1058.9" y="755.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.74%)</title><rect x="1067.6" y="755.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.6" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.74%)</title><rect x="1067.6" y="739.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.74%)</title><rect x="1067.6" y="723.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.74%)</title><rect x="1067.6" y="707.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl_no_update(Node*) const (1 samples, 0.74%)</title><rect x="1067.6" y="691.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.6" y="702.0"></text>
</g>
<g>
<title>Node::in(unsigned int) const (1 samples, 0.74%)</title><rect x="1067.6" y="675.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.6" y="686.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.74%)</title><rect x="1076.4" y="787.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.4" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.74%)</title><rect x="1076.4" y="771.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1079.4" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.74%)</title><rect x="1076.4" y="755.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.4" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.74%)</title><rect x="1076.4" y="739.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.4" y="750.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.74%)</title><rect x="1076.4" y="723.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.48%)</title><rect x="1085.1" y="787.0" width="17.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1088.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.48%)</title><rect x="1085.1" y="771.0" width="17.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.1" y="782.0"></text>
</g>
<g>
<title>CastP2XNode::Value(PhaseGVN*) const (1 samples, 0.74%)</title><rect x="1085.1" y="755.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1088.1" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.74%)</title><rect x="1093.9" y="755.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.9" y="766.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.74%)</title><rect x="1093.9" y="739.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.70%)</title><rect x="1102.6" y="803.0" width="43.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="814.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.70%)</title><rect x="1102.6" y="787.0" width="43.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.6" y="798.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.70%)</title><rect x="1102.6" y="771.0" width="43.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.6" y="782.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.70%)</title><rect x="1102.6" y="755.0" width="43.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.6" y="766.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.70%)</title><rect x="1102.6" y="739.0" width="43.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.6" y="750.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.74%)</title><rect x="1102.6" y="723.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.6" y="734.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.74%)</title><rect x="1102.6" y="707.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="718.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.74%)</title><rect x="1102.6" y="691.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.74%)</title><rect x="1102.6" y="675.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.6" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.74%)</title><rect x="1102.6" y="659.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.6" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.74%)</title><rect x="1102.6" y="643.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1102.6" y="627.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.74%)</title><rect x="1102.6" y="611.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1102.6" y="595.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.6" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.74%)</title><rect x="1102.6" y="579.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.6" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.74%)</title><rect x="1102.6" y="563.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.6" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1102.6" y="547.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.6" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.74%)</title><rect x="1102.6" y="531.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1105.6" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.74%)</title><rect x="1102.6" y="515.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.6" y="526.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1102.6" y="499.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.6" y="510.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.74%)</title><rect x="1102.6" y="483.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.6" y="494.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.74%)</title><rect x="1102.6" y="467.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.6" y="478.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.74%)</title><rect x="1102.6" y="451.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.6" y="462.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.74%)</title><rect x="1102.6" y="435.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.6" y="446.0"></text>
</g>
<g>
<title>SymbolTable::lookup_dynamic(int, char const*, int, unsigned int) (1 samples, 0.74%)</title><rect x="1102.6" y="419.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.6" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1111.3" y="723.0" width="17.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1111.3" y="707.0" width="17.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1111.3" y="691.0" width="17.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1111.3" y="675.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1114.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1111.3" y="659.0" width="17.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1111.3" y="643.0" width="17.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1111.3" y="627.0" width="17.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1111.3" y="611.0" width="17.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1111.3" y="595.0" width="17.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1111.3" y="579.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1111.3" y="563.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1111.3" y="547.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1111.3" y="531.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1114.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1111.3" y="515.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.74%)</title><rect x="1111.3" y="499.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1114.3" y="510.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.74%)</title><rect x="1111.3" y="483.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1114.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.74%)</title><rect x="1111.3" y="467.0" width="8.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.3" y="478.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.74%)</title><rect x="1111.3" y="451.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="462.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.74%)</title><rect x="1111.3" y="435.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.74%)</title><rect x="1120.1" y="579.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.74%)</title><rect x="1120.1" y="563.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.1" y="574.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.74%)</title><rect x="1120.1" y="547.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.1" y="558.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.74%)</title><rect x="1120.1" y="531.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.1" y="542.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.74%)</title><rect x="1120.1" y="515.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.1" y="526.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.74%)</title><rect x="1120.1" y="499.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.1" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.74%)</title><rect x="1120.1" y="483.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.1" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.74%)</title><rect x="1120.1" y="467.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.1" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="723.0" width="17.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="707.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1128.8" y="691.0" width="17.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1128.8" y="675.0" width="17.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1128.8" y="659.0" width="17.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1128.8" y="643.0" width="17.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="627.0" width="17.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1128.8" y="611.0" width="17.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1128.8" y="595.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1128.8" y="579.0" width="17.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1128.8" y="563.0" width="17.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="547.0" width="17.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1128.8" y="531.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1128.8" y="515.0" width="17.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1128.8" y="499.0" width="17.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1128.8" y="483.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="467.0" width="17.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1128.8" y="451.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1128.8" y="435.0" width="17.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1128.8" y="419.0" width="17.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.48%)</title><rect x="1128.8" y="403.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.48%)</title><rect x="1128.8" y="387.0" width="17.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.48%)</title><rect x="1128.8" y="371.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.48%)</title><rect x="1128.8" y="355.0" width="17.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.48%)</title><rect x="1128.8" y="339.0" width="17.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="323.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="307.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="291.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="275.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="259.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="243.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.8" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1128.8" y="227.0" width="8.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.8" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1128.8" y="211.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1128.8" y="195.0" width="8.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1128.8" y="179.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1128.8" y="163.0" width="8.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="174.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.74%)</title><rect x="1128.8" y="147.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.8" y="158.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.74%)</title><rect x="1128.8" y="131.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.8" y="142.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.74%)</title><rect x="1128.8" y="115.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.8" y="126.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.74%)</title><rect x="1128.8" y="99.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.8" y="110.0"></text>
</g>
<g>
<title>MethodLiveness::init_gen_kill() (1 samples, 0.74%)</title><rect x="1128.8" y="83.0" width="8.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.8" y="94.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill(ciMethod*) (1 samples, 0.74%)</title><rect x="1128.8" y="67.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.8" y="78.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1128.8" y="51.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.8" y="62.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.74%)</title><rect x="1128.8" y="35.0" width="8.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.74%)</title><rect x="1137.6" y="323.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.74%)</title><rect x="1137.6" y="307.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.6" y="318.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long long) (1 samples, 0.74%)</title><rect x="1137.6" y="291.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.6" y="302.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.74%)</title><rect x="1137.6" y="275.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.6" y="286.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.74%)</title><rect x="1137.6" y="259.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.6" y="270.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.74%)</title><rect x="1137.6" y="243.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.6" y="254.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.74%)</title><rect x="1137.6" y="227.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.6" y="238.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.74%)</title><rect x="1137.6" y="211.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.6" y="222.0"></text>
</g>
<g>
<title>_dispatch_queue_attr_concurrent (1 samples, 0.74%)</title><rect x="1137.6" y="195.0" width="8.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1140.6" y="206.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (2 samples, 1.48%)</title><rect x="1146.3" y="867.0" width="17.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1149.3" y="878.0"></text>
</g>
<g>
<title>AttachListener::dequeue() (1 samples, 0.74%)</title><rect x="1146.3" y="851.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.3" y="862.0"></text>
</g>
<g>
<title>BsdAttachListener::dequeue() (1 samples, 0.74%)</title><rect x="1146.3" y="835.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.3" y="846.0"></text>
</g>
<g>
<title>rpc_errlist (1 samples, 0.74%)</title><rect x="1155.0" y="851.0" width="8.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1158.0" y="862.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.74%)</title><rect x="1163.8" y="899.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.8" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.74%)</title><rect x="1163.8" y="883.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.8" y="894.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.74%)</title><rect x="1163.8" y="867.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.8" y="878.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.74%)</title><rect x="1163.8" y="851.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.8" y="862.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.74%)</title><rect x="1163.8" y="835.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.8" y="846.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.74%)</title><rect x="1163.8" y="819.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.8" y="830.0"></text>
</g>
<g>
<title>si_module_static_file.file_vtable (1 samples, 0.74%)</title><rect x="1163.8" y="803.0" width="8.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1166.8" y="814.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 1.48%)</title><rect x="1172.5" y="899.0" width="17.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="910.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 1.48%)</title><rect x="1172.5" y="883.0" width="17.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 1.48%)</title><rect x="1172.5" y="867.0" width="17.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 1.48%)</title><rect x="1172.5" y="851.0" width="17.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 1.48%)</title><rect x="1172.5" y="835.0" width="17.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 1.48%)</title><rect x="1172.5" y="819.0" width="17.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1175.5" y="830.0"></text>
</g>
</g>
</svg>
